<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>RxSwift-Grammar-基本概念</title>
      <link href="/2018/03/27/RxSwift/Grammar/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <content type="html"><![CDATA[<h1 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h1><p>① <a href="#">Observable 和 Observer</a><br>②subscribe 和 subscribe(onNext:)<br>③Dispose 和 DisposeBag<br>④observeOn() 和 subscribeOn()<br>⑤shareReplay<br>⑥自定义operator<br>⑦Driver<br>⑧map 和 flatMap 何时使用<br>⑨UIBindingObserver</p><h1 id="①Observable-和-Observer"><a href="#①Observable-和-Observer" class="headerlink" title="①Observable 和 Observer"></a>①Observable 和 Observer</h1><h2 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h2><blockquote><p>Observer (观察者)订阅一个可观察序列 Observable(事件源)<br>每一个Observable的实例都是一个序列<br>观察者 对 Observable 发射的数据或数据序列作出响应</p></blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><blockquote><p>Button 的点击这个情景</p></blockquote><ul><li>把用户一次又一次的点击 Button 看做是序列(sequence)</li><li>通过调用 subscribe 来订阅这个点击事件</li><li>每次点击都会发射一个数据</li><li>作为订阅者的 subscribe 收到这个这个数据进行某些响应</li></ul><blockquote><p>Rx 的基本概念，有Observer观察者观察一个序列sequence，每当序列发射值的时候，观察者根据序列做一些事情<br>Observable序列相比于Swift序列的关键优势点在于它能够异步地接收元素</p></blockquote><ul><li>Observable(ObservableType)等效于Sequence</li><li>observableType.subscribe(_:)方法等效于Sequence.makeIterator()</li><li>ObservableType.subscribe(_:)接收一个观察者ObserverType参数,它将被订阅自动接收由可观察到的序列事件和元素，而不是在返回的生成器上手动调用next()</li></ul><blockquote><p>如果一个Observable发出一个next事件(Event.next(Element)),它还能够继续发出更多的事件<br>但是，如果一个Observable发出一个error事件(Event.error(ErrorType))或者一个completed事件(Event.completed)，那么这个Observable序列就不能给订阅者发送其他的事件</p></blockquote><h2 id="可观察序列-Observables-aka-Sequences"><a href="#可观察序列-Observables-aka-Sequences" class="headerlink" title="可观察序列 (Observables aka Sequences)"></a>可观察序列 (Observables aka Sequences)</h2><blockquote><p>可观察序列 存在三种情况:<br>①发射数据(Next)<br>②遇到问题(Error)<br>③发射完成(Completed)</p><p>有限序列</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">比如，有这样一个序列 --1--2--3--4--5--6--| ，它发送了按顺序发送了 1 2 3 4 5 6 这些值后，就终止了，就是发射完成。这是一个有限序列</div><div class="line">也有可能因为某些特殊的情况，遇到某些错误（比如数据解析错误），--1--2--3--4--X ，因为解析错误意外终止</div></pre></td></tr></table></figure><blockquote><p>无限序列</p></blockquote><ul><li>比如用户点击 Button ，这个就属于无限序列</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---tap-tap-------tap---&gt; 当然这里的无限不是真的无限，是不确定用户什么时候会点击，不确定是否会继续点击。所以这是一个无限序列，每当用户点击，序列就发射一个值</div></pre></td></tr></table></figure><blockquote><p>将以上的三种情况统概括为事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Event</span>&lt;<span class="title">Element</span>&gt;  </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Next</span>(<span class="type">Element</span>)      <span class="comment">// 序列的下一个元素</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Error</span>(<span class="type">ErrorType</span>)   <span class="comment">// 序列因为某些错误终止</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Completed</span>          <span class="comment">// 正常的序列技术</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="观察者-Observer"><a href="#观察者-Observer" class="headerlink" title="观察者 (Observer)"></a>观察者 (Observer)</h2><blockquote><p>观察者需要一个订阅序列的功能</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">subscribe</span><span class="params">(observer: Observer&lt;Element&gt;)</span></span> -&gt; <span class="type">Disposable</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ObserverType</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(event: Event&lt;Element&gt;)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>通过序列的这个 subscribe 来订阅序列<br>这里就应该提到序列的“冷”“热”问题</p></blockquote><ul><li>冷：只有当有观察者订阅这个序列时，序列才发射值</li><li>热：序列创建时就开始发射值</li></ul><blockquote><p>整体上就是这样的一个关系，序列发射值，观察者订阅序列，收到值，进行处理</p></blockquote><h2 id="Obserable"><a href="#Obserable" class="headerlink" title="Obserable"></a>Obserable</h2><blockquote><p>创建被观察者其实就是<strong>创建一个Obserable的sequence</strong>，就是创建一个流，然后就可以被订阅subscribe，这样被观察者发出时间消失，就能做相应的处理</p></blockquote><h1 id="②subscribe-和-subscribe-onNext"><a href="#②subscribe-和-subscribe-onNext" class="headerlink" title="②subscribe 和 subscribe(onNext:)"></a>②subscribe 和 subscribe(onNext:)</h1><blockquote><p>Subscribe</p></blockquote><ul><li><strong>subscribe是订阅sequence发出的事件</strong>，比如next事件，error事件等</li><li>而subscribe(onNext:)是监听sequence发出的next事件中的element进行处理，他会忽略error和completed事件</li><li>相对应的还有subscribe(onError:) 和 subscribe(onCompleted:)</li></ul><h1 id="③Dispose-和-DisposeBag"><a href="#③Dispose-和-DisposeBag" class="headerlink" title="③Dispose 和 DisposeBag"></a>③Dispose 和 DisposeBag</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">当监听一个sequence的时候，有消息事件来了，做某些事情。但是这个sequence不再发送消息事件了，那么我们的监听也就没有什么存在的价值了，所以我们需要释放我们这些监听资源，其实也就是内存资源释放</div></pre></td></tr></table></figure><p>##手动调用释放方式(一般不适用这种方式)</p><blockquote><p>创建一个subscription监听，在两秒以后我们不需要了，手动调用dispose()方法，就能释放监听资源，不再打印信息。上面的subscription不论是在哪个线程中监听，就算在主线程中调用的dispose()方法一样会销毁资源</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> subscription = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler:<span class="type">SerialDispatchQueueScheduler</span>.<span class="keyword">init</span>(internalSerialQueueName: <span class="string">"scott"</span>))</div><div class="line">                                  .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line"> .subscribe &#123; event <span class="keyword">in</span> </div><div class="line">          <span class="built_in">print</span> (event)</div><div class="line">       &#125;</div><div class="line"><span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2.0</span>)</div><div class="line">subscription.dispose()</div><div class="line">   </div><div class="line"><span class="comment">//打印结果：</span></div><div class="line">next(<span class="number">0</span>)</div><div class="line">next(<span class="number">1</span>)</div><div class="line">next(<span class="number">2</span>)</div><div class="line">next(<span class="number">3</span>)</div><div class="line">next(<span class="number">4</span>)</div><div class="line">next(<span class="number">5</span>)</div></pre></td></tr></table></figure><h2 id="自动方式"><a href="#自动方式" class="headerlink" title="自动方式"></a>自动方式</h2><blockquote><p>创建一个disposeBag来盛放我们需要管理的资源，然后把新建的监听都放进去，会在适当的时候销毁这些资源<br>如果需要立即释放资源只需要新建一个DisposeBag()，那么上一个DisposeBag就会被销毁</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line">               .subscribe&#123; event <span class="keyword">in</span> </div><div class="line">                   <span class="built_in">print</span> (event)</div><div class="line">                   &#125;</div><div class="line">                .addDisponseableTo(disposeBag)</div></pre></td></tr></table></figure><h2 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h2><blockquote><p>DisposeBag其实就相当于iOS中的ARC似得，会在适当的时候销毁观察者，相当于内存管理者吧</p></blockquote><h1 id="④observeOn-和-subscribeOn"><a href="#④observeOn-和-subscribeOn" class="headerlink" title="④observeOn() 和 subscribeOn()"></a>④observeOn() 和 subscribeOn()</h1><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>subscribeOn()</td><td>设置起点在哪个线程</td></tr><tr><td>observeOn()</td><td>置了后续工作在哪个线程</td></tr></tbody></table><blockquote><p>1)所有动作都发生在当前的默认线程<br>2)observeOn()转换线程到主线程，下面所有的操作都在主线程<br>3)subscribeOn()规定动作一开始不是发生在默认线程，而是在OtherScheduler了<br>)-如果之前没有调用observeOn()，那么这边会在OtherScheduler发生，但是我们前面调用了observeOn()，所以这个动作会在主线程中调用<br>subscribeOn()只是影响事件链开始默认的线程，而observeOn()规定了下一步动作发生在哪个线程中。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">someObservable</div><div class="line">     .doOneThing() <span class="comment">//1</span></div><div class="line">     .observeOn(<span class="type">MainRouteScheduler</span>.instance) <span class="comment">// 2</span></div><div class="line">      .subscribeOn(<span class="type">OtherScheduler</span>.instance) <span class="comment">// 3</span></div><div class="line">      .subscribeNext &#123; <span class="comment">// 4</span></div><div class="line">        ......</div><div class="line">         &#125;</div><div class="line">      .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h1 id="⑤shareReplay"><a href="#⑤shareReplay" class="headerlink" title="⑤shareReplay"></a>⑤shareReplay</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>.just(<span class="string">"🤣"</span>)</div><div class="line">                           .<span class="built_in">map</span>&#123; </div><div class="line">                                <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">                                &#125;</div><div class="line">observable.subscribe&#123;</div><div class="line">                 <span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)</div><div class="line">             &#125;</div><div class="line">           .disposed(by: disposeBag)</div><div class="line">observable.subscribe&#123; </div><div class="line">                  <span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)</div><div class="line">              &#125;</div><div class="line">           .disposed(by: disposeBag)</div><div class="line"><span class="comment">//打印结果：</span></div><div class="line"></div><div class="line">🤣</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div><div class="line">🤣</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div></pre></td></tr></table></figure><blockquote><p>map()函数执行了两次，但是有些时候，我们并不想让map()函数里面的东西执行两次，比如map()函数里面执行的是网络请求，我只需要执行一次请求，然后把结果提供给大家使用就行了，多余的请求会增加负担。所以这时候就需要使用shareReplay(1)了。这里面的数字一般是1，只执行一次。(ps:我改成 2，3 也只打印一次)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>.just(<span class="string">"🤣"</span>).<span class="built_in">map</span>&#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;.shareReplay(<span class="number">1</span>)</div><div class="line">    </div><div class="line">observable.subscribe&#123;<span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)&#125;.disposed(by: disposeBag)</div><div class="line">observable.subscribe&#123;<span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)&#125;.disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="comment">//打印结果：</span></div><div class="line">🤣</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div></pre></td></tr></table></figure><h1 id="⑥自定义operator"><a href="#⑥自定义operator" class="headerlink" title="⑥自定义operator"></a>⑥自定义operator</h1><blockquote><p>自定义操作符很简单，官方推荐尽量使用标准的操作符，但是你也可以定义自己的操作符，文档上说有两种方法，这里介绍一下常用的一种方法吧<br>自定义一个map操作符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">ObserverType</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myMap</span>&lt;R&gt;<span class="params">(transform: E -&gt; R)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">R</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.create&#123; observer <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> subscription = <span class="keyword">self</span>.subscribe &#123;e <span class="keyword">in</span></div><div class="line">                <span class="keyword">switch</span> e&#123;</div><div class="line">                <span class="keyword">case</span> .next(<span class="keyword">let</span> value):</div><div class="line">                    <span class="keyword">let</span> result = transform(value)</div><div class="line">                    observer.on(.next(result))</div><div class="line">                <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</div><div class="line">                    observer.on(.error(error))</div><div class="line">                <span class="keyword">case</span> .completed:</div><div class="line">                    observer.on(.completed)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> subscription</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参数是一个闭包，其中闭包参数是E类型返回值是R类型，map函数的返回值是一个Observable类型。</p></blockquote><h1 id="⑦Driver"><a href="#⑦Driver" class="headerlink" title="⑦Driver"></a>⑦Driver</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> et results = query.rx.text</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .bindTo(resultCount.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">results</div><div class="line">    .bindTo(resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><ul><li>首先创建一个可监听序列results，其中flatMapLatest下面会讲;</li><li>然后将results绑定到resultCount.rx.text上;</li><li>将results绑定到resultsTableView上.</li></ul><blockquote><p>上面程序会出现下面几个异常：</p></blockquote><ul><li>如果fetchAutoCompleteItems出错，那么它绑定的UI将不再收到任何事件消息；</li><li>如果fetchAutoCompleteItems发生在后台线程，那么它绑定的事件也将在后台线程执行，这样更新UI会造成crash；<br>  有两次绑定，fetchAutoCompleteItems就会执行两次</li></ul><blockquote><p>当然针对以上问题，我们也有解决方案，针对第三点，我们可以使用神器shareReplay(1)保证只执行一次，可以使用observeOn()保证后面所有操作在主线程完成</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> results = query.rx.text</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">            .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">            .catchErrorJustReturn([])           </div><div class="line">    &#125;</div><div class="line">    .shareReplay(<span class="number">1</span>)</div><div class="line">                                 </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .bindTo(resultCount.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">results</div><div class="line">    .bindTo(resultTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>可以使用Driver来解决</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> results = query.rx.text.asDriver()</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">            .asDriver(onErrorJustReturn: [])  <span class="comment">//当遇见错误需要返回什么</span></div><div class="line">    &#125;   <span class="comment">//不需要添加shareReplay(1)</span></div><div class="line">    </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .drive(resultCount.rx.text)     <span class="comment">//和bingTo()功能一样</span></div><div class="line">    .addDisposableTo(disposeBag) </div><div class="line">                                             </div><div class="line">results</div><div class="line">    .drive(resultTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>drive方法只能在Driver序列中使用，Driver有以下特点：</p></blockquote><ul><li>Driver序列不允许发出error，</li><li>Driver序列的监听只会在主线程中。</li></ul><blockquote><p>所以Driver是专为UI绑定量身打造的东西。<br>以下情况你可以使用Driver替换BindTo:</p></blockquote><ul><li>不能发出error;</li><li>在主线程中监听;</li><li>共享事件流;</li></ul><h1 id="⑧map-和-flatMap-何时使用"><a href="#⑧map-和-flatMap-何时使用" class="headerlink" title="⑧map 和 flatMap 何时使用"></a>⑧map 和 flatMap 何时使用</h1><blockquote><p>map函数，接收一个R类型的序列，返回一个R类型的序列，还是原来的序列。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;R&gt;<span class="params">(<span class="number">_</span> transform: @escaping <span class="params">(<span class="keyword">Self</span>.E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">R</span>) -&gt; <span class="type">RxSwift</span>.<span class="type">Observable</span>&lt;<span class="type">R</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>flatMap函数，接收一个O类型的序列，返回一个O.E类型的序列，也就是有原来序列里元素组成的新序列。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;O: ObservableConvertibleType&gt;<span class="params">(<span class="number">_</span> selector: @escaping <span class="params">(E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">O</span>)</div><div class="line">        -&gt; <span class="type">Observable</span>&lt;<span class="type">O</span>.<span class="type">E</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>实这里的map和flatMap在swift中的作用是一样的。map函数可以对原有序列里面的事件元素进行改造，返回的还是原来的序列。而flatMap对原有序列中的元素进行改造和处理，每一个元素返回一个新的sequence，然后把每一个元素对应的sequence合并为一个新的sequence序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>.of(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>).<span class="built_in">map</span>&#123;$<span class="number">0</span> + <span class="string">"scott"</span>&#125;</div><div class="line">    </div><div class="line">observable.subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;).disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="comment">//打印结果：</span></div><div class="line">1scott</div><div class="line">2scott</div><div class="line">3scott</div><div class="line">4scott</div><div class="line">5scott</div></pre></td></tr></table></figure><blockquote><p>使用map对序列中每一个元素进行了处理，返回的是一个元素，而使用flatMap需要返回的序列。那么使用map也返回一个序列看看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">    </div><div class="line">test.subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line"><span class="comment">// 运行结果:</span></div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>看到结果会打印出每一个序列，下面我们使用merge()方法将这几个序列进行合并:</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;.merge()</div><div class="line">    </div><div class="line">test.subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"><span class="comment">//运行结果:</span></div><div class="line"> <span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>并为一个新序列后我们就可以正常打印元素了。下面看看使用faltMap()函数干这件事</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .flatMap &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">    </div><div class="line">test.subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"> <span class="comment">//运行结果:</span></div><div class="line"> <span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>看下对比是不是一样，这样子对比就清晰了吧。</p></blockquote><ul><li>map函数只能返回原来的那一个序列，里面的参数的返回值被当做原来序列中所对应的元素。</li><li>flatMap函数返回的是一个新的序列，将原来元素进行了处理，返回这些处理后的元素组成的新序列</li><li>map函数 + 合并函数 = flatMap函数</li></ul><blockquote><p>flatMap函数在实际应用中有很多地方需要用到，比如网络请求，网络请求可能会发生错误，我们需要对这个请求过程进行监听，然后处理错误。只要继续他返回的是一个新的序列</p></blockquote><h1 id="⑨UIBindingObserver"><a href="#⑨UIBindingObserver" class="headerlink" title="⑨UIBindingObserver"></a>⑨UIBindingObserver</h1><blockquote><p>UIBindingObserver这个东西很有用的，创建我们自己的监听者，有时候RxCocoa(RxSwift中对UIKit的一个扩展库)给的扩展不够我们使用，比如一个UITextField有个isEnabled属性，我想把这个isEnabled变为一个observer，我们可以这样做</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">extension Reactive where Base: UITextField &#123;</div><div class="line">    var inputEnabled: UIBindingObserver&lt;Base, Result&gt; &#123;</div><div class="line">        return UIBindingObserver(UIElement: base) &#123; textFiled, result in</div><div class="line">            textFiled.isEnabled = result.isValid</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>UIBindingObserver是一个类，他的初始化方法中，有两个参数，第一个参数是一个元素本身，第一个参数是一个闭包，闭包参数是元素本身，还有他的一个属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="type">UIElement</span>: <span class="type">UIElementType</span>, binding: @escaping (<span class="type">UIElementType</span>, <span class="type">Value</span>) -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure><blockquote><p>自定义了一个inputEnabled关联了UITextField的isEnabled属性</p></blockquote><p><a href="http://blog.csdn.net/sdefzhpk/article/details/73322040" target="_blank" rel="external">资料</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-Editor-3D场景编辑器</title>
      <link href="/2018/03/22/SceneKit/Grammar/Editor-3D%E5%9C%BA%E6%99%AF%E7%BC%96%E8%BE%91%E5%99%A8/SceneKit-%20Base/"/>
      <content type="html"><![CDATA[<h1 id="SceneKit-Editor"><a href="#SceneKit-Editor" class="headerlink" title="SceneKit-Editor"></a>SceneKit-Editor</h1><blockquote><p>Xcode自带了一个简单好用的3D场景编辑器,当选中或创建一个xxx.scn文件时就会出现</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/3D%E5%9C%BA%E6%99%AF%E7%BC%96%E8%BE%91%E5%99%A8.png" alt=""></p><blockquote><p>1.Scene graph(场景节点树)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">场景中每一个元素都显示在这里,可以拖拽树状结构的元素来控制父子关系</div></pre></td></tr></table></figure><blockquote><p>2.Design area(设计区)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">效果呈现区,可以拖拽,旋转和缩放,也可以从对象库中拖放原始节点到这里</div></pre></td></tr></table></figure><blockquote><p>3.Inspectors(检查器)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">和场景类型有关的检查器,检查器中的内容将根据你选中的节点不同而改变,最上方横放的有五个新的检查器</div></pre></td></tr></table></figure><table><thead><tr><th>检查器</th><th></th></tr></thead><tbody><tr><td>Node Inspector(节点检查器)</td><td>SCNNode对象有关的属性</td></tr><tr><td>Attributes Inspector(属性检查器):和选中节点类型有头的检查器,如果选中的是Box,可以设置长宽高,如果是Sphere,可以设置半径</td></tr><tr><td>Material Inspector(材料检查器):设置节点的颜色和纹理</td></tr><tr><td>Physics Inspector(物理检查器):设置物理行为的配置</td></tr><tr><td>Scene Inspector(场景检查器):场景中所有节点都有的全局检查器,可以设置场景中的一些属性</td></tr></tbody></table><blockquote><p>4.Properties(属性)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">检查器的内部属性</div></pre></td></tr></table></figure><blockquote><p>5.Object Library(对象库)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">所有可用的SCNNode对象,从系统自带到用户自定义的节点都有.SCNAction对象也在这里</div></pre></td></tr></table></figure><blockquote><p>6.Toolbar(工具条):</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">包含一些重要元素,从左到右,按钮功能</div></pre></td></tr></table></figure><table><thead><tr><th>按钮功能</th><th></th></tr></thead><tbody><tr><td>Add/delete node(添加/删除节点)</td><td>选中节点树中的节点,添加一个子元素或者删除选中节点</td></tr><tr><td>Search filter(搜索过滤器)</td><td>复杂场景下用来快速搜索</td></tr><tr><td>Expand/collapse scene graph area(可收缩场景图表区)</td><td>打开/关闭左侧的场景图表区</td></tr><tr><td>Coordinate system(坐标系)</td><td>选择一个活跃坐标系来编辑你的节点,可选local,parent,world或者screen</td></tr><tr><td>View/camera select(视点/相机选择)</td><td>当有多个相机时,可以选择相机列表中任一个活跃视点</td></tr><tr><td>Play/stop scene(播放/暂停场景)</td><td>播放/暂停物理和动作模拟</td></tr><tr><td>Expand/collapse actions(收缩动作区)</td><td>打开/关闭下面的动作区</td></tr></tbody></table><blockquote><p>7.Actions area(动作区)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">给节点添加动作时,可以从对象库中拖放一个action到这里,就会影响被选中的节点</div></pre></td></tr></table></figure><h1 id="Basic-scene-navigation基础场景导航"><a href="#Basic-scene-navigation基础场景导航" class="headerlink" title="Basic scene navigation基础场景导航"></a>Basic scene navigation基础场景导航</h1><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Pan(拖动)</td><td>Magic鼠标直接在滚轮处上下左右移动,触摸板用双指移动,普通鼠标按住option键拖动</td></tr><tr><td>Rotate(旋转)</td><td>按下左键并移动鼠标</td></tr><tr><td>Zoom(缩放)</td><td>按住option键使用滚轮缩放,触摸板用捏合手势</td></tr><tr><td>Multi-selection(多选)</td><td>按住Command单击多选</td></tr></tbody></table><h1 id="Basic-node-manipulation基础节点操作"><a href="#Basic-node-manipulation基础节点操作" class="headerlink" title="Basic node manipulation基础节点操作"></a>Basic node manipulation基础节点操作</h1><blockquote><p>以Box节点为例</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/%E4%BB%A5Box%E8%8A%82%E7%82%B9%E4%B8%BA%E4%BE%8B01.png" alt=""></p><p><img src="http://ozr735s7e.bkt.clouddn.com/%E4%BB%A5Box%E8%8A%82%E7%82%B9%E4%B8%BA%E4%BE%8B02.png" alt=""></p><p>Positioning(定位):拖动高亮的坐标轴,可以在坐标轴方向上移动.拖动灰色扇形区,可以沿所有平面移动<br>Rotatation(旋转):拖动高亮的坐标轴曲线,可以旋转节点</p><ul><li>附加操作:移动节点时,按住Command键,可放大并仔细检查位置.</li><li>旋转节点时,按住Command键,可放大并仔细检查角度.</li><li>按住Option键并拖动,可复制一个共享属性的副本,就是说对原本做的属性更改操作将影响副本.如果想取消共享属性,取消按钮在属性检查器中几何体共享分类下面.</li></ul><h1 id="xxx-scn文件的加载"><a href="#xxx-scn文件的加载" class="headerlink" title="xxx.scn文件的加载"></a>xxx.scn文件的加载</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  scnScene = <span class="type">SCNScene</span>(named: <span class="string">"B.scnassets/Scenes/Game.scn"</span>)</div><div class="line">scnView.scene = scnScene</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> Editor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Protocol协议-基础</title>
      <link href="/2018/03/21/Swift/Grammar/Protocol%E5%8D%8F%E8%AE%AE-Base/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/flyingkuikui/article/details/77717480" target="_blank" rel="external">相关资料1</a><br><a href="http://blog.csdn.net/u010586842/article/details/47971853" target="_blank" rel="external">相关资料2</a><br><a href="http://blog.csdn.net/u010586842/article/details/47971853" target="_blank" rel="external">相关资料3</a></p><p>1.<a href="#Protocol">Protocol</a><br>   1.1<a href="#Protocol语法">Protocol语法</a><br>      1.2<a href="#格式">格式</a><br>      1.3<a href="#对属性的使用">对属性的使用</a><br>      1.4<a href="#方法要求">方法要求</a><br>      1.5<a href="#Mutating方法要求">Mutating方法要求</a><br>      1.6<a href="#使用协议规范构造函数">使用协议规范构造函数</a><br>      1.7<a href="#协议类型">协议类型</a><br>2.<a href="#委托/代理设计模式">委托/代理设计模式</a><br>3.<a href="#协议的使用">协议的使用</a><br>  3.1<a href="#在扩展中添加协议成员">在扩展中添加协议成员</a><br>  3.2<a href="#通过扩展补充协议声明">通过扩展补充协议声明</a><br>  3.3<a href="#集合中的协议类型">集合中的协议类型</a><br>  3.4<a href="#仅在类中使用协议">仅在类中使用协议</a><br>4.<a href="#协议的继承">协议的继承</a><br>  4.1<a href="#protocolComposition协议的合成">protocolComposition协议的合成</a><br>  4.2<a href="#检验协议的一致性">检验协议的一致性</a><br>   4.3<a href="#可选协议要求">可选协议要求</a></p><h1 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h1><p><span id="Protocol"></span></p><ul><li>协议：代理设计模式</li><li>协议能够被 类、枚举、结构体 实现，满足协议要求的类、枚举、结构体被称为协议的是实现者</li><li>官方的定义：协议定义了一个蓝图 ， 规定了用来实现某一特定工作或者功能所必须的方法和属性，类、结构体、或者枚举类型都可以遵循协议， 并提供具体实现来完成协议定义的方法和功能 。 任意能够满足协议要求的类型都被成为遵循了这个协议</li></ul><h1 id="Protocol语法"><a href="#Protocol语法" class="headerlink" title="Protocol语法"></a>Protocol语法</h1><p><span id="Protocol语法"></span></p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><span id="格式"></span></p><ul><li>在类、枚举、结构体的名称后加上协议名称，中间以冒号(:)分隔，即可实现协议，当实现多个协议时，多个协议间用逗号(,)隔开</li><li>类含有父类,则应当将父类放在所有的协议之前</li></ul><blockquote><p>协议实现书写格式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> 类名 : 协议1 , 协议<span class="title">n</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> 类名:父类,协议1,协议<span class="title">n</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对属性的使用"><a href="#对属性的使用" class="headerlink" title="对属性的使用"></a>对属性的使用</h2><p><span id="对属性的使用"></span></p><ul><li>无论声明的属性为类属性还是对象属性，均需要在属性声明后加上{get}或{get set}，代表属性只读或读写</li><li>属性被声明为{get}，为可读的属性实现{setter}方法，也不会报错。</li><li>在声明类属性时，需要在声明的属性前添加关键字static。</li><li>在实现者内，必须实现协议的类属性的getter方法，如果协议内定义的类属性是读写的，则还必须实现setter方法</li><li>在协议中使用类型属性 总是使用static</li></ul><blockquote><p>协议1</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">oneProtocol</span></span>&#123;</div><div class="line">    <span class="comment">// 定义变量，必须在属性声明后添加&#123;get&#125;或者&#123;get set&#125;</span></div><div class="line">    <span class="keyword">var</span> argumentOne:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125; <span class="comment">// 只读</span></div><div class="line">    <span class="keyword">var</span> argumentTwo:<span class="type">Int</span>&#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125; <span class="comment">// 读写</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> argumentClass:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>类</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="title">oneProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> argumentOne: <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> argumentTwo: <span class="type">Int</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> argumentClass: <span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">30</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">init</span>(argumentOne:<span class="type">Int</span>,argumentTwo:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.argumentOne = argumentOne</div><div class="line">        <span class="keyword">self</span>.argumentTwo = argumentTwo</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> per = <span class="type">Person</span>(argumentOne: <span class="number">90</span>, argumentTwo: <span class="number">1</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"\(per.argumentOne)"</span>) <span class="comment">// 90</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"\(Person.argumentClass)"</span>) <span class="comment">// 30</span></div></pre></td></tr></table></figure><blockquote><p>协议2</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Pro1</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span>&#123;<span class="keyword">set</span> <span class="keyword">get</span>&#125;  <span class="comment">//可读可写</span></div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;  <span class="comment">//只读属性</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> status:<span class="type">Int</span> &#123;<span class="keyword">set</span> <span class="keyword">get</span>&#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>遵循协议</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Struct1</span> : <span class="title">Pro1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _name = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span>   &#123;</div><div class="line">        <span class="keyword">set</span>&#123;</div><div class="line">           _name = newValue</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">return</span> _name</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">18</span> <span class="comment">//可以声明为可读可写的</span></div><div class="line">    <span class="keyword">static</span>  <span class="keyword">var</span> status = <span class="number">1</span>  <span class="comment">//类型方法。</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span>: <span class="title">Pro1</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"class"</span></div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span>&#123; <span class="keyword">return</span>  <span class="number">19</span> &#125; <span class="comment">//也可以是只读</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> status = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="方法要求"><a href="#方法要求" class="headerlink" title="方法要求"></a>方法要求</h2><p><span id="方法要求"></span></p><ul><li>协议内声明的方法不需要协议进行方法的实现(OC差不多)</li><li>类方法，需要使用关键字 <strong>static</strong></li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">funcProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">sayBad</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="title">funcProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hello"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">sayBad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Bad"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Mutating方法要求"><a href="#Mutating方法要求" class="headerlink" title="Mutating方法要求"></a>Mutating方法要求</h2><p><span id="Mutating方法要求"></span></p><ul><li>能在方法或者函数内部改变字段的方法称为Mutating方法。</li><li>mutating关键字表示该函数允许改变该示例和其属性的类型。</li><li>一般mutating用在值拷贝的地方，例如：结构体、枚举。对于类或者类绑定协议中的方法无效</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Togglable</span></span>&#123;</div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">toggle</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">OnOffSwitch</span>:<span class="title">Togglable</span></span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">On</span>,<span class="type">Off</span></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">toggle</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Off</span>:</div><div class="line">            <span class="keyword">self</span> = .<span class="type">On</span></div><div class="line">        <span class="keyword">case</span> .<span class="type">On</span>:</div><div class="line">            <span class="keyword">self</span> = .<span class="type">Off</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> light = <span class="type">OnOffSwitch</span>.<span class="type">Off</span> <span class="comment">//Off</span></div><div class="line">light.toggle()  <span class="comment">// On</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OnOFF</span>:<span class="title">Togglable</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> one:<span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> two:<span class="type">Int</span></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">toggle</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.one &gt; <span class="number">10</span> &#123;</div><div class="line">            <span class="keyword">self</span>.two = <span class="number">30</span></div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">self</span>.two = <span class="number">20</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> <span class="type">LIGHT</span> = <span class="type">OnOFF</span>(one: <span class="number">2</span>, two: <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"\(LIGHT.two)"</span>) <span class="comment">// 3</span></div><div class="line"><span class="type">LIGHT</span>.toggle()</div><div class="line"><span class="built_in">print</span>(<span class="string">"\(LIGHT.two)"</span>) <span class="comment">// 20</span></div></pre></td></tr></table></figure><h2 id="使用协议规范构造函数"><a href="#使用协议规范构造函数" class="headerlink" title="使用协议规范构造函数"></a>使用协议规范构造函数</h2><p><span id="使用协议规范构造函数"></span></p><ul><li>协议可以规定必须实现指定的构造函数，比如一些类中必须要求实现init构造函数，这样就可以制造一个协议，让实现协议的类必须实现该构造函数。</li><li>实现构造协议的类，必须使用关键字required</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">init</span>(twoArgument:<span class="type">Int</span>)</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">two</span>:<span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(twoArgument: <span class="type">Int</span>) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>父类中存在与协议内相同的构造方法，则子类在实现构造方法时，需要同时使用关键字required和override</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">init</span>()</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSuperClass</span></span>&#123;</div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Two</span>:<span class="title">TwoSuperClass</span>,<span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">required</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>不能在final类中实现构造函数协议，因为final类是不能被继承的，因此不能实现构造函数协议</li><li>父类内被final修饰的方法与协议内相同，则该方法不能被遵循协议的子类实现</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">protocol</span> <span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSuperClass</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Super Say Hello"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Two</span>:<span class="title">TwoSuperClass</span>,<span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="comment">// 无法实现say方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="协议类型"><a href="#协议类型" class="headerlink" title="协议类型"></a>协议类型</h2><p><span id="协议类型"></span></p><ul><li>协议本身不实现任何功能，但是可以将它当作类型来使用。</li><li>协议作为类型使用的场景：<br>  ⒈作为函数、方法或构造器中的参数类型，返回值类型。<br>  ⒉作为常量、变量、属性的类型。<br>  ⒊作为数组、字典或其它容器中的元素类型</li></ul><h1 id="委托-代理设计模式"><a href="#委托-代理设计模式" class="headerlink" title="委托/代理设计模式"></a>委托/代理设计模式</h1><p><span id="委托/代理设计模式"></span></p><ul><li>委托/代理是一种设计模式，它允许类或者结构体将一些需要它们负责的功能交由给其他类型。</li><li>委托模式的实现：定义协议来封装那些需要被委托的函数和方法，使实现者拥有数据源的类型</li></ul><h1 id="协议的使用"><a href="#协议的使用" class="headerlink" title="协议的使用"></a>协议的使用</h1><p><span id="协议的使用"></span></p><h2 id="在扩展中添加协议成员"><a href="#在扩展中添加协议成员" class="headerlink" title="在扩展中添加协议成员"></a>在扩展中添加协议成员</h2><p><span id="在扩展中添加协议成员"></span></p><ul><li>当无法修改原代码时，可以通过扩展来补充已经存在的类型。</li><li>扩展可以为已经存在的类型添加属性、方法、下标、协议等成员。</li><li>通过扩展为已存在的类型实现协议时，该类型的所有实例也会随之添加协议中的方法</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TextProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printSomeMessage</span><span class="params">(message:String)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span></span>&#123;</div><div class="line">&#125;]</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dice</span>:<span class="title">TextProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printSomeMessage</span><span class="params">(message: String)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(message)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> dic = <span class="type">Dice</span>()</div><div class="line">dic.printSomeMessage(message: <span class="string">"hello"</span>);</div></pre></td></tr></table></figure><h2 id="通过扩展补充协议声明"><a href="#通过扩展补充协议声明" class="headerlink" title="通过扩展补充协议声明"></a>通过扩展补充协议声明</h2><p><span id="通过扩展补充协议声明"></span></p><ul><li>当一个类型已经实现了协议中的所有要求，却没有声明时，可以通过扩展补充协议的声明。</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TextProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printSomeMessage</span><span class="params">(message:String)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hamster</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printSomeMessage</span><span class="params">(message: String)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(message)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Hamster</span>:<span class="title">TextProtocol</span></span>&#123;</div><div class="line">   <span class="comment">// 此时，Hamster的实例也可以作为TextProtocol类型使用</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> hamster = <span class="type">Hamster</span>()</div></pre></td></tr></table></figure><h2 id="集合中的协议类型"><a href="#集合中的协议类型" class="headerlink" title="集合中的协议类型"></a>集合中的协议类型</h2><p><span id="集合中的协议类型"></span></p><ul><li>协议也可以作为类型在集合中被使用，表示集合中的元素均为协议类型</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> things:[<span class="type">TextProtocol</span>] = [dic,hamster]</div><div class="line"><span class="keyword">for</span> thing <span class="keyword">in</span> things &#123;</div><div class="line">    thing.printSomeMessage(message: <span class="string">"Hello Word"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 由于thing被当作是TextProtocol类型，故都能调用printSomeMessage方法</span></div></pre></td></tr></table></figure><h2 id="仅在类中使用协议"><a href="#仅在类中使用协议" class="headerlink" title="仅在类中使用协议"></a>仅在类中使用协议</h2><p><span id="仅在类中使用协议"></span></p><ul><li>通过在协议中增加class关键字，可以实现协议只让类来实现。</li><li>如果该协议同时继承其它协议，则需要在class后添加，并且用逗号隔开</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">protocol</span> <span class="title">SomeOnlyClassProtocol</span>:<span class="title">class</span></span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 协议SomeOnlyClassProtocol实现者只能是类</span></div></pre></td></tr></table></figure><h1 id="协议的继承"><a href="#协议的继承" class="headerlink" title="协议的继承"></a>协议的继承</h1><p><span id="协议的继承"></span></p><ul><li>协议可以继承一个或者多个其他协议，多个协议间用逗号隔开。</li><li>当类或者枚举等遵循协议时，不仅仅要实现当前协议的方法，也需要实现所遵循协议继承的其他协议</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">OneProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayOne</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 协议的继承</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TwoProtocol</span>:<span class="title">OneProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayTwo</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="title">TwoProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayOne</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// 协议OneProtocol的方法</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayTwo</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// 协议TwoProtocol的方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="protocolComposition协议的合成"><a href="#protocolComposition协议的合成" class="headerlink" title="protocolComposition协议的合成"></a>protocolComposition协议的合成</h2><p><span id="protocolComposition协议的合成"></span></p><ul><li>一个协议可以由多个协议采用protocol<namedprotocol,genderprotocol>这样的格式进行组合，称之为协议的合成(protocol composition)。</namedprotocol,genderprotocol></li><li>协议合成并不会产生一个新的协议，而是将多个协议合成一个临时的协议，超出范围后立即失效</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">NamedProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span>&#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">GenderProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> gender:<span class="type">String</span>&#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">AgedProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>:<span class="title">NamedProtocol</span>,<span class="title">GenderProtocol</span>,<span class="title">AgedProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> gender: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">wishBirthday</span><span class="params">(celebrator:NamedProtocol &amp; GenderProtocol)</span></span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"姓名：\(celebrator.name)，性别：\(celebrator.gender)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> per = <span class="type">Person</span>(name: <span class="string">"wang"</span>, gender: <span class="string">"man"</span>,age:<span class="number">20</span>)</div><div class="line">wishBirthday(celebrator: per)</div><div class="line"><span class="comment">// 形参celebrator的类型为protocol&lt;NamedProtocol,GenderProtocol&gt;，可以传入任何实现这两个协议的实例。即使此实例不仅仅遵循这两个协议。</span></div><div class="line"><span class="comment">// swift3.0之后，protocol&lt;NamedProtocol,GenderProtocol&gt;被NamedProtocol &amp; GenderProtocol替换。</span></div></pre></td></tr></table></figure><h2 id="检验协议的一致性"><a href="#检验协议的一致性" class="headerlink" title="检验协议的一致性"></a>检验协议的一致性</h2><p><span id="检验协议的一致性"></span></p><ul><li>用is检验协议的一致性，使用as将协议类型向下转换为其他协议类型。</li><li>is操作符用来检查实例是否实现了某个协议。返回值true/false。</li><li>as?返回一个可选值，当实例实现协议时，返回该协议类型；否则返回nil。</li><li>as用以强制向下转化类型。</li><li>@objc用来表示协议时可选的，还可以表示暴露给Objective-C的代码，。</li><li>@objc型协议只对类有效，因此只能在类中检查协议的一致性。</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">HasArea</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> area:<span class="type">Double</span>&#123;<span class="keyword">get</span>&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:<span class="title">HasArea</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> pi = <span class="number">3.1415927</span></div><div class="line">    <span class="keyword">var</span> radius:<span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> area: <span class="type">Double</span>&#123;</div><div class="line">        <span class="keyword">return</span> pi * radius * radius</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">init</span>(radius:<span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.radius = radius</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span>:<span class="title">HasArea</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> area: <span class="type">Double</span></div><div class="line">    <span class="keyword">init</span>(area:<span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.area = area</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> legs:<span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(legs:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.legs = legs</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> objects:[<span class="type">AnyObject</span>] = [</div><div class="line">    <span class="type">Circle</span>(radius: <span class="number">20</span>),</div><div class="line">    <span class="type">Country</span>(area: <span class="number">200</span>),</div><div class="line">    <span class="type">Animal</span>(legs: <span class="number">10</span>)</div><div class="line">]</div><div class="line"><span class="keyword">for</span> object <span class="keyword">in</span> objects &#123;</div><div class="line">    <span class="keyword">var</span> objectWithArea = object <span class="keyword">as</span>? <span class="type">HasArea</span></div><div class="line">    <span class="keyword">if</span> objectWithArea != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(objectWithArea)"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"遵循了HasArea协议，\(object.area)"</span>)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有遵循HasArea协议"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"--------------------"</span>)</div><div class="line"><span class="keyword">for</span> object <span class="keyword">in</span> objects &#123;</div><div class="line">    <span class="comment">// 返回值 true/false</span></div><div class="line">    <span class="keyword">var</span> objectWithArea = object <span class="keyword">is</span> <span class="type">HasArea</span></div><div class="line">    <span class="keyword">if</span> objectWithArea &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(objectWithArea)"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"遵循了HasArea协议，\(object.area)"</span>)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有遵循HasArea协议"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">打印结果：</span></div><div class="line"><span class="comment">Optional(__lldb_expr_386.Circle)</span></div><div class="line"><span class="comment">遵循了HasArea协议，Optional(1256.63708)</span></div><div class="line"><span class="comment">Optional(__lldb_expr_386.Country)</span></div><div class="line"><span class="comment">遵循了HasArea协议，Optional(200.0)</span></div><div class="line"><span class="comment">没有遵循HasArea协议</span></div><div class="line"><span class="comment">--------------------</span></div><div class="line"><span class="comment">true</span></div><div class="line"><span class="comment">遵循了HasArea协议，Optional(1256.63708)</span></div><div class="line"><span class="comment">true</span></div><div class="line"><span class="comment">遵循了HasArea协议，Optional(200.0)</span></div><div class="line"><span class="comment">没有遵循HasArea协议</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p>##可选协议要求<br>  <span id="可选协议要求"></span></p><ul><li>可选协议含有可选成员，其实现者可以选择是否实现这些成员。</li><li>在协议中使用关键字optional关键字作为前缀来定义可选成员</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">HasArea</span></span>&#123;</div><div class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="keyword">var</span> area:<span class="type">Double</span>&#123;<span class="keyword">get</span>&#125;</div><div class="line">    <span class="keyword">var</span> width:<span class="type">Double</span>&#123;<span class="keyword">get</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:<span class="title">HasArea</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> pi = <span class="number">3.1415927</span></div><div class="line">    <span class="keyword">var</span> radius:<span class="type">Double</span> = <span class="number">10.0</span></div><div class="line">    <span class="keyword">var</span> width: <span class="type">Double</span> = <span class="number">20.0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> Protocol </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-GCD-多请求并发</title>
      <link href="/2018/03/20/OC/GCD/GCD-%E5%A4%9A%E8%AF%B7%E6%B1%82%E5%B9%B6%E5%8F%91/"/>
      <content type="html"><![CDATA[<h1 id="GCD-方式"><a href="#GCD-方式" class="headerlink" title="GCD 方式"></a>GCD 方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 创建信号量</div><div class="line"> dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</div><div class="line"> // 创建全局并行</div><div class="line"> dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line"> dispatch_group_t group = dispatch_group_create();</div><div class="line"> dispatch_group_async(group, queue, ^&#123;</div><div class="line"></div><div class="line">     // 请求一</div><div class="line">     [loginCode getUserInfoWithNick:nil andUserId:kUserId onSuc:^(id data) &#123;</div><div class="line">         NSLog(@&quot;yue&quot;);</div><div class="line">         dispatch_semaphore_signal(semaphore);</div><div class="line"></div><div class="line">     &#125; andFail:^(NSError *error) &#123;       </div><div class="line">     &#125;];</div><div class="line"></div><div class="line"> &#125;);</div><div class="line"> dispatch_group_async(group, queue, ^&#123;</div><div class="line"></div><div class="line">     // 请求二</div><div class="line">     [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123;</div><div class="line"></div><div class="line">         NSLog(@&quot;duihuan11&quot;);</div><div class="line">         dispatch_semaphore_signal(semaphore);</div><div class="line"></div><div class="line">     &#125; onFailure:^(NSError *error) &#123;</div><div class="line">     &#125;];</div><div class="line"> &#125;);</div><div class="line"> dispatch_group_async(group, queue, ^&#123;</div><div class="line"></div><div class="line">     // 请求三</div><div class="line">     [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123;</div><div class="line">         NSLog(@&quot;duihuan22&quot;);</div><div class="line">         dispatch_semaphore_signal(semaphore);</div><div class="line"></div><div class="line">     &#125; onFailure:^(NSError *error) &#123;            </div><div class="line">     &#125;];</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> dispatch_group_notify(group, queue, ^&#123;</div><div class="line"></div><div class="line">     // 三个请求对应三次信号等待</div><div class="line">     dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">     dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">     dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">     //在这里 进行请求后的方法，回到主线程</div><div class="line">     dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">         //更新UI操作</div><div class="line"></div><div class="line">     &#125;);</div><div class="line"></div><div class="line"></div><div class="line"> &#125;);</div></pre></td></tr></table></figure><h1 id="通过请求数量计数"><a href="#通过请求数量计数" class="headerlink" title="通过请求数量计数"></a>通过请求数量计数</h1><blockquote><p>定义一个block</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">typedef void(^Complete)();</div></pre></td></tr></table></figure><blockquote><p>将block作为类的属性</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">@property (copy, nonatomic) Complete complete;</div></pre></td></tr></table></figure><blockquote><p>实现方式：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">NSInteger requestCount = 0;</div><div class="line"></div><div class="line">    //第一个网络请求</div><div class="line">    [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123;</div><div class="line">        NSLog(@&quot;duihuan11&quot;);</div><div class="line">        requestCount++;</div><div class="line">        if (self.complete) &#123;</div><div class="line">            self.complete();</div><div class="line">        &#125;</div><div class="line">    &#125; onFailure:^(NSError *error) &#123;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    //第二个网络请求</div><div class="line">    [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123;</div><div class="line">        NSLog(@&quot;duihuan22&quot;);</div><div class="line">        requestCount++;</div><div class="line">        if (self.complete) &#123;</div><div class="line">            self.complete();</div><div class="line">        &#125;</div><div class="line">    &#125; onFailure:^(NSError *error) &#123;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    //第三个网络请求</div><div class="line">    [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123;</div><div class="line">        NSLog(@&quot;duihuan33&quot;);</div><div class="line">        requestCount++;</div><div class="line">        if (self.complete) &#123;</div><div class="line">            self.complete();</div><div class="line">        &#125;</div><div class="line">    &#125; onFailure:^(NSError *error) &#123;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    self.complete = ^&#123;</div><div class="line"></div><div class="line">            //请求网络的数量等于3表示三个网络请求已完成</div><div class="line">            if (requestCount == 3) &#123;</div><div class="line"></div><div class="line">                //在这里 进行请求后的方法，回到主线程</div><div class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">                    //更新UI操作</div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> GCD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> GCD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-关键字-typealias/associatedtype</title>
      <link href="/2018/03/07/Swift/Grammar/%E5%85%B3%E9%94%AE%E5%AD%97-typealias:associatedtype/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/longshihua/article/details/74347889" target="_blank" rel="external">wenz</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Lib-Moya-网络封装(RxSwift)</title>
      <link href="/2018/03/07/Swift/Lib/Moya%20-%E7%BD%91%E7%BB%9C%E5%B0%81%E8%A3%85(RxSwift)/"/>
      <content type="html"><![CDATA[<p><a href="https://zjqian.github.io/2017/03/13/moya/" target="_blank" rel="external">参考01</a><br><a href="https://www.jianshu.com/p/c1494681400b" target="_blank" rel="external">参考02</a></p><h1 id="①Moya"><a href="#①Moya" class="headerlink" title="①Moya"></a>①Moya</h1><blockquote><p>Swift我们用Alamofire来做网络库.而Moya在Alamofire的基础上又封装了一层<br>官方说moya有以下特性:</p></blockquote><ul><li>编译时检查正确的API端点访问.</li><li>使你定义不同端点枚举值对应相应的用途更加明晰.</li><li>提高测试地位从而使单元测试更加容易.</li></ul><p><img src="http://ot0mms4k8.bkt.clouddn.com/%20Swift-Lib-Moya-%E7%BD%91%E7%BB%9C%E5%B0%81%E8%A3%85%28RxSwift%29-001.png" alt="001"></p><h1 id="②开始"><a href="#②开始" class="headerlink" title="②开始"></a>②开始</h1><h2 id="❶创建枚举API"><a href="#❶创建枚举API" class="headerlink" title="❶创建枚举API"></a>❶创建枚举API</h2><blockquote><p>首先创建一个 enum 来枚举你所有的 API targets<br>关于这个API的信息放在这个枚举类型中</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">APIManager</span> </span>&#123;</div><div class="line">   <span class="keyword">case</span> getNewsLatest      <span class="comment">//获取最新消息</span></div><div class="line">   <span class="keyword">case</span> getStartImage      <span class="comment">//启动界面图像获取</span></div><div class="line">   <span class="keyword">case</span> getVersion(<span class="type">String</span>) <span class="comment">//软件版本查询</span></div><div class="line">   <span class="keyword">case</span> getThemes          <span class="comment">//主题日报列表查看</span></div><div class="line">   <span class="keyword">case</span> getNewsDetail(<span class="type">Int</span>) <span class="comment">//获取新闻详情</span></div><div class="line">   <span class="keyword">case</span> create(title: <span class="type">String</span>, body: <span class="type">String</span>, userId: <span class="type">Int</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>##❷实现TargetType协议</p><blockquote><p>在这里,可以设置请求的参数,例如url……method……para等.</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">APIManager</span>: <span class="title">TargetType</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">/// The target's base `URL`.</span></div><div class="line"><span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123;</div><div class="line">     <span class="keyword">return</span> <span class="type">URL</span>.<span class="keyword">init</span>(string: <span class="string">"http://news-at.zhihu.com/api/"</span>)!</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// The path to be appended to `baseURL` to form the full `URL`.</span></div><div class="line"><span class="keyword">var</span> path: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">       <span class="keyword">case</span> .getNewsLatest:</div><div class="line">            <span class="keyword">return</span> <span class="string">"4/news/latest"</span></div><div class="line">       <span class="keyword">case</span> .getStartImage:</div><div class="line">            <span class="comment">//start-image 后为图像分辨率，接受任意的 number*number 格式， number 为任意非负整数，返回值均相同。</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"4/start-image/1080*1776"</span></div><div class="line">       <span class="keyword">case</span> .getVersion(<span class="keyword">let</span> version):</div><div class="line">            <span class="comment">//URL 最后部分的数字代表所安装『知乎日报』的版本</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"4/version/ios/"</span> + version</div><div class="line">       <span class="keyword">case</span> .getThemes:</div><div class="line">            <span class="keyword">return</span> <span class="string">"4/themes"</span></div><div class="line">       <span class="keyword">case</span> .getNewsDetail(<span class="keyword">let</span> id):</div><div class="line">            <span class="keyword">return</span> <span class="string">"4/news/\(id)"</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// The HTTP method used in the request.</span></div><div class="line"><span class="comment">// 设置Get、POST</span></div><div class="line"><span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</div><div class="line">    <span class="keyword">return</span> .<span class="keyword">get</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// The parameters to be incoded in the request.</span></div><div class="line"><span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/// The method used for parameter encoding.</span></div><div class="line"><span class="keyword">var</span> parameterEncoding: <span class="type">ParameterEncoding</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">URLEncoding</span>.<span class="keyword">default</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/// Provides stub data for use in testing.</span></div><div class="line"><span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</div><div class="line">&#125;</div><div class="line"><span class="comment">/// The type of HTTP task to be performed.</span></div><div class="line"><span class="keyword">var</span> task: <span class="type">Task</span> &#123;</div><div class="line">    <span class="keyword">return</span> .request</div><div class="line">&#125;</div><div class="line"><span class="comment">/// Whether or not to perform Alamofire validation. Defaults to `false`.</span></div><div class="line"><span class="keyword">var</span> validate: <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="❸使用"><a href="#❸使用" class="headerlink" title="❸使用"></a>❸使用</h1><blockquote><p>Moya的使用非常简单，通过TargetType协议定义好每个target之后，就可以直接使用Moya开始发送网络请求了。就像这样</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> provider = <span class="type">MoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</div><div class="line">provider.request(.getNewsLatest) &#123; result <span class="keyword">in</span></div><div class="line"><span class="comment">// do something with result</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>❹❺</p><h2 id="③配合RxSwift"><a href="#③配合RxSwift" class="headerlink" title="③配合RxSwift"></a>③配合RxSwift</h2><blockquote><p>Moya提供了非常方面的RxSwift扩展</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> provider = <span class="type">RxMoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</div><div class="line">provider.request(.getNewsLatest)</div><div class="line">        .filterSuccessfulStatusCodes()</div><div class="line">        .mapJSON()</div><div class="line">        .subscribe(onNext: &#123; (json) <span class="keyword">in</span></div><div class="line">         <span class="comment">//do something with posts</span></div><div class="line">        <span class="built_in">print</span>(json)</div><div class="line">        &#125;)</div><div class="line">        .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>RxMoyaProvider</td><td>是MoyaProvider的子类，是对RxSwift的扩展</td></tr><tr><td>filterSuccessfulStatusCodes()</td><td>是Moya为RxSwift提供的扩展方法，可以得到成功地网络请求，忽略其他的</td></tr><tr><td>mapJSON()</td><td>是Moya RxSwift的扩展方法，可以把返回的数据解析成 JSON 格式</td></tr><tr><td>subscribe</td><td>是一个RxSwift的方法,对经过一层一层处理的 Observable 订阅一个 onNext 的 observer，一旦得到 JSON 格式的数据，就会经行相应的处理</td></tr><tr><td>addDisposableTo(disposeBag)</td><td>是 RxSwift 的一个自动内存处理机制，跟ARC有点类似，会自动清理不需要的对象</td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="④配合HandyJSON"><a href="#④配合HandyJSON" class="headerlink" title="④配合HandyJSON"></a>④配合HandyJSON</h1><blockquote><p>❶网络请求紧密连接着数据层（Model），具体地说，一般需要建立一个类用来统一管理数据，然后把得到的 JSON 数据映射到数据层（Model）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MenuModel</span>: <span class="title">HandyJSON</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> others: [<span class="type">ThemeModel</span>]?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThemeModel</span>: <span class="title">HandyJSON</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> color: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> thumnail: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> id: <span class="type">Int</span>?</div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div></pre></td></tr></table></figure><blockquote><p>❷创建ViewModel类,创建具体请求方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuViewModel</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">let</span> provider = <span class="type">RxMoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</div><div class="line">  <span class="keyword">var</span> dispose = <span class="type">DisposeBag</span>()</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">getThemes</span><span class="params">(completed: @escaping <span class="params">(<span class="number">_</span> menuModel: MenuModel)</span></span></span> -&gt;())&#123;</div><div class="line">        provider.reuest(.getThemes)</div><div class="line">                .mapModel(<span class="type">MenuModel</span>.<span class="keyword">self</span>)</div><div class="line">                .subscribe( onNext: &#123; (model) <span class="keyword">in</span> </div><div class="line">                                      completed(model)&#125;,</div><div class="line">                            onError:&#123; (error) <span class="keyword">in</span> &#125;,</div><div class="line">                            onCompleted:<span class="literal">nil</span>,</div><div class="line">                            onDisposed:<span class="literal">nil</span>,</div><div class="line">                           )</div><div class="line">               .addDisposableTo(dispose)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这里是将请求的数据通过闭包传了出去,当然也可以不那么做.个人喜好问题.<br>这里是为 RxSwift 中的 ObservableType和 Response写一个简单的扩展方法 mapModel，利用我们写好的Model 类，一步就把JSON数据映射成 model</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> <span class="title">where</span> <span class="title">E</span> == <span class="title">Response</span> </span>&#123;</div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapModel</span> &lt;T: HandyJSON&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span>-&gt; <span class="type">Observable</span>&lt;<span class="type">T</span>&gt; &#123;</div><div class="line">          <span class="keyword">return</span> flatMap &#123; response -&gt; <span class="type">Observable</span>&lt;<span class="type">T</span>&gt; <span class="keyword">in</span> </div><div class="line">          <span class="keyword">return</span> <span class="type">Observable</span>.just(response.mapModel(<span class="type">T</span>.<span class="keyword">self</span>))</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapModel</span>&lt;T: HandyJSON&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">         <span class="keyword">let</span> jsonString = <span class="type">String</span>.<span class="keyword">init</span>(data: data,encoding: .utf8)</div><div class="line">         <span class="keyword">return</span> <span class="type">JSONDeserializer</span>&lt;<span class="type">T</span>&gt;.deserializeFrom(json: jsonString)!</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>#⑤配合ObjectMapper</p><p>##❷❶创建model类</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DetailModel</span>: <span class="title">Mappable</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> body = <span class="type">String</span>()</div><div class="line">        <span class="keyword">var</span> image_source: <span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> title = <span class="type">String</span>()</div><div class="line">  <span class="keyword">var</span> image: <span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> share_url = <span class="type">String</span>()</div><div class="line">  <span class="keyword">var</span> js = <span class="type">String</span>()</div><div class="line">  <span class="keyword">var</span> recommenders = [[<span class="type">String</span>: <span class="type">String</span>]]()</div><div class="line">  <span class="keyword">var</span> ga_prefix = <span class="type">String</span>()</div><div class="line">  <span class="keyword">var</span> section: <span class="type">DetailSectionModel</span>?</div><div class="line">  <span class="keyword">var</span> type = <span class="type">Int</span>()</div><div class="line">  <span class="keyword">var</span> id = <span class="type">Int</span>()</div><div class="line">  <span class="keyword">var</span> css = [<span class="type">String</span>]()</div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="built_in">map</span>: Map)</span></span> &#123;</div><div class="line">         body &lt;- <span class="built_in">map</span>[<span class="string">"body"</span>]</div><div class="line">  image_source &lt;- <span class="built_in">map</span>[<span class="string">"image_source"</span>]</div><div class="line">  title &lt;- <span class="built_in">map</span>[<span class="string">"title"</span>]</div><div class="line">  image &lt;- <span class="built_in">map</span>[<span class="string">"image"</span>]</div><div class="line">  share_url &lt;- <span class="built_in">map</span>[<span class="string">"share_url"</span>]</div><div class="line">  js &lt;- <span class="built_in">map</span>[<span class="string">"js"</span>]</div><div class="line">  recommenders &lt;- <span class="built_in">map</span>[<span class="string">"recommenders"</span>]</div><div class="line">  ga_prefix &lt;- <span class="built_in">map</span>[<span class="string">"ga_prefix"</span>]</div><div class="line">  section &lt;- <span class="built_in">map</span>[<span class="string">"section"</span>]</div><div class="line">  type &lt;- <span class="built_in">map</span>[<span class="string">"type"</span>]</div><div class="line">  id &lt;- <span class="built_in">map</span>[<span class="string">"id"</span>]</div><div class="line">  css &lt;- <span class="built_in">map</span>[<span class="string">"css"</span>]</div><div class="line">     &#125;</div><div class="line">  reuired <span class="keyword">init</span>?(<span class="built_in">map</span>: <span class="type">Map</span>) &#123;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❷使用 ObjectMapper ，需要让自己的 Model 类使用 Mappable 协议，这个协议包括两个方法：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(<span class="built_in">map</span>: <span class="type">Map</span>) &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="built_in">map</span>: Map)</span></span> &#123;&#125;<span class="comment">//在 mapping 方法中，用 &lt;- 操作符来处理和映射你的 JSON数据</span></div></pre></td></tr></table></figure><blockquote><p>❸数据类建立好之后，还需要为 RxSwift 中的 Observable 写一个简单的扩展方法 mapObject，利用写好的model 类，一步就把JSON 数据映射成一个个 model</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">       <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Mappable&gt;<span class="params">(type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Observale</span>&lt;<span class="type">T</span>&gt; &#123;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">self</span>.<span class="built_in">map</span> &#123; response <span class="keyword">in</span> </div><div class="line">               <span class="comment">//if response is a dictionary, then use ObjectMapper to map the dictionary</span></div><div class="line">               <span class="comment">//if not throw an error</span></div><div class="line">               <span class="keyword">guard</span> <span class="keyword">let</span> dict = response an? [<span class="type">String</span>: <span class="type">Any</span>] <span class="keyword">else</span> &#123;</div><div class="line">                     thow <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></div><div class="line">               &#125;</div><div class="line">                 <span class="keyword">return</span> <span class="type">Mapper</span>&lt;<span class="type">T</span>&gt;().<span class="built_in">map</span>(<span class="type">JSON</span>: dict)!</div><div class="line">               &#125;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="function"><span class="keyword">func</span> <span class="title">mapArray</span>&lt;T: Mappable&gt;<span class="params">(type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Observale</span>&lt;[<span class="type">T</span>]&gt; &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.<span class="built_in">map</span> &#123; response <span class="keyword">in</span> </div><div class="line">               <span class="comment">//if response is an array of dictionaries, then use ObjectMapper to map the dictionary</span></div><div class="line">               <span class="comment">//if not, throw an error</span></div><div class="line">               </div><div class="line">               <span class="keyword">guard</span> <span class="keyword">let</span> array = response <span class="keyword">as</span>? [<span class="type">Any</span>] <span class="keyword">else</span> &#123;</div><div class="line">                     thow <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></div><div class="line">               &#125;</div><div class="line">               </div><div class="line">               <span class="keyword">guard</span> <span class="keyword">let</span> dicts = array <span class="keyword">as</span>? [[<span class="type">String</span>: <span class="type">Any</span>]] <span class="keyword">else</span> &#123;</div><div class="line">                     thow <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></div><div class="line">               &#125;</div><div class="line">               </div><div class="line">               <span class="keyword">guard</span> <span class="keyword">let</span> dicts = array <span class="keyword">as</span>? [[<span class="type">String</span>: <span class="type">Any</span>]] <span class="keyword">else</span> &#123;</div><div class="line">                     thow <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></div><div class="line">               &#125;</div><div class="line">               </div><div class="line">               <span class="keyword">return</span> <span class="type">Mapper</span>&lt;<span class="type">T</span>&gt;().mapArray(<span class="type">JSONArray</span>: dicts)!</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="class"><span class="keyword">enum</span> <span class="title">RXSwiftMoyaError</span>: <span class="title">String</span> </span>&#123;</div><div class="line">           <span class="keyword">case</span> <span class="type">ParaseJSONError</span></div><div class="line">           <span class="keyword">case</span> <span class="type">OtherError</span></div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="class"><span class="keyword">extension</span> <span class="title">RxSwiftMoyaError</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123;</div><div class="line">      &#125;</div></pre></td></tr></table></figure><ul><li>mapObject 方法处理单个对象，mapArray 方法处理对象数组</li><li>果传进来的数据 response 是一个 dictionary，那么就利用 ObjectMapper 的 map方法映射这些数据，这个方法会调用你之前在 mapping方法里面定义的逻辑</li><li>如果 response 不是一个 dictionary， 那么就抛出一个错误</li><li>在底部自定义了简单的Error，继承了Swift 的 Error类，在实际应用过程中可以根据需要提供自己想要的 Error</li></ul><blockquote><p>❹运行请求方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">calss <span class="type">DetailViewModel</span> &#123;</div><div class="line">      <span class="keyword">private</span> <span class="keyword">let</span> provider = <span class="type">RxMoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</div><div class="line">      <span class="function"><span class="keyword">func</span> <span class="title">getNewsDetail</span><span class="params">(id: Int)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">DetailModel</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> provider.request(.getNewDetail(id))</div><div class="line">                       .filterSuccesssfulStatusCodes()</div><div class="line">                       .mapJSON()</div><div class="line">                       .mapObject(type: <span class="type">DetailModel</span>.<span class="keyword">self</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Lib </category>
          
          <category> Moya </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RxSwift + ReactorKit 构建信息流框架</title>
      <link href="/2018/03/07/RxSwift/Error/RxSwift-Error/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Lib-ObjectMapper-数据转模型</title>
      <link href="/2018/03/05/Swift/Lib/ObjectMapper-%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%A8%A1%E5%9E%8B/"/>
      <content type="html"><![CDATA[<h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><h2 id="CocoaPods库导入"><a href="#CocoaPods库导入" class="headerlink" title="CocoaPods库导入"></a>CocoaPods库导入</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">pod '<span class="type">ObjectMapper'</span></div></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> ObjectMapper</div></pre></td></tr></table></figure><h2 id="ObjectMapper-的协议-Mappable"><a href="#ObjectMapper-的协议-Mappable" class="headerlink" title="ObjectMapper 的协议 Mappable"></a>ObjectMapper 的协议 Mappable</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YKModel</span>:<span class="title">Mappable</span></span></div></pre></td></tr></table></figure><h2 id="进入头文件会看到-Mappable-必须要实现两个协议方法，和一个构造器"><a href="#进入头文件会看到-Mappable-必须要实现两个协议方法，和一个构造器" class="headerlink" title="进入头文件会看到 Mappable 必须要实现两个协议方法，和一个构造器"></a>进入头文件会看到 Mappable 必须要实现两个协议方法，和一个构造器</h2><blockquote><p>采纳这个协议的类，必须实现 Mappable 这个 protocol 中所指定的非可选的所有东西</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">public protocol Mappable &#123;</div><div class="line"> </div><div class="line"> /// This function can be used to validate JSON prior to mapping. Return nil to cancel mapping at this point</div><div class="line">  </div><div class="line">    init?(_ map: Map)</div><div class="line">  </div><div class="line">    /// This function is where all variable mappings should occur. It is executed by Mapper during the mapping (serialization and deserialization) process</div><div class="line">mutating func mapping(map: Map)</div><div class="line">/// This is an optional function that can be used to:</div><div class="line"> ///     1) provide an existing cached object to be used for mapping</div><div class="line">  /// 2) return an object of another class (which conforms to Mappable) to be used for mapping. For instance, you may inspect the JSON to infer the type of object that should be used for any given mapping </div><div class="line">  </div><div class="line">  static func objectForMapping(map: Map) -&gt; Mappable?</div></pre></td></tr></table></figure><h2 id="在模型类的下面实现协议方法"><a href="#在模型类的下面实现协议方法" class="headerlink" title="在模型类的下面实现协议方法"></a>在模型类的下面实现协议方法</h2><blockquote><p>在类中是无需标注mutating关键字的，mutating 只针对值类型，如枚举，结构体 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(<span class="number">_</span> <span class="built_in">map</span>: <span class="type">Map</span>) &#123;     </div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="built_in">map</span>: Map)</span></span> &#123;     </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上面的代码中并没有实现 Mappable 中所指定的 static func objectForMapping(map: Map) -&gt; Mappable? 这个类方法，是这样的，再次进入头文件会发现 Mappable 协议下面存在一个 Mappable 的协议扩展，截取了其中的一部分</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Mappable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">objectForMapping</span><span class="params">(<span class="built_in">map</span>: Map)</span></span> -&gt; <span class="type">Mappable</span>? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">        ......</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这个扩展中已经帮我们默认实现了 objectForMapping方法，所有不需要使用者实现这个方法，当然这个方法也是联想不出来的</p></blockquote><p><a href="https://www.jianshu.com/p/3e999c40491a" target="_blank" rel="external">参考原文</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Lib </category>
          
          <category> ObjectMapper </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Lib-Reusable-优雅地使用ReusableIdentifier</title>
      <link href="/2018/03/02/Swift/Lib/Reusable%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8ReusableIdentifier/"/>
      <content type="html"><![CDATA[<h1 id="cell的重用机制与标示符"><a href="#cell的重用机制与标示符" class="headerlink" title="cell的重用机制与标示符"></a>cell的重用机制与标示符</h1><blockquote><p>苹果为了保准UITableView视图的性能，使用了cell的重用机制，cell可以通过重用标示符（reusableIdentifier）进行复用，默认的注册cell和获取cell的方法中，需要传入一个字符串作重用标示符<br>但这种方式很容易出错，而且使用起来也相当别扭，一种普遍的解决方式，就是直接只用类名作为重用标示符:</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tableView.registerClass(<span class="type">UITableView</span>.<span class="keyword">self</span>,forCellReuseIdentifier:<span class="type">String</span>(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>))</div><div class="line">tableView.dequeueReusableCellWithIdentifier(<span class="type">String</span>(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>))</div></pre></td></tr></table></figure><blockquote><p>这种写法依然繁琐，每次传入一个类并把它转化成字符串<br>so,可借助Swift的泛型特性，我们可以有更加优雅的实现方式</p></blockquote><h1 id="使用协议"><a href="#使用协议" class="headerlink" title="使用协议"></a>使用协议</h1><ul><li><a href="http://swift.gg/2016/01/27/generic-tableviewcells/index.html" target="_blank" rel="external">使用泛型来优化 TableView Cells 的使用体验</a>详细介绍了如何通过协议+泛型的方式，优化TableView Cells 的使用体验</li></ul><h2 id="具体的做法很简单"><a href="#具体的做法很简单" class="headerlink" title="具体的做法很简单:"></a>具体的做法很简单:</h2><blockquote><p>❶协议</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//声明了一个协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Reusable</span>: <span class="title">class</span> </span>&#123;</div><div class="line">   <span class="keyword">static</span> <span class="keyword">var</span> reuseIdentifier: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//提供并默认实现了一个reuseIdentifier静态属性</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reusable</span> </span>&#123;</div><div class="line">   <span class="keyword">static</span> <span class="keyword">var</span> reuseIdentifier: <span class="type">String</span> &#123;</div><div class="line">     <span class="keyword">return</span> <span class="type">String</span> (<span class="type">Self</span>) </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❷提供一个注册和获取重用cell的方法<br>这样只要cell遵守了Reusable协议，就可以通过上面两个方法注册复用cell了。具体的代码和使用<a href="http://swift.gg/2016/01/27/generic-tableviewcells/index.html" target="_blank" rel="external">使用泛型来优化 TableView Cells 的使用体验</a></p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerReusableCell</span>&lt;T: UITableViewCell where T: Reusable&gt;<span class="params">(<span class="number">_</span>: T.<span class="keyword">Type</span>)</span></span> &#123; </div><div class="line">     <span class="keyword">self</span>.registerClass(<span class="type">T</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="type">T</span>.reuseIdentifier) </div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">dequeueReusableCell</span>&lt;T: UITableViewCell where T: Reusable&gt;<span class="params">(indexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">T</span> &#123; </div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span>.dequeueReusableCellWithIdentifier(<span class="type">T</span>.reuseIdentifier, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">T</span> </div><div class="line">      &#125;</div></pre></td></tr></table></figure><blockquote><p>cell必须遵守了Reusable协议，虽然通过让UITableViewCell遵守这个协议的方式，避免每个UITableViewCell子cell都写一遍，但这依然还不是最理想的解决方式。最理想的解决方式，应该是只需要调用方法，不需要UITableViewCell做任何修改，为此我们可以使用结构体，而非协议来实现</p></blockquote><h1 id="使用结构体"><a href="#使用结构体" class="headerlink" title="使用结构体"></a>使用结构体</h1><blockquote><p>使用泛型定义一个ReusableIdentifier结构体，有一个identifier的不变量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">ReusableIdentifier</span> &lt;<span class="title">T</span>: <span class="title">UIView</span>&gt; </span>&#123;</div><div class="line">       <span class="keyword">let</span> identifier: string</div><div class="line">       </div><div class="line">       <span class="keyword">init</span> () &#123;</div><div class="line">          identifier = <span class="type">String</span>(<span class="type">T</span>.<span class="type">Self</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>注册的时候就非常简单</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tableview.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>)</div></pre></td></tr></table></figure><blockquote><p>同样的，可以为UITableView实现一个dequeue方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="meta">@warn_unused_result</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">dequeue</span>&lt;T: UICollectionViewCell&gt;<span class="params">(indexPath: NSIndexPath)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">let</span> rid = <span class="type">ReusableIdentifier</span>&lt;<span class="type">T</span>&gt;()</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell = dequeueReusableCellWithReuseIdentifier(rid.identifier, forIndexPath: indexPath) <span class="keyword">as</span>? <span class="type">T</span> <span class="keyword">else</span> &#123; </div><div class="line">    <span class="built_in">assertionFailure</span>(<span class="string">"No identifier(\(rid.identifier)) found for \(T.self)"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">T</span>.<span class="keyword">init</span>()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cell</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>使用的时候只需要指定cell的类型，传入indexPath即可</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> cell: <span class="type">UITableViewCell</span> = tableview.dequeue(indexPath)</div></pre></td></tr></table></figure><ul><li><p>通过引入一个结构体，利用泛型特性，不需要对已有的类型做任何修改，只需要替换注册和复用cell时调用的方法，我们就可以非常优雅的复用Tableview Cell。</p></li><li><p>参考上面的方法，我们可以借助ReusableIdentifier结构体，为UICollectionView实现相应的方法</p></li></ul>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Lib </category>
          
          <category> Reusable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Lib </tag>
            
            <tag> Reusable </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxSwift + ReactorKit 构建信息流框架</title>
      <link href="/2018/03/02/RxSwift/Demo/RxSwift%20%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A1%86%E6%9E%B6/"/>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/48545ae1e33f" target="_blank" rel="external">https://www.jianshu.com/p/48545ae1e33f</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxSwift + ReactorKit 构建信息流框架</title>
      <link href="/2018/03/02/RxSwift/Func/RxSwift%20+%20ReactorKit%20%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/dff7b0368d2b" target="_blank" rel="external">https://www.jianshu.com/p/dff7b0368d2b</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Lib-Then协议库-初始化方式</title>
      <link href="/2018/03/02/Swift/Lib/Then%E5%8D%8F%E8%AE%AE%E5%BA%93-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h1 id="写法对比"><a href="#写法对比" class="headerlink" title="写法对比"></a>写法对比</h1><blockquote><p>普通的写法，先看通过Block创建对象的写法<br>优点：代码整合在一个闭包里面，可读性强</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="number">_</span> = &#123; () -&gt; <span class="type">UILabel</span> <span class="keyword">in</span> </div><div class="line"> <span class="keyword">let</span>  label = <span class="type">UILab</span>()</div><div class="line"> view.addSubview(label)</div><div class="line"> label.text = <span class="string">"myLabel"</span></div><div class="line"> label.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>)</div><div class="line"> label.center = <span class="keyword">self</span>.view.center</div><div class="line"> label.bounds = <span class="type">CGRect</span>.<span class="keyword">init</span>(x : <span class="number">0</span>, y : <span class="number">0</span>, width : <span class="number">100</span>, height : <span class="number">50</span>)</div><div class="line"> <span class="keyword">return</span> label</div><div class="line"> &#125;()</div></pre></td></tr></table></figure><blockquote><p>在Block外初始化一个对象，再传进闭包进行设值，统一用$0取参数对象，不用再去烦如何命名了。当然也可以命名，参考后文的写法 不过有个缺点：里面的$0没法自动联想出属性，手敲几行代码你就会蓝瘦香菇</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="number">_</span> =:<span class="type">UILabel</span> &#123;</div><div class="line">  view.addSubview($<span class="number">0</span>)</div><div class="line">  $<span class="number">0</span>.text = <span class="string">"测试"</span></div><div class="line">  $<span class="number">0</span>.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>)</div><div class="line">  $<span class="number">0</span>.center = <span class="keyword">self</span>.view.center</div><div class="line">  $<span class="number">0</span>.bounds = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>,height: <span class="number">50</span>)</div><div class="line">  <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">&#125;(<span class="type">UILabel</span>())</div></pre></td></tr></table></figure><blockquote><p>用Then协议库的初始化写法<br>比上面的代码更简洁，不用写return了，而且里面的$0还能自动联想。优点：暂时没有吐槽点</p><p>带参数，可自行命名</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="number">_</span> = <span class="type">UILabel</span>().then_Any&#123; (label) <span class="keyword">in</span></div><div class="line">    label.backgroundColor = .blue</div><div class="line">    label.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>)</div><div class="line">    label.textAlinment = .center</div><div class="line">    label.text = <span class="string">"Then协议库写法"</span></div><div class="line">    label.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">20</span>, y:<span class="number">200</span>, width: <span class="number">150</span>, height:<span class="number">40</span>)</div><div class="line">      <span class="comment">// 不会循环引用(已测试)</span></div><div class="line">     <span class="keyword">self</span>.view.addSubview(label)</div></pre></td></tr></table></figure><blockquote><p>(推荐)无参数，无需命名，用$0取参数，可自动联想属性(推荐)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="number">_</span> = <span class="type">UILabel</span>().then_Any&#123;</div><div class="line">   $<span class="number">0</span>.backgroundColor = .blue</div><div class="line">   $<span class="number">0</span>.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>)</div><div class="line">   $<span class="number">0</span>.textAlignment = .center</div><div class="line">   $<span class="number">0</span>.text = <span class="string">"Then库写法1.1"</span></div><div class="line">   $<span class="number">0</span>.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">200</span>, y: <span class="number">200</span>, height: <span class="number">50</span>)</div><div class="line">   <span class="keyword">self</span>.view.adSubview($<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>2.0 带参数，可自行命名</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> label_Any0 = <span class="type">UILabel</span>().then&#123; (label) <span class="keyword">in</span></div><div class="line">    label.backgroundColor = .blue</div><div class="line">    label.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>)</div><div class="line">    label.textAlignment = .center</div><div class="line">    label.text = <span class="string">"Then库写法_2.0"</span></div><div class="line">    label.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">200</span>, y:<span class="number">240</span>, width:<span class="number">150</span>, height: <span class="number">40</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>.view.addSubview(label_Any0)</div></pre></td></tr></table></figure><blockquote><p>2.1 (推荐)无参数，无需命名，用$0取参数，可自动联想属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="number">_</span> = <span class="type">UILabel</span>().then &#123;</div><div class="line">   $<span class="number">0</span>.backgroundColor = .blue</div><div class="line">   $<span class="number">0</span>.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>)</div><div class="line">   $<span class="number">0</span>.textAlignment = .center</div><div class="line">   $<span class="number">0</span>.text = <span class="string">"Then库写法_2.1"</span></div><div class="line">   $<span class="number">0</span>.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">200</span>, y: <span class="number">260</span>,width: <span class="number">150</span>,height: <span class="number">40</span>)</div><div class="line">   <span class="keyword">self</span>.view.addSubview($<span class="number">0</span>)</div></pre></td></tr></table></figure><blockquote><p>栗子：某工厂方法 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">label</span> (<span class="title">withFrame</span> <span class="title">frame</span>: <span class="title">CGRect</span>, <span class="title">text</span>: <span class="title">String</span>?, <span class="title">font</span>: <span class="title">UIFont</span>)-&gt;<span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">UILabel</span>.<span class="keyword">init</span>(frame: frame).then(block: &#123; (label) <span class="keyword">in</span> </div><div class="line">          label.text = text</div><div class="line">          label.textColor = <span class="type">UIColor</span>.black</div><div class="line">          label.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line">          label.font = font</div><div class="line"> &#125;)</div></pre></td></tr></table></figure><blockquote><p>其实Then协议库只有十几行代码，但是能带来非常好的体验感，简约实用，不会出现循环引用。下面的代码可以复制到一个swift file中，直接用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Then</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Then</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">Any</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">then_Any</span><span class="params">( block: <span class="params">(<span class="keyword">inout</span> <span class="keyword">Self</span>)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Self</span> &#123;</div><div class="line">        <span class="keyword">var</span> copy = <span class="keyword">self</span></div><div class="line">        block(&amp;copy)</div><div class="line">        <span class="keyword">return</span> copy</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Then</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">AnyObject</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">then</span><span class="params">( block: <span class="params">(<span class="keyword">Self</span>)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Self</span> &#123;</div><div class="line">        block(<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span>: <span class="title">Then</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/6cc1e21df6ac" target="_blank" rel="external">参考原文</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Lib </category>
          
          <category> Then </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RxSwift+Moya+列表展示</title>
      <link href="/2018/03/01/RxSwift/Demo/RxSwift+Moya+%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/"/>
      <content type="html"><![CDATA[<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><blockquote><p>根据网上demo仿写<a href="https://mp.weixin.qq.com/s/B-AdatKDkjknKCYorqSfEw" target="_blank" rel="external">原文</a></p></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Controller</td><td></td><td></td></tr><tr><td></td><td>LXFViewController.swift</td><td>主视图控制器</td></tr><tr><td>Extension</td><td></td><td></td></tr><tr><td></td><td>Response+ObjectMapper.swift</td><td>Response分类，Moya请求完进行Json转模型或模型数组</td></tr><tr><td>Model</td><td></td><td></td></tr><tr><td></td><td>LXFModel.swift</td><td>模型</td></tr><tr><td>Protocol</td><td></td><td></td></tr><tr><td></td><td>LXFViewModelType.swift</td><td>定义了模型协议</td></tr><tr><td>Tool</td><td></td><td></td></tr><tr><td></td><td>LXFNetworkTool.swift</td><td>封装Moya请求</td></tr><tr><td></td><td>LXFProgressHUD.swift</td><td>封装的HUD</td></tr><tr><td>View</td><td></td><td></td></tr><tr><td></td><td>LXFViewCell.swift</td><td>自定义cell</td></tr><tr><td></td><td>LXFViewCell.xib</td><td>cell的xib文件</td></tr><tr><td>ViewModel</td><td></td><td></td></tr><tr><td></td><td>LXFViewModel.swift</td><td>视图模型</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>RxSwift</td><td>想玩RxSwift的必备库</td></tr><tr><td>RxCocoa</td><td>对 UIKit Foundation 进行 Rx 化</td></tr><tr><td>NSObject+Rx</td><td>为我们提供 rx_disposeBag</td></tr><tr><td>Moya/RxSwift</td><td>为RxSwift专用提供，对Alamofire进行封装的一个网络请求库</td></tr><tr><td>ObjectMapper</td><td>Json转模型之必备良品</td></tr><tr><td>RxDataSources</td><td>帮助我们优雅的使用tableView的数据源方法</td></tr><tr><td>Then</td><td>提供快速初始化的语法糖</td></tr><tr><td>Kingfisher</td><td>图片加载库</td></tr><tr><td>SnapKit</td><td>视图约束库</td></tr><tr><td>Reusable</td><td>帮助我们优雅的使用自定义cell和view,不再出现Optional</td></tr><tr><td>MJRefresh</td><td>上拉加载、下拉刷新的库</td></tr><tr><td>SVProgressHUD</td><td>简单易用的HUD</td></tr></tbody></table><h3 id="Moya"><a href="#Moya" class="headerlink" title="Moya"></a>Moya</h3><ul><li>Moya是基于Alamofire的网络请求库</li><li>Moya的基础上添加了对RxSwift的接口支持</li></ul><blockquote><p>❶创建一个枚举，用来存放请求类型</p><ul><li>顺便设置相应的路径，等下统一取出来直接赋值即可</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LXFNetworkCategory</span> : <span class="title">String</span> </span>&#123;</div><div class="line"> <span class="keyword">case</span> all = <span class="string">"all"</span></div><div class="line"> <span class="keyword">case</span> android = <span class="string">"Android"</span></div><div class="line"> <span class="keyword">case</span> ios = <span class="string">"iOS"</span></div><div class="line"> <span class="keyword">case</span> welfare = <span class="string">"福利"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❷枚举写一个扩展，并遵循塄 TargetType，这个协议的Moya这个库规定的协议</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFNetworkTool</span> : <span class="title">TargetType</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//baseURL 统一基本的URL</span></div><div class="line">    <span class="keyword">var</span> baseURL : <span class="type">URL</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="type">URL</span> (string : <span class="string">"http://xxxx/xx/"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//path字段会追加至baseURL后面</span></div><div class="line">    <span class="keyword">var</span> path : <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span>.data(<span class="keyword">let</span> type, <span class="keyword">let</span> size , <span class="keyword">let</span> index):</div><div class="line">             <span class="keyword">return</span> <span class="string">"(type.rawValue)/(size)/(index)"</span></div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="comment">// HTTP的请求方式</span></div><div class="line">     <span class="keyword">var</span> method : <span class="type">Moya</span>.<span class="type">Method</span> &#123;</div><div class="line">       <span class="keyword">return</span> .<span class="keyword">get</span></div><div class="line">     &#125;</div><div class="line">     </div><div class="line">      <span class="comment">//请求参数(会在请求时进行编码)</span></div><div class="line">      <span class="keyword">var</span> parameters : [<span class="type">String</span> : <span class="type">Any</span>]?&#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">      &#125;</div><div class="line">      </div><div class="line">       <span class="comment">//参数编码方式(这里使用URL的默认方式)</span></div><div class="line">       <span class="keyword">var</span> parameterEncoding : <span class="type">ParameterEncoding</span> &#123;</div><div class="line">           <span class="keyword">return</span> <span class="type">URLEncoding</span>.<span class="keyword">default</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">//用于单元测试，不需要的就像我一样随便写写</span></div><div class="line">       <span class="keyword">var</span> sampleData : <span class="type">Data</span> &#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"AAAA"</span>.data(using : .utf8)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">      <span class="comment">//将要被执行的任务(请求：request 下载：upload 上传：download)</span></div><div class="line">      </div><div class="line">      <span class="keyword">var</span> task : <span class="type">Task</span> &#123;</div><div class="line">          <span class="keyword">return</span> .reuqest</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="comment">//是否执行Alamofire验证，默认值为false</span></div><div class="line">        <span class="keyword">var</span> validate : <span class="type">Bool</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❸定义一个全局变量用于整个项目的网络请求<br>以使用这个全局变量来请求数据</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> lxfNetTool = <span class="type">RxMoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;</div></pre></td></tr></table></figure><h3 id="RxDataSources"><a href="#RxDataSources" class="headerlink" title="RxDataSources"></a>RxDataSources</h3><ul><li>RxDataSources是以section来做为数据结构来传输</li></ul><blockquote><p>自定义Section<br>Model中创建一个Section的结构体，并且创建一个扩展，遵循SectionModelType协议，实现相应的协议方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">LXFModel</span>.swift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LXFSection</span> </span>&#123;</div><div class="line">  <span class="comment">// items就是rows</span></div><div class="line">  <span class="keyword">var</span> items : [<span class="type">Item</span>]</div><div class="line">  <span class="comment">//这里加你需要的东西，比如 headerView 的 title</span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFSection</span> : <span class="title">SectionModelType</span> </span>&#123;</div><div class="line">  <span class="comment">// 重定义 Item 的类型为 LXFModel</span></div><div class="line">  <span class="keyword">typealias</span> <span class="type">Item</span> = <span class="type">LXFModel</span></div><div class="line">  </div><div class="line">  <span class="comment">// 实现协议中的方式</span></div><div class="line">    <span class="keyword">init</span>(original: <span class="type">LXFSection</span>, items: [<span class="type">LXFSection</span>.<span class="type">Item</span>]) &#123;</div><div class="line">        <span class="keyword">self</span> = original</div><div class="line">        <span class="keyword">self</span>.items = items</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❷控制器下创建数据源属性<br>LXFViewController.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//创建一个数据源属性，类型为自定义的Section类型</span></div><div class="line">   <span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">LXFSection</span>&gt;()</div><div class="line">   </div><div class="line"> <span class="comment">//使用数据源属性绑定cell</span></div><div class="line"> dataSource.configureCell = &#123; ds,tv,ip,iteam <span class="keyword">in</span></div><div class="line">   <span class="comment">// 这个地方使用了Reusable这个库，在LXFViewCell中遵守了相应的协议</span></div><div class="line">   <span class="comment">// 使其方便转换cell为非可选型的相应的cell类型</span></div><div class="line">   <span class="keyword">let</span> cell = tv.dequeueReusableCell(<span class="keyword">for</span> : ip) <span class="keyword">as</span> <span class="type">LXFViewCell</span></div><div class="line">   cell.picView.kf.setImgage(with : <span class="type">URL</span>(string: item.url))</div><div class="line">   cell.descLabel.text = <span class="string">"描述 : (item.desc)"</span></div><div class="line">   cell.sourceLabel.text = <span class="string">"来源 : (item.source)"</span></div><div class="line">   <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❸sections序列绑定给我们的rows</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">output.sections</div><div class="line">      .asDriver()</div><div class="line">      .drive(tableView.rx</div><div class="line">                      .items(dataSource : dataSource))</div><div class="line">       .addDisposable(rx_disposeBag)</div></pre></td></tr></table></figure><h3 id="ViewModel的规范"><a href="#ViewModel的规范" class="headerlink" title="ViewModel的规范"></a>ViewModel的规范</h3><ul><li>MVVM思想是将原本在ViewController的视图显示逻辑、验证逻辑、网络请求等代码存放于ViewModel中，达到ViewController瘦身-</li><li>逻辑由ViewModel负责，外界不需要关心，外界只需要结果，ViewModel也只需要将结果给到外界</li><li>基于此，我们定义了一个协议LXFViewModelType</li></ul><blockquote><p>❶创建LXFViewModelType.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">LXFViewModelType</span>.swift</div><div class="line"></div><div class="line"><span class="comment">// associatedtype 关键字 用来声明一个类型的占位符作为协议定义的一部分</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">LXFViewModelType</span> </span>&#123;</div><div class="line"></div><div class="line">  associatedtype <span class="type">Input</span></div><div class="line">  associatedtype <span class="type">Output</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(input : Input )</span></span> - &gt; <span class="type">Output</span></div></pre></td></tr></table></figure><blockquote><p>❷viewModel遵守LXFViewModelType协议</p></blockquote><ul><li>可以为XFViewModelType的Input和Output定义别名，以示区分,如：这个viewModel的用于请求首页模块相关联的，则可以命名为：HomeInput 和 HomeOutput</li><li>可以丰富我们的 Input 和 Output 。可以看到为Output添加了一个序列，类型为自定义的LXFSection数组，在Input里面添加了一个请求类型(即要请求什么数据，比如首页的数据)</li><li>通过 transform 方法将input携带的数据进行处理，生成了一个Output</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">LXFViewModel</span>.swift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFViewModel</span> :<span class="title">LXFViewModelType</span> </span>&#123;</div><div class="line">        <span class="comment">// 存放着解析完成的模型数组</span></div><div class="line">        <span class="keyword">let</span> models = <span class="type">Variable</span> &lt;[<span class="type">LXFModel</span>]&gt;([])</div><div class="line">        </div><div class="line">        <span class="comment">// 为LXFViewModelType的Input和Output定义别名</span></div><div class="line">        <span class="keyword">typealias</span> <span class="type">Input</span> = <span class="type">LXFInput</span></div><div class="line">        <span class="keyword">typealias</span> <span class="type">Output</span> = <span class="type">LXFOutput</span></div><div class="line">        </div><div class="line">        <span class="comment">// 丰富Input和Output</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">LXFInput</span> </span>&#123;</div><div class="line">           <span class="comment">//网络请求类型</span></div><div class="line">           <span class="keyword">let</span> category : <span class="type">LXFNetworkTool</span>.<span class="type">LXFNetworkCategory</span></div><div class="line">           int(category : <span class="type">LXFNetworkTool</span>.<span class="type">LXFNetworkCategory</span>)&#123;</div><div class="line">              <span class="keyword">self</span>.category = category</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">LXFOutput</span> </span>&#123;</div><div class="line">            <span class="comment">//tableView的sections数据</span></div><div class="line">            <span class="keyword">let</span> sections : <span class="type">Driver</span> &lt;<span class="type">LXFsection</span>&gt;</div><div class="line">            </div><div class="line">            <span class="keyword">init</span>(sections : <span class="type">Driver</span> &lt;[<span class="type">LXFSection</span>]&gt;)&#123;</div><div class="line">               <span class="keyword">self</span>.sections = sections</div><div class="line">             &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(input : LXFViewModel.LXFInput)</span></span> -&gt; <span class="type">LXFViewModel</span>.<span class="type">LXFOutput</span>&#123;</div><div class="line">           <span class="keyword">let</span> sections = models.asObservable()</div><div class="line">                                .<span class="built_in">map</span>&#123; (models) -&gt; [<span class="type">LXFSection</span>] <span class="keyword">in</span> </div><div class="line">                                 <span class="comment">// 当models的值被改变时会调用，这是Variable的特性</span></div><div class="line">                                 <span class="comment">// 返回section数组</span></div><div class="line">                                 <span class="keyword">return</span> [<span class="type">LXFSection</span>(item : models)]</div><div class="line">                                 &#125;</div><div class="line">                                 .asDriver(onErrorJustReturn : [])</div><div class="line">           <span class="keyword">let</span> output = <span class="type">LXFOutput</span>(sections : sections)</div><div class="line">       <span class="comment">// 接下来的代码是网络请求</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❸在ViewController中初始化我们的input，通过transform得到output，<br>然后将output中的sections序列绑定tableView的items</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">LXFViewController</span>.swift</div><div class="line"></div><div class="line"><span class="comment">// 初始化input</span></div><div class="line"><span class="keyword">let</span> vmInput = <span class="type">LXFViewModel</span>.<span class="type">LXFInput</span>(category : welfare)</div><div class="line"><span class="comment">// 通过transform得到output</span></div><div class="line"><span class="keyword">let</span> vmOutput = viewModel.transform(input : vmInput)</div><div class="line">vmOutput.sections</div><div class="line">        .asDriver()</div><div class="line">        .drive(tableView.rx</div><div class="line">                        .items(dataSource : dataSource))</div><div class="line">        .addDisposableTo(rx_disposeBag)</div></pre></td></tr></table></figure><h3 id="MJRefresh"><a href="#MJRefresh" class="headerlink" title="MJRefresh"></a>MJRefresh</h3><blockquote><p>❶定义枚举LXFRefreshStatus，用于标志当前刷新状态</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LXFRefreshStatus</span> </span>&#123;</div><div class="line">     <span class="keyword">case</span> <span class="keyword">none</span></div><div class="line">     <span class="keyword">case</span> beingHeaderRefresh</div><div class="line">     <span class="keyword">case</span> endHeaderRefresh</div><div class="line">     <span class="keyword">case</span> beingFooterRefresh</div><div class="line">     <span class="keyword">case</span> endFooterRefresh</div><div class="line">     <span class="keyword">case</span> noMoreData</div><div class="line"> &#125;</div></pre></td></tr></table></figure><blockquote><p>❷LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus<br>给外界订阅，告诉外界的tableView当前的刷新状态</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> refreshStatus = <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt;(.<span class="keyword">none</span>)</div></pre></td></tr></table></figure><ul><li>进行网络请求并得到结果之后，修改refreshStatus的value为相应的LXFRefreshStatus项</li></ul><blockquote><p>❸外界订阅output的refreshStatus,并且根据接收到的值进行相应的操作</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">vmOutput.refreshStatus</div><div class="line">        .asObservable()</div><div class="line">        .subscribe(onNext : &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] status <span class="keyword">in</span> </div><div class="line">          <span class="keyword">switch</span> status &#123;</div><div class="line">           <span class="keyword">case</span> .beingHeaderRefresh:</div><div class="line">                <span class="keyword">self</span>?.tableView.mj_header</div><div class="line">                     .beginRefreshing()</div><div class="line">           <span class="keyword">case</span> .endHeaderRefresh:</div><div class="line">                <span class="keyword">self</span>?.tableView</div><div class="line">                     .mj_header</div><div class="line">                     .endRefreshing()</div><div class="line">           <span class="keyword">case</span> .beingFooterRefresh:</div><div class="line">                <span class="keyword">self</span>?.tableView</div><div class="line">                     .mj_footer</div><div class="line">                     .beginRefreshing()</div><div class="line">           <span class="keyword">case</span> .endFooterRefresh:</div><div class="line">                <span class="keyword">self</span>?.tableView</div><div class="line">                     .mj_footer</div><div class="line">                     .endRefreshing</div><div class="line">           <span class="keyword">case</span> .noMoreData :</div><div class="line">                 <span class="keyword">self</span>?.tableView</div><div class="line">                       .endRefreshingWithNoMoreData()</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">             <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">  &#125;).addDisposable(rx_disposeBag)</div></pre></td></tr></table></figure><blockquote><p>❹output提供一个requestCommond用于请求数据<br>PublishSubject 的特点：即可以作为Observable，也可以作为Observer，就是可以发送信号，也可以订阅信号<br>外界通过该属性告诉viewModel加载数据（传入的值是为了标志是否重新加载）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> requestCommond = <span class="type">PublishSubject</span>&lt;<span class="type">Bool</span>&gt;()</div></pre></td></tr></table></figure><blockquote><p>在transform中，对生成的output的requestCommond进行订阅</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">output.requestCommond</div><div class="line">      .subscribe(onNext : &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] isReloadData <span class="keyword">in</span></div><div class="line">      <span class="keyword">self</span>.index = isReload ?<span class="number">1</span>:<span class="keyword">self</span>.index+<span class="number">1</span></div><div class="line">      lxfNetTool.request(.data(type:input.category,</div><div class="line">                               size:<span class="number">10</span>,</div><div class="line">                               index:<span class="keyword">self</span>.index</div><div class="line">                               )</div><div class="line">                         )</div><div class="line">                 .mapArray(<span class="type">LXFModel</span>.<span class="keyword">self</span>)</div><div class="line">                 .subscribe(&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (event) <span class="keyword">in</span></div><div class="line">                     <span class="keyword">switch</span> event &#123;</div><div class="line">                        <span class="keyword">case</span> <span class="keyword">let</span>.next(modelArr):</div><div class="line">                           <span class="keyword">self</span>?.models.value = isReloadData?modelArr:(<span class="keyword">self</span>?.models.value??[])+modelArr</div><div class="line">                           <span class="type">LXFProgressHUD</span>.showSuccess(<span class="string">"加载成功"</span>)</div><div class="line">                        <span class="keyword">case</span> <span class="keyword">let</span>.error(error):</div><div class="line">                           <span class="type">LXFProgressHUD</span>.showError(error.localizedDescription)</div><div class="line">                        <span class="keyword">case</span> .completed:</div><div class="line">                           output.refreshStatus.value = isReloadData?.endHeaderRefresh:.endFooterRefresh</div><div class="line">                     &#125;</div><div class="line">                  &#125;)</div><div class="line">                  .addDisposableTo(slf.rx_disposeBag)</div><div class="line">     &#125;)</div><div class="line">     .addDisposableTo(rx_disposeBag)</div></pre></td></tr></table></figure><blockquote><p>❺在ViewController中初始化刷新控件<br>为tableView设置刷新控件，并且在创建刷新控件的回调中使用output的requestCommond发射信号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tableView.mj_header = <span class="type">MJRefreshNormalHeader</span>(refreshingBlock:&#123;</div><div class="line">  vmOutput.requestCommond</div><div class="line">          .onNext(<span class="literal">true</span>)</div><div class="line"> &#125;)</div><div class="line"></div><div class="line">tableView.mj_footer = <span class="type">MJRefreshAutoNormalFooter</span>(refreshingBlock:&#123;</div><div class="line">  vmOutput.requestCommond</div><div class="line">          .onNext(<span class="literal">false</span>)</div></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>ViewController已经拿到output，当下拉加载数据的时候，使用output的requestCommond发射信息，告诉viewModel我们要加载数据</li><li>viewModel请求数据，在处理完json转模型或模型数组后修改models，当models的值被修改的时候会发信号给sections，sections在ViewController已经绑定到tableView的items了，所以此时tableView的数据会被更新。接着我们根据请求结果，修改output的refreshStatus属性的值</li><li>当output的refreshStatus属性的值改变后，会发射信号，由于外界之前已经订阅了output的refreshStatus，此时就会根据refreshStatus的新值来处理刷新控件的状态</li></ul><p><a href="https://github.com/LinXunFeng/RxSwiftDemo" target="_blank" rel="external">原文Demo</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxSwift+Moya+登录+搜索</title>
      <link href="/2018/03/01/RxSwift/Demo/RxSwift+Moya+%E7%99%BB%E5%BD%95+%E6%90%9C%E7%B4%A2/"/>
      <content type="html"><![CDATA[<h1 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h1><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>登录注册功能</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Closures闭包-使用分析</title>
      <link href="/2018/02/28/Swift/Grammar/Closures%E9%97%AD%E5%8C%85-%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/"/>
      <content type="html"><![CDATA[<h1 id="OC-Block"><a href="#OC-Block" class="headerlink" title="OC-Block"></a>OC-Block</h1><blockquote><p>Block通常会用在网络请求中，请求到数据后然后回调</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HttpTool</span></span></div><div class="line">-(<span class="keyword">void</span>)loadData:(<span class="keyword">void</span>(^)(<span class="built_in">NSString</span> * json))callBack&#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">         <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">            callBack(<span class="string">@"222"</span>);</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">   <span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) HttpTool * tool;</div><div class="line">   <span class="keyword">@end</span></div><div class="line">   <span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line">   - (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">     [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.tool = [HttpTool new];</div><div class="line">  &#125;</div><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</div><div class="line">        [<span class="keyword">self</span>.tool loadData:^(<span class="built_in">NSString</span> *json) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,json);</div><div class="line">          &#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><h1 id="用闭包来重写上面的逻辑"><a href="#用闭包来重写上面的逻辑" class="headerlink" title="用闭包来重写上面的逻辑"></a>用闭包来重写上面的逻辑</h1><blockquote><p>1，闭包的类型：(参数列表) -&gt; (返回值列表)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpTool</span>:<span class="title">NSObject</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(callBack:<span class="params">(json:String)</span></span></span>-&gt;())&#123;</div><div class="line">  dispatch_async(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>)) &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"\(NSthread.currentThread)"</span>)</div><div class="line">      dispatch_sync(dispatch_get_main_queue(), &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"\((NSThread.currentThread())"</span>)</div><div class="line">      callBack(json:<span class="string">"json"</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>2.调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> tool : <span class="type">HttpTool</span> = <span class="type">HttpTool</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">&#125;</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</div><div class="line">  tool.loadData&#123;(json) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"\(json)"</span>)</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h1><h2 id="black循环引用"><a href="#black循环引用" class="headerlink" title="black循环引用"></a>black循环引用</h2><blockquote><p>weak self<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">  __weak ViewController * weakSelf = self;</div><div class="line">      [self.tool loadData:^(NSString *json) &#123;</div><div class="line">          NSLog(@&quot;%@&quot;,json);</div><div class="line">          weakSelf.view.backgroundColor = [UIColor redColor];</div><div class="line">             &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><h2 id="闭包的循环引用"><a href="#闭包的循环引用" class="headerlink" title="闭包的循环引用"></a>闭包的循环引用</h2><blockquote><p>闭包强引用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit </div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Httptool</span>: <span class="title">NSObject</span></span>&#123;</div><div class="line">    <span class="comment">//声明成可选类型的闭包</span></div><div class="line">    <span class="keyword">var</span> callBack :((json : <span class="type">String</span>)-&gt;())?</div><div class="line">     <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(callBack : <span class="params">(json : String)</span></span></span>-&gt;()) &#123;</div><div class="line">      <span class="comment">//强引用</span></div><div class="line">      <span class="keyword">self</span>.callBack = callBack</div><div class="line">       dispatch_async(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>)) &#123;</div><div class="line">       <span class="built_in">print</span>(<span class="string">"\(NSThread.currentThread())"</span>)</div><div class="line">        dispatch_sync(dispatch_get_main_queue(), &#123;</div><div class="line">         <span class="built_in">print</span>(<span class="string">"\(NSThread.currentThread())"</span>)</div><div class="line">          callBack(json: <span class="string">"json"</span>)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>解决闭包循环引用的3种方式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">     <span class="keyword">var</span> tool : <span class="type">HttpTool</span> = <span class="type">HttpTool</span>()</div><div class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</div><div class="line">          <span class="comment">/*</span></div><div class="line"><span class="comment">        weak var weakSelf = self</span></div><div class="line"><span class="comment">        tool.loadData &#123; (json) in</span></div><div class="line"><span class="comment">        print("\(json)")</span></div><div class="line"><span class="comment">        //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行</span></div><div class="line"><span class="comment">        //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf</span></div><div class="line"><span class="comment">        weakSelf?.view.backgroundColor = UIColor.redColor()</span></div><div class="line"><span class="comment">          &#125;</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        </div><div class="line">          tool.loadData &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (json) <span class="keyword">in</span></div><div class="line">               <span class="built_in">print</span>(<span class="string">"\(json)"</span>)</div><div class="line">               <span class="comment">//weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行</span></div><div class="line">               <span class="comment">//如果有值，系统会自动将weakSelf进行解包，并使用weakSelf</span></div><div class="line">                 <span class="keyword">self</span>?.view.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">           &#125;</div><div class="line">           </div><div class="line">              <span class="comment">/*</span></div><div class="line"><span class="comment">              //这种写法一旦self为空，就会报错</span></div><div class="line"><span class="comment">              //unowned相当于oc中的__unsafe_unretained，__unsafe_unretained 修饰的弱引用，如果指向的对象销毁，那么指针指向之前的内存地址，很容易产生坏内存访问，野指针。僵尸对象</span></div><div class="line"><span class="comment">              tool.loadData &#123;[unowned self] (json) in</span></div><div class="line"><span class="comment">               print("\(json)")</span></div><div class="line"><span class="comment">               //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行</span></div><div class="line"><span class="comment">               //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf</span></div><div class="line"><span class="comment">                self.view.backgroundColor = UIColor.redColor()</span></div><div class="line"><span class="comment">               &#125;</span></div><div class="line"><span class="comment">    */</span></div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//相当于oc中的dealloc方法</span></div><div class="line">    <span class="keyword">deinit</span>&#123;</div><div class="line">     <span class="built_in">print</span>(<span class="string">"deinit"</span>)</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h1 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h1><blockquote><p>普通写法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tool.loadData(&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (json) <span class="keyword">in</span> </div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(json)"</span>)</div><div class="line">     <span class="comment">//weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行</span></div><div class="line">      <span class="comment">//如果有值，系统会自动将weakSelf进行解包，并使用weakSelf</span></div><div class="line">     <span class="keyword">self</span>?.view.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>尾随闭包一</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tool.loadData () &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (json) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(json)"</span>)</div><div class="line">     <span class="comment">//weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行</span></div><div class="line">     <span class="comment">//如果有值，系统会自动将weakSelf进行解包，并使用weakSelf</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>尾随闭包二，当闭包为函数的最后一个参数时，会自动省略()</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tool.loadData &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (json) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"\(json)"</span>)</div><div class="line">  <span class="comment">//weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行</span></div><div class="line">  <span class="comment">//如果有值，系统会自动将weakSelf进行解包，并使用weakSelf</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/3a4e72b5eefd" target="_blank" rel="external"></a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-Func-观察者与陀螺仪传感器的应用（基于PanoramaImageView）</title>
      <link href="/2018/02/28/SceneKit/Func/SceneKit-Func-%E8%A7%82%E5%AF%9F%E8%80%85%E4%B8%8E%E9%99%80%E8%9E%BA%E4%BB%AA%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/enjoy_azad/article/details/53981091" target="_blank" rel="external">资料来源</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-Grammar-坐标区域集合交互检测.md</title>
      <link href="/2018/02/27/OC/Grammar/OC-%20%E5%9D%90%E6%A0%87%E5%8C%BA%E5%9F%9F%E9%9B%86%E5%90%88%E4%BA%A4%E4%BA%92%E6%A3%80%E6%B5%8B/"/>
      <content type="html"><![CDATA[<h1 id="坐标区域集合交互检测"><a href="#坐标区域集合交互检测" class="headerlink" title="坐标区域集合交互检测"></a>坐标区域集合交互检测</h1><h2 id="点与区域"><a href="#点与区域" class="headerlink" title="点与区域"></a>点与区域</h2><blockquote><p>判断给定的点是否被一个CGRect包含 CGRectContainsPoint函数</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> contains = <span class="built_in">CGRectContainsPoint</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGPoint</span> point);</div></pre></td></tr></table></figure><p>##区域包含</p><blockquote><p>判断一个CGRect是否包含再另一个CGRect里面,常用与测试给定的对象之间是否又重叠</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> contains = <span class="built_in">CGRectContainsRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2);</div></pre></td></tr></table></figure><h2 id="区域交集"><a href="#区域交集" class="headerlink" title="区域交集"></a>区域交集</h2><blockquote><p>判断两个结构体是否有交错.可以用CGRectIntersectsRect</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> contains = <span class="built_in">CGRectIntersectsRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2);</div></pre></td></tr></table></figure><h2 id="边缘的坐标"><a href="#边缘的坐标" class="headerlink" title="边缘的坐标"></a>边缘的坐标</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">float</span> float_ = <span class="built_in">CGRectGetMaxX</span>(<span class="built_in">CGRect</span> rect);返回矩形右边缘的坐标</div><div class="line"><span class="built_in">CGRectGetMinY</span>返回矩形顶部的坐标</div><div class="line"><span class="built_in">CGRectGetMidX</span>返回矩形中心X的坐标</div><div class="line"><span class="built_in">CGRectGetMidY</span> 返回矩形中心Y的坐标</div><div class="line"><span class="built_in">CGRectGetMinX</span> 返回矩形左边缘的坐标</div><div class="line"><span class="built_in">CGRectGetMaxY</span> 返回矩形底部的坐标</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
          <category> NSSet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> UIKit </tag>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNMaterial-材质-Base</title>
      <link href="/2018/02/15/SceneKit/Grammar/SCNMaterial-%E6%9D%90%E8%B4%A8/SCNMaterial-%E6%9D%90%E8%B4%A8-Base/"/>
      <content type="html"><![CDATA[<h1 id="SCNMaterial"><a href="#SCNMaterial" class="headerlink" title="SCNMaterial"></a>SCNMaterial</h1><blockquote><p>材质:几何体的外观,颜色，反光强度等等</p></blockquote><h2 id="①光照模型"><a href="#①光照模型" class="headerlink" title="①光照模型"></a>①光照模型</h2><blockquote><p>提到材质就不得不提到光照模型。在现实生活中有太阳，日光灯等可以产生光的光源，光照射在物体上，不同的物体呈现出不同的质感，这都是很平常的<br>在计算机里，使用光源照射3D模型，产生出想要的质感就不是那么平常。在OpenGL中，我们需要使用Shader根据提供的材质参数和光照来计算每个像素的颜色，从而产生物体被光照射的感觉<br>想要了解Shader中是如何实现光照模型的基本光照和高级光照其中有涉及到lambert和blinn两种光照模型</p></blockquote><h3 id="❶Lambert"><a href="#❶Lambert" class="headerlink" title="❶Lambert"></a>❶Lambert</h3><ul><li>使用SCNMaterial来表示材质</li><li>SCNMaterial的一个属性lightingModel表示的就是使用何种光照模型。</li><li>选择Lambert光照模型，并且设置如下属性，并且把material赋给球形几何体geometry</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> material = <span class="type">SCNMaterial</span>()</div><div class="line">material.lightingModel = .lambert</div><div class="line">material.diffuse.contents = <span class="type">UIColor</span>.red</div><div class="line">material.ambient.contents = <span class="type">UIColor</span>.<span class="keyword">init</span>(white: <span class="number">0.1</span>, alpha: <span class="number">1</span>)</div><div class="line">material.locksAmbientWithDiffuse = <span class="literal">false</span></div><div class="line">geometry.materials = [material]</div></pre></td></tr></table></figure><p><img src="http://ot0mms4k8.bkt.clouddn.com/SCNMaterial-001.png" alt=""></p><blockquote><p>使用的灯光在(0,6,3)处，所以球体上面是照射到灯光的，下面是灰色的。这里涉及到了两个光照分量，diffuse和ambient<br>diffuse表示几何体的本色，所以灯光照射到的部分就是本色红色，注意用的灯光是白色的，如果灯光是其他颜色，则会和几何体的本色混合，也就是两个颜色进行3维向量乘法。那灯光照射不到的地方呢？就是ambient环境光<br>环境光的出现是为了让灯光照射不到的地方不会是全黑，你可以试试把环境光改成其他颜色，看看渲染结果如何<br>由于PBR光照模型中ambient和diffuse是锁定的，所以需要把locksAmbientWithDiffuse设置为false，否则ambient只能和diffuse取相同的值。关于PBR光照模型我会在后面的文章单独介绍。最后将material赋值给几何体，这里material是被放在一个数组里赋值的，如果你的几何体有多个element，系统会根据顺序为每个element提供不同的材质。第n个element会得到第n%材质个数个材质</p><p>diffuse还和法线相关，法线和光线的夹脚越小，则越亮。法线就是上一篇代码里的normals<br>总的来说，Lambert模型就是最终颜色=光线和法线夹脚系数<em>光照颜色</em>本色diffuse + 环境色ambient</p></blockquote><h3 id="❷Blinn"><a href="#❷Blinn" class="headerlink" title="❷Blinn"></a>❷Blinn</h3><blockquote><p>Blinn光照模型其实就是在lambert基础上加上高光，我们将光照模型修改为.blinn，再设置高光的属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> material.lightingModel = .blinn</div><div class="line">material.specular.contents = <span class="type">UIColor</span>.white</div><div class="line">material.shininess = <span class="number">1.0</span></div></pre></td></tr></table></figure><blockquote><p>当光线被反射后和我们视线的夹脚比较小的时候，在金属或者玻璃等反光材质下，会看到非常亮的区域，我们称之为高光。越是光滑的物体，高光区域会越小。我们用shininess来表示物体的表面有多闪（光滑），它的值从0到1。值越大，越光滑。下面是值为0.2和1的效果图。material.specular表示高光的颜色，不过最终呈现的高光颜色受material.specular和灯光的颜色共同影响，是它们颜色值的三维向量相乘</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/SCNMaterial-002.png" alt=""></p><p><img src="http://ot0mms4k8.bkt.clouddn.com/SCNMaterial-002-2.png" alt=""></p><h2 id="②材质参数的取值"><a href="#②材质参数的取值" class="headerlink" title="②材质参数的取值"></a>②材质参数的取值</h2><blockquote><p>上面我只给材质的参数赋予了颜色值，除了颜色，还可以赋予贴图，或者说是图片<br>diffuse和specular都是可以接受图片对象的。比如给diffuse赋值一张地球的贴图。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">material.diffuse.contents = <span class="type">UIImage</span>.<span class="keyword">init</span>(named: <span class="string">"earth.jpg"</span>)</div></pre></td></tr></table></figure><p><img src="http://ot0mms4k8.bkt.clouddn.com/SCNMaterial-003.png" alt=""></p><blockquote><p>效果如下</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/SCNMaterial-003-2.png" alt=""></p><blockquote><p>specular接受的贴图就比较特殊，是一张黑白两色的图。图中黑色对应的地方将没有高光</p></blockquote><p><img src="" alt="004-1"></p><blockquote><p>使用了specular贴图<br>显大海部分高光</p></blockquote><p><img src="" alt="004-2"></p><blockquote><p>没有使用specular贴图</p></blockquote><p><img src="" alt="004-3"></p><blockquote><p>不管是什么贴图，都是需要几何体提供UV数据的，也就是所谓的贴图坐标，在上一篇的代码中有涉及到</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> uvs: [<span class="type">CGPoint</span>] = [</div><div class="line">        <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">1</span>),</div><div class="line">        <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>),</div><div class="line">        <span class="type">CGPoint</span>(x: <span class="number">1</span>, y: <span class="number">0</span>),</div><div class="line">        <span class="type">CGPoint</span>(x: <span class="number">1</span>, y: <span class="number">1</span>),</div><div class="line">        ]</div><div class="line">    <span class="keyword">let</span> uvSource = <span class="type">SCNGeometrySource</span>.<span class="keyword">init</span>(textureCoordinates:</div><div class="line">uvs)</div></pre></td></tr></table></figure><p>系统提供的球形几何体已经有了UV数据，所以才可以轻松的进行贴图，关于贴图的更多信息，会在后面的文章中介绍，或者你也可以去看我写的基于OpenGL的贴图文章。</p><h2 id="③"><a href="#③" class="headerlink" title="③"></a>③</h2><h2 id="④"><a href="#④" class="headerlink" title="④"></a>④</h2><h2 id="⑤"><a href="#⑤" class="headerlink" title="⑤"></a>⑤</h2><p><a href="https://www.jianshu.com/p/d71c1bfee6d3" target="_blank" rel="external">https://www.jianshu.com/p/d71c1bfee6d3</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
          <category> SCNMaterial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> SCNMaterial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxSwift-Grammar-基本概念简单总结使用</title>
      <link href="/2018/02/11/RxSwift/Grammar/%E6%A6%82%E5%BF%B5%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/scott-mr/p/7234769.html" target="_blank" rel="external"></a></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>①Observable 和 Observer</li><li>②subscribe 和 subscribe(onNext:)</li><li>③Dispose 和 DisposeBag</li><li>④observeOn() 和 subscribeOn()</li><li>⑤shareReplay</li><li>⑥自定义operator</li><li>⑦Driver</li><li>⑧map 和 flatMap 何时使用</li><li>⑨UIBindingObserver</li></ul><h2 id="①Observable-和-Observer"><a href="#①Observable-和-Observer" class="headerlink" title="①Observable 和 Observer"></a>①Observable 和 Observer</h2><blockquote><p>Observable就是可被观察的，也就是我们说的宝宝，他也是事件源。而Observer就是我们的观察者，也就是当收到事件的时候去做某些处理的爸爸妈妈。观察者需要去订阅(subscribe)被观察者，才能收到Observable的事件通知消息</p></blockquote><h2 id="②subscribe-和-subscribe-onNext"><a href="#②subscribe-和-subscribe-onNext" class="headerlink" title="②subscribe 和 subscribe(onNext:)"></a>②subscribe 和 subscribe(onNext:)</h2><blockquote><p>subscribe是订阅sequence发出的事件，比如next事件，error事件等。<br>而subscribe(onNext:)是监听sequence发出的next事件中的element进行处理，他会忽略error和completed事件<br>相对应的还有subscribe(onError:) 和 subscribe(onCompleted:)</p></blockquote><h2 id="③Dispose-和-DisposeBag"><a href="#③Dispose-和-DisposeBag" class="headerlink" title="③Dispose 和 DisposeBag"></a>③Dispose 和 DisposeBag</h2><blockquote><p>当监听一个sequence的时候，有消息事件来了，我们做某些事情。但是这个sequence不再发送消息事件了，那么我们的监听也就没有什么存在的价值了，所以我们需要释放我们这些监听资源，其实也就是内存资源释放。<br>释放某一个监听的时候，我们有两种方式处理：</p><p>可以手动调用释放方式，但是我们一般不适用这种方式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 关于scheduler，我们会在下面讲到</span></div><div class="line"><span class="keyword">let</span> subscription = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">SerialDispatchQueueScheduler</span>.<span class="keyword">init</span>(internalSerialQueueName: <span class="string">"scott"</span>))</div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)  <span class="comment">//observeOn也会在下面讲到</span></div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2.0</span>)</div><div class="line">    </div><div class="line">subscription.dispose()</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">next(<span class="number">0</span>)</div><div class="line">next(<span class="number">1</span>)</div><div class="line">next(<span class="number">2</span>)</div><div class="line">next(<span class="number">3</span>)</div><div class="line">next(<span class="number">4</span>)</div><div class="line">next(<span class="number">5</span>)</div></pre></td></tr></table></figure><blockquote><p>比如上面这个例子，创建了一个subscription监听，在两秒以后我们不需要了，手动调用dispose()方法，就能释放监听资源，不再打印信息。上面的subscription不论是在哪个线程中监听，就算在主线程中调用的dispose()方法一样会销毁资源</p><p>除了上述手动释放资源外，还有一种自动方式，推荐大家使用这种方式，这种方式就像iOS中的ARC，会在适当的时候销毁观察者，自动释放资源</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line">   .subscribe &#123; event <span class="keyword">in</span></div><div class="line">       <span class="built_in">print</span>(event)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div><div class="line">``` </div><div class="line">&gt;如上个例子，我们创建一个disposeBag来盛放我们需要管理的资源，然后把新建的监听都放进去，会在适当的时候销毁这些资源。如果你需要立即释放资源只需要新建一个<span class="type">DisposeBag</span>()，那么上一个<span class="type">DisposeBag</span>就会被销毁</div><div class="line"></div><div class="line">## ④observeOn() 和 subscribeOn()</div><div class="line"></div><div class="line">&gt; 这两个东西刚开始看的时候也是一脸懵逼，就知道最好多用observeOn()，但是不知道为什么，下面我们就来揭开它们的面纱看下它们的真面目吧</div><div class="line"></div><div class="line">区别其实我感觉就一句话，subscribeOn()设置起点在哪个线程，observeOn()设置了后续工作在哪个线程。例如：</div><div class="line"></div><div class="line">```swift</div><div class="line"> someObservable </div><div class="line">    .doOneThing()  <span class="comment">// 1</span></div><div class="line">    .observeOn(<span class="type">MainRouteScheduler</span>.instance) <span class="comment">// 2</span></div><div class="line">    .subscribeOn(<span class="type">OtherScheduler</span>.instance) <span class="comment">// 3</span></div><div class="line">    .subscribeNext &#123; <span class="comment">// 4</span></div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><ul><li>所有动作都发生在当前的默认线程</li><li>observeOn()转换线程到主线程，下面所有的操作都在主线程</li><li>subscribeOn()规定动作一开始不是发生在默认线程，而是在OtherScheduler了。</li><li>如果我们之前没有调用observeOn()，那么这边会在OtherScheduler发生，但是我们前面调用了observeOn()，所以这个动作会在主线程中调用</li><li>总结一下：subscribeOn()只是影响事件链开始默认的线程，而observeOn()规定了下一步动作发生在哪个线程中。</li></ul><h2 id="⑤shareReplay"><a href="#⑤shareReplay" class="headerlink" title="⑤shareReplay"></a>⑤shareReplay</h2><blockquote><p>看官方项目里面的Demo时，我也很疑惑，为什么很多的sequence后面都有shareReplay(1)呢？想的昏头涨脑。<br>这里我就给大家讲解一下我的理解吧。先看一个例子：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>.just(<span class="string">"🤣"</span>).<span class="built_in">map</span>&#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;</div><div class="line">    </div><div class="line">observable.subscribe&#123;<span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)&#125;.disposed(by: disposeBag)</div><div class="line">observable.subscribe&#123;<span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)&#125;.disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="comment">//打印结果：</span></div><div class="line">🤣</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div><div class="line">🤣</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div></pre></td></tr></table></figure><blockquote><p>大家发现没有，map()函数执行了两次，但是有些时候，我们并不想让map()函数里面的东西执行两次，比如map()函数里面执行的是网络请求，我只需要执行一次请求，然后把结果提供给大家使用就行了，多余的请求会增加负担。所以这时候就需要使用shareReplay(1)了。这里面的数字一般是1，只执行一次。(ps:我改成 2，3 也只打印一次)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>.just(<span class="string">"🤣"</span>).<span class="built_in">map</span>&#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;.shareReplay(<span class="number">1</span>)</div><div class="line">    </div><div class="line">observable.subscribe&#123;<span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)&#125;.disposed(by: disposeBag)</div><div class="line">observable.subscribe&#123;<span class="built_in">print</span>(<span class="string">"Even:\($0)"</span>)&#125;.disposed(by: disposeBag)</div><div class="line"><span class="comment">//打印结果：</span></div><div class="line">🤣</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div><div class="line"><span class="type">Even</span>:next(())</div><div class="line"><span class="type">Even</span>:completed</div></pre></td></tr></table></figure><h2 id="⑥自定义operator"><a href="#⑥自定义operator" class="headerlink" title="⑥自定义operator"></a>⑥自定义operator</h2><blockquote><p>自定义操作符很简单，官方推荐尽量使用标准的操作符，但是你也可以定义自己的操作符，文档上说有两种方法，这里介绍一下常用的一种方法吧。</p></blockquote><p>例如我们自定义一个map操作符:</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">ObserverType</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myMap</span>&lt;R&gt;<span class="params">(transform: E -&gt; R)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">R</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.create&#123; observer <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> subscription = <span class="keyword">self</span>.subscribe &#123;e <span class="keyword">in</span></div><div class="line">                <span class="keyword">switch</span> e&#123;</div><div class="line">                <span class="keyword">case</span> .next(<span class="keyword">let</span> value):</div><div class="line">                    <span class="keyword">let</span> result = transform(value)</div><div class="line">                    observer.on(.next(result))</div><div class="line">                <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</div><div class="line">                    observer.on(.error(error))</div><div class="line">                <span class="keyword">case</span> .completed:</div><div class="line">                    observer.on(.completed)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> subscription</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参数是一个闭包，其中闭包参数是E类型返回值是R类型，map函数的返回值是一个Observable类型</p></blockquote><h2 id="⑦Driver"><a href="#⑦Driver" class="headerlink" title="⑦Driver"></a>⑦Driver</h2><blockquote><p>讲解Driver之前我们现在看看下面的🌰：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> results = query.rx.text</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .bindTo(resultCount.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">results</div><div class="line">    .bindTo(resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><ul><li>首先创建一个可监听序列results，其中flatMapLatest下面会讲;</li><li>然后将results绑定到resultCount.rx.text上;</li><li>将results绑定到resultsTableView上.</li></ul><blockquote><p>上面程序会出现下面几个异常：</p></blockquote><ul><li>如果fetchAutoCompleteItems出错，那么它绑定的UI将不再收到任何事件消息；</li><li>如果fetchAutoCompleteItems发生在后台线程，那么它绑定的事件也将在后台线程执行，这样更新UI会造成crash；</li><li>有两次绑定，fetchAutoCompleteItems就会执行两次</li></ul><blockquote><p>当然针对以上问题，我们也有解决方案，针对第三点，我们可以使用神器shareReplay(1)保证只执行一次，可以使用observeOn()保证后面所有操作在主线程完成</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> results = query.rx.text</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">            .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">            .catchErrorJustReturn([])           </div><div class="line">    &#125;</div><div class="line">    .shareReplay(<span class="number">1</span>)</div><div class="line">                                 </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .bindTo(resultCount.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">results</div><div class="line">    .bindTo(resultTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>也可以使用Driver来解决</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> results = query.rx.text.asDriver()</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">            .asDriver(onErrorJustReturn: [])  <span class="comment">//当遇见错误需要返回什么</span></div><div class="line">    &#125;   <span class="comment">//不需要添加shareReplay(1)</span></div><div class="line">    </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .drive(resultCount.rx.text)     <span class="comment">//和bingTo()功能一样</span></div><div class="line">    .addDisposableTo(disposeBag) </div><div class="line">                                             </div><div class="line">results</div><div class="line">    .drive(resultTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>drive方法只能在Driver序列中使用，Driver有以下特点：</p></blockquote><ul><li>Driver序列不允许发出error，</li><li>Driver序列的监听只会在主线程中。</li></ul><blockquote><p>所以Driver是专为UI绑定量身打造的东西。<br>以下情况你可以使用Driver替换BindTo:</p></blockquote><ul><li>不能发出error;</li><li>在主线程中监听;</li><li>共享事件流;</li></ul><h2 id="⑧map-和-flatMap-何时使用"><a href="#⑧map-和-flatMap-何时使用" class="headerlink" title="⑧map 和 flatMap 何时使用"></a>⑧map 和 flatMap 何时使用</h2><blockquote><p>map函数，接收一个R类型的序列，返回一个R类型的序列，还是原来的序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;R&gt;<span class="params">(<span class="number">_</span> transform: @escaping <span class="params">(<span class="keyword">Self</span>.E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">R</span>) -&gt; <span class="type">RxSwift</span>.<span class="type">Observable</span>&lt;<span class="type">R</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>flatMap函数，接收一个O类型的序列，返回一个O.E类型的序列，也就是有原来序列里元素组成的新序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;O: ObservableConvertibleType&gt;<span class="params">(<span class="number">_</span> selector: @escaping <span class="params">(E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">O</span>)</div><div class="line">       -&gt; <span class="type">Observable</span>&lt;<span class="type">O</span>.<span class="type">E</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>其实这里的map和flatMap在swift中的作用是一样的。map函数可以对原有序列里面的事件元素进行改造，返回的还是原来的序列。而flatMap对原有序列中的元素进行改造和处理，每一个元素返回一个新的sequence，然后把每一个元素对应的sequence合并为一个新的sequence序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>.of(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>).<span class="built_in">map</span>&#123;$<span class="number">0</span> + <span class="string">"scott"</span>&#125;</div><div class="line">    </div><div class="line">observable.subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;).disposed(by: disposeBag</div><div class="line"></div><div class="line"><span class="comment">//打印结果：</span></div><div class="line"></div><div class="line">1scott</div><div class="line">2scott</div><div class="line">3scott</div><div class="line">4scott</div><div class="line">5scott</div></pre></td></tr></table></figure><blockquote><p>使用map对序列中每一个元素进行了处理，返回的是一个元素，而使用flatMap需要返回的序列。那么使用map也返回一个序列看看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">    </div><div class="line">test.subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    <span class="comment">//运行结果:</span></div><div class="line">    <span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.(<span class="type">Just</span> <span class="keyword">in</span> _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>看到结果会打印出每一个序列，下面我们使用merge()方法将这几个序列进行合并:</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;.merge()</div><div class="line">    </div><div class="line">test.subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    运行结果:</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>合并为一个新序列后我们就可以正常打印元素了。下面看看使用faltMap()函数干这件事:</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .flatMap &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">    </div><div class="line">test.subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">    <span class="comment">//运行结果:</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>看下对比是不是一样，这样子对比就清晰了吧。</p></blockquote><ul><li>map函数只能返回原来的那一个序列，里面的参数的返回值被当做原来序列中所对应的元素。</li><li>flatMap函数返回的是一个新的序列，将原来元素进行了处理，返回这些处理后的元素组成的新序列</li><li><p>map函数 + 合并函数 = flatMap函数</p></li><li><p>flatMap函数在实际应用中有很多地方需要用到，比如网络请求，网络请求可能会发生错误，我们需要对这个请求过程进行监听，然后处理错误。只要继续他返回的是一个新的序列</p></li></ul><h2 id="⑨UIBindingObserver"><a href="#⑨UIBindingObserver" class="headerlink" title="⑨UIBindingObserver"></a>⑨UIBindingObserver</h2><blockquote><p>UIBindingObserver这个东西很有用的，创建我们自己的监听者，有时候RxCocoa(RxSwift中对UIKit的一个扩展库)给的扩展不够我们使用，比如一个UITextField有个isEnabled属性，我想把这个isEnabled变为一个observer，我们可以这样做</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UITextField</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> inputEnabled: <span class="type">UIBindingObserver</span>&lt;<span class="type">Base</span>, <span class="type">Result</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: base) &#123; textFiled, result <span class="keyword">in</span></div><div class="line">            textFiled.isEnabled = result.isValid</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>UIBindingObserver是一个类，他的初始化方法中，有两个参数，第一个参数是一个元素本身，第一个参数是一个闭包，闭包参数是元素本身，还有他的一个属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="type">UIElement</span>: <span class="type">UIElementType</span>, binding: @escaping (<span class="type">UIElementType</span>, <span class="type">Value</span>) -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure><ul><li>自定义了一个inputEnabled关联了UITextField的isEnabled属性</li></ul>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-Grammar-SCNCamera-相机-文档</title>
      <link href="/2018/02/05/SceneKit/Grammar/SCNCamera-%E7%9B%B8%E6%9C%BA/SCNCamera-%E7%9B%B8%E6%9C%BA-%E6%96%87%E6%A1%A3/"/>
      <content type="html"><![CDATA[<h1 id="SCNCamera"><a href="#SCNCamera" class="headerlink" title="SCNCamera"></a>SCNCamera</h1><blockquote><p>父类为NSObject</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">&gt;初始化的方法</div><div class="line"></div><div class="line">```swift </div><div class="line"> + (instancetype)camera;</div></pre></td></tr></table></figure><blockquote><p>照相机对象设置名字</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic, copy, nullable) <span class="type">NSString</span> *name;</div></pre></td></tr></table></figure><blockquote><p>X轴方向的视角(默认为60度)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) double xFov;</div></pre></td></tr></table></figure><blockquote><p>Y轴方向的视角(默认为60度)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) double yFov;</div></pre></td></tr></table></figure><blockquote><p>照相机能照到的最近距离(默认值为1)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) double zNear;</div></pre></td></tr></table></figure><blockquote><p>照相机能照到的最远距离(默认值为100)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) double zFar;</div></pre></td></tr></table></figure><blockquote><p>让照相机自动调节最近和最远距离<br>(默认为关闭,开启后,没有最近和最远的限制)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) <span class="type">BOOL</span> automaticallyAdjustsZRange <span class="type">NS_AVAILABLE</span>(<span class="number">10_9</span>, <span class="number">8_0</span>);</div></pre></td></tr></table></figure><blockquote><p>是否开启正投影模式<br>正投影就是说物体在远离或者靠近照相机是,大小保持不变</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) <span class="type">BOOL</span> usesOrthographicProjection;</div></pre></td></tr></table></figure><blockquote><p>设置正投影的比例 (默认为1)<br>这里设置的比例越大,显示的图像越小,你可以这样理解scale = 屏幕的大小:图片的大小</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) double orthographicScale <span class="type">NS_AVAILABLE</span>(<span class="number">10_9</span>, <span class="number">8_0</span>);</div></pre></td></tr></table></figure><blockquote><p>设置焦距(默认为10)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) <span class="type">CGFloat</span> focalDistance <span class="type">NS_AVAILABLE</span>(<span class="number">10_9</span>, <span class="number">8_0</span>);</div></pre></td></tr></table></figure><blockquote><p>设置聚焦时，模糊物体模糊度(默认为0)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) <span class="type">CGFloat</span> focalBlurRadius <span class="type">NS_AVAILABLE</span>(<span class="number">10_9</span>, <span class="number">8_0</span>);</div></pre></td></tr></table></figure><blockquote><p>决定进入焦点和离开焦点的过渡速度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) <span class="type">CGFloat</span> aperture <span class="type">NS_AVAILABLE</span>(<span class="number">10_9</span>, <span class="number">8_0</span>);</div></pre></td></tr></table></figure><blockquote><p>用于检测节点碰撞使用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">@property(nonatomic) <span class="type">NSUInteger</span> categoryBitMask <span class="type">NS_AVAILABLE</span>(<span class="number">10_10</span>, <span class="number">8_0</span>);</div></pre></td></tr></table></figure><p><a href="http://aes.jypc.org/?p=15368" target="_blank" rel="external">参考资料</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
          <category> SCNCamera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> SceneKit </tag>
            
            <tag> SCNCamera </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-Reference-资料</title>
      <link href="/2018/02/05/SceneKit/Reference/Reference-%E8%B5%84%E6%96%99/"/>
      <content type="html"><![CDATA[<p><a href="https://code.i-harness.com/zh-CN/tagged/scenekit" target="_blank" rel="external"> 网速卡。里面文章展不开</a></p><p> <a href="https://www.jianshu.com/p/079a05381f02" target="_blank" rel="external">也就看看而已</a><br> <a href="https://juejin.im/post/5a322530f265da43062ac948" target="_blank" rel="external">参考学习2</a></p><p><a href="https://juejin.im/user/5a311af051882554bd510dd0" target="_blank" rel="external">只能学习而已，太难</a></p><p><a href="https://gitee.com/Roc.Tian/Blog_DEMO" target="_blank" rel="external">没找到博客</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> Reference </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-Grammar-SCNCamera-相机-旋转SCNCamera节点</title>
      <link href="/2018/02/05/SceneKit/Grammar/SCNCamera-%E7%9B%B8%E6%9C%BA/SCNCamera-%E7%9B%B8%E6%9C%BA-%E6%97%8B%E8%BD%ACSCNCamera%E8%8A%82%E7%82%B9/"/>
      <content type="html"><![CDATA[<p><a href="https://code.i-harness.com/zh-CN/q/18775f4" target="_blank" rel="external">参考资料</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
          <category> SCNCamera </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RxSwift-Grammar-Observables</title>
      <link href="/2018/02/01/RxSwift/Grammar/Observables/"/>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote><p>每一个Observable的实例都是一个序列<br>Observable序列相比于Swift序列的关键优势点在于它能够异步地接收元素</p></blockquote><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Observable(ObservableType)</td><td>等效于Sequence</td><td></td></tr><tr><td>observableType.subscribe(_:)</td><td>方法等效于Sequence.makeIterator()</td><td></td></tr><tr><td>ObservableType.subscribe(_:)</td><td>接收一个观察者ObserverType参数,它将被订阅自动接收由可观察到的序列事件和元素，而不是在返回的生成器上手动调用next()</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>如果一个Observable发出一个next事件(Event.next(Element)),它还能够继续发出更多的事件</li><li>如果一个Observable发出一个error事件(Event.error(ErrorType))或者一个completed事件(Event.completed)，那么这个Observable序列就不能给订阅者发送其他的事件了</li></ul><h1 id="Observables-and-Observers-又名subscribers-–-订阅者"><a href="#Observables-and-Observers-又名subscribers-–-订阅者" class="headerlink" title="Observables and Observers(又名subscribers – 订阅者)"></a>Observables and Observers(又名subscribers – 订阅者)</h1><blockquote><p>除非有订阅者，否则Observable不会执行它们的闭包<br>没有订阅者订阅,Observable的闭包将不会被执行</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">_ = Observable&lt;String&gt;.create(&#123; (observingString) -&gt; Disposable in</div><div class="line">      print(&quot;the code will not be executed&quot;)</div><div class="line">      observingString.onNext(&quot;😁&quot;)</div><div class="line">      observingString.onCompleted()</div><div class="line">      return Disposables.create()</div><div class="line">  &#125;)</div></pre></td></tr></table></figure><blockquote><p>有订阅者订阅,Observable的闭包将会被执行</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observingString) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">       <span class="built_in">print</span>(<span class="string">"the code will be executed"</span>)</div><div class="line">       observingString.onNext(<span class="string">"😁"</span>)</div><div class="line">       observingString.onCompleted()</div><div class="line">       <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">   &#125;).subscribe(&#123; (event) <span class="keyword">in</span></div><div class="line">       <span class="built_in">print</span>(event)</div><div class="line">   &#125;)</div></pre></td></tr></table></figure><ul><li>subscribe(_:)返回一个一次性的实例，该实例表示一个可使用的资源，如订阅。在前面的简单示例中，它被忽略了，但是应该正常地处理它。这通常意味着将它添加到一个DisposeBag实例中</li></ul><h1 id="Creating-and-Subscribing-to-Observables"><a href="#Creating-and-Subscribing-to-Observables" class="headerlink" title="Creating and Subscribing to Observables"></a>Creating and Subscribing to Observables</h1><blockquote><p>有几种方式创建和订阅Observables:</p></blockquote><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><blockquote><p>创建一个永不终止且不发出任何事件的序列。更多详情</p></blockquote><pre><code></code></pre><p><a href="http://www.cnblogs.com/scott-mr/p/7211316.html" target="_blank" rel="external"></a></p>]]></content>
      
      <categories>
          
          <category> RxSwift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RxSwift-Grammar-支持的操作符</title>
      <link href="/2018/01/31/RxSwift/Grammar/%E6%94%AF%E6%8C%81%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <content type="html"><![CDATA[<p>RxSwift 支持的操作符</p><p>在某些情况，由于不同平台/实现方式，相同的操作符有多个别名，有时相同的操作命名也不一样，有些是因为历史的原因，但是还有一些是因为语言的预留关键字。</p><p>当缺少社区共识的时候，RxSwift 通常会包含多个别名。</p><p>默认情况下，操作符是没有状态的。<br>创建 Observable</p><pre><code>asObservablecreatedeferredemptyerrortoObservable (array)intervalneverjustofrangerepeatElementtimer</code></pre><p>变换 Observable</p><pre><code>bufferflatMapflatMapFirstflatMapLatestmapscanwindow</code></pre><p>过滤 Observable</p><pre><code>debounce / throttledistinctUntilChanged`elementAtfiltersampleskiptaketakeLastsingle</code></pre><p>联合 Observable</p><pre><code>mergestartWithswitchLatestcombineLatestzip</code></pre><p>错误处理操作符</p><pre><code>catchretryretryWhen</code></pre><p>Observable Utility Operators</p><pre><code>delaySubscriptiondo / doOnNextobserveOn / observeSingleOnsubscribesubscribeOntimeoutusingdebug</code></pre><p>条件和 Bool 操作符</p><pre><code>ambskipWhileskipUntiltakeUntiltakeWhile</code></pre><p>数学和聚合操作符</p><pre><code>concatreduce / aggregatetoArray</code></pre><p>连接 Observable 操作符</p><pre><code>multicastpublishrefCountreplayshareReplay创建新的操作符也是相当简单的。</code></pre><p><a href="http://blog.csdn.net/yangmeng13930719363/article/details/51905739" target="_blank" rel="external"></a></p>]]></content>
      
      <categories>
          
          <category> 520 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RxSwift-Grammar-创建Observable对象的方法</title>
      <link href="/2018/01/31/RxSwift/Grammar/%E5%88%9B%E5%BB%BAObservable%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="①never"><a href="#①never" class="headerlink" title="①never"></a>①never</h2><blockquote><p>never就是创建一个sequence，但是<strong>不发出任何事件信号</strong></p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5001.png" alt="001"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="keyword">let</span> neverSequence = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.never()</div><div class="line"> </div><div class="line"><span class="keyword">let</span> neverSequenceSubscription = neverSequence</div><div class="line"> .subscribe &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"This will never be printed"</span>)</div><div class="line"> &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="comment">// 结果是什么都不打印y</span></div></pre></td></tr></table></figure><h2 id="②empty"><a href="#②empty" class="headerlink" title="②empty"></a>②empty</h2><blockquote><p>empty就是创建一个空的sequence,只能发出一个completed事件</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5002.png" alt="002"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">completed</div></pre></td></tr></table></figure><h2 id="③just"><a href="#③just" class="headerlink" title="③just"></a>③just</h2><blockquote><p>just是创建一个sequence只能发出一种特定的事件，能正常结束</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5003.png" alt="003"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.just(<span class="string">"🔴"</span>)</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">next(🔴)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="④of"><a href="#④of" class="headerlink" title="④of"></a>④of</h2><blockquote><p>of是创建一个sequence能发出很多种事件信号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐶"</span>, <span class="string">"🐱"</span>, <span class="string">"🐭"</span>, <span class="string">"🐹"</span>)</div><div class="line">    .subscribe(onNext: &#123; element <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐭</div><div class="line">🐹</div></pre></td></tr></table></figure><blockquote><p>把上面的onNext:去掉的话，结果会是这样子，也正好对应了我们subscribe中，subscribe只监听事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  next(🐶)</div><div class="line">next(🐱)</div><div class="line">next(🐭)</div><div class="line">next(🐹)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="⑤from"><a href="#⑤from" class="headerlink" title="⑤from"></a>⑤from</h2><blockquote><p>from就是从集合中创建sequence，例如数组，字典或者Set</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.from([<span class="string">"🐶"</span>, <span class="string">"🐱"</span>, <span class="string">"🐭"</span>, <span class="string">"🐹"</span>])</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h2 id="⑥create"><a href="#⑥create" class="headerlink" title="⑥create"></a>⑥create</h2><blockquote><p>自定义可观察的sequence<br>create操作符传入一个观察者observer，然后调用observer的onNext，onCompleted和onError方法。返回一个可观察的obserable序列</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5006.png" alt="006"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> myJust = &#123; (element: <span class="type">String</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">        observer.on(.next(element))</div><div class="line">        observer.on(.completed)</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">myJust(<span class="string">"🔴"</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">next(🔴)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="⑦range"><a href="#⑦range" class="headerlink" title="⑦range"></a>⑦range</h2><blockquote><p>range就是创建一个sequence，他会发出这个范围中的从开始到结束的所有事件</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5007.png" alt="007"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">10</span>)</div><div class="line"> .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  next(<span class="number">1</span>)</div><div class="line">  next(<span class="number">2</span>)</div><div class="line">next(<span class="number">3</span>)</div><div class="line">next(<span class="number">4</span>)</div><div class="line">next(<span class="number">5</span>)</div><div class="line">next(<span class="number">6</span>)</div><div class="line">next(<span class="number">7</span>)</div><div class="line">next(<span class="number">8</span>)</div><div class="line">next(<span class="number">9</span>)</div><div class="line">next(<span class="number">10</span>)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="⑧repeatElement"><a href="#⑧repeatElement" class="headerlink" title="⑧repeatElement"></a>⑧repeatElement</h2><blockquote><p>创建一个sequence，发出特定的事件n次</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5008.png" alt="008"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.repeatElement(<span class="string">"🔴"</span>)</div><div class="line">    .take(<span class="number">3</span>)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">🔴</div><div class="line">🔴</div><div class="line">🔴</div></pre></td></tr></table></figure><h2 id="⑨generate"><a href="#⑨generate" class="headerlink" title="⑨generate"></a>⑨generate</h2><blockquote><p>generate是创建一个可观察sequence，当初始化的条件为true的时候，他就会发出所对应的事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.generate(</div><div class="line">        initialState: <span class="number">0</span>,</div><div class="line">        condition: &#123; $<span class="number">0</span> &lt; <span class="number">3</span> &#125;,</div><div class="line">        iterate: &#123; $<span class="number">0</span> + <span class="number">1</span> &#125;</div><div class="line">    )</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div></pre></td></tr></table></figure><h2 id="⑩-deferred"><a href="#⑩-deferred" class="headerlink" title="⑩ deferred"></a>⑩ deferred</h2><blockquote><p>deferred会为每一为订阅者observer创建一个新的可观察序列<br>下面例子中每次进行subscribe的时候都会去创建一个新的deferredSequence，所以Emitting会打印两遍</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/RxSwift-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5010.png" alt="010"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">let</span> deferredSequence = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.deferred &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Creating \(count)"</span>)</div><div class="line">    <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Emitting..."</span>)</div><div class="line">        observer.onNext(<span class="string">"🐶"</span>)</div><div class="line">        observer.onNext(<span class="string">"🐱"</span>)</div><div class="line">        observer.onNext(<span class="string">"🐵"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">deferredSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">deferredSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  Creating 1</div><div class="line">Emitting...</div><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐵</div><div class="line">Creating 2</div><div class="line">Emitting...</div><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐵</div></pre></td></tr></table></figure><h2 id="⑪error"><a href="#⑪error" class="headerlink" title="⑪error"></a>⑪error</h2><blockquote><p>创建一个可观察序列，但不发出任何正常的事件，只发出error事件并结束</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.error(<span class="type">TestError</span>.test)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error(test)</div></pre></td></tr></table></figure><h2 id="⑫doOn"><a href="#⑫doOn" class="headerlink" title="⑫doOn"></a>⑫doOn</h2><blockquote><p>doOn我感觉就是在直接onNext处理时候，先执行某个方法，doOnNext(<em> :)方法就是在subscribe(onNext:)前调用，doOnCompleted(</em>:)就是在subscribe(onCompleted:)前面调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🍎"</span>, <span class="string">"🍐"</span>, <span class="string">"🍊"</span>, <span class="string">"🍋"</span>)</div><div class="line">    .<span class="keyword">do</span>(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Intercepted:"</span>, $<span class="number">0</span>) &#125;, onError: &#123; <span class="built_in">print</span>(<span class="string">"Intercepted error:"</span>, $<span class="number">0</span>) &#125;, onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>)  &#125;)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;,onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"结束"</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/xwl198937/article/details/50823558" target="_blank" rel="external">资料</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PPNetwork 扩展</title>
      <link href="/2018/01/23/OC/Lib/PPNetworkHelper/PPNetworkHelper%E6%89%A9%E5%B1%95/"/>
      <content type="html"><![CDATA[<h1 id="PPNetworkHelper扩展"><a href="#PPNetworkHelper扩展" class="headerlink" title="PPNetworkHelper扩展"></a>PPNetworkHelper扩展</h1><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)httpDeleteWithURLStr:(<span class="built_in">NSString</span> *)urlStr</div><div class="line">                    paramDic:(<span class="built_in">NSDictionary</span> *)paramDic</div><div class="line">                     noLoginToken:(<span class="built_in">NSString</span> *)noLoginToken</div><div class="line">                      finishedBlock:(<span class="keyword">void</span>(^)(<span class="keyword">id</span> responseObject))finishedBlock</div><div class="line">                     errorBlock:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))errorBlock&#123;</div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    <span class="comment">//后台需要增加application/x-www-form-urlencoded</span></div><div class="line">    manager.responseSerializer.acceptableContentTypes = [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"text/html"</span>,</div><div class="line">                                                         <span class="string">@"application/json"</span>,</div><div class="line">                                                         <span class="string">@"text/javascript"</span>,</div><div class="line">                                                         <span class="string">@"text/json"</span>,</div><div class="line">                                                         <span class="string">@"text/plain"</span>,</div><div class="line">                                                         <span class="string">@"application/x-www-form-urlencoded"</span>,<span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 设置请求头</span></div><div class="line">    [manager.requestSerializer setValue:<span class="string">@"application/json"</span></div><div class="line">                     forHTTPHeaderField:<span class="string">@"Accept"</span>];</div><div class="line"></div><div class="line"><span class="comment">//      [manager.requestSerializer setValue:authorization forHTTPHeaderField:@"Authorization"];</span></div><div class="line">    [manager.requestSerializer setValue:noLoginToken forHTTPHeaderField:<span class="string">@"noLoginToken"</span>];</div><div class="line">    [manager DELETE:urlStr</div><div class="line">      parameters:paramDic</div><div class="line">         success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span> _Nullable responseObject) &#123;</div><div class="line">               finishedBlock(responseObject);</div><div class="line">         &#125;</div><div class="line">         failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">             finishedBlock(error);</div><div class="line">         &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ (void)httpPutWithURLStr:(NSString *)urlStr</div><div class="line">                    paramDic:(NSDictionary *)paramDic</div><div class="line">                noLoginToken:(NSString *)noLoginToken</div><div class="line">               finishedBlock:(void(^)(id responseObject))finishedBlock</div><div class="line">                  errorBlock:(void(^)(NSError *error))errorBlock&#123;</div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,</div><div class="line">                                                         @&quot;application/json&quot;,</div><div class="line">                                                         @&quot;text/javascript&quot;,</div><div class="line">                                                         @&quot;text/json&quot;,</div><div class="line">                                                         @&quot;text/plain&quot;,</div><div class="line">                                                         @&quot;application/x-www-form-urlencoded&quot;,nil];</div><div class="line">    // 设置请求头</div><div class="line">    [manager.requestSerializer setValue:@&quot;application/json&quot;</div><div class="line">                     forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">    //[manager.requestSerializer setValue:authorization forHTTPHeaderField:@&quot;Authorization&quot;];</div><div class="line">    [manager.requestSerializer setValue:noLoginToken forHTTPHeaderField:@&quot;noLoginToken&quot;];</div><div class="line">    [manager PUT:urlStr</div><div class="line">      parameters:paramDic</div><div class="line">         success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">                        finishedBlock(responseObject);</div><div class="line">    &#125;</div><div class="line">         failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">                 finishedBlock(error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="需要修改AFNetworking可接收的Content-Type"><a href="#需要修改AFNetworking可接收的Content-Type" class="headerlink" title="需要修改AFNetworking可接收的Content-Type"></a>需要修改AFNetworking可接收的Content-Type</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> 修改AFNetworking可接收的Content-Type，前往AFNetworking源代码目录找到AFURLResponseSerialization.m文件将里面的代码：</div><div class="line">self.acceptableContentTypes =[NSSetsetWithObjects:@&quot;application/json&quot;,@&quot;text/json&quot;,@&quot;text/javascript&quot;,nil];</div><div class="line"></div><div class="line">修改为：</div><div class="line">self.acceptableContentTypes =[NSSetsetWithObjects:@&quot;application/json&quot;,@&quot;text/json&quot;,@&quot;text/javascript&quot;,@&quot;text/html&quot;,nil];</div><div class="line"></div><div class="line">PPNetworkHelper里也可以修改</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> PPNetwork </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Demo-TableView双联表</title>
      <link href="/2018/01/20/Swift/Demo/Swift-Demo-TableView%E5%8F%8C%E8%81%94%E8%A1%A8/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Demo </category>
          
          <category> TableView </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-射线检测</title>
      <link href="/2018/01/19/SceneKit/Grammar/SceneKit-%E5%B0%84%E7%BA%BF%E6%A3%80%E6%B5%8B/"/>
      <content type="html"><![CDATA[<p>#SceneKit-射线检测</p><blockquote><p>touchesBegan方法在3D中仍然可用<br>在3D空间内采用了射线检测方法来返回触摸到的物体</p></blockquote><h1 id="当有触摸事件发生时"><a href="#当有触摸事件发生时" class="headerlink" title="当有触摸事件发生时"></a>当有触摸事件发生时</h1><ul><li>拿到用户触摸在屏幕上的位置</li><li>转换到SCNView的坐标系中</li><li>当触摸点在SCNView上时,发射一个射线,返回与该射线相交的一系列物体</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(touches: Set&lt;UITouch&gt;, withEvent event:</span></span></div><div class="line"><span class="function"><span class="params">UIEvent?)</span></span> &#123;</div><div class="line"><span class="comment">// 1 拿到触摸对象</span></div><div class="line">  <span class="keyword">let</span> touch = touches.first!</div><div class="line">  <span class="comment">// 2 转换坐标系</span></div><div class="line">  <span class="keyword">let</span> location = touch.locationInView(scnView)</div><div class="line">  <span class="comment">// 3 执行hitTest,发射射线,返回相交的物体</span></div><div class="line">  <span class="keyword">let</span> hitResults = scnView.hitTest(location, options: <span class="literal">nil</span>)</div><div class="line">  <span class="comment">// 4 </span></div><div class="line">  <span class="keyword">if</span> hitResults.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</div><div class="line"><span class="comment">// 5 取出最近的物体</span></div><div class="line">    <span class="keyword">let</span> result = hitResults.first!</div><div class="line">    <span class="comment">// 6 处理该节点</span></div><div class="line">    handleTouchFor(result.node)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNCamera-相机-Base</title>
      <link href="/2018/01/19/SceneKit/Grammar/SCNCamera-%E7%9B%B8%E6%9C%BA/SCNCamera-%E7%9B%B8%E6%9C%BA-Base/"/>
      <content type="html"><![CDATA[<h1 id="SCNCamera-相机"><a href="#SCNCamera-相机" class="headerlink" title="SCNCamera-相机"></a>SCNCamera-相机</h1><ul><li>SCNCamera相机是用于显示场景内容必须的节点, 需要把相机加到节点之上, 再把节点加到根节点上</li><li>SCNNode包含相机物体观察视野的观察点, 即相机的 <strong>位置</strong> &amp; <strong>方向</strong></li><li>相机的视角始终沿着节点的局部坐标系的负Z轴, 要在不同的场景指定不同的相机的视野, 使用<strong>position</strong>, <strong>rotation</strong>, <strong>transfrom</strong>来设置</li></ul><p><img src="http://ozr735s7e.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E8%A7%86%E8%A7%92.png" alt=""></p><h1 id="相机类型"><a href="#相机类型" class="headerlink" title="相机类型"></a>相机类型</h1><blockquote><p>透视(perspective)<br>正交(orthographic)</p></blockquote><h2 id="透视相机"><a href="#透视相机" class="headerlink" title="透视相机"></a>透视相机</h2><blockquote><p>游戏中经常使用第一视角的相机, 会有一种近大远小的感觉</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/%E9%80%8F%E8%A7%86%E7%9B%B8%E6%9C%BA.png" alt="透视相机"></p><h2 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h2><blockquote><p>投影线垂直于投影面的投影属于正交投影 ，属于平行投影一种<br>靠近和远离, 物体大小都是相同的</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1.png" alt=""></p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><h2 id="视角"><a href="#视角" class="headerlink" title="视角"></a>视角</h2><blockquote><p>场景:</p></blockquote><ul><li>照相机的位置为(10,0,0) </li><li>物体A的位置为(0,0,-6)，yFor 表示的是Y轴上的视角</li></ul><p><img src="http://ozr735s7e.bkt.clouddn.com/SCNCamera-%E7%9B%B8%E6%9C%BA-Base-001.png" alt="视角"></p><blockquote><p>,照相机好比眼睛,眼睛在X轴(左右看)和Y轴(上下看)有个最大角度，这个角度叫做xFov和yFov<br>对于同一个物体，当然在视野小的时候，显示的体积大，在视野大的时候，显示的体积小</p></blockquote><h2 id="焦距"><a href="#焦距" class="headerlink" title="焦距"></a>焦距</h2><p><img src="http://ozr735s7e.bkt.clouddn.com/SCNCamera-%E7%9B%B8%E6%9C%BA-Base-%E7%84%A6%E8%B7%9D.png" alt="焦距"></p><ul><li>设备屏幕中的物体都是能被照相机看到的物体</li></ul>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
          <category> SCNCamera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> SceneKit </tag>
            
            <tag> SCNCamera </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-RenderLoop渲染循环</title>
      <link href="/2018/01/19/SceneKit/Grammar/RenderLoop%E6%B8%B2%E6%9F%93%E5%BE%AA%E7%8E%AF/"/>
      <content type="html"><![CDATA[<h1 id="SCNSceneRendererDelegate协议"><a href="#SCNSceneRendererDelegate协议" class="headerlink" title="SCNSceneRendererDelegate协议"></a>SCNSceneRendererDelegate协议</h1><blockquote><p>SCNView有一个delegate属性,需要遵守SCNSceneRendererDelegate协议,可以在每帧画面的动画和渲染过程中收到代理方法的调用</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/%E5%8D%8F%E8%AE%AE.png" alt=""></p><p>##Update</p><ul><li>会调用renderer(_:updateAtTime:)代理方法,可以在这里写一些基础逻辑,比如添加或移除node节点.</li></ul><h2 id="Execute-Actions-amp-Animations"><a href="#Execute-Actions-amp-Animations" class="headerlink" title="Execute Actions&amp;Animations:"></a>Execute Actions&amp;Animations:</h2><ul><li>执行actions(动作)和animations(动画).</li></ul><h2 id="Did-Apply-Animations"><a href="#Did-Apply-Animations" class="headerlink" title="Did Apply Animations:"></a>Did Apply Animations:</h2><ul><li>会调用renderer(_: didApplyAnimationsAtTime:)方法,此时场景中所有节点在这一帧的actions(动作)和animations(动画)都已经更新完成.</li></ul><h2 id="Simulates-Physics"><a href="#Simulates-Physics" class="headerlink" title="Simulates Physics:"></a>Simulates Physics:</h2><ul><li>物理效果模拟.</li></ul><h2 id="Did-Simulate-Physics"><a href="#Did-Simulate-Physics" class="headerlink" title="Did Simulate Physics:"></a>Did Simulate Physics:</h2><ul><li>会调用renderer(_:didSimulatePhysicsAtTime:)方法,此时物理效果模拟已经完成,可以在这里添加和物理效果有关的代码,比如node在受到一个力影响后改变颜色.</li></ul><h2 id="Evaluates-Constraints"><a href="#Evaluates-Constraints" class="headerlink" title="Evaluates Constraints:"></a>Evaluates Constraints:</h2><ul><li>约束更新.</li></ul><h2 id="Will-Render-Scene"><a href="#Will-Render-Scene" class="headerlink" title="Will Render Scene:"></a>Will Render Scene:</h2><ul><li>会调用renderer(_:willRenderScene:atTime:)方法,此时即将要渲染场景,可以在这里对场景做最后的更改.</li></ul><h2 id="Renders-Scene-In-View-SceneKit"><a href="#Renders-Scene-In-View-SceneKit" class="headerlink" title="Renders Scene In View:SceneKit"></a>Renders Scene In View:SceneKit</h2><ul><li>在view中渲染场景.</li></ul><h2 id="Did-Render-Scene"><a href="#Did-Render-Scene" class="headerlink" title="Did Render Scene:"></a>Did Render Scene:</h2><ul><li>会调用renderer(_: didRenderScene: atTime:)方法,它标识着一个渲染循环的结束,可以写一些逻辑更新代码在这里,比如游戏中血量增减</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>默认情况下,如果一个场景中没有任何改变时,Scene Kit会进入”paused”(暂停)状态,渲染循环暂停后代理方法将不会继续调用,为了防止这种情况,需要在创建SCNView实例时设置playing属性为true如:<br>渲染循环的代理就会一直调用</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">scnView.playing = <span class="literal">true</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-Grammar-Physics物理效果</title>
      <link href="/2018/01/18/SceneKit/Grammar/SceneKit-Grammar-Physics%E7%89%A9%E7%90%86%E6%95%88%E6%9E%9C/"/>
      <content type="html"><![CDATA[<h1 id="物理仿真模拟"><a href="#物理仿真模拟" class="headerlink" title="物理仿真模拟"></a>物理仿真模拟</h1><h2 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h2><blockquote><p>物理仿真中的type就是为了定义当一个物体受到力的作用时该如何去响应.</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">首先, 力的作用的相互的, 当两个物体之间进行力的作用时情况是多样的, 可能两者都有运动, 也可能只有其中的一个会运动, 试想, 如果拿一个鸡蛋去碰撞一块很大的石头, 很显然, 鸡蛋碎了, 石头不会有任何变化(以我们肉眼来观察, 石头是不会有变化的, 实质上石头是有变化的),</div></pre></td></tr></table></figure><h1 id="physics-body物理形体"><a href="#physics-body物理形体" class="headerlink" title="physics body物理形体"></a>physics body物理形体</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote><p>静态物体不会移动</p></blockquote><ul><li>当其他物体可能与这些物体碰撞时，静态物体本身不受模拟中的任何力和碰撞的影响。</li><li>可以使用这种类型的墙壁和大块不动的巨石</li></ul><h2 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h2><blockquote><p>动力体受力量和碰撞的影响</p></blockquote><ul><li>可以使用这种类型的东西，如活动椅子，桌子和杯子</li></ul><h2 id="kinematic"><a href="#kinematic" class="headerlink" title="kinematic"></a>kinematic</h2><blockquote><p>运动体类似于静态体，因为它们也不受影响</p></blockquote><ul><li>力量和碰撞 但是可以移动这些类型，并且它们也可能与动态主体相冲突</li><li>可以使用这种类型的身体，例如移动电梯或可以打开和关闭的门</li></ul><h2 id="SCNPhysicsBody"><a href="#SCNPhysicsBody" class="headerlink" title="SCNPhysicsBody"></a>SCNPhysicsBody</h2><blockquote><p>SceneKit中所有的物理对象都是SCNPhysicsBody<br>然后需要把该对象绑定到SCNNode的physicsBody实例属性,<br>然后物理引擎就可以进行仿真模拟</p><p>物理形状决定了物理引擎在处理碰撞时的形状检测.<br>为了让物理模拟器运行的更快,最好将物理形状设定为简单的方形,球形或其他系统提供的原始形状,大略匹配节点外观就行了</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/%E7%89%A9%E7%90%86%E5%BD%A2%E7%8A%B6.png" alt=""></p><h2 id="管理物理引擎"><a href="#管理物理引擎" class="headerlink" title="管理物理引擎"></a>管理物理引擎</h2><blockquote><p>使用Node去管理一个几何体, 同样, SCNPhysicsBody对象也管理物理引擎<br>也就是说, 此时我们的node拥有一个可以做物理仿真模拟的几何体</p></blockquote><h2 id="指定物体应具有的类型和形状"><a href="#指定物体应具有的类型和形状" class="headerlink" title="指定物体应具有的类型和形状"></a>指定物体应具有的类型和形状</h2><blockquote><p>创建物理体时，可以指定物体应具有的类型和形状<br>如果为nil，Scene Kit将根据节点的几何形状自动生成一个形状</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> geometryNode = <span class="type">SCNNode</span>(geometry: geometry)</div><div class="line"> <span class="comment">//--- &gt;添加代码</span></div><div class="line">  geometryNode.physicsBody = <span class="type">SCNPhysicsBody</span>(type: .<span class="keyword">dynamic</span>, shape: <span class="literal">nil</span>)</div></pre></td></tr></table></figure><blockquote><p>Scene Kit中的scene默认打开了重力,当设定过动态形体后,物体就会受到重力影响下落<br>接下来运行工程,  会发现一个立方体很快的掉落下来, 然后消失.</p></blockquote><h2 id="修改下视角"><a href="#修改下视角" class="headerlink" title="修改下视角"></a>修改下视角</h2><blockquote><p>接下来我们需要修改下视角, 让物体受重力作用更明显一些.<br>看到一个物体从顶部掉下来</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">cameraNode.position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: -<span class="number">5</span>, z: <span class="number">10</span>)</div></pre></td></tr></table></figure><h2 id="抛物线的自由落体运动"><a href="#抛物线的自由落体运动" class="headerlink" title="抛物线的自由落体运动"></a>抛物线的自由落体运动</h2><blockquote><p>自由落体实现了, 接下来我们给该物体添加一个向上的推力<br>让物体实现一个抛物线的自由落体运动<br>在geometryNode.physicsBody = SCNPhysicsBody(type: .dynamic, shape: nil)下面添加如下代码</p><p>这个设置我们的物体要移动的重点位置,<br>下面三个值得意思是, x为0, 代表从中心带开始运动, y值为正数, 代表向上, z为0代表我们看的视角的深度不会变, 如果是负数, 则会发现在运动过程中, 物体越来越小, 如果为正, 则发现在运动过程中物体则会运来越大</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">let force = SCNVector3(x: 0, y: 15 , z: 0)</div></pre></td></tr></table></figure><blockquote><p>作用力的位置</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">let position = SCNVector3(x: 0.05, y: 0.05, z: 0.05)</div></pre></td></tr></table></figure><blockquote><p>给节点上的几何体添加一个作用力, 当您向物理机构施加力量时，您可以使用applyForce（_：atPosition：impluse :)，并将SCNVector3的实例传递给要施加该力的力和位置，以及是否强制将被用作冲动。您应用的力将影响物理体的线性和角加速度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">geometryNode.physicsBody?.applyForce(force, at: position, asImpulse: <span class="literal">true</span>)</div></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>刚刚为了观察自由落体效果, 我们把视角修改了, 让物体从顶部掉落, 现在需要把它再改回来, 让其从底部出现</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">cameraNode.position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: <span class="number">5</span>, z: <span class="number">10</span>)</div></pre></td></tr></table></figure><ul><li>物理仿真中的力使用的是向量表示的, 向量是有方向有距离的一个值</li></ul><h2 id="forces力"><a href="#forces力" class="headerlink" title="forces力"></a>forces力</h2><blockquote><p>力使用3维向量SCNVector3表示,使用applyForce(_: atPosition: impluse:)方法来添加一个力,并指定位置.一个力可以同时影响线速度和角速度.<br>impluse脉冲状只作用一次,比如踢一个球,非脉冲状的则可以持续作用.<br>Position位置可以影响力的作用效果</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/forces%E5%8A%9B.png" alt=""></p><h2 id="torque力矩"><a href="#torque力矩" class="headerlink" title="torque力矩"></a>torque力矩</h2><blockquote><p>力矩使用4维向量SCNVector4表示,使用applyTorque(_: impulse:)来添加一个力矩,力矩只影响角动量.<br>x-,y-,z-指定旋转轴,w-指定旋转角度也就是大小值<br>Scene Kit使用国际单位制,因此质量单位是kg千克,力的单位是N牛,脉冲单位是N-s牛秒,力矩单位是N-m牛米.</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/torque%E5%8A%9B%E7%9F%A9.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-几何物体-正方体</title>
      <link href="/2018/01/18/SceneKit/Grammar/SceneKit-%E5%87%A0%E4%BD%95%E7%89%A9%E4%BD%93-%E6%AD%A3%E6%96%B9%E4%BD%93(Swift)/"/>
      <content type="html"><![CDATA[<p>//<br>//  ViewController.swift<br>//  SceneKit-几何物体-正方体(Swift)<br>//<br>//  Created by RN on 2018/1/18.<br>//  Copyright © 2018年 YKK. All rights reserved.<br>//</p><p>import UIKit<br>import SceneKit<br>class ViewController: UIViewController {<br>//显示3D场景的视图<br>fileprivate lazy  var scnView : SCNView = {<br>let scnView =  SCNView()<br>scnView.showsStatistics = true<br>// 2<br>scnView.allowsCameraControl = true<br>// 3<br>scnView.autoenablesDefaultLighting = true<br>return scnView<br>}()</p><p>//场景scene<br>fileprivate lazy  var  scnScene : SCNScene = {<br>let  scnScene = SCNScene()<br>//设置背景图片, GeometryFighter.scnassets是我设置的一个资源库, 存放3D资源的<br>// scnScene.background.contents = “GeometryFighter.scnassets/Textures/Background_Diffuse.png”<br>return scnScene<br>}()</p><p>//3. 添加一个SCNCamera<br>fileprivate lazy  var cameraNode : SCNNode = {<br>// 创建一个节点<br>let  cameraNode = SCNNode()<br>// 给相机节点赋值相机<br>cameraNode.camera = SCNCamera()<br>// 设置视角的位置, x:0,y:0就是中心点, z只代表观察的距离, z越大, 物体越小<br>cameraNode.position = SCNVector3(x: 0, y: 0, z: 10)<br>return cameraNode<br>}()</p><p>//4.几何物体<br>fileprivate lazy  var geometryNode : SCNNode =  {<br>//画一个立方体<br>let  shape  = SCNBox(width: 1.0,<br>height: 1.0,<br>length: 1.0,<br>chamferRadius: 0.0)<br>//把立方体绑定到节点<br>let geometryNode = SCNNode(geometry: shape)<br>return geometryNode<br>}()</p><p>override func viewDidLoad() {<br>super.viewDidLoad()<br>//给当前的SCNView 赋值SCNScene<br>scnView.scene = scnScene<br>// 把相机的节点添加到根节点里面<br>scnScene.rootNode.addChildNode(cameraNode)<br>//把节点添加到场景<br>scnScene.rootNode.addChildNode(geometryNode)<br>}<br>//控制屏幕旋转<br>override var shouldAutorotate: Bool {<br>return true<br>}<br>//隐藏状态栏<br>override var prefersStatusBarHidden: Bool {<br>return true<br>}</p><p>}</p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-构建简单几何模型</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-%E6%9E%84%E5%BB%BA%E7%AE%80%E5%8D%95%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9E%8B/"/>
      <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="构建3D节点"><a href="#构建3D节点" class="headerlink" title="构建3D节点"></a>构建3D节点</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNScene</span>    *scene;           <span class="comment">//场景，存放元素节点</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNView</span>     *sceneView;       <span class="comment">//用来展示3D图形的控件</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNNode</span>     *lightNode;       <span class="comment">//环境光Node</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNNode</span>     *assistLightNode; <span class="comment">//增加一个副光</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNNode</span>     *caremaNode;      <span class="comment">//添加摄像机节点</span></div></pre></td></tr></table></figure><p>##创建几何模型</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNGeometry</span> *carbonAtom;   <span class="comment">// C 原子</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNGeometry</span> *hydrogenAtom; <span class="comment">// H 原子</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNGeometry</span> *oxyGenAtom;   <span class="comment">// O 原子</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">SCNGeometry</span> *fluorAtom;    <span class="comment">// F 原子</span></div></pre></td></tr></table></figure><h1 id="添加场景"><a href="#添加场景" class="headerlink" title="添加场景"></a>添加场景</h1><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> addScene];</div></pre></td></tr></table></figure><h2 id="构建场景设置节点"><a href="#构建场景设置节点" class="headerlink" title="构建场景设置节点"></a>构建场景设置节点</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addScene&#123;</div><div class="line"><span class="comment">//    SCNBox *box = [SCNBox boxWithWidth:10 height:10 length:10 chamferRadius:1];</span></div><div class="line"><span class="comment">//    SCNNode *node = [SCNNode nodeWithGeometry:box];</span></div><div class="line">     <span class="comment">//添加摄像机</span></div><div class="line">    <span class="comment">//[self.scene.rootNode addChildNode:self.caremaNode];</span></div><div class="line">    <span class="comment">//添加环境副光</span></div><div class="line">      [<span class="keyword">self</span>.scene.rootNode addChildNode:<span class="keyword">self</span>.assistLightNode];</div><div class="line">    <span class="comment">//添加环境光</span></div><div class="line"><span class="comment">//[self.scene.rootNode addChildNode:self.lightNode];//添加环境光</span></div><div class="line">    <span class="comment">//添加正方体</span></div><div class="line">    <span class="comment">// [self.scene.rootNode addChildNode:node];</span></div><div class="line">    <span class="comment">//将创建的原子节点添加到根节点</span></div><div class="line">    [<span class="keyword">self</span>.scene.rootNode addChildNode:[<span class="keyword">self</span> addGeometryToSCNNode]];</div><div class="line">    <span class="keyword">self</span>.sceneView.scene = <span class="keyword">self</span>.scene;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="几何体添加到节点"><a href="#几何体添加到节点" class="headerlink" title="几何体添加到节点"></a>几何体添加到节点</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNNode</span> *)addGeometryToSCNNode&#123;</div><div class="line">    <span class="comment">//Creates and initializes a node instance with the specified geometry attached</span></div><div class="line">    <span class="comment">//指定几何图形添加到节点</span></div><div class="line">    <span class="built_in">SCNNode</span> *carbonNode = [<span class="built_in">SCNNode</span> nodeWithGeometry:[<span class="keyword">self</span> carbonAtom]];</div><div class="line">    <span class="built_in">SCNNode</span> *hydrogenNode = [<span class="built_in">SCNNode</span> nodeWithGeometry:[<span class="keyword">self</span> hydrogenAtom]];</div><div class="line">    <span class="built_in">SCNNode</span> *oxygenNode = [<span class="built_in">SCNNode</span> nodeWithGeometry:[<span class="keyword">self</span> oxyGenAtom]];</div><div class="line">    <span class="built_in">SCNNode</span> *fluorNode = [<span class="built_in">SCNNode</span> nodeWithGeometry:[<span class="keyword">self</span> fluorAtom]];</div><div class="line">    </div><div class="line">    <span class="comment">//节点位置</span></div><div class="line">    carbonNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">-6</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    hydrogenNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">-2</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    oxygenNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    fluorNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//子节点添加到某个父节点</span></div><div class="line">    <span class="built_in">SCNNode</span> *tempNode = [<span class="built_in">SCNNode</span> node];</div><div class="line">    [tempNode addChildNode:carbonNode];</div><div class="line">    [tempNode addChildNode:hydrogenNode];</div><div class="line">    [tempNode addChildNode:oxygenNode];</div><div class="line">    [tempNode addChildNode:fluorNode];</div><div class="line">    <span class="keyword">return</span> tempNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Getetr"><a href="#Getetr" class="headerlink" title="Getetr"></a>Getetr</h1><h2 id="SCNView"><a href="#SCNView" class="headerlink" title="SCNView"></a>SCNView</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNView</span> *)sceneView&#123;</div><div class="line">    <span class="keyword">if</span> (!_sceneView) &#123;</div><div class="line">        _sceneView = [[<span class="built_in">SCNView</span> alloc]initWithFrame:<span class="keyword">self</span>.view.bounds];</div><div class="line">        _sceneView.center = <span class="keyword">self</span>.view.center;</div><div class="line">        _sceneView.backgroundColor = [<span class="built_in">UIColor</span> grayColor];</div><div class="line">        _sceneView.allowsCameraControl = <span class="literal">YES</span>;</div><div class="line">        _sceneView.autoenablesDefaultLighting = <span class="literal">YES</span>;</div><div class="line">        [<span class="keyword">self</span>.view addSubview:_sceneView];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _sceneView;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="SCNScene"><a href="#SCNScene" class="headerlink" title="SCNScene"></a>SCNScene</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNScene</span> *)scene&#123;</div><div class="line">    <span class="keyword">if</span> (!_scene) &#123;</div><div class="line">        _scene =[<span class="built_in">SCNScene</span> scene];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _scene;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h2><blockquote><p>添加一个环境光node<br>前后都是亮滴</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNNode</span> *)lightNode&#123;</div><div class="line">    <span class="keyword">if</span> (!_lightNode) &#123;</div><div class="line">        _lightNode = [<span class="built_in">SCNNode</span> node];</div><div class="line">        _lightNode.light = [<span class="built_in">SCNLight</span> light];</div><div class="line">        _lightNode.light.type = <span class="built_in">SCNLightTypeAmbient</span>;</div><div class="line">        _lightNode.light.color = [<span class="built_in">UIColor</span> colorWithWhite:<span class="number">0.4</span></div><div class="line">                                                   alpha:<span class="number">1.0</span>];</div><div class="line">        <span class="comment">//_lightNode.light.color = [UIColor redColor];</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _lightNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="增加一个副光"><a href="#增加一个副光" class="headerlink" title="增加一个副光"></a>增加一个副光</h2><blockquote><p>SCNLightTypeDirectional 平行光  SCNLightTypeSpot   聚焦光<br>小球前表面亮。后表面暗</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNNode</span> *)assistLightNode&#123;</div><div class="line">    <span class="keyword">if</span> (!_assistLightNode) &#123;</div><div class="line">        _assistLightNode =  [<span class="built_in">SCNNode</span> node];</div><div class="line">        _assistLightNode.light = [<span class="built_in">SCNLight</span> light];</div><div class="line">        _assistLightNode.light.type = <span class="built_in">SCNLightTypeOmni</span>;<span class="comment">//像各方向发出的光照强度一样</span></div><div class="line">        _assistLightNode.light.color = [<span class="built_in">UIColor</span> colorWithWhite:<span class="number">0.75</span> alpha:<span class="number">1</span>];</div><div class="line">         _assistLightNode.light.color = [<span class="built_in">UIColor</span> redColor];</div><div class="line">        _assistLightNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">0</span>, <span class="number">-50</span>, <span class="number">50</span>);<span class="comment">//设置光源</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _assistLightNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="添加摄像机节点"><a href="#添加摄像机节点" class="headerlink" title="添加摄像机节点"></a>添加摄像机节点</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNNode</span> *)caremaNode&#123;</div><div class="line">    <span class="keyword">if</span> (!_caremaNode) &#123;</div><div class="line">        _caremaNode =  [<span class="built_in">SCNNode</span> node];</div><div class="line">        _caremaNode.camera = [<span class="built_in">SCNCamera</span> camera];<span class="comment">//Creates and returns a camera instance.</span></div><div class="line">        _caremaNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _caremaNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>##几何模型-C 原子</p><blockquote><p>SCNSphere  有半径属性，类似iOS 剪切</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNGeometry</span> *)carbonAtom&#123;</div><div class="line">    <span class="keyword">if</span>(!_carbonAtom)&#123;</div><div class="line">        <span class="built_in">SCNSphere</span> *phere = [<span class="built_in">SCNSphere</span> sphereWithRadius:<span class="number">1.7</span>];</div><div class="line">        phere.firstMaterial.diffuse.contents = [<span class="built_in">UIColor</span> darkGrayColor];</div><div class="line">        phere.firstMaterial.specular.contents = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        _carbonAtom = phere;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _carbonAtom;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>##几何模型 -  H 原子</p><blockquote><p>contents 扩散de 内容 颜色(NSColor, UIColor, CGColorRef)，一个图像(NSImage, UIImage, CGImageRef)，一个层(CALayer)，一个路径(NSString或NSURL)，一个SpriteKit场景(SKScene)，一个纹理(sk纹理，id&lt; mtl纹理&gt;或GLKTextureInfo)，或一个浮动值在0到1 (NSNumber)之间的金属和粗糙度属性</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNGeometry</span> *)hydrogenAtom&#123;</div><div class="line">    <span class="keyword">if</span> (!_hydrogenAtom) &#123;</div><div class="line">        <span class="built_in">SCNSphere</span> *sphere = [<span class="built_in">SCNSphere</span> sphereWithRadius:<span class="number">1.2</span>];</div><div class="line">        sphere.firstMaterial.diffuse.contents = [<span class="built_in">UIColor</span> lightGrayColor];</div><div class="line">        <span class="comment">//specular - 镜面</span></div><div class="line">        sphere.firstMaterial.specular.contents = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        _hydrogenAtom = sphere;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _hydrogenAtom;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="几何模型-O-原子"><a href="#几何模型-O-原子" class="headerlink" title="几何模型 -  O 原子"></a>几何模型 -  O 原子</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNGeometry</span> *)oxyGenAtom&#123;</div><div class="line">    <span class="keyword">if</span> (!_oxyGenAtom) &#123;</div><div class="line">        <span class="built_in">SCNSphere</span> *sphere = [<span class="built_in">SCNSphere</span> sphereWithRadius:<span class="number">1.52</span>];</div><div class="line">        sphere.firstMaterial.diffuse.contents = [<span class="built_in">UIColor</span> redColor];</div><div class="line">        sphere.firstMaterial.specular.contents = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        _oxyGenAtom = sphere;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _oxyGenAtom;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>##几何模型 -  F 原子</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNGeometry</span> *)fluorAtom</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!_fluorAtom) &#123;</div><div class="line">        <span class="built_in">SCNSphere</span> *sphere = [<span class="built_in">SCNSphere</span> sphereWithRadius:<span class="number">1.47</span>];</div><div class="line">        sphere.firstMaterial.diffuse.contents = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">        sphere.firstMaterial.specular.contents = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        _fluorAtom = sphere;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _fluorAtom;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNNode</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-SCNNode/"/>
      <content type="html"><![CDATA[<h1 id="SCNNode"><a href="#SCNNode" class="headerlink" title="SCNNode"></a>SCNNode</h1><blockquote><p>SCNNode : NSObject<br>abstract SCNNode is the model class for node-tree object</p></blockquote><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>name</td><td>NSString</td><td></td><td></td></tr><tr><td>light</td><td>SCNLight</td><td></td><td></td></tr><tr><td>camera</td><td>SCNGeometry</td><td></td><td></td></tr><tr><td>skinner</td><td>SCNSkinner</td><td>控制皮肤几何图形的变形</td><td></td></tr><tr><td>morpher</td><td>SCNMorpher</td><td>控制变形的几何图形</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>transform</td><td>SCNMatrix4</td><td>变换</td><td></td></tr><tr><td>worldTransform</td><td>SCNMatrix4</td><td>世界转换</td><td>在世界空间中的转换(相对于场景的根节点)</td></tr><tr><td>position</td><td>SCNVector3</td><td></td><td></td></tr><tr><td>worldPosition</td><td>SCNVector3</td><td></td><td></td></tr><tr><td>rotation</td><td>SCNVector4</td><td></td><td></td></tr><tr><td>orientation</td><td>SCNQuaternion</td><td></td><td></td></tr><tr><td>worldOrientation</td><td>SCNQuaternion</td><td></td><td></td></tr><tr><td>eulerAngles</td><td>SCNVector3</td><td></td><td></td></tr><tr><td>scale</td><td>SCNVector3</td><td></td><td></td></tr><tr><td>pivot</td><td>SCNMatrix4</td><td></td><td></td></tr><tr><td>hidden</td><td>BOOL</td><td>否显示</td><td>dedault NO</td></tr><tr><td>opacity</td><td>CGFloat</td><td>不透明度</td><td>Default is 1</td></tr><tr><td>castsShadow</td><td>BOOL</td><td>投下阴影</td><td>Defaults to YES</td></tr><tr><td>movabilityHint</td><td>SCNMovabilityHint</td><td>可动性暗示</td><td>与SceneKit的呈现系统沟通你想如何在场景中移动内容<br>它不会影响您更改节点位置或向节点添加动画或物理的能力<br>默认为SCNMovabilityHintFixed</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>parentNode</td><td>SCNNode</td><td>父节点</td><td></td></tr><tr><td>childNodes</td><td>NSArray<scnnode *=""></scnnode></td><td>子节点数组</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>加载</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)node;</div></pre></td></tr></table></figure><blockquote><p>加载<br>geometry： 几何模型</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNNode</span> *)nodeWithGeometry:(<span class="keyword">nullable</span> <span class="built_in">SCNGeometry</span> *)geometry;</div></pre></td></tr></table></figure><blockquote><p>克隆</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)clone;</div></pre></td></tr></table></figure><blockquote><p>被克隆</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)flattenedClone</div></pre></td></tr></table></figure><blockquote><p>世界转换|在世界空间中的转换(相对于场景的根节点)</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setWorldTransform:(<span class="built_in">SCNMatrix4</span>)worldTransform;</div></pre></td></tr></table></figure><blockquote><p>加子节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addChildNode:(<span class="built_in">SCNNode</span> *)child;</div></pre></td></tr></table></figure><blockquote><p>根据index加子节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)insertChildNode:(<span class="built_in">SCNNode</span> *)child atIndex:(<span class="built_in">NSUInteger</span>)index;</div></pre></td></tr></table></figure><blockquote><p>从父节点移除</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)removeFromParentNode;</div></pre></td></tr></table></figure><blockquote><p>新的子节点替换某个节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)replaceChildNode:(<span class="built_in">SCNNode</span> *)oldChild with:(<span class="built_in">SCNNode</span> *)newChild;</div></pre></td></tr></table></figure><blockquote><p>Returns the first node found in the node tree with the specified name<br>返回在节点树中找到具有指定名称的第一个节点<br>recursively 递归</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">SCNNode</span> *)childNodeWithName:(<span class="built_in">NSString</span> *)name recursively:(<span class="built_in">BOOL</span>)recursively;</div></pre></td></tr></table></figure><blockquote><p>子节点通过测试<br>Returns the child nodes of the receiver that passes a test in a given Block.返回在给定块中通过测试的接收方的子节点</p><p>predicate:谓词</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">SCNNode</span> *&gt; *)childNodesPassingTest:(<span class="built_in">NS_NOESCAPE</span> <span class="built_in">BOOL</span> (^)(<span class="built_in">SCNNode</span> *child, <span class="built_in">BOOL</span> *stop))predicate;</div></pre></td></tr></table></figure><p>&gt;</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p>系统文档太多了。。。</p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNMaterial- 材质</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-SCNMaterial/"/>
      <content type="html"><![CDATA[<h1 id="SCNMaterial-材质"><a href="#SCNMaterial-材质" class="headerlink" title="SCNMaterial- 材质"></a>SCNMaterial- 材质</h1><blockquote><p>SCNMaterial : NSObject</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)material;</div></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th>Properties</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>name</td><td>NSString</td><td></td><td></td></tr><tr><td>diffuse</td><td>SCNMaterialProperty</td><td>扩散</td><td>漫射属性指定从表面漫反射的光量<br>漫射光在各个方向上都是均匀反射的，因此与视点无关</td></tr><tr><td>ambient</td><td>SCNMaterialProperty</td><td>环境</td><td>环境属性指定要反射的环境光的数量<br>这个属性对没有环境光的场景没有视觉效果<br>如果将locksambientwith扩散设置为YES，则设置环境没有效果</td></tr><tr><td>specular</td><td>SCNMaterialProperty</td><td>镜面</td><td>镜子的属性指定光的数量以类似镜子的方式反射<br>当视点与反射光的方向一致时，镜面强度增加</td></tr><tr><td>emission</td><td>SCNMaterialProperty</td><td>发射</td><td>发射属性指定材料发出的光量<br>这种发射不会照亮场景中的其他表面</td></tr><tr><td>transparent</td><td>SCNMaterialProperty</td><td>透明</td><td>透明属性指定材料的透明区域</td></tr><tr><td>reflective</td><td>SCNMaterialProperty</td><td>反射</td><td>反射特性指定了表面的反射率<br>表面不会真实地反映场景中的其他物体<br>这个属性可以作为一个球体映射来反映一个预先计算的环境</td></tr><tr><td>multiply</td><td>SCNMaterialProperty</td><td>乘法</td><td>乘法属性指定用于将输出片段相乘的颜色或图像<br>计算出的片段与相乘值相乘以产生最后的片段<br>此属性可用于阴影映射、淡出或tint 3d对象</td></tr><tr><td>normal</td><td>SCNMaterialProperty</td><td>普通</td><td>普通属性指定表面方向<br>当一个图像设置在正常的属性上时，每个像素的材料会自动被点亮<br>设置颜色没有效果</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>displacement</td><td>SCNMaterialProperty</td><td>位移</td><td></td></tr><tr><td>ambientOcclusion</td><td>SCNMaterialProperty</td><td>环境闭塞</td><td>指定了表面的环境遮挡<br>环境遮挡与环境光相乘，结果被添加到照明贡献<br>这个属性对没有环境光的场景没有视觉效果<br>当环境遮挡图被设置时，环境属性被忽略。</td></tr><tr><td>selfIllumination</td><td>SCNMaterialProperty</td><td>纹理或颜色</td><td>属性指定一个纹理或颜色，它被添加到表面的照明贡献中<br>当设置一个自填体时，会忽略发射特性</td></tr><tr><td>metalness</td><td>SCNMaterialProperty</td><td>金属属性</td><td>金属属性指定材料表面的金属材质<br>较低的值(较深的颜色)使材料看起来更像介质表面<br>较高的值(较亮的颜色)会使表面看起来更有金属感<br>此属性时才会被“lightingModelName”是“SCNLightingModelPhysicallyBased”。</td></tr><tr><td>roughness</td><td>SCNMaterialProperty</td><td>粗糙度</td><td>粗糙度属性指定表面平滑度<br>较低的颜色(较深的颜色)使材料看起来闪闪发亮，有明确的高光<br>较高的值(较亮的颜色)会导致高光的高光，使材料的弥散性变得更强反射性<br>此属性时才会被“lightingModelName”是“SCNLightingModelPhysicallyBased”</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>shininess</td><td>CGFloat</td><td>亮度值</td><td>默认为1.0</td></tr><tr><td>transparency</td><td>CGFloat</td><td>透明度</td><td>默认为1.0</td></tr><tr><td>lightingModelName</td><td>SCNLightingModel</td><td>明模型名称</td><td>决定了接收机的照明模型<br>请参阅上面的照明模型列表<br>默认为SCNLightingModelBlinn</td></tr><tr><td>litPerPixel</td><td>BOOL</td><td>否按像素点亮</td><td>默认YES</td></tr><tr><td>doubleSided</td><td>BOOL</td><td>是否为双面</td><td>默认NO</td></tr><tr><td>fillMode</td><td>SCNFillMode</td><td>栅格化</td><td>默认为SCNFillModeFill</td></tr><tr><td>cullMode</td><td>SCNCullMode</td><td>筛选模式</td><td>默认为SCNCullBack</td></tr><tr><td>transparencyMode</td><td>SCNTransparencyMode</td><td>透明模式</td><td>透明模式见上文<br>默认为SCNTransparencyModeDefault</td></tr><tr><td>locksAmbientWithDiffuse</td><td>BOOL</td><td>环境属性自动匹配扩散属性</td><td>默认值为YES</td></tr><tr><td>writesToDepthBuffer</td><td>BOOL</td><td>是否写入到深度缓冲区</td><td>默认值为YES</td></tr><tr><td>colorBufferWriteMask</td><td>SCNColorMask</td><td>是否写入颜色缓冲区</td><td>默认为SCNColorMaskAll</td></tr><tr><td>readsFromDepthBuffer</td><td>BOOL</td><td>是否从深度缓冲区读取</td><td>默认值为YES</td></tr><tr><td>fresnelExponent</td><td>CGFloat</td><td>y菲涅耳指数</td><td>默认为0.0<br>反射率特性的影响<br>fresnel指数改变了反射率的指数<br>指数越大，反射就越集中在边缘</td></tr><tr><td>blendMode</td><td>SCNBlendMode</td><td>混合模式</td><td>默认为SCNBlendModeAlpha</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> SCNMaterial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNGeometry-SCNSphere-几何-球</title>
      <link href="/2018/01/17/SceneKit/Grammar/SCNGeometry/SCNGeometry-SCNSphere-%E5%87%A0%E4%BD%95-%E7%90%83/"/>
      <content type="html"><![CDATA[<h1 id="Sphere-几何-球"><a href="#Sphere-几何-球" class="headerlink" title="Sphere 几何-球"></a>Sphere 几何-球</h1><blockquote><p>SCNPlane : SCNGeometry</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>radius:球的半径</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)sphereWithRadius:(<span class="built_in">CGFloat</span>)radius;</div></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>radius</td><td>CGFloat</td><td>球的半径</td><td>默认值是0.5</td></tr><tr><td>geodesic</td><td>BOOL</td><td>测地线</td><td>表示几何是一个岩石圈<br>默认值为NO</td></tr><tr><td>segmentCount</td><td>NSInteger</td><td>段数</td><td>在两个球坐标下的线段数。可以做成动画<br>如果值小于3，则该行为是未定义的。默认值是24</td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>创建 C 原子模型</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> - (<span class="built_in">SCNGeometry</span> *) carbonAtom</div><div class="line">&#123;</div><div class="line">    <span class="built_in">SCNSphere</span> *phere = [<span class="built_in">SCNSphere</span> sphereWithRadius:<span class="number">1.7</span>];</div><div class="line">    phere.firstMaterial.diffuse.contents = [<span class="built_in">UIColor</span> darkGrayColor];</div><div class="line">    phere.firstMaterial.specular.contents = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    <span class="keyword">return</span> phere;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>原子添加到节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">SCNNode</span> *tempNode = [<span class="built_in">SCNNode</span> node];</div><div class="line"><span class="built_in">SCNNode</span> *carbonNode = [<span class="built_in">SCNNode</span> nodeWithGeometry:[<span class="keyword">self</span> carbonAtom]];</div><div class="line">[tempNode addChildNode:carbonNode];</div></pre></td></tr></table></figure><blockquote><p>将创建的原子节点添加到根节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.scene.rootNode addChildNode:[<span class="keyword">self</span> AddFunction]];</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
          <category> SCNGeometry </category>
          
          <category> SCNSphere </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNGeometry</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-SCNGeometry/"/>
      <content type="html"><![CDATA[<h1 id="SCNGeometry-几何"><a href="#SCNGeometry-几何" class="headerlink" title="SCNGeometry 几何"></a>SCNGeometry 几何</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><blockquote><p>创建并返回一个空的几何对象</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)geometry;</div></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>name</td><td>NSString</td><td></td></tr><tr><td>materials</td><td>NSArray<scnmaterial *=""></scnmaterial></td><td>材料数组</td></tr><tr><td>firstMaterial</td><td>SCNMaterial</td><td>决定几何的第一个材料<br>如果几何图形没有材质，返回nil<br>它等价于上面的“材料”数组中的第一个对象</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNScene-场景</title>
      <link href="/2018/01/17/SceneKit/Grammar/SCNScene-%E5%9C%BA%E6%99%AF/SCNScene/"/>
      <content type="html"><![CDATA[<h1 id="SCNScene-场景"><a href="#SCNScene-场景" class="headerlink" title="SCNScene-场景"></a>SCNScene-场景</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>SCNScene : NSObject</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)scene;</div></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>根节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">SCNNode</span> *rootNode;</div></pre></td></tr></table></figure><blockquote><p>物理世界</p></blockquote><ul><li>每个场景自动创建一个物理世界对象来模拟场景中的节点物理</li><li>使用此属性可访问场景的全局物理属性，例如重力</li><li>要将物理添加到特定的节点，请参阅物理体</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">SCNPhysicsWorld</span> *physicsWorld</div></pre></td></tr></table></figure><blockquote><p>背景（材料属性）</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">SCNMaterialProperty</span> *background</div></pre></td></tr></table></figure><blockquote><p>照明环境</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">SCNMaterialProperty</span> *lightingEnvironment</div></pre></td></tr></table></figure><blockquote><p>雾开始距离</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> fogStartDistance ;</div></pre></td></tr></table></figure><blockquote><p>雾结束距离</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> fogEndDistance ;</div></pre></td></tr></table></figure><blockquote><p>雾密度指数</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> fogDensityExponent API_AVAILABLE(macos(<span class="number">10.10</span>));</div></pre></td></tr></table></figure><blockquote><p>雾的颜色</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>) <span class="keyword">id</span> fogColor ;</div></pre></td></tr></table></figure><blockquote><p>停顿</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">getter</span>=isPaused) <span class="built_in">BOOL</span> paused</div></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p>关键属性</p></blockquote><ul><li>abstract:检索场景属性</li><li>指定要读取的属性的NSString对象</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)attributeForKey:(<span class="built_in">NSString</span> *)key;</div></pre></td></tr></table></figure><blockquote><p>attributeForKey</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setAttribute:(<span class="keyword">nullable</span> <span class="keyword">id</span>)attribute forKey:(<span class="built_in">NSString</span> *)key;</div></pre></td></tr></table></figure><blockquote><p>name</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)sceneNamed:(<span class="built_in">NSString</span> *)name</div></pre></td></tr></table></figure><blockquote><p>name </p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)sceneNamed:(<span class="built_in">NSString</span> *)name inDirectory:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)directory options:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">SCNSceneSourceLoadingOption</span>, <span class="keyword">id</span>&gt; *)options ;</div></pre></td></tr></table></figure><blockquote><p>url</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)sceneWithURL:(<span class="built_in">NSURL</span> *)url options:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">SCNSceneSourceLoadingOption</span>, <span class="keyword">id</span>&gt; *)options error:(<span class="built_in">NSError</span> **)error;</div></pre></td></tr></table></figure><blockquote><p>writeToURL</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)writeToURL:(<span class="built_in">NSURL</span> *)url options:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)options delegate:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">SCNSceneExportDelegate</span>&gt;)delegate progressHandler:(<span class="keyword">nullable</span> <span class="built_in">SCNSceneExportProgressHandler</span>)progressHandler;</div></pre></td></tr></table></figure><h3 id="代理协议"><a href="#代理协议" class="headerlink" title="代理协议"></a>代理协议</h3><blockquote><p>SCNSceneExportDelegate</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)writeImage:(<span class="built_in">UIImage</span> *)image withSceneDocumentURL:(<span class="built_in">NSURL</span> *)documentURL originalImageURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)originalImageURL;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNLight</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-SCNLight/"/>
      <content type="html"><![CDATA[<h1 id="SCNLight-光源"><a href="#SCNLight-光源" class="headerlink" title="SCNLight 光源"></a>SCNLight 光源</h1><blockquote><p>光源可以附加到节点上，在渲染场景中提供着色</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>初始化</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ (instancetype)light;</div></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>type</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">SCNLightType</span> type;</div></pre></td></tr></table></figure><table><thead><tr><th>SCNLightType</th><th></th></tr></thead><tbody><tr><td>SCNLightTypeAmbient</td><td>环境光</td></tr><tr><td>SCNLightTypeOmni</td><td>向各方向发出的光照强度一样</td></tr><tr><td>SCNLightTypeDirectional</td><td>平行光</td></tr><tr><td>SCNLightTypeSpot</td><td>聚焦光</td></tr><tr><td>SCNLightTypeIES</td><td></td></tr><tr><td>SCNLightTypeProbe</td></tr></tbody></table><blockquote><p>clolor </p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>) <span class="keyword">id</span> color;</div></pre></td></tr></table></figure><blockquote><p>temperature  温度值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> temperature;</div></pre></td></tr></table></figure><blockquote><p>intensity 亮度值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> intensity</div></pre></td></tr></table></figure><blockquote><p>确定接收方的名称</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">NSString</span> *name;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> SCNLight </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNView</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-SCNView/"/>
      <content type="html"><![CDATA[<h1 id="SCNView"><a href="#SCNView" class="headerlink" title="SCNView"></a>SCNView</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">SCNView</span> : <span class="built_in">UIView</span> &lt;<span class="built_in">SCNSceneRenderer</span>, <span class="built_in">SCNTechniqueSupport</span>&gt;</div></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>options 视图初始化选项</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame options:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)options;</div></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>节点</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>, <span class="keyword">nullable</span>) <span class="built_in">SCNScene</span> *scene;</div></pre></td></tr></table></figure><blockquote><p>是否开启连续绘制（类似定位是否持续定位）</p></blockquote><ul><li>当设置为YES时，视图会连续地重绘显示链路帧速率。</li><li>当设置为NO时，视图只会在接收方场景发生变化或动画时重新绘制。默认为没有。</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> rendersContinuously;</div></pre></td></tr></table></figure><blockquote><p>相机控制</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsCameraControl;</div></pre></td></tr></table></figure><blockquote><p>相机设置</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="keyword">id</span> &lt;<span class="built_in">SCNCameraControlConfiguration</span>&gt; cameraControlConfiguration</div></pre></td></tr></table></figure><blockquote><p>默认相机控制器</p><ul><li>返回默认的SCNCameraController用于驱动当前的视角，当允许cameracontroller设置为YES</li></ul></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonnull</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">SCNCameraController</span>* defaultCameraController</div></pre></td></tr></table></figure><blockquote><p>帧率</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> preferredFramesPerSecond</div></pre></td></tr></table></figure><blockquote><p>指定与接收方关联的EAGL上下文</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>, <span class="keyword">nullable</span>) EAGLContext *eaglContext;</div></pre></td></tr></table></figure><blockquote><p>抗锯齿模式</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">SCNAntialiasingMode</span> antialiasingMode</div></pre></td></tr></table></figure><h2 id="主要API"><a href="#主要API" class="headerlink" title="主要API"></a>主要API</h2><blockquote><p>快照</p></blockquote><ul><li>绘制视图的内容并将其作为一个新的图像对象返回</li><li>方法是线程安全的，可以随时调用</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)snapshot</div></pre></td></tr></table></figure><blockquote><p>播放控制方法</p></blockquote><ul><li>play</li><li>pause</li><li>stop</li></ul><p><a href="http://www.tk4479.net/niceboydo/article/details/54021364" target="_blank" rel="external">SCNView切换相机视角</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> SCNView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SceneKit-SCNAction</title>
      <link href="/2018/01/17/SceneKit/Grammar/SceneKit-SCNAction/"/>
      <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>节点（Node） 动画移动到(19,18,17)这个位置，时间=5s</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> <span class="built_in">SCNAction</span> *action = [<span class="built_in">SCNAction</span> moveTo:<span class="built_in">SCNVector3Make</span>(<span class="number">19</span>,<span class="number">18</span>,<span class="number">17</span>) </div><div class="line">                                      duration:<span class="number">5</span>];</div><div class="line"></div><div class="line">[oneNode runAction: action];</div></pre></td></tr></table></figure><h1 id="SCNAction-主要的API"><a href="#SCNAction-主要的API" class="headerlink" title="SCNAction 主要的API"></a>SCNAction 主要的API</h1><h2 id="SCNAction-属性"><a href="#SCNAction-属性" class="headerlink" title="SCNAction 属性"></a>SCNAction 属性</h2><blockquote><p>时间间隔，真实时间间隔受speed影响</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> duration</div></pre></td></tr></table></figure><blockquote><p>速度系数。假设duration 为10，但speed 为2的话，<br>就是速度是以前的2倍，实际duration 就为5</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> speed</div></pre></td></tr></table></figure><blockquote><p>定时模式,有四个常量值：<br>Constants<br>SCNActionTimingModeLinear 匀速<br>SCNActionTimingModeEaseIn 一开始慢，慢慢加快<br>SCNActionTimingModeEaseOut 一开始快，逐渐变慢<br>SCNActionTimingModeEaseInEaseOut 开始慢慢地,通过中间的时候加速,然后再次放缓</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">SCNActionTimingMode</span> timingMode</div></pre></td></tr></table></figure><h2 id="SCNAction主要的API"><a href="#SCNAction主要的API" class="headerlink" title="SCNAction主要的API"></a>SCNAction主要的API</h2><blockquote><p>将node从x,y,z上各移动到指定位置</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)moveByX:(<span class="built_in">CGFloat</span>)deltaX</div><div class="line">                   y:(<span class="built_in">CGFloat</span>)deltaY</div><div class="line">                   z:(<span class="built_in">CGFloat</span>)deltaZ</div><div class="line">            duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><blockquote><p>向量方式输入参数，移动到指定位置</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)moveBy:(<span class="built_in">SCNVector3</span>)delta</div><div class="line">           duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><blockquote><p>将node移动到location这个位置</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)moveTo:(<span class="built_in">SCNVector3</span>)location</div><div class="line">           duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><blockquote><p>将node从x,y,z上各旋转多少度</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)rotateByX:(<span class="built_in">CGFloat</span>)xAngle</div><div class="line">                     y:(<span class="built_in">CGFloat</span>)yAngle</div><div class="line">                     z:(<span class="built_in">CGFloat</span>)zAngle</div><div class="line">              duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><blockquote><p>/将node从x,y,z上旋转到指定角度</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)rotateToX:(<span class="built_in">CGFloat</span>)xAngle</div><div class="line">                     y:(<span class="built_in">CGFloat</span>)yAngle</div><div class="line">                     z:(<span class="built_in">CGFloat</span>)zAngle</div><div class="line">              duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><p>&gt;</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure><blockquote><p>// 同上，与上面的方法区别在于多了shortestUnitArc 这个参数，BOOL值。<br>//举个例子：我们需要将一个node从 0度旋转到270度，<br>//如果将shortestUnitArc设置为NO，node会顺时针旋转到270度；<br>//如果将shortestUnitArc设置为YES，node会逆时针旋转90度到270度，<br>//即选择最小的旋转角度旋转到特定的度数。默认为NO</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)rotateToX:(<span class="built_in">CGFloat</span>)xAngle</div><div class="line">                     y:(<span class="built_in">CGFloat</span>)yAngle</div><div class="line">                     z:(<span class="built_in">CGFloat</span>)zAngle</div><div class="line">              duration:(<span class="built_in">NSTimeInterval</span>)duration</div><div class="line">       shortestUnitArc:(<span class="built_in">BOOL</span>)shortestUnitArc</div></pre></td></tr></table></figure><blockquote><p>// 沿着特定的轴旋转angle度。前面旋转都是沿x,y,z轴旋转，都是互相垂直的，<br>//大家有没有想过如何沿着与x轴成45度夹角的方向旋转node？<br>//这个API大家这里留意一下，<br>//上篇提到的不在X-Z 这个平面旋转，会用这个方法在后面的demo中解决。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)rotateByAngle:(<span class="built_in">CGFloat</span>)angle</div><div class="line">                aroundAxis:(<span class="built_in">SCNVector3</span>)axis</div><div class="line">                  duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><blockquote><p>// SCNVector4(x,y,z,angle)  沿着特定的轴旋转到angle度。<br>//这里解释一下angle 类似π，如果angle=2,<br>//我们可不能理解为旋转到2度，而是旋转到2/π*180 度</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)rotateToAxisAngle:(<span class="built_in">SCNVector4</span>)axisAngle</div><div class="line">                      duration:(<span class="built_in">NSTimeInterval</span>)duration</div></pre></td></tr></table></figure><blockquote><p>缩小（放大）By 多少</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)scaleBy:(<span class="built_in">CGFloat</span>)scale</div><div class="line">            duration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>缩小（放大）到 To多少</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)scaleTo:(<span class="built_in">CGFloat</span>)scale</div><div class="line">            duration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>淡入<br>将node 的opacity 渐渐变成1</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)fadeInWithDuration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>淡出</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)fadeOutWithDuration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>将node 的opacity 渐渐变化特定的数值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)fadeOpacityBy:(<span class="built_in">CGFloat</span>)factor</div><div class="line">                   duration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>将node 的opacity 渐渐变化到特定的数值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)fadeOpacityTo:(<span class="built_in">CGFloat</span>)opacity</div><div class="line">                   duration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>隐藏node</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)hide</div></pre></td></tr></table></figure><blockquote><p>显示node</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)unhide</div></pre></td></tr></table></figure><blockquote><p>移除node</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)removeFromParentNode</div></pre></td></tr></table></figure><blockquote><p>播放音频 waitForCompletion，BOOL值</p></blockquote><ul><li>如果为YES Action的duration就是音频的时长</li><li>如果为NO，可以认为duration 为0</li><li>可以去看SCNAudioPlayer 的API</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)playAudioSource:(<span class="built_in">SCNAudioSource</span> *)source</div><div class="line">            waitForCompletion:(<span class="built_in">BOOL</span>)wait</div></pre></td></tr></table></figure><blockquote><p>roup 被用来并发执行多个SCNAction</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)group:(<span class="built_in">NSArray</span>&lt;<span class="built_in">SCNAction</span> *&gt; *)actions</div></pre></td></tr></table></figure><blockquote><p>顺序执行多个SCNAction，上个SCNAction执行结束后，才执行下个SCNAction</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)sequence:(<span class="built_in">NSArray</span>&lt;<span class="built_in">SCNAction</span> *&gt; *)actions</div></pre></td></tr></table></figure><blockquote><p>将一个SCNAction执行count 次</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)repeatAction:(<span class="built_in">SCNAction</span> *)action</div><div class="line">                      count:(<span class="built_in">NSUInteger</span>)count</div></pre></td></tr></table></figure><blockquote><p>一直执行某个SCNAction</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)repeatActionForever:(<span class="built_in">SCNAction</span> *)action</div></pre></td></tr></table></figure><blockquote><p>延迟SCNAction</p></blockquote><ul><li>比如用sequence 顺序执行多个SCNAction时，</li><li>可以给SCNAction a,c  中间添加一个SCNAction b,  </li><li>等a执行结束后，延迟一会，再去执行c</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)waitForDuration:(<span class="built_in">NSTimeInterval</span>)sec</div></pre></td></tr></table></figure><blockquote><p>自定义SCNAction ，你可以在block 做一些操作</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)runBlock:(<span class="keyword">void</span> (^)(<span class="built_in">SCNNode</span> *node))block</div></pre></td></tr></table></figure><blockquote><p>在一个特定的队列中，执行block</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)runBlock:(<span class="keyword">void</span> (^)(<span class="built_in">SCNNode</span> *node))block</div><div class="line">                 queue:(<span class="built_in">dispatch_queue_t</span>)queue</div></pre></td></tr></table></figure><blockquote><p>上篇数学旋转用到的方法，当这个SCNAction执行时，<br>SceneKit 在这个时间间隔内会重复调用actionBlock，<br>并将已逝去的时间传给actionBlock</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)customActionWithDuration:(<span class="built_in">NSTimeInterval</span>)seconds</div><div class="line">                           actionBlock:(<span class="keyword">void</span> (^)(<span class="built_in">SCNNode</span> *node,</div><div class="line">                                                 <span class="built_in">CGFloat</span> elapsedTime))block</div></pre></td></tr></table></figure><blockquote><p>在时间间隔内，执行一段JavaScript代码</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">SCNAction</span> *)javaScriptActionWithScript:(<span class="built_in">NSString</span> *)script</div><div class="line">                                duration:(<span class="built_in">NSTimeInterval</span>)seconds</div></pre></td></tr></table></figure><blockquote><p>逆转一个已经创建的SCNAction</p></blockquote><ul><li>相当于CABasicAnimation的autoreverses属性</li><li>哪里来的，回哪里去</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">SCNAction</span> *)reversedAction</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
            <tag> SCNAction </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scenekit-Roation-旋转</title>
      <link href="/2018/01/16/SceneKit/Grammar/Scenekit-Roation-%E6%97%8B%E8%BD%AC/"/>
      <content type="html"><![CDATA[<h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><blockquote><p>每个SCNNode 都有自身的三维坐标系，用CABasicAnimation让SCNNode绕自身的三维坐标轴旋转，所以要特别注意是坐标轴，不是这个SCNNode的几何中心。<br>一般SceneKit 的自带的几个几何体的坐标系原点(0,0,0)就是这个它的几何中心，比如说SCNBox；SCNSphere等等</p></blockquote><h1 id="先实现地球，月球自转"><a href="#先实现地球，月球自转" class="headerlink" title="先实现地球，月球自转"></a>先实现地球，月球自转</h1>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OC-Lib-WCDB -简单使用参考</title>
      <link href="/2018/01/12/OC/Lib/WCDB/OC-Lib-WCDB%20-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83/"/>
      <content type="html"><![CDATA[<h1 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h1><blockquote><p>Message.h</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Message</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span>         <span class="keyword">int</span>      localID;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="built_in">NSString</span> *content;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="built_in">NSDate</span>   *createTime;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="built_in">NSDate</span>   *modifiedTime;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><blockquote><p>Message.mm</p></blockquote><ul><li>绑定到表的类</li><li>绑定到表中的字段</li><li>主键</li><li>索引属性</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Message</span></span></div><div class="line"> </div><div class="line"><span class="comment">// 利用这个宏定义绑定到表的类</span></div><div class="line">WCDB_IMPLEMENTATION(Message) </div><div class="line"></div><div class="line"><span class="comment">// 下面四个宏定义绑定到表中的字段</span></div><div class="line">WCDB_SYNTHESIZE(Message, localID)</div><div class="line">WCDB_SYNTHESIZE(Message, content)</div><div class="line">WCDB_SYNTHESIZE(Message, createTime)</div><div class="line">WCDB_SYNTHESIZE(Message, modifiedTime)</div><div class="line"></div><div class="line"><span class="comment">// 约束宏定义数据库的主键</span></div><div class="line">WCDB_PRIMARY(Message, localID)</div><div class="line"></div><div class="line"><span class="comment">// 定义数据库的索引属性，它直接定义createTime字段为索引</span></div><div class="line"><span class="comment">// 同时 WCDB 会将表名 + "_index" 作为该索引的名称</span></div><div class="line">WCDB_INDEX(Message, <span class="string">"_index"</span>, createTime)</div></pre></td></tr></table></figure><h1 id="类别扩展（model）"><a href="#类别扩展（model）" class="headerlink" title="类别扩展（model）"></a>类别扩展（model）</h1><blockquote><p>Message+WCTTableCoding.h</p></blockquote><ul><li>要导入WCDB  </li><li>协议  WCTTableCoding</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"Message.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;WCDB/WCDB.h&gt;</span> </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Message</span> (<span class="title">WCTTableCoding</span>) &lt;<span class="title">WCTTableCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 实现WCTTableCoding代理  </span></div><div class="line"><span class="comment">// 需要绑定到表中的字段在这里声明，在.mm中去绑定</span></div><div class="line">WCDB_PROPERTY(localID)</div><div class="line">WCDB_PROPERTY(content)</div><div class="line">WCDB_PROPERTY(createTime)</div><div class="line">WCDB_PROPERTY(modifiedTime)</div></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">//获取沙盒根目录</span></div><div class="line">  <span class="built_in">NSString</span> *documentsPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">  </div><div class="line">  <span class="comment">// 文件路径</span></div><div class="line">  <span class="built_in">NSString</span> *filePath = [documentsPath stringByAppendingPathComponent:<span class="string">@"model.sqlite"</span>];</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"path = %@"</span>,filePath);</div><div class="line">  </div><div class="line">  database = [[WCTDatabase alloc]initWithPath:filePath];</div><div class="line">  <span class="comment">// 数据库加密</span></div><div class="line">  <span class="built_in">NSData</span> *password = [<span class="string">@"MyPassword"</span> dataUsingEncoding:<span class="built_in">NSASCIIStringEncoding</span>];</div><div class="line">  [database setCipherKey:password];</div><div class="line">  <span class="comment">//测试数据库是否能够打开</span></div><div class="line">  <span class="keyword">if</span> ([database canOpen]) &#123;</div><div class="line">      </div><div class="line">      <span class="comment">// WCDB大量使用延迟初始化（Lazy initialization）的方式管理对象，因此SQLite连接会在第一次被访问时被打开。开发者不需要手动打开数据库。</span></div><div class="line">      <span class="comment">// 先判断表是不是已经存在</span></div><div class="line">      <span class="keyword">if</span> ([database isOpened]) &#123;</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> ([database isTableExists:tableName]) &#123;</div><div class="line">              </div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"表已经存在"</span>);</div><div class="line">              </div><div class="line">          &#125;<span class="keyword">else</span> &#123;</div><div class="line">            [database createTableAndIndexesOfName:tableName withClass:Message.class];</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">Message *message = [[Message alloc] init];</div><div class="line">message.localID = <span class="number">1</span>;</div><div class="line">message.content = <span class="string">@"Hello, WCDB!"</span>;</div><div class="line">message.createTime = [<span class="built_in">NSDate</span> date];</div><div class="line">message.modifiedTime = [<span class="built_in">NSDate</span> date];</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> INSERT INTO message(localID, content, createTime, modifiedTime)</span></div><div class="line"><span class="comment"> VALUES(1, "Hello, WCDB!", 1496396165, 1496396165);</span></div><div class="line"><span class="comment"> */</span></div><div class="line">  [database insertObject:message  into:<span class="string">@"message"</span>];</div></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">//UPDATE message SET content="Hello, Wechat!";</span></div><div class="line">Message *message = [[Message alloc] init];</div><div class="line">message.content = <span class="string">@"Hello, Wechat!"</span>;</div><div class="line">    </div><div class="line"><span class="comment">//下面这句在17号的时候和微信团队的人在学习群里面沟通过，这个方法确实是不存在的，使用教程应该会更新，要是没更新注意这个方法</span></div><div class="line"><span class="comment">//BOOL result = [database updateTable:@"message" onProperties:Message.content withObject:message];</span></div><div class="line">[database updateAllRowsInTable:<span class="string">@"message"</span> onProperty:Message.content withObject:message];</div></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//SELECT * FROM message ORDER BY localID</span></div><div class="line"><span class="built_in">NSArray</span>&lt;Message *&gt; * message = [database getObjectsOfClass:Message.class fromTable:<span class="string">@"message"</span> orderBy:Message.localID.order()];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"&gt;&gt;&gt;&gt; %@"</span>,message);</div></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[database deleteObjectsFromTable:<span class="string">@"message"</span> where:Message.localID &gt; <span class="number">0</span>];</div></pre></td></tr></table></figure><h2 id="WCTDatabase-事务操作，利用WCTTransaction"><a href="#WCTDatabase-事务操作，利用WCTTransaction" class="headerlink" title="WCTDatabase 事务操作，利用WCTTransaction"></a>WCTDatabase 事务操作，利用WCTTransaction</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> ret = [database beginTransaction];</div><div class="line">   ret = [<span class="keyword">self</span> insertMessage];</div><div class="line">   <span class="keyword">if</span> (ret) &#123;</div><div class="line">       </div><div class="line">       [database commitTransaction];</div><div class="line">       </div><div class="line">   &#125;<span class="keyword">else</span></div><div class="line">       </div><div class="line">       [database rollbackTransaction];</div><div class="line">   </div><div class="line">   <span class="keyword">return</span> ret;</div></pre></td></tr></table></figure><h2 id="使用Block处理事务"><a href="#使用Block处理事务" class="headerlink" title="使用Block处理事务"></a>使用Block处理事务</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> commit  =  [database runTransaction:^<span class="built_in">BOOL</span>&#123;</div><div class="line">      </div><div class="line">         <span class="built_in">BOOL</span> ret = [<span class="keyword">self</span> insertMessage];</div><div class="line">         <span class="keyword">if</span> (ret) &#123;</div><div class="line">             </div><div class="line">             <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">             </div><div class="line">         &#125;<span class="keyword">else</span></div><div class="line">             <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">         </div><div class="line">     &#125; event:^(WCTTransactionEvent event) &#123;</div><div class="line">         </div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"Event %d"</span>, event);</div><div class="line">     &#125;];</div><div class="line">    <span class="keyword">return</span> commit;</div></pre></td></tr></table></figure><h2 id="FMDB迁移到WCDB"><a href="#FMDB迁移到WCDB" class="headerlink" title="FMDB迁移到WCDB"></a>FMDB迁移到WCDB</h2><p><a href="https://github.com/Tencent/wcdb/wiki/%E4%BB%8EFMDB%E8%BF%81%E7%A7%BB%E5%88%B0WCDB" target="_blank" rel="external">FMDB迁移到WCDB</a></p><p><a href="https://github.com/Tencent/wcdb/wiki/ORM%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" target="_blank" rel="external">ORM</a></p><p><a href="https://www.jianshu.com/p/7395f778c020" target="_blank" rel="external">资料1 </a></p><p><a href="https://github.com/Tencent/wcdb/wiki/iOS-macOS%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" target="_blank" rel="external">官方简单使用文档</a><br><a href="http://blog.csdn.net/wgl_happy/article/details/77584519" target="_blank" rel="external">资料2</a></p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> WCDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Lib </tag>
            
            <tag> WCDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-Lib-WCDB</title>
      <link href="/2018/01/12/OC/Lib/WCDB/OC-Lib-WCDB/"/>
      <content type="html"><![CDATA[<h1 id="WCDB"><a href="#WCDB" class="headerlink" title="WCDB"></a>WCDB</h1><blockquote><p>文档</p></blockquote><p><a href="https://github.com/Tencent/wcdb" target="_blank" rel="external">WCDB 使用 官方iOS文档</a></p><blockquote><p>CocoaPods</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod &apos;WCDB&apos;</div></pre></td></tr></table></figure><blockquote><p>引入</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#import &lt;WCDB/WCDB.h&gt;</div></pre></td></tr></table></figure><blockquote><p>⚠️引用注意</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">WCDB是基于Objective-C++，需要将引用WCDB的源文件后缀.m改为.mm。</div></pre></td></tr></table></figure><blockquote><p>iOS 11中Bug</p></blockquote><ul><li>需要在pod中指定该库的地址，并且指定分支master</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  target &apos;WCDBDemo&apos; do</div><div class="line"></div><div class="line">platform:ios,&quot;8.0&quot;</div><div class="line"></div><div class="line">pod &apos;WCDB&apos;,git: &apos;https://github.com/Tencent/wcdb.git&apos; , branch: &apos;master&apos;</div><div class="line">pod &apos;YYModel&apos;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure><h1 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h1><h2 id="WCDB-1"><a href="#WCDB-1" class="headerlink" title="WCDB"></a>WCDB</h2><blockquote><p>易用</p></blockquote><ul><li>WCDB支持一句代码即可将数据取出并组合为object</li></ul><blockquote><p>WINQ(WCDB语言集成查询)</p></blockquote><ul><li>通过WINQ，开发者无须为了拼接SQL的字符串而写一大坨胶水代码</li></ul><blockquote><p>ORM(Object Relational Mapping)</p></blockquote><ul><li>将一个ObjC的类，映射到数据库的表和索引；</li><li>将类的property，映射到数据库表的字段</li><li>通过ORM，可以达到直接通过Object进行数据库操作，省去拼装过程的目的</li><li>WCDB支持灵活、易用的ORM</li><li>开发者可以很便捷地定义表、索引、约束，并进行增删改查操作</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[database getObjectsOfClass:WCTSampleConvenient.class</div><div class="line">                 fromTable:tableName</div><div class="line">                     where:WCTSampleConvenient.intValue&gt;=<span class="number">10</span></div><div class="line">                     limit:<span class="number">20</span>];</div></pre></td></tr></table></figure><blockquote><p>高效</p></blockquote><ul><li>WCDB通过框架层和sqlcipher源码优化，使其更高效的表现</li></ul><blockquote><p>多线程高并发</p></blockquote><ul><li>WCDB支持多线程读与读、读与写并发执行，写与写串行执行</li></ul><blockquote><p>批量写操作性能测试</p></blockquote><ul><li>性能数据，请参考benchmark</li></ul><blockquote><p>完整(WCDB覆盖了数据库相关各种场景的所需功能)</p></blockquote><ul><li>加密：WCDB提供基于SQLCipher的数据库加密</li><li>损坏修复：WCDB内建了Repair Kit用于修复损坏的数据库</li><li>反注入：WCDB内建了对SQL注入的保护</li></ul><h1 id="已有的OC类QRM绑定的过程"><a href="#已有的OC类QRM绑定的过程" class="headerlink" title="已有的OC类QRM绑定的过程"></a>已有的OC类QRM绑定的过程</h1><h2 id="①协议、定义"><a href="#①协议、定义" class="headerlink" title="①协议、定义"></a>①协议、定义</h2><blockquote><p>定义该类遵守WCTTableCoding协议<br>可以在类声明上定义<br>也可以通过文件模版在category内定义</p></blockquote><ul><li>推荐用第2种，通过文件模板在category内定义，为了隔离Objective-C++代码</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">不通过category定义，而是选择了在类声明中写，</div><div class="line">这样的话Message.h 中就需要有宏WCDB_PROPERTY，这样你就在Message.h使用了WCDB的代码，</div><div class="line">当你把Message.h在其他Controller/View中引用的时候，那相应的Controller/View的.m就需要修改成.mm 。</div><div class="line">造成不必要的工作，但你用第二种方法写的时候，你就发现在Message.h中是没有任何的关于WCDB的代码的，后面你引用也不需要再去修改</div></pre></td></tr></table></figure><h2 id="②修改文件"><a href="#②修改文件" class="headerlink" title="②修改文件"></a>②修改文件</h2><blockquote><p>WCDB基于WINQ，引入了Objective-C++代码，所以对于引入了WCDB的源文件，都需要把后缀.m改为.mm<br>为减少影响范围，可以通过Objective-C的category特性将其隔离，达到只在model层使用Objective-C++编译，而不影响Controller和View<br>这一点在Wiki中是有提到的</p></blockquote><h2 id="③使用WCDB-PROPERTY宏"><a href="#③使用WCDB-PROPERTY宏" class="headerlink" title="③使用WCDB_PROPERTY宏"></a>③使用WCDB_PROPERTY宏</h2><blockquote><p>使用WCDB_PROPERTY宏在头文件声明需要绑定到数据库表的字段(也就是把你的表里面需要的字段在这里用这宏声明一次)<br>使用WCDB_IMPLEMENTATIO宏在类文件定义绑定到数据库表的类（把这个类绑定到数据库的表，你会在下面创建数据库的时候创建相应的表，表会和类绑定）<br>使用WCDB_SYNTHESIZE宏在类文件定义绑定到数据库表的类（第二步声明了表需要的字段，第三步绑定了表中的类，第四步就等于把表和字段绑定）</p></blockquote><table><thead><tr><th>宏</th><th>声明</th><th>绑定到数据库表</th><th></th></tr></thead><tbody><tr><td>WCDB_PROPERTY</td><td>头文件声明</td><td>字段</td><td></td></tr><tr><td>WCDB_IMPLEMENTATIO</td><td>类类文件定义</td><td>类</td><td></td></tr><tr><td>WCDB_SYNTHESIZE</td><td>类文件定义</td><td>字段</td></tr><tr><td></td><td></td><td></td></tr><tr><td>WCDB_PRIMARY</td><td></td><td>主键</td><td>可选的宏</td></tr><tr><td>WCDB_INDEX</td><td></td><td>索引</td><td>可选的宏</td></tr><tr><td>WCDB_UNIQUE</td><td></td><td>唯一约束</td><td>可选的宏</td></tr><tr><td>WCDB_NOT_NULL</td><td></td><td>非空约束</td><td>可选的宏</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> WCDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lib </tag>
            
            <tag> WCDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-QMUIKit</title>
      <link href="/2018/01/12/OC/Lib/QMUIKit/OC-QMUIKit/"/>
      <content type="html"><![CDATA[<h1 id="QMUIKit"><a href="#QMUIKit" class="headerlink" title="QMUIKit"></a>QMUIKit</h1><p><a href="http://qmuiteam.com/ios/page/start.html#qw_downloadForUse" target="_blank" rel="external">QMUIKit 使用 官方文档</a></p><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod &apos;QMUIKit&apos;</div><div class="line"></div><div class="line">#import &lt;QMUIKit/QMUIKit.h&gt;</div></pre></td></tr></table></figure><h2 id="QMUI-iOS-主要由-5-大部分组成："><a href="#QMUI-iOS-主要由-5-大部分组成：" class="headerlink" title="QMUI iOS 主要由 5 大部分组成："></a>QMUI iOS 主要由 5 大部分组成：</h2><h3 id="QMUICore"><a href="#QMUICore" class="headerlink" title="QMUICore"></a>QMUICore</h3><blockquote><p>配置表、全局的宏、工具方法等，是所有 QMUI 类的基础代码</p></blockquote><h3 id="QMUIMainFrame"><a href="#QMUIMainFrame" class="headerlink" title="QMUIMainFrame"></a>QMUIMainFrame</h3><blockquote><p>几个常用的 UIViewController 的基类，建议将这几个基类作为你项目里的对应 class 的父类，QMUI iOS 有大量功能也是基于这几个基类实现</p></blockquote><h3 id="UIKitExtensions"><a href="#UIKitExtensions" class="headerlink" title="UIKitExtensions"></a>UIKitExtensions</h3><blockquote><p>对系统 UIKit 的拓展，所有 Category 的方法、属性均会带 qmui_ 前缀，以避免冲突</p></blockquote><h3 id="QMUIComponents"><a href="#QMUIComponents" class="headerlink" title="QMUIComponents"></a>QMUIComponents</h3><blockquote><p>提供大量常用的控件，具体的控件列表、效果展示、使用代码示例请查看 QMUI Demo。</p><h3 id="QMUIResources"><a href="#QMUIResources" class="headerlink" title="QMUIResources"></a>QMUIResources</h3><p>存储 QMUI 控件里可能用到的一些图，例如表情面板的删除按钮、选图控件的 checkbox、QMUITips 那些成功、失败的 icon 等。</p></blockquote><p><a href="http://qmuiteam.com/ios/page/document.html" target="_blank" rel="external">功能列表</a></p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p><a href="https://github.com/Tencent/MLeaksFinder" target="_blank" rel="external">腾讯开源iOS自动内存泄露检测工具MLeaksFinder</a></p><p><a href="https://github.com/Tencent/wcdb" target="_blank" rel="external">腾讯开源的数据库框架</a></p><p><a href="https://github.com/QMUI/QMUI_iOS" target="_blank" rel="external">QMUI iOS——致力于提高项目 UI 开发效率的解决方案</a></p><p><a href="https://github.com/Tencent/VasSonic" target="_blank" rel="external">专注于提升H5首屏速度优化</a></p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> QMUIKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QMUIKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Lib-CYLTabBarCtl</title>
      <link href="/2018/01/10/OC/Lib/CYLTabBarCtl/OC-Lib-CYLTabBarCtl/"/>
      <content type="html"><![CDATA[<p><a href="https://github.com/ChenYilong/CYLTabBarController#%E9%9B%86%E6%88%90%E5%90%8E%E7%9A%84%E6%95%88%E6%9E%9C" target="_blank" rel="external">Github Adress</a></p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> CYLTabBarCtl </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SceneKit-Panorama-全景图</title>
      <link href="/2018/01/10/SceneKit/Grammar/SceneKit-Panorama-%E5%85%A8%E6%99%AF%E5%9B%BE/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git-Gitlab代码托管配置</title>
      <link href="/2018/01/09/Git/Git-Gitlab%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h1 id="Gitlab平台设置"><a href="#Gitlab平台设置" class="headerlink" title="Gitlab平台设置"></a>Gitlab平台设置</h1><p>为Project添加Gitcd “本地项目的路径”</p><p> git init //初始化</p><p> git remote add origin git@gitlab.com:USERNAME/PROJECTNAME.git //将”USERNAME”和”PROJECTNAME”替换为自己的用户名和项目名</p><p> git add . //注意add和”.”之间的空格</p><p> git commit -m ‘commit description’</p><p>  //提交改动到本地库git push -u origin master //push到Gitlab</p><h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><p>  需要注意，输入commit命令后会提示输入commit message，如下图，对终端不熟悉的同学可能要抓狂了，这里需要按s键进入INSERT模式,开始输入commit message，最后按ESC，然后输入:wq退出commit message输入模式</p><p>注意：建议commit message第一行输入标题（概要），空一行再输入详细信息。当然，这是建议，如果你觉得无所谓，也可以随意输入或直接:wq跳过</p><p>输入commit message</p><h1 id="坑No-2"><a href="#坑No-2" class="headerlink" title="坑No.2"></a>坑No.2</h1><p>git push -u origin master命令后可以看到提示：error: src refspec master does not match any.error: failed to push some refs to ‘git@gitlab.com:int1987/testProject.git’</p><p>这是因为没有项目说明书，所以push失败</p><p>解决方案：<br>touch README //生成说明文件</p><p>git add README //添加说明文件到</p><p>git commit -m ‘commit readme file’ //提交改动</p><p>Push到Gitlab添加README后再重新输入git push -u origin master，push项目到Gitlab，</p><p>首次push会提示gitlab.com的真实性无法确定，输入yes，确定即可。之后gitlab.com就会被添加到已知服务器（可以在~/.ssh文件夹中查看到多了一个known_hosts文件，它就是存储已知服务器的文件）</p><p>Gitlab <a href="https://baijiahao.baidu.com/s?id=1560915146966961&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">https://baijiahao.baidu.com/s?id=1560915146966961&amp;wfr=spider&amp;for=pc</a></p><p><a href="http://blog.csdn.net/lemonaha/article/details/69977098" target="_blank" rel="external">http://blog.csdn.net/lemonaha/article/details/69977098</a></p>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-SceneKit-Reference</title>
      <link href="/2018/01/09/SceneKit/Grammar/SceneKit-Reference/"/>
      <content type="html"><![CDATA[<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p> <a href="https://www.jianshu.com/p/079a05381f02" target="_blank" rel="external">参考学习1</a><br> <a href="https://juejin.im/post/5a322530f265da43062ac948" target="_blank" rel="external">参考学习2</a></p><p><a href="https://juejin.im/user/5a311af051882554bd510dd0" target="_blank" rel="external">只能学习而已，太难</a></p><p><a href="https://gitee.com/Roc.Tian/Blog_DEMO" target="_blank" rel="external">没找到博客</a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-SceneKit-展示3D模型&amp;施加动画</title>
      <link href="/2018/01/08/SceneKit/Grammar/SceneKit-%E5%B1%95%E7%A4%BA3D%E6%A8%A1%E5%9E%8B&amp;%E6%96%BD%E5%8A%A0%E5%8A%A8%E7%94%BB/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-SceneKit-加载obj文件</title>
      <link href="/2018/01/08/SceneKit/Grammar/SceneKit-%E5%8A%A0%E8%BD%BDobj%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/6a761a834ab9" target="_blank" rel="external"></a></p>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SceneKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-SceneKit-Base</title>
      <link href="/2018/01/08/SceneKit/Grammar/SceneKit-%20Base/"/>
      <content type="html"><![CDATA[<h1 id="SceneKit"><a href="#SceneKit" class="headerlink" title="SceneKit"></a>SceneKit</h1><h2 id="SceneKit-的三维坐标系"><a href="#SceneKit-的三维坐标系" class="headerlink" title="SceneKit 的三维坐标系"></a>SceneKit 的三维坐标系</h2><blockquote><p>右手坐标系(笛卡尔坐标系)<br>与其他3D框架共享数据，了解其框架是右、左手坐标系（就是Z 轴的正负不一样）</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/SceneKit%20%E7%9A%84%E4%B8%89%E7%BB%B4%E5%9D%90%E6%A0%87%E7%B3%BB.jpg" alt="三维坐标系"></p><h2 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>SCNView<br>SCNSceneRenderer</td><td>类似UIView</td><td>用来显示 SceneKit 的内容，定义了一些代理方法，可以用 addSubView 方法添加到UiView 中</td></tr><tr><td>SCNScene</td><td>场景图(SceneKit内容的容器)</td><td>从3D建模工具生成的.dae文件中加载一个场景，或者用代码创建一个 ，然后把它显示在视图上</td></tr><tr><td>SCNNode</td><td>节点树的模型类对象</td><td>可以把摄像机，灯光，几何体附加到节点上</td></tr><tr><td>SCNGeometry</td><td>一个可以连接到一个节点的三维物体</td><td>一个几何体（有时称为模型或网格）只定义了一个可见物体的形状。要定义对象的表面颜色图案，你必需要给几何体要附加材料。然后给材料贴图，或者上色，这个几何体表面才会有颜色，或者图案。SceneKit 提供了几种常见几何体，是SCNGeometry的子类，比如长方体，球，圆柱球等等</td></tr><tr><td>SCNMaterial</td><td>材质</td><td>由于在3D建模工具中呈现球形，所以也叫材质球。上色，贴图全靠它</td></tr><tr><td>SCNLight</td><td>光源</td><td>光源可以附加到节点上，在渲染场景中提供着色</td></tr><tr><td>SCNCamera</td><td>虚拟摄像机,观察场景的视角</td><td>虚拟摄像机可以附加到节点上，提供了一个场景的视图<br>要显示场景中的内容, 必须为节点指定一个SCNCamera对象<br>相机的视角始终沿着节点的局部坐标系的负z轴</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> SceneKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SceneKit </tag>
            
            <tag> 3D引擎 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Lib-ArcGIS-大图加载</title>
      <link href="/2018/01/08/OC/Lib/ArcGIS/OC-Lib-ArcGIS-%E5%A4%A7%E5%9B%BE%E5%8A%A0%E8%BD%BD/"/>
      <content type="html"><![CDATA[<p>资料</p><p><a href="https://developers.arcgis.com" target="_blank" rel="external">https://developers.arcgis.com</a></p><p><a href="http://blog.csdn.net/pzhtpf/article/details/51027047" target="_blank" rel="external">http://blog.csdn.net/pzhtpf/article/details/51027047</a></p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Lib </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 大图加载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git-常用的命令</title>
      <link href="/2018/01/08/Git/Git-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  1. git status（查看本地分支文件信息，确保更新时不产生冲突）</div><div class="line"></div><div class="line">2. git checkout -- [file name] （若文件有修改，可以还原到最初状态; 若文件需要更新到服务器上，应该先merge到服务器，再更新到本地）</div><div class="line"></div><div class="line">3. git branch（查看当前分支情况）</div><div class="line"></div><div class="line">4. git checkout [remote branch](若分支为本地分支，则需切换到服务器的远程分支)</div><div class="line"></div><div class="line">5. git pull</div><div class="line"></div><div class="line">若命令执行成功，则更新代码成功！</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> &lt;a&gt;github的提交方式 </div><div class="line">     （1）git add .--------------------存储到本地 </div><div class="line">         git commit -m &apos;message&apos;-------存储时的标记（修改了哪些地方，方便下次查询） </div><div class="line">         git pull------------------------下载服务器代码 </div><div class="line">         git push------------------------上传代码至服务器 </div><div class="line">  &lt;b&gt;svn服务器的提交方式 </div><div class="line">   （1）git add .  ------------------存储到本地 </div><div class="line">        git commit -m &apos;message&apos;--------存储时的标记（修改了哪些地方，方便下次查询） </div><div class="line">        git svn rebase------------------下载服务器代码 </div><div class="line">        git svn dcommit-----------------上传代码至服务器 </div><div class="line">   &lt;c&gt;其他相关的git命令 </div><div class="line">（1）git branch-------------------查看当前属于哪个分支 </div><div class="line">    1、只有冲突存在时才会修改分支——改为冲突再git add . </div><div class="line">    2、git rebase –-continue-------------------自动合并 </div><div class="line">    3、git checkout –b svn 新建分支名----------新建分支存储现有文件 </div><div class="line">    4、git branch-------------------------------查看在哪个分支下 </div><div class="line">    5、git checkout master----------------------将其放到master分支下 </div><div class="line">    6、git merge-------------------------------整合分支 </div><div class="line">    7、git branch -d 分支名----------------------删除分支 </div><div class="line">（2）git checkout + 上传的commit编号-----------将本地代码恢复到此状态 </div><div class="line">（3）git log------------------------------------查看本地git上传日志 </div><div class="line">（4）git log -p app/controllers/grids_controller.rb----查看某个文件的修改历史 </div><div class="line">（5）git checkout d0eb6ef3afe8a377943d3cf6f1e9c320c18f6f32 </div><div class="line">     app/controllers/charts_controller.rb-----------返回到这个版本的文件（重现错误） </div><div class="line">（6）git diff ＋ commit编号--------------------------查询不同代码</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-MVVM-Login 登录注册</title>
      <link href="/2018/01/01/RxSwift/Demo/Swift-RxSwift-MVVM-Login%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/"/>
      <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="注册界面需求"><a href="#注册界面需求" class="headerlink" title="注册界面需求"></a>注册界面需求</h2><ul><li>输入用户名必须大于等于6个字符，不然密码不能输入；</li><li>密码必须大于等于6个字符，不然重复密码不能输入；</li><li>重复密码和密码必须一样， 不能注册按钮不能点击；</li><li>点击注册按钮，提示注册成功或者注册失败；</li><li>注册成功会写进本地的plist文件，然后输入用户名会检测该用户名是否已注册</li></ul><h2 id="登录界面需求"><a href="#登录界面需求" class="headerlink" title="登录界面需求"></a>登录界面需求</h2><ul><li>点击输入用户名，检测是否已存在，如果存在，户名可用，否则提示用户名不存在；</li><li>输入密码，点击登录，如果密码错则提示密码错误，否则进入列表界面，提示登录成功</li></ul><h1 id="注册界面UI-ViewController-swift"><a href="#注册界面UI-ViewController-swift" class="headerlink" title="注册界面UI(ViewController.swift)"></a>注册界面UI(ViewController.swift)</h1><blockquote><p>封装初始化UI</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">initUI()  <span class="comment">//设置UI</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: UI设置</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initUI</span><span class="params">()</span></span>&#123;</div><div class="line">    view.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line">    view.addSubview(userNameLab)</div><div class="line">    view.addSubview(userNameTextField)</div><div class="line">    view.addSubview(userNameInputLab)</div><div class="line">    </div><div class="line">    view.addSubview(passWordLab)</div><div class="line">    view.addSubview(passWordTextField)</div><div class="line">    view.addSubview(passWordInputLab)</div><div class="line">    </div><div class="line">    view.addSubview(checkPassWordLab)</div><div class="line">    view.addSubview(checkPassWordTextField)</div><div class="line">    view.addSubview(checkPassWordLab)</div><div class="line">    </div><div class="line">    view.addSubview(registerBtn)</div><div class="line">    view.addSubview(loginBtn)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Service网络请求"><a href="#Service网络请求" class="headerlink" title="Service网络请求"></a>Service网络请求</h1><blockquote><p>Service文件主要负责一些网络请求，和一些数据访问的操作<br>然后供ViewModel使用，模拟从本地plist文件中读取用户数据</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIWKWebView</title>
      <link href="/2017/12/21/Swift/UIKit/Swift-UIKit-UIWKWebView/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> WKWebView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> WKWebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-错误处理操作</title>
      <link href="/2017/12/19/RxSwift/Grammar/Operators-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C/"/>
      <content type="html"><![CDATA[<h1 id="错误处理操作"><a href="#错误处理操作" class="headerlink" title="错误处理操作"></a>错误处理操作</h1><h2 id="catchErrorJustReturn"><a href="#catchErrorJustReturn" class="headerlink" title="catchErrorJustReturn"></a>catchErrorJustReturn</h2><blockquote><p>遇到error事件的时候，就return一个值，然后结束</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line">sequenceThatFails</div><div class="line">    .catchErrorJustReturn(<span class="string">"😊"</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">sequenceThatFails.onNext(<span class="string">"😬"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😨"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😡"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"🔴"</span>)</div><div class="line">sequenceThatFails.onError(<span class="type">TestError</span>.test)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">next(😬)</div><div class="line">next(😨)</div><div class="line">next(😡)</div><div class="line">next(🔴)</div><div class="line">next(😊)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h2><blockquote><p>捕获error进行处理，可以返回另一个sequence进行订阅</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> recoverySequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line">sequenceThatFails</div><div class="line">    .catchError &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Error:"</span>, $<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> recoverySequence</div><div class="line">    &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">sequenceThatFails.onNext(<span class="string">"😬"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😨"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😡"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"🔴"</span>)</div><div class="line">sequenceThatFails.onError(<span class="type">TestError</span>.test)</div><div class="line">    </div><div class="line">recoverySequence.onNext(<span class="string">"😊"</span>)</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">next(😬)</div><div class="line">next(😨)</div><div class="line">next(😡)</div><div class="line">next(🔴)</div><div class="line"><span class="type">Error</span>: test</div><div class="line">next(😊)</div></pre></td></tr></table></figure><h2 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h2><blockquote><p>遇见error事件可以进行重试，比如网络请求失败，可以进行重新连接</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">let</span> sequenceThatErrors = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; observer <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🍎"</span>)</div><div class="line">    observer.onNext(<span class="string">"🍐"</span>)</div><div class="line">    observer.onNext(<span class="string">"🍊"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">1</span> &#123;</div><div class="line">        observer.onError(<span class="type">TestError</span>.test)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Error encountered"</span>)</div><div class="line">        <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    observer.onNext(<span class="string">"🐶"</span>)</div><div class="line">    observer.onNext(<span class="string">"🐱"</span>)</div><div class="line">    observer.onNext(<span class="string">"🐭"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">    </div><div class="line">sequenceThatErrors</div><div class="line">    .retry(<span class="number">3</span>)       <span class="comment">//不传入数字的话，只会重试一次</span></div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><blockquote><p>打印所有的订阅, 事件和disposals</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   </div><div class="line"></div><div class="line">sequenceThatErrors</div><div class="line">    .retry(<span class="number">3</span>)</div><div class="line">    .debug()</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h1 id="RxSwift-Resources-total"><a href="#RxSwift-Resources-total" class="headerlink" title="RxSwift.Resources.total"></a>RxSwift.Resources.total</h1><blockquote><p>查看RxSwift所有资源的占用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="type">RxSwift</span>.<span class="type">Resources</span>.total)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-连接性操作</title>
      <link href="/2017/12/19/RxSwift/Grammar/Operators-%E8%BF%9E%E6%8E%A5%E6%80%A7%E6%93%8D%E4%BD%9C/"/>
      <content type="html"><![CDATA[<h1 id="连接性操作"><a href="#连接性操作" class="headerlink" title="连接性操作"></a>连接性操作</h1><blockquote><p>Connectable Observable有订阅时不开始发射事件消息，而是仅当调用它们的connect（）方法时。这样就可以等待所有我们想要的订阅者都已经订阅了以后，再开始发出事件消息，这样能保证我们想要的所有订阅者都能接收到事件消息。其实也就是等大家都就位以后，开始发出消息</p></blockquote><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><blockquote><p>将一个正常的sequence转换成一个connectable sequence</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> intSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .publish()</div><div class="line">    </div><div class="line"><span class="number">_</span> = intSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 1:, Event: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line">delay(<span class="number">2</span>) &#123; <span class="number">_</span> = intSequence.connect() &#125; <span class="comment">//相当于把事件消息推迟了两秒</span></div><div class="line">    </div><div class="line">delay(<span class="number">4</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 2:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">delay(<span class="number">6</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 3:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">0</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">1</span></div><div class="line"><span class="type">Subscription</span> <span class="number">2</span>:, <span class="type">Event</span>: <span class="number">1</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">2</span></div><div class="line"><span class="type">Subscription</span> <span class="number">2</span>:, <span class="type">Event</span>: <span class="number">2</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">3</span></div><div class="line"><span class="type">Subscription</span> <span class="number">3</span>:, <span class="type">Event</span>: <span class="number">3</span></div><div class="line"><span class="type">Subscription</span> <span class="number">2</span>:, <span class="type">Event</span>: <span class="number">3</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">4</span></div><div class="line"><span class="type">Subscription</span> <span class="number">3</span>:, <span class="type">Event</span>: <span class="number">4</span></div></pre></td></tr></table></figure><h2 id="replay"><a href="#replay" class="headerlink" title="replay"></a>replay</h2><blockquote><p>将一个正常的sequence转换成一个connectable sequence，然后和replaySubject相似，能接收到订阅之前的事件消息</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> intSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .replay(<span class="number">5</span>)  <span class="comment">//接收到订阅之前的5条事件消息</span></div><div class="line">    </div><div class="line"><span class="number">_</span> = intSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 1:, Event: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line">delay(<span class="number">2</span>) &#123; <span class="number">_</span> = intSequence.connect() &#125;</div><div class="line">    </div><div class="line">delay(<span class="number">4</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 2:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">delay(<span class="number">8</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 3:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="multicast"><a href="#multicast" class="headerlink" title="multicast"></a>multicast</h2><blockquote><p>将一个正常的sequence转换成一个connectable sequence，并且通过特性的subject发送出去，比如PublishSubject，或者replaySubject，behaviorSubject等。不同的Subject会有不同的结果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    </div><div class="line"><span class="number">_</span> = subject</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subject: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> intSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .multicast(subject)</div><div class="line">    </div><div class="line"><span class="number">_</span> = intSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"\tSubscription 1:, Event: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line">delay(<span class="number">2</span>) &#123; <span class="number">_</span> = intSequence.connect() &#125;</div><div class="line">    </div><div class="line">delay(<span class="number">4</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"\tSubscription 2:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-过滤和条件操作符</title>
      <link href="/2017/12/19/RxSwift/Grammar/Operators-%E8%BF%87%E6%BB%A4%E5%92%8C%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <content type="html"><![CDATA[<h1 id="过滤和条件操作符"><a href="#过滤和条件操作符" class="headerlink" title="过滤和条件操作符"></a>过滤和条件操作符</h1><pre><code>①filter②distinctUntilChanged③elementAt④single⑤take⑥takeLast⑦takeWhile⑧takeUntil⑨skip⑩ skipWhile⑪skipWhileWithIndex⑫skipUntil</code></pre><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote><p>过滤掉某些不符合要求的事件<br>在Observable序列中只发出满足过滤条件的事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(</div><div class="line">    <span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>,</div><div class="line">    <span class="string">"🐸"</span>, <span class="string">"🐱"</span>, <span class="string">"🐰"</span>,</div><div class="line">    <span class="string">"🐹"</span>, <span class="string">"🐸"</span>, <span class="string">"🐱"</span>)</div><div class="line">    .<span class="built_in">filter</span> &#123;</div><div class="line">        $<span class="number">0</span> == <span class="string">"🐱"</span></div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"><span class="comment">///</span></div><div class="line">🐱</div><div class="line">🐱</div><div class="line">🐱</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">  <span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">            .<span class="built_in">filter</span>(</div><div class="line">                   &#123;$<span class="number">0</span> &gt; <span class="number">2</span>&#125;</div><div class="line">                   )</div><div class="line">            .subscribe(</div><div class="line">                       onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;</div><div class="line">                      )</div><div class="line">            .disposed(by: disposeBag)</div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><h2 id="②distinctUntilChanged"><a href="#②distinctUntilChanged" class="headerlink" title="②distinctUntilChanged"></a>②distinctUntilChanged</h2><blockquote><p>过滤连续发出的相同事件<br>distinctUntilChanged就是当下一个事件与前一个事件是不同事件的事件才进行处理操作</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐷"</span>, <span class="string">"🐱"</span>, <span class="string">"🐱"</span>, <span class="string">"🐱"</span>, <span class="string">"🐵"</span>, <span class="string">"🐱"</span>)</div><div class="line">    .distinctUntilChanged()</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">🐱</div><div class="line">🐷</div><div class="line">🐱</div><div class="line">🐵</div><div class="line">🐱</div></pre></td></tr></table></figure><h2 id="③elementAt"><a href="#③elementAt" class="headerlink" title="③elementAt"></a>③elementAt</h2><blockquote><p>只处理在指定位置的事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .elementAt(<span class="number">3</span>)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"><span class="comment">//</span></div><div class="line">🐸</div></pre></td></tr></table></figure><h2 id="④single"><a href="#④single" class="headerlink" title="④single"></a>④single</h2><blockquote><p>用法一：检测Observable序列是否发射一个元素。如果发射多个，会报错</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="comment">// error:Sequence contains more than one element</span></div><div class="line"><span class="comment">// Observable.of(1,2,3).single().subscribe(onNext: &#123;print($0)&#125;).disposed(by: disposeBag)</span></div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>)</div><div class="line">          .single()</div><div class="line">          .subscribe(</div><div class="line">                     onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;</div><div class="line">                    )</div><div class="line">          .disposed(by: disposeBag)</div></pre></td></tr></table></figure><blockquote><p>用法二:检测Observable序列发射的元素里面是否包含多个指定的元素，如果有多个或者没有，会报错。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .single &#123; $<span class="number">0</span> == <span class="string">"🐸"</span> &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .disposed(by: disposeBag)</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>)</div><div class="line">    .single &#123; $<span class="number">0</span> == <span class="string">"🐒"</span> &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .disposed(by: disposeBag)</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐶"</span>,<span class="string">"🐸"</span>)</div><div class="line">    .single &#123; $<span class="number">0</span> == <span class="string">"🐶"</span> &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .disposed(by: disposeBag</div><div class="line">    </div><div class="line">   <span class="comment">//打印结果</span></div><div class="line">next(🐸)</div><div class="line">completed</div><div class="line">error(<span class="type">Sequence</span> doesn't contain any elements.)</div><div class="line">next(🐶)</div><div class="line">error(<span class="type">Sequence</span> <span class="built_in">contains</span> more than one element.)</div></pre></td></tr></table></figure><blockquote><p>出在sequence只发出一次的事件，如果超过一个就会发出error错误</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line"> .single()</div><div class="line"> .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  🐱  <span class="comment">//单一信号超过了一个</span></div><div class="line"><span class="type">Received</span> unhandled error: /<span class="keyword">var</span>/folders/hz/v15ld5mj0nqf83d21j13y0tw0000gn/<span class="type">T</span>/./lldb/<span class="number">7229</span>/playground107.swift:<span class="number">69</span>:__lldb_expr_107 -&gt; <span class="type">Sequence</span> <span class="built_in">contains</span> more than one element.</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line"> .single &#123; $<span class="number">0</span> == <span class="string">"🐸"</span> &#125;      <span class="comment">//青蛙只有一个，completed</span></div><div class="line"> .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>)</div><div class="line"> .single &#123; $<span class="number">0</span> == <span class="string">"🐰"</span> &#125; <span class="comment">//兔子有两个，会发出error</span></div><div class="line"> .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line"> .single &#123; $<span class="number">0</span> == <span class="string">"🔵"</span> &#125; <span class="comment">//没有蓝色球，会发出error</span></div><div class="line"> .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h2 id="⑤take"><a href="#⑤take" class="headerlink" title="⑤take"></a>⑤take</h2><blockquote><p>只处理前几个事件信号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .take(<span class="number">3</span>)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">🐱</div><div class="line">🐰</div><div class="line">🐶</div></pre></td></tr></table></figure><blockquote><p>从Observable序列开始点起只处理前几个事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">         .take(<span class="number">2</span>)</div><div class="line">         .subscribe(</div><div class="line">                    onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;</div><div class="line">                   )</div><div class="line">         .disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="comment">//打印结果:</span></div><div class="line"> <span class="number">1</span></div><div class="line"> <span class="number">2</span></div></pre></td></tr></table></figure><h2 id="⑥takeLast"><a href="#⑥takeLast" class="headerlink" title="⑥takeLast"></a>⑥takeLast</h2><blockquote><p>只处理后几个事件信号<br>与take相反，从Observable序列的结束位置起，只处理前几个事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .takeLast(<span class="number">3</span>)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"><span class="comment">//打印结果</span></div><div class="line">🐸</div><div class="line">🐷</div><div class="line">🐵</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()    </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">          .takeLast(<span class="number">2</span>)</div><div class="line">          .subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">          .disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure><h2 id="⑦takeWhile"><a href="#⑦takeWhile" class="headerlink" title="⑦takeWhile"></a>⑦takeWhile</h2><blockquote><p>只处理满足条件的事件。感觉和filter没什么区别</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">    .takeWhile &#123; $<span class="number">0</span> &lt; <span class="number">4</span> &#125;</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">   <span class="comment">//打印结果：</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">          .takeWhile&#123;$<span class="number">0</span> &lt; <span class="number">3</span>&#125;</div><div class="line">          .subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">          .disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="comment">//打印结果：</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><h2 id="⑧takeUntil"><a href="#⑧takeUntil" class="headerlink" title="⑧takeUntil"></a>⑧takeUntil</h2><blockquote><p>接收事件消息，直到另一个sequence发出事件消息的时候</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> sourceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> referenceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">   </div><div class="line">sourceSequence</div><div class="line">    .takeUntil(referenceSequence)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">   </div><div class="line">sourceSequence.onNext(<span class="string">"🐱"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐰"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐶"</span>)</div><div class="line">    </div><div class="line">referenceSequence.onNext(<span class="string">"🔴"</span>)  <span class="comment">//停止接收消息</span></div><div class="line">    </div><div class="line">sourceSequence.onNext(<span class="string">"🐸"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐷"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐵"</span>)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">next(🐱)</div><div class="line">next(🐰)</div><div class="line">next(🐶)</div><div class="line">completed</div></pre></td></tr></table></figure><blockquote><p>直到另一个Observable序列发出一个信号，则原序列终</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> orinSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"><span class="keyword">let</span> refreSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    </div><div class="line">orinSubject.takeUntil(refreSubject)</div><div class="line">           .subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">           .disposed(by: disposeBag)</div><div class="line">    </div><div class="line">orinSubject.onNext(<span class="number">1</span>)</div><div class="line">orinSubject.onNext(<span class="number">2</span>)</div><div class="line">refreSubject.onNext(<span class="number">10</span>)</div><div class="line">orinSubject.onNext(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><h2 id="⑨skip"><a href="#⑨skip" class="headerlink" title="⑨skip"></a>⑨skip</h2><blockquote><p>取消前几个事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .skip(<span class="number">2</span>)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"> <span class="comment">//</span></div><div class="line"> 🐶</div><div class="line"> 🐸</div><div class="line"> 🐷</div><div class="line"> 🐵</div></pre></td></tr></table></figure><blockquote><p>从Observable序列的元素跳过指定个数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">          .skip(<span class="number">2</span>)</div><div class="line">          .subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">          .disposed(by: disposeBag)</div><div class="line"><span class="comment">//打印结果：</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure><h2 id="⑩-skipWhile"><a href="#⑩-skipWhile" class="headerlink" title="⑩ skipWhile"></a>⑩ skipWhile</h2><blockquote><p>满足条件的事件消息都取消</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">    .skipWhile &#123; $<span class="number">0</span> &lt; <span class="number">4</span> &#125;</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"><span class="comment">///</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure><blockquote><p>跳过满足条件的事件，只要遇见不满足条件的事件，则该事件以及之后的事件（不管是否满足条件）都会发出</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()    </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">          .skipWhile&#123;$<span class="number">0</span> &lt; <span class="number">3</span>&#125;</div><div class="line">          .subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">          .disposed(by: disposeBag)</div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure><h2 id="⑪skipWhileWithIndex"><a href="#⑪skipWhileWithIndex" class="headerlink" title="⑪skipWhileWithIndex"></a>⑪skipWhileWithIndex</h2><blockquote><p>满足条件的都被取消，传入的闭包同skipWhile有点区别而已</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .skipWhileWithIndex &#123; element, index <span class="keyword">in</span></div><div class="line">        index &lt; <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>跳过索引满足条件的事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).skipWhileWithIndex(&#123; (element, index) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">        index &lt; <span class="number">3</span></div><div class="line">    &#125;).subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;).disposed(by: disposeBag)</div><div class="line">  <span class="comment">//打印结果:</span></div><div class="line">  <span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure><h2 id="⑫skipUntil"><a href="#⑫skipUntil" class="headerlink" title="⑫skipUntil"></a>⑫skipUntil</h2><blockquote><p>直到某个sequence发出了事件消息，才开始接收当前sequence发出的事件消息</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="keyword">let</span> sourceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> referenceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line">sourceSequence</div><div class="line">    .skipUntil(referenceSequence)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">sourceSequence.onNext(<span class="string">"🐱"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐰"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐶"</span>)</div><div class="line">    </div><div class="line">referenceSequence.onNext(<span class="string">"🔴"</span>)</div><div class="line">    </div><div class="line">sourceSequence.onNext(<span class="string">"🐸"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐷"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐵"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>跳过另一个Observable序列发出事件之前的所有事件<br>与takeUntil相反。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line">  <span class="keyword">let</span> oriSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">  <span class="keyword">let</span> refreSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">   </div><div class="line">oriSubject.skipUntil(refreSubject)</div><div class="line">          .subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">          .disposed(by: disposeBag)</div><div class="line">    </div><div class="line">oriSubject.onNext(<span class="number">1</span>)</div><div class="line">oriSubject.onNext(<span class="number">2</span>)</div><div class="line">    </div><div class="line">refreSubject.onNext(<span class="number">10</span>)</div><div class="line">oriSubject.onNext(<span class="number">3</span>)</div><div class="line">oriSubject.onNext(<span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment">//打印结果:</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-数学操作</title>
      <link href="/2017/12/19/RxSwift/Grammar/Operators-%E6%95%B0%E5%AD%A6%E6%93%8D%E4%BD%9C/"/>
      <content type="html"><![CDATA[<h1 id="数学操作"><a href="#数学操作" class="headerlink" title="数学操作"></a>数学操作</h1><h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h2><blockquote><p>将sequence转换成一个array，并转换成单一事件信号，然后结束</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">10</span>)</div><div class="line">    .toArray()</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">next([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p>用一个初始值，对事件数据进行累计操作<br>reduce接受一个初始值，和一个操作符号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.of(<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>)</div><div class="line">    .<span class="built_in">reduce</span>(<span class="number">1</span>, accumulator: +)</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">  <span class="number">1111</span></div></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><blockquote><p>oncat会把多个sequence和并为一个sequence，并且当前面一个sequence发出了completed事件，才会开始下一个sequence的事件<br>在第一sequence完成之前，第二个sequence发出的事件都会被忽略，但会接收一完成之前的二发出的最后一个事件。不好解释，看例子说明</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> subject1 = <span class="type">BehaviorSubject</span>(value: <span class="string">"🍎"</span>)</div><div class="line"><span class="keyword">let</span> subject2 = <span class="type">BehaviorSubject</span>(value: <span class="string">"🐶"</span>)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(subject1)</div><div class="line">    </div><div class="line">variable.asObservable()</div><div class="line">    .concat()</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">subject1.onNext(<span class="string">"🍐"</span>)</div><div class="line">subject1.onNext(<span class="string">"🍊"</span>)</div><div class="line">    </div><div class="line">variable.value = subject2</div><div class="line">    </div><div class="line"></div><div class="line">subject2.onNext(<span class="string">"🐱"</span>)   <span class="comment">//1完成前，会被忽略</span></div><div class="line">subject2.onNext(<span class="string">"teng"</span>) <span class="comment">//1完成前，会被忽略</span></div><div class="line">subject2.onNext(<span class="string">"fei"</span>)  <span class="comment">//1完成前的最后一个，会被接收</span></div><div class="line">    </div><div class="line">subject1.onCompleted()</div><div class="line">    </div><div class="line">subject2.onNext(<span class="string">"🐭"</span>)</div><div class="line"></div><div class="line">next(🍎)</div><div class="line">next(🍐)</div><div class="line">next(🍊)</div><div class="line">next(fei)</div><div class="line">next(🐭)</div></pre></td></tr></table></figure><h1 id="连接性操作"><a href="#连接性操作" class="headerlink" title="连接性操作"></a>连接性操作</h1><blockquote><p>Connectable Observable有订阅时不开始发射事件消息，而是仅当调用它们的connect（）方法时。这样就可以等待所有我们想要的订阅者都已经订阅了以后，再开始发出事件消息，这样能保证我们想要的所有订阅者都能接收到事件消息。其实也就是等大家都就位以后，开始发出消息</p></blockquote><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><blockquote><p>将一个正常的sequence转换成一个connectable sequence</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> intSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .publish()</div><div class="line">    </div><div class="line"><span class="number">_</span> = intSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 1:, Event: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line">delay(<span class="number">2</span>) &#123; <span class="number">_</span> = intSequence.connect() &#125; <span class="comment">//相当于把事件消息推迟了两秒</span></div><div class="line">    </div><div class="line">delay(<span class="number">4</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 2:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">delay(<span class="number">6</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 3:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">0</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">1</span></div><div class="line"><span class="type">Subscription</span> <span class="number">2</span>:, <span class="type">Event</span>: <span class="number">1</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">2</span></div><div class="line"><span class="type">Subscription</span> <span class="number">2</span>:, <span class="type">Event</span>: <span class="number">2</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">3</span></div><div class="line"><span class="type">Subscription</span> <span class="number">3</span>:, <span class="type">Event</span>: <span class="number">3</span></div><div class="line"><span class="type">Subscription</span> <span class="number">2</span>:, <span class="type">Event</span>: <span class="number">3</span></div><div class="line"><span class="type">Subscription</span> <span class="number">1</span>:, <span class="type">Event</span>: <span class="number">4</span></div><div class="line"><span class="type">Subscription</span> <span class="number">3</span>:, <span class="type">Event</span>: <span class="number">4</span></div></pre></td></tr></table></figure><h2 id="replay"><a href="#replay" class="headerlink" title="replay"></a>replay</h2><blockquote><p>将一个正常的sequence转换成一个connectable sequence，然后和replaySubject相似，能接收到订阅之前的事件消息</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> intSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .replay(<span class="number">5</span>)  <span class="comment">//接收到订阅之前的5条事件消息</span></div><div class="line">    </div><div class="line"><span class="number">_</span> = intSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 1:, Event: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line">delay(<span class="number">2</span>) &#123; <span class="number">_</span> = intSequence.connect() &#125;</div><div class="line">    </div><div class="line">delay(<span class="number">4</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 2:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">delay(<span class="number">8</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subscription 3:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="multicast"><a href="#multicast" class="headerlink" title="multicast"></a>multicast</h2><blockquote><p>将一个正常的sequence转换成一个connectable sequence，并且通过特性的subject发送出去，比如PublishSubject，或者replaySubject，behaviorSubject等。不同的Subject会有不同的结果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    </div><div class="line"><span class="number">_</span> = subject</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"Subject: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> intSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .multicast(subject)</div><div class="line">    </div><div class="line"><span class="number">_</span> = intSequence</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"\tSubscription 1:, Event: \($0)"</span>) &#125;)</div><div class="line">    </div><div class="line">delay(<span class="number">2</span>) &#123; <span class="number">_</span> = intSequence.connect() &#125;</div><div class="line">    </div><div class="line">delay(<span class="number">4</span>) &#123;</div><div class="line">    <span class="number">_</span> = intSequence</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="string">"\tSubscription 2:, Event: \($0)"</span>) &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="catchErrorJustReturn"><a href="#catchErrorJustReturn" class="headerlink" title="catchErrorJustReturn"></a>catchErrorJustReturn</h2><blockquote><p>遇到error事件的时候，就return一个值，然后结束</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line">sequenceThatFails</div><div class="line">    .catchErrorJustReturn(<span class="string">"😊"</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">sequenceThatFails.onNext(<span class="string">"😬"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😨"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😡"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"🔴"</span>)</div><div class="line">sequenceThatFails.onError(<span class="type">TestError</span>.test)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">next(😬)</div><div class="line">next(😨)</div><div class="line">next(😡)</div><div class="line">next(🔴)</div><div class="line">next(😊)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h2><blockquote><p>捕获error进行处理，可以返回另一个sequence进行订阅</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> recoverySequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line">sequenceThatFails</div><div class="line">    .catchError &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Error:"</span>, $<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> recoverySequence</div><div class="line">    &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">sequenceThatFails.onNext(<span class="string">"😬"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😨"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"😡"</span>)</div><div class="line">sequenceThatFails.onNext(<span class="string">"🔴"</span>)</div><div class="line">sequenceThatFails.onError(<span class="type">TestError</span>.test)</div><div class="line">    </div><div class="line">recoverySequence.onNext(<span class="string">"😊"</span>)</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">next(😬)</div><div class="line">next(😨)</div><div class="line">next(😡)</div><div class="line">next(🔴)</div><div class="line"><span class="type">Error</span>: test</div><div class="line">next(😊)</div></pre></td></tr></table></figure><h2 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h2><blockquote><p>遇见error事件可以进行重试，比如网络请求失败，可以进行重新连接</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">let</span> sequenceThatErrors = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; observer <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🍎"</span>)</div><div class="line">    observer.onNext(<span class="string">"🍐"</span>)</div><div class="line">    observer.onNext(<span class="string">"🍊"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">1</span> &#123;</div><div class="line">        observer.onError(<span class="type">TestError</span>.test)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Error encountered"</span>)</div><div class="line">        <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    observer.onNext(<span class="string">"🐶"</span>)</div><div class="line">    observer.onNext(<span class="string">"🐱"</span>)</div><div class="line">    observer.onNext(<span class="string">"🐭"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">    </div><div class="line">sequenceThatErrors</div><div class="line">    .retry(<span class="number">3</span>)       <span class="comment">//不传入数字的话，只会重试一次</span></div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><blockquote><p>打印所有的订阅, 事件和disposals</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   </div><div class="line"></div><div class="line">sequenceThatErrors</div><div class="line">    .retry(<span class="number">3</span>)</div><div class="line">    .debug()</div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h1 id="RxSwift-Resources-total"><a href="#RxSwift-Resources-total" class="headerlink" title="RxSwift.Resources.total"></a>RxSwift.Resources.total</h1><blockquote><p>查看RxSwift所有资源的占用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="type">RxSwift</span>.<span class="type">Resources</span>.total)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-转换操作符</title>
      <link href="/2017/12/19/RxSwift/Demo/Swift-RxSwift-%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/xiaochuanding/article/details/53727426" target="_blank" rel="external">这是java</a><br>Buffer():<br>2.map() flatMap()<br>3.concatMap()<br>4.switchMap():<br>5.cast():<br>6.groupBy():<br>7.scan():<br>8.window():</p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-线程</title>
      <link href="/2017/12/19/RxSwift/Grammar/%E7%BA%BF%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>#线程</p><h2 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h2><blockquote><p>RxSwift 中切换线程</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">sequence1</div><div class="line">.observeOn(backgroundScheduler) <span class="comment">// 切换到后台线程</span></div><div class="line">.<span class="built_in">map</span> &#123; n <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"在 background scheduler 执行"</span>)</div><div class="line">&#125;</div><div class="line">.observeOn(<span class="type">MainScheduler</span>.instance) <span class="comment">// 切换到主线程</span></div><div class="line">.<span class="built_in">map</span> &#123; n <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"在 main scheduler"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>调用一下 observeOn 就切换到我们想要的线程了<br>当前的线程切换支持 GCD 和 NSOperation<br>在线程这部分主要有两个操作符：observeOn 和 subscribeOn ，常用的还是 observeOn</p></blockquote><ul><li>调用 observeOn 指定接下来的操作在哪个线程</li><li>调用 subscribeOn 决定订阅者的操作执行在哪个线程</li></ul><blockquote><p>当然，如果我们没有明确调用这两个操作，后面的操作都是在当前线程执行的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">observeOn</span><span class="params">(scheduler: ImmediateSchedulerType)</span></span> -&gt; <span class="type">RxSwift</span>.<span class="type">Observable</span>&lt;<span class="type">Self</span>.<span class="type">E</span>&gt;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">subscribeOn</span><span class="params">(scheduler: ImmediateSchedulerType)</span></span> -&gt; <span class="type">RxSwift</span>.<span class="type">Observable</span>&lt;<span class="type">Self</span>.<span class="type">E</span>&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>两个方法的声明几乎都是一样的，我们只需要传入一个满足 ImmediateSchedulerType 协议的东西</p></blockquote><h2 id="MainScheduler-串行"><a href="#MainScheduler-串行" class="headerlink" title="MainScheduler 串行"></a>MainScheduler 串行</h2><blockquote><p>在 Rx 中我们已经有主线程切换</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">.observeOn(<span class="type">MainScheduler</span>.instance)<span class="comment">//切换到了主线程</span></div></pre></td></tr></table></figure><blockquote><p>MainScheduler 有一个很有用的功能</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">ensureExecutingOnScheduler</span>()</span></div></pre></td></tr></table></figure><blockquote><p>可以在需要保证代码一定执行在主线程的地方调用 MainScheduler.ensureExecutingOnScheduler()<br>特别是在线程切换来切换去的情况下，或者是调用其他的库，我们不确定当前是否在执行在主线程<br>毕竟 UI 的更新还是要在主线程执行的</p></blockquote><h2 id="SerialDispatchQueueScheduler-串行"><a href="#SerialDispatchQueueScheduler-串行" class="headerlink" title="SerialDispatchQueueScheduler 串行"></a>SerialDispatchQueueScheduler 串行</h2><ul><li>SerialDispatchQueueScheduler ，这个就是一个串行的调度器，上面的 MainScheduler 就是继承的这个</li></ul><blockquote><p>DispatchQueueSchedulerQOS<br>iOS 8 新增加了 QOS ，分别有以下五种等级：</p></blockquote><ul><li>QOS_CLASS_USER_INTERACTIVE</li><li>QOS_CLASS_USER_INITIATED</li><li>QOS_CLASS_DEFAULT</li><li>QOS_CLASS_UTILITY</li><li>QOS_CLASS_BACKGROUND</li></ul><blockquote><p>在 Rx 中，我们用 enum 创建了 DispatchQueueSchedulerQOS ：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DispatchQueueSchedulerQOS</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">UserInteractive</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UserInitiated</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Default</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Utility</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Background</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>和上面的等级是一一对应的<br>用 QOS 创建一个 DispatchQueueSchedulerQOS 非常方便</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(globalConcurrentQueueQOS: <span class="type">DispatchQueueSchedulerQOS</span>, </div><div class="line">internalSerialQueueName: <span class="type">String</span> = <span class="string">"rx.global_dispatch_queue.serial"</span>)</div></pre></td></tr></table></figure><blockquote><p>用一个初始化就 OK ：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">SerialDispatchQueueScheduler</span>(globalConcurrentQueueQOS: .<span class="type">Background</span>)</div></pre></td></tr></table></figure><ul><li>更推荐你使用已有的 QOS 管理多线程问题，毕竟这是一个线程等级更明确的方案。即便是创建自己的 GCD 我也建议直接使用 SerialDispatchQueueScheduler ，毕竟自己再去实现那些协议很麻烦不是吗</li></ul><blockquote><p>可以通过以下两种方式创建自己的 GCD ：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(internalSerialQueueName: <span class="type">String</span>, serialQueueConfiguration: ((dispatch_queue_t) -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>)</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(queue: dispatch_queue_t, internalSerialQueueName: <span class="type">String</span>)</div></pre></td></tr></table></figure><blockquote><p>MainScheduler 是继承 SerialDispatchQueueScheduler 的</p></blockquote><h2 id="ConcurrentDispatchQueueScheduler-并行"><a href="#ConcurrentDispatchQueueScheduler-并行" class="headerlink" title="ConcurrentDispatchQueueScheduler 并行"></a>ConcurrentDispatchQueueScheduler 并行</h2><blockquote><p>同样我们还有一个并行的 Scheduler ：ConcurrentDispatchQueueScheduler<br>API 的使用和 SerialDispatchQueueScheduler 是一样的</p></blockquote><h2 id="OperationQueueScheduler-并行"><a href="#OperationQueueScheduler-并行" class="headerlink" title="OperationQueueScheduler 并行"></a>OperationQueueScheduler 并行</h2><blockquote><p>使用 NSOperationQueue 最大的好处就是我们可以很方便的定制最大并发线程数量，即设置 maxConcurrentOperationCount<br>创建方法也很简单，只需要传入一个 NSOperationQueue</p></blockquote><p>难懂啊</p><p><a href="http://t.swift.gg/t/rxswift-course" target="_blank" rel="external">原文</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-操作</title>
      <link href="/2017/12/19/RxSwift/Grammar/Operators-Transforming%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <content type="html"><![CDATA[<h1 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>通过使用一个闭包函数将原来的Observable序列sequence转换为一个新的Observable序列sequence</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/map-001.png" alt="map"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line">   <span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">   .<span class="built_in">map</span>(&#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">10</span> * $<span class="number">0</span></div><div class="line">        &#125;)</div><div class="line">   .subscribe(&#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">   .disposed(by: disposeBag)</div><div class="line">  <span class="comment">//打印</span></div><div class="line">next(<span class="number">10</span>)</div><div class="line">next(<span class="number">20</span>)</div><div class="line">next(<span class="number">30</span>)</div><div class="line">completed</div></pre></td></tr></table></figure><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><blockquote><p>将一个sequence转换为一个sequences，当你接收一个sequence的事件，你还想接收其他sequence发出的事件的话可以使用flatMap，她会将每一个sequence事件进行处理以后，然后再以一个sequence形式发出事件<br>而且flatMap有一次拆包动作<br>将一个Observable序列转换为另一个Observable序列，并且合并两个Observable序列。会按时间顺序接收两个序列发出的元素</p></blockquote><p><img src="" alt="flatMap"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   sttuct <span class="type">Player</span>&#123;</div><div class="line">      <span class="keyword">var</span> score: <span class="type">Variable</span>&lt;<span class="type">Int</span>&gt; <span class="comment">//里面是一个Variable</span></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">let</span> 👦🏻 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">80</span>))      </div><div class="line">   <span class="keyword">let</span> 👧🏼 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">90</span>))</div><div class="line">   <span class="keyword">let</span> 😂 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">550</span>))</div><div class="line">   <span class="keyword">let</span> player = <span class="type">Variable</span>(👦🏻)  <span class="comment">//将player转为Variable</span></div><div class="line">   </div><div class="line">   player.asObservable()       <span class="comment">//拆箱转成可被监听的sequence</span></div><div class="line">    .flatMap &#123; $<span class="number">0</span>.score.asObservable() &#125; <span class="comment">// flatMap有一次拆包动作，$0本来应该是一个BehaviorSubject类型，但是直接访问了score。所以猜想flatMap对behaviorSubject进行了onNext拆包取数据</span></div><div class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">    👦🏻.score.value = <span class="number">85</span></div><div class="line">    </div><div class="line">player.value = 👧🏼 <span class="comment">//更换了value，相当于又添加了一个sequence，两个sequence都可以接收</span></div><div class="line">    </div><div class="line">👦🏻.score.value = <span class="number">95</span></div><div class="line">👦🏻.score.value = <span class="number">222</span></div><div class="line">player.value = 😂</div><div class="line">    </div><div class="line">👧🏼.score.value = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="number">80</span></div><div class="line"><span class="number">85</span></div><div class="line"><span class="number">90</span></div><div class="line"><span class="number">95</span></div><div class="line"><span class="number">222</span></div><div class="line"><span class="number">550</span></div><div class="line"><span class="number">100</span></div></pre></td></tr></table></figure><h2 id="flatMapLatest"><a href="#flatMapLatest" class="headerlink" title="flatMapLatest"></a>flatMapLatest</h2><blockquote><p>flatMapLatest只会接收最新的value事件，将上例改为flatMapLatest。结果为</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="number">80</span></div><div class="line"><span class="number">85</span></div><div class="line"><span class="number">90</span></div><div class="line"><span class="number">550</span></div></pre></td></tr></table></figure><h2 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h2><blockquote><p>scan就是给一个初始化的数，然后不断的拿前一个结果和最新的值进行处理操作</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"> <span class="type">Observable</span>.of(<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>)</div><div class="line">           .scan(<span class="number">1</span>)&#123;aggregateValue, newValue <span class="keyword">in</span></div><div class="line">      aggregateValue + newValue&#125;</div><div class="line">           .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">           .addDisposableTo(disposeBag)</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="number">11</span></div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">1111</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-Combination Operators-联合操作Observable流</title>
      <link href="/2017/12/19/RxSwift/Grammar/Operators-%E8%81%94%E5%90%88%E6%93%8D%E4%BD%9CObservable%E6%B5%81/"/>
      <content type="html"><![CDATA[<h1 id="联合操作Observable流"><a href="#联合操作Observable流" class="headerlink" title="联合操作Observable流"></a>联合操作Observable流</h1><blockquote><p>联合操作就是把多个Observable流合成单个Observable流</p></blockquote><ul><li>①startWith</li><li>②merge</li><li>③zip</li><li>④combineLatest</li><li>⑤switchLatest</li></ul><h2 id="①startWith"><a href="#①startWith" class="headerlink" title="①startWith"></a>①startWith</h2><blockquote><p>在发出事件消息之前，先发出某个特定的事件消息。比如发出事件2 ，3然后我startWith(1)，那么就会先发出1，然后2 ，3</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/startWith.png" alt="startWith"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"> <span class="type">Observable</span>.of(<span class="string">"2"</span>,<span class="string">"3"</span>)</div><div class="line">           .startWith(<span class="string">"1"</span>)</div><div class="line">           .subscribe(onNext:&#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">           .addDisposableTo(disposeBag)</div><div class="line">           </div><div class="line">  </div><div class="line"><span class="comment">//</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure><blockquote><p>在Observable释放元素之前，发射指定的元素序列<br>在发送一个东西之前，我先发送一个指定的东西</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">let disposeBag = DisposeBag()</div><div class="line">  Observable.of([&quot;C&quot;,&quot;C++&quot;,&quot;OC&quot;]).startWith([&quot;指定内容&quot;]).subscribe(&#123; (event) in</div><div class="line">       print(event)</div><div class="line">   &#125;).disposed(by: disposeBag)</div><div class="line">  //打印结果</div><div class="line">   next([&quot;先吃饱饭再学习&quot;])</div><div class="line">   next([&quot;C&quot;, &quot;C++&quot;, &quot;OC&quot;])</div><div class="line">   completed</div></pre></td></tr></table></figure><h2 id="②merge"><a href="#②merge" class="headerlink" title="②merge"></a>②merge</h2><blockquote><p>将多个Observable组合成单个Observable,并且按照时间顺序发射对应事件</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/merge.png" alt="merge"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> sbj1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> sbj2 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(sbj1,sbj2)</div><div class="line">          .merge()</div><div class="line">          .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">          .addDisposableTo(disposeBag)</div><div class="line">subject1.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject1.onNext(<span class="string">"🅱️"</span>)</div><div class="line">subject2.onNext(<span class="string">"①"</span>)</div><div class="line">subject2.onNext(<span class="string">"②"</span>)</div><div class="line">subject1.onNext(<span class="string">"🆎"</span>)</div><div class="line">subject2.onNext(<span class="string">"③"</span>)</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">🅰️</div><div class="line">🅱️</div><div class="line">①</div><div class="line">②</div><div class="line">🆎</div><div class="line">③</div></pre></td></tr></table></figure><h2 id="③zip"><a href="#③zip" class="headerlink" title="③zip"></a>③zip</h2><blockquote><p>绑定超过最多不超过8个的Observable流，结合在一起处理<br>注意Zip是一个事件对应另一个流一个事件<br>将多个Observable(注意：必须是要成对)组合成单个Observable，当有事件到达时，会在每个序列中对应的索引上对应的元素发出。(ps:之前版本的RxSwift好像最多只能组合8个Observable)</p></blockquote><p><img src="" alt="zip"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="keyword">let</span> strSbj = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> intSbj = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(strSbj, intSbj)&#123;</div><div class="line">  strElement,intElement  <span class="keyword">in</span> </div><div class="line">   <span class="string">"\(strElement) \(intElement)"</span></div><div class="line">&#125;.subscribe(<span class="type">OnNext</span>: &#123;pint($<span class="number">0</span>)&#125;)</div><div class="line"> .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">strSbj.onNext(<span class="string">"🅰️"</span>)</div><div class="line">strSbj.onNext(<span class="string">"🅱️"</span>)</div><div class="line"></div><div class="line">intSbj.onNext(<span class="number">1</span>)</div><div class="line">intSbj.onNext(<span class="number">2</span>)</div><div class="line"></div><div class="line">strSbj.onNext(<span class="string">"🆎"</span>)</div><div class="line">intSbj.onNext(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">🅰️ <span class="number">1</span>   将stringSubject和intSubject压缩到一起共同处理</div><div class="line">🅱️ <span class="number">2</span></div><div class="line">🆎 <span class="number">3</span></div></pre></td></tr></table></figure><h2 id="④combineLatest"><a href="#④combineLatest" class="headerlink" title="④combineLatest"></a>④combineLatest</h2><blockquote><p>绑定超过最多不超过8个的Observable流，结合在一起处理<br>和Zip不同的是combineLatest是一个流的事件对应另一个流的最新的事件，两个事件都会是最新的事件，可将下图与Zip的图进行对比<br>邻近事件一起处理</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/combineLatest.png" alt="combineLatest"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> strSbj = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> intSbj = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.combineLatest(strSbj, intSbj)&#123; strElement,intElement <span class="keyword">in</span></div><div class="line">    <span class="string">"\(strElement) \(intElement)"</span></div><div class="line">&#125;</div><div class="line">.addscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">strSbj.onNext(<span class="string">"🅰️"</span>)</div><div class="line">strSbj.onNext(<span class="string">"🅱️"</span>)</div><div class="line">intSbj.onNext(<span class="number">1</span>)</div><div class="line">intSbj.onNext(<span class="number">2</span>)</div><div class="line">strSbj.onNext(<span class="string">"🆎"</span>)</div><div class="line"><span class="comment">// ????</span></div><div class="line">🅱️ <span class="number">1</span></div><div class="line">🅱️ <span class="number">2</span></div><div class="line">🆎 <span class="number">2</span></div></pre></td></tr></table></figure><blockquote><p>当一个项目由两个Observables发射时，通过一个指定的功能将每个Observable观察到的最新项目组合起来，并根据该功能的结果发射事件</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/Combination-Operators-4-2.png" alt=""></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="keyword">let</span> subject1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> subject2 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line"><span class="type">Observable</span>.combineLatest(subject1, subject2) &#123; string1,string2 <span class="keyword">in</span></div><div class="line">    <span class="string">"\(string1)--\(string2)"</span></div><div class="line">    &#125;.subscribe(onNext: &#123;<span class="built_in">print</span>($<span class="number">0</span>)&#125;).disposed(by: disposeBag)</div><div class="line">    </div><div class="line">subject1.onNext(<span class="string">"A"</span>)</div><div class="line">    </div><div class="line">subject2.onNext(<span class="string">"1"</span>)</div><div class="line">subject2.onNext(<span class="string">"2"</span>)</div><div class="line">    </div><div class="line">subject1.onNext(<span class="string">"B"</span>)</div><div class="line">subject1.onNext(<span class="string">"C"</span>)</div><div class="line"></div><div class="line">  <span class="comment">//输出结果</span></div><div class="line">  <span class="type">A</span>--<span class="number">1</span></div><div class="line">  <span class="type">A</span>--<span class="number">2</span></div><div class="line">  <span class="type">B</span>--<span class="number">2</span></div><div class="line">  <span class="type">C</span>--<span class="number">2</span></div></pre></td></tr></table></figure><h2 id="⑤switchLatest"><a href="#⑤switchLatest" class="headerlink" title="⑤switchLatest"></a>⑤switchLatest</h2><blockquote><p>切换Observable队列<br>switchLatest可以对事件流进行转换，本来监听的sbj1，可以通过更改variable里面的value更换事件源—&gt;变成监听sbj2</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/switchLatest.png" alt="switchLatest"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> sbj1 = <span class="type">BehaviorSubject</span>(value: <span class="string">"⚽️"</span>)</div><div class="line">  <span class="keyword">let</span> sbj2 = <span class="type">BehaviorSubject</span>(value: <span class="string">"🍎"</span>)</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> variable = <span class="type">Variable</span>(sbj1)</div><div class="line">  variable.asObservable()</div><div class="line">   .switchLatest()</div><div class="line">   .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">   .addDisposableTo(disposeBag)</div><div class="line">   </div><div class="line">sbj1.onNext(<span class="string">"🏈"</span>)</div><div class="line">sbj1.onNext(<span class="string">"🏀"</span>)</div><div class="line">    </div><div class="line">variable.value = sbj1</div><div class="line">    </div><div class="line">subject1.onNext(<span class="string">"⚾️"</span>)</div><div class="line">    </div><div class="line">sbj2.onNext(<span class="string">"🍐"</span>)</div><div class="line">variable.value = sbj1</div><div class="line">sbj2.onNext(<span class="string">"54321"</span>)</div><div class="line">sbj1.onNext(<span class="string">"12345"</span>)</div><div class="line">  <span class="comment">///</span></div><div class="line">  ⚽️</div><div class="line">🏈</div><div class="line">🏀</div><div class="line">🍎</div><div class="line">🍐</div><div class="line">⚾️</div><div class="line"><span class="number">12345</span></div></pre></td></tr></table></figure><blockquote><p>例子分析</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> et disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> subject1 = <span class="type">BehaviorSubject</span>(value: <span class="string">"1"</span>)</div><div class="line"><span class="keyword">let</span> subject2 = <span class="type">BehaviorSubject</span>(value: <span class="string">"A"</span>)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(subject1)</div><div class="line">    </div><div class="line">variable.asObservable()</div><div class="line">        .switchLatest()</div><div class="line">        .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</div><div class="line">        .disposed(by: disposeBag)</div><div class="line">    </div><div class="line">subject1.onNext(<span class="string">"2"</span>)</div><div class="line">subject1.onNext(<span class="string">"3"</span>)</div><div class="line">    </div><div class="line">variable.value = subject2</div><div class="line">    </div><div class="line">subject1.onNext(<span class="string">"4"</span>)</div><div class="line">subject2.onNext(<span class="string">"B"</span>)</div><div class="line"></div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="type">A</span></div><div class="line"><span class="type">B</span></div></pre></td></tr></table></figure><p><img src="http://ot0mms4k8.bkt.clouddn.com/switchLatest-002.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-进阶理解</title>
      <link href="/2017/12/18/RxSwift/Grammar/%E8%BF%9B%E9%98%B6%E7%90%86%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="Disposing"><a href="#Disposing" class="headerlink" title="Disposing"></a>Disposing</h1><p>   当监听一个事件序列的时候，有消息事件来了，我们做某些事情<br>   但是这个事件序列不再发出消息了，我们的监听也就没有什么存在价值了，所以我们需要释放我们这些监听资源，其实也就是每种编程语言中的内存资源释放<br>   OC和Swift中也一样，在你不需要用某些变量的时候，你需要把这些变量所占用的内存空间释放掉</p><blockquote><p>释放某一个监听的时候我们可以手动调用释放方法，但是这个貌似一般不常用：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// 关于scheduler，我们会在下面讲到</span></div><div class="line"><span class="keyword">let</span> subscription = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">SerialDispatchQueueScheduler</span>.<span class="keyword">init</span>(internalSerialQueueName: <span class="string">"test"</span>))</div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)<span class="comment">//observeOn也会在下面讲到</span></div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2.0</span>)</div><div class="line">    </div><div class="line">subscription.dispose()</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">next(<span class="number">0</span>)</div><div class="line">next(<span class="number">1</span>)</div><div class="line">next(<span class="number">2</span>)</div><div class="line">next(<span class="number">3</span>)</div><div class="line">next(<span class="number">4</span>)</div><div class="line">next(<span class="number">5</span>)</div></pre></td></tr></table></figure><p>比如上面这个例子，我们创建了一个subscription监听，在两秒以后我们不需要了，手动调用dispose()方法，就能释放监听资源，不再打印信息。上面的subscription不伦是在哪个线程中监听，就算在主线程中调用的dispose()方法一样会销毁资源</p><h1 id="Dispose-Bag"><a href="#Dispose-Bag" class="headerlink" title="Dispose Bag"></a>Dispose Bag</h1><p>还有一种是自动的方式，推荐大家使用这种方式，这种方式就好像iOS中的ARC方式似得，会自动去释放资源</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line">   .subscribe &#123; event <span class="keyword">in</span></div><div class="line">       <span class="built_in">print</span>(event)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p>如上个例子，我们创建一个disposeBag来盛放我们需要管理的资源，然后把新建的监听都放进去，会在适当的时候销毁这些资源。如果你需要立即释放资源只需要新建一个DisposeBag()，那么上一个DisposeBag就会被销毁</p><h1 id="observeOn-和subscribeOn"><a href="#observeOn-和subscribeOn" class="headerlink" title="observeOn()和subscribeOn()"></a>observeOn()和subscribeOn()</h1><p>区别其实我感觉其实就一句话，subscribeOn()设置起点在哪个线程，observeOn()设置了后续工作在哪个线程</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">someObservable </div><div class="line"> .doOneThing() ①</div><div class="line"> .observeOn(<span class="type">MainRouteScheduler</span>.instance) ②</div><div class="line"> .subscribeOn(<span class="type">OtherScheduler</span>.instance) ③</div><div class="line"> .subscribeNext &#123; ④</div><div class="line"> ......</div><div class="line"> &#125;</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p> ① 所有动作都发生在当前的默认线程<br> ② observeOn转换线程到主线程，下面所有的操作都是在主线程中<br> ③ subscribeOn规定动作一开始不是发生在默认线程了，而是在OtherScheduler了<br> ④ 如果我们之前没有调用observeOn，那么这边会在OtherScheduler发生，但是我们前面调用了observeOn，所以这个动作会在主线程中调用</p><ul><li>subscribeOn只是影响事件链开始默认的线程，而observeOn规定了下一步动作发生在哪个线程中</li></ul><h1 id="shareReplay"><a href="#shareReplay" class="headerlink" title="shareReplay"></a>shareReplay</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> testReplay = <span class="type">Observable</span>.just(<span class="string">"😂"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123;  <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    </div><div class="line">testReplay</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">testReplay</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">   😂</div><div class="line">next(())</div><div class="line">completed</div><div class="line">😂</div><div class="line">next(())</div><div class="line">completed</div></pre></td></tr></table></figure><p>大家发现没，map函数执行了两遍，但是有些时候我不需要map函数里的东西执行两遍，比如map函数里面如果执行的是网络请求，我只需要一次请求结果供大家使用就行了，多余的请求没啥用，浪费时间。所以这时候就需要shareReplay(1)了。这里面的数字一般都是1，只执行一次。你可以改为2，3看看结果有啥不同哦。</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> testReplay = <span class="type">Observable</span>.just(<span class="string">"😂"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123;  <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .shareReplay(<span class="number">1</span>)</div><div class="line">    </div><div class="line">testReplay</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">testReplay</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="comment">///</span></div><div class="line">  😂 <span class="comment">//只执行了一次</span></div><div class="line">  next(())</div><div class="line">  completed</div><div class="line">  next(())</div><div class="line">  completed</div></pre></td></tr></table></figure><h1 id="自定义operator"><a href="#自定义operator" class="headerlink" title="自定义operator"></a>自定义operator</h1><p>   自定义操作符很简单，官方推荐尽量用标准的操作符，但是你也可以自定义自己的操作符，文档上说有两种方法，这里我们只说一下最常用的一种方法</p><blockquote><p>自定义一个map操作符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myMap</span>&lt;R&gt;<span class="params">(transform: E -&gt; R)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">R</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> subscription = <span class="keyword">self</span>.subscribe &#123; e <span class="keyword">in</span></div><div class="line">                    <span class="keyword">switch</span> e &#123;</div><div class="line">                    <span class="keyword">case</span> .next(<span class="keyword">let</span> value):</div><div class="line">                        <span class="keyword">let</span> result = transform(value)</div><div class="line">                        observer.on(.next(result))</div><div class="line">                    <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</div><div class="line">                        observer.on(.error(error))</div><div class="line">                    <span class="keyword">case</span> .completed:</div><div class="line">                        observer.on(.completed)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">return</span> subscription</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参数是一个闭包，其中闭包参数是E类型返回值是R类型，map函数的返回值是一个Observable类型</p></blockquote><h1 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> results = query.rx.text</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">    &#125;</div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .bindTo(resultCount.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">results</div><div class="line">    .bindTo(resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><ul><li>首先创建一个可监听序列results，其中flatMapLatest怎么用我们下面讲</li><li>然后将results绑定到resultCount.rx.text上</li><li>将results绑定到resultsTableView上</li></ul><blockquote><p>上面程序会有下面几个异常情况</p></blockquote><ul><li>如果上面fetchAutoCompleteItems出错了，那么他绑定的UI将不再收到任何事件消息</li><li>如果上面fetchAutoCompleteItems是在后台某个线程中运行的，那么事件绑定也是发生在后台某个线程，这样更新UI的时候会造成crash</li><li>有两次绑定fetchAutoCompleteItems会执行两次</li></ul><p>当然针对上面问题我们也有解决方案，我们可以使用神器shareReplay(1)保证不会执行两次，可以使用observeOn()保证后面所有操作在主线程完成</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> results = query.rx.text</div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">            .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">            .catchErrorJustReturn([])           </div><div class="line">    &#125;</div><div class="line">    .shareReplay(<span class="number">1</span>)                             </div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .bindTo(resultCount.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">results</div><div class="line">    .bindTo(resultTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>但是,也可以使用Driver</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> results = query.rx.text.asDriver()<span class="comment">//转换成一个Driver序列</span></div><div class="line">    .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></div><div class="line">        fetchAutoCompleteItems(query)</div><div class="line">            .asDriver(onErrorJustReturn: [])  <span class="comment">//当遇见错误需要返回什么</span></div><div class="line">    &#125;<span class="comment">//不需要添加shareReplay(1)</span></div><div class="line">results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</div><div class="line">    .drive(resultCount.rx.text)<span class="comment">//和bingTo()功能一样</span></div><div class="line">    .addDisposableTo(disposeBag) </div><div class="line">                                             </div><div class="line">results</div><div class="line">    .drive(resultTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></div><div class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>drive方法只能在Driver序列中使用，Driver有以下特点：<br>① Driver序列不允许发出error<br>② Driver序列的监听只会在主线程中<br>所以Driver是转为UI绑定量身打造的东西。以下情况你可以使用Driver替换BindTo:</p></blockquote><ul><li>不能发出error</li><li>在主线程中监听</li><li>共享事件流</li></ul><h1 id="map和flatMap何时使用"><a href="#map和flatMap何时使用" class="headerlink" title="map和flatMap何时使用"></a>map和flatMap何时使用</h1><p>官方Demo的时候，可能会迷惑为啥有的地方使用flatMapLatest为啥有些地方使用map呢？比如上面那个Driver所用的例子</p><blockquote><p>map函数，接受一个R类型的序列，返回一个R类型的序列，还是原来的序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;R&gt;<span class="params">(<span class="number">_</span> transform: @escaping <span class="params">(<span class="keyword">Self</span>.E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">R</span>) -&gt; <span class="type">RxSwift</span>.<span class="type">Observable</span>&lt;<span class="type">R</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>flatMap函数，接收一个O类型的序列，返回一个O.E类型的序列，也就是有原来序列里元素组成的新序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;O : ObservableConvertibleType&gt;<span class="params">(<span class="number">_</span> selector: @escaping <span class="params">(<span class="keyword">Self</span>.E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">O</span>) -&gt; <span class="type">RxSwift</span>.<span class="type">Observable</span>&lt;<span class="type">O</span>.<span class="type">E</span>&gt;</div></pre></td></tr></table></figure><p>其实这里的map和flatMap在swift中的作用是一样的。map函数可以对原有序列里面的事件元素进行改造，返回的还是原来的序列。而flatMap对原有序列中的元素进行改造和处理，每一个元素返回一个新的sequence，然后把每一个元素对应的sequence合并为一个新的sequence序列</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; $<span class="number">0</span> + <span class="string">"TTF"</span> &#125;</div><div class="line">    </div><div class="line">test</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line">    </div><div class="line">1TTF</div><div class="line">2TTF</div><div class="line">3TTF</div><div class="line">4TTF</div><div class="line">5TTF</div></pre></td></tr></table></figure><blockquote><p>使用map对序列中每一个元素进行了处理，返回的是一个元素，而使用flatMap需要返回的序列。那么使用map也返回一个序列看看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">test</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line"><span class="type">RxSwift</span>.<span class="type">Just</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.<span class="type">Just</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.<span class="type">Just</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.<span class="type">Just</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div><div class="line"><span class="type">RxSwift</span>.<span class="type">Just</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;</div></pre></td></tr></table></figure><blockquote><p>看到结果会打印出每一个序列，下面我们使用merge()方法将这几个序列进行合并</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">    .merge()</div><div class="line">    </div><div class="line">test</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line"> <span class="comment">///</span></div><div class="line">  <span class="number">1</span></div><div class="line">  <span class="number">2</span></div><div class="line">  <span class="number">3</span></div><div class="line">  <span class="number">4</span></div><div class="line">  <span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>合并为一个新序列后我们就可以正常打印元素了。下面看看使用faltMap()函数干这件事</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> test = <span class="type">Observable</span>.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</div><div class="line">    .flatMap &#123; <span class="type">Observable</span>.just($<span class="number">0</span>) &#125;</div><div class="line">    </div><div class="line">test</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">    </div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>看下对比是不是一样，这样子对比就清晰了吧</p></blockquote><ul><li>map函数只能返回原来的那一个序列，里面的参数的返回值被当做原来序列中所对应的元素。</li><li>flatMap函数返回的是一个新的序列，将原来元素进行了处理，返回这些处理后的元素组成的新序列</li><li>map函数 + 合并函数 = flatMap函数</li></ul><blockquote><p>flatMap函数在实际应用中有很多地方需要用到，比如网络请求，网络请求可能会发生错误，我们需要对这个请求过程进行监听，然后处理错误。只要继续他返回的是一个新的序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">validatedUsername = input.username</div><div class="line">          .flatMapLatest &#123; username <span class="keyword">in</span></div><div class="line">              <span class="keyword">return</span> validationService.validateUsername(username)</div><div class="line">                  .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">                  .catchErrorJustReturn(.failed(message: <span class="string">"Error contacting server"</span>))</div><div class="line">          &#125;</div><div class="line">          .shareReplay(<span class="number">1</span>)</div></pre></td></tr></table></figure><blockquote><p>flatMapLatest其实就是flatMap的另一个方式，只发送最后一个合进来的序列事件。上面认证username是一个网络请求，我们需要对这个过程进行处理<br>这个password不需要后台联网认证，只需要返回password符合不符合要求就行了，还是原来的序列就行了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">validatedPassword = input.password</div><div class="line">  .<span class="built_in">map</span> &#123; password <span class="keyword">in</span></div><div class="line">      <span class="keyword">return</span> validationService.validatePassword(password)</div><div class="line">  &#125;</div><div class="line">  .shareReplay(<span class="number">1</span>)</div></pre></td></tr></table></figure><blockquote><p>flatMap也解决了内嵌多个subscribe的问题，官方不建议内嵌多个subscribe。比如：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   textField.rx_text.subscribe(onNext: &#123; text <span class="keyword">in</span></div><div class="line">    performURLRequest(text).subscribe(onNext: &#123; result <span class="keyword">in</span></div><div class="line">        ...</div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line">&#125;)</div><div class="line">.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>改写为flatMap</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.rx_text</div><div class="line"> .flatMapLatest &#123; text <span class="keyword">in</span></div><div class="line">     <span class="keyword">return</span> performURLRequest(text) <span class="comment">//因为flatMap返回一个新的sequence</span></div><div class="line"> &#125;</div><div class="line"> ...</div><div class="line"> .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p>再举一个例子，当我们网络请求得到json数据的时候，我们可以使用flatmap进行序列转换，解析成Model序列，然后我们订阅这个带有Model的序列，代码就会变得很优雅</p><h1 id="UIBindingObserver"><a href="#UIBindingObserver" class="headerlink" title="UIBindingObserver"></a>UIBindingObserver</h1><blockquote><p>UIBindingObserver这个东西很有用的，创建我们自己的监听者，有时候RxCocoa(RxSwiftz中对UIKit的一个扩展库)给的扩展不够我们使用，比如一个UITextField有个isEnabled属性，我想把这个isEnabled变为一个observer，我们可以这样做：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UITextField</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> inputEnabled: <span class="type">UIBindingObserver</span>&lt;<span class="type">Base</span>, <span class="type">Result</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: base) &#123; textFiled, result <span class="keyword">in</span></div><div class="line">            textFiled.isEnabled = result.isValid</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>UIBindingObserver是一个类，他的初始化方法中，有两个参数，第一个参数是一个元素本身，第一个参数是一个闭包，闭包参数是元素本身，还有他的一个性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="type">UIElement</span>: <span class="type">UIElementType</span>, binding: @escaping (<span class="type">UIElementType</span>, <span class="type">Value</span>) -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure><blockquote><p>自定义了一个inputEnabled Observer里面关联的UITextField的isEnabled属性</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-简单基础项目</title>
      <link href="/2017/12/15/RxSwift/Grammar/%E7%AE%80%E5%8D%95%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/"/>
      <content type="html"><![CDATA[<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">├── <span class="type">Controller</span></div><div class="line">│   └── <span class="type">LXFViewController</span>.swift     <span class="comment">// 主视图控制器</span></div><div class="line">│</div><div class="line">├── <span class="type">Extension</span></div><div class="line">│   └── <span class="type">Response</span>+<span class="type">ObjectMapper</span>.swift <span class="comment">// Response分类，</span></div><div class="line"><span class="type">Moya</span>请求完进行<span class="type">Json</span>转模型或模型数组</div><div class="line">│</div><div class="line">├── <span class="type">Model</span></div><div class="line">│   └── <span class="type">LXFModel</span>.swift              <span class="comment">// 模型</span></div><div class="line">│</div><div class="line">├── <span class="type">Protocol</span></div><div class="line">│   └── <span class="type">LXFViewModelType</span>.swift      <span class="comment">// 定义了模型协议</span></div><div class="line">│</div><div class="line">├── <span class="type">Tool</span></div><div class="line">│   ├── <span class="type">LXFNetworkTool</span>.swift        <span class="comment">// 封装Moya请求</span></div><div class="line">│   │</div><div class="line">│   └── <span class="type">LXFProgressHUD</span>.swift        <span class="comment">// 封装的HUD</span></div><div class="line">│</div><div class="line">├── <span class="type">View</span></div><div class="line">│   ├── <span class="type">LXFViewCell</span>.swift           <span class="comment">// 自定义cell</span></div><div class="line">│   │</div><div class="line">│   └── <span class="type">LXFViewCell</span>.xib             <span class="comment">// cell的xib文件</span></div><div class="line">│</div><div class="line">└── <span class="type">ViewModel</span></div><div class="line">    │</div><div class="line">    └── <span class="type">LXFViewModel</span>.swift          <span class="comment">// 视图模型</span></div></pre></td></tr></table></figure><h1 id="Lib"><a href="#Lib" class="headerlink" title="Lib"></a>Lib</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="type">RxSwift</span>         <span class="comment">// 想玩RxSwift的必备库</span></div><div class="line"><span class="type">RxCocoa</span>         <span class="comment">// 对 UIKit Foundation 进行 Rx 化</span></div><div class="line"><span class="type">NSObject</span>+<span class="type">Rx</span>     <span class="comment">// 为我们提供 rx_disposeBag </span></div><div class="line"><span class="type">Moya</span>/<span class="type">RxSwift</span>    <span class="comment">// 为RxSwift专用提供，对Alamofire进行封装的一个网络请求库</span></div><div class="line"><span class="type">ObjectMapper</span>    <span class="comment">// Json转模型之必备良品</span></div><div class="line"><span class="type">RxDataSources</span>   <span class="comment">// 帮助我们优雅的使用tableView的数据源方法</span></div><div class="line"><span class="type">Then</span>            <span class="comment">// 提供快速初始化的语法糖</span></div><div class="line"><span class="type">Kingfisher</span>      <span class="comment">// 图片加载库</span></div><div class="line"><span class="type">SnapKit</span>         <span class="comment">// 视图约束库</span></div><div class="line"><span class="type">Reusable</span>        <span class="comment">// 帮助我们优雅的使用自定义cell和view,不再出现Optional</span></div><div class="line"><span class="type">MJRefresh</span>       <span class="comment">// 上拉加载、下拉刷新的库</span></div><div class="line"><span class="type">SVProgressHUD</span>   <span class="comment">// 简单易用的HUD</span></div></pre></td></tr></table></figure><h1 id="Moya的使用"><a href="#Moya的使用" class="headerlink" title="Moya的使用"></a>Moya的使用</h1><ul><li>Moya是基于Alamofire的网络请求库</li><li>使用了Moya/Swift，它在Moya的基础上添加了对RxSwift的接口支持。接下来我们来说下Moya的使用</li></ul><blockquote><p>创建一个枚举，用来存放请求类型，这里我顺便设置相应的路径，等下统一取出来直接赋值即可</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">LXFNetworkTool</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">LXFNetworkCategory</span>: <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> all     = <span class="string">"all"</span></div><div class="line">        <span class="keyword">case</span> android = <span class="string">"Android"</span></div><div class="line">        <span class="keyword">case</span> ios     = <span class="string">"iOS"</span></div><div class="line">        <span class="keyword">case</span> welfare = <span class="string">"福利"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> data(type: <span class="type">LXFNetworkCategory</span>, size:<span class="type">Int</span>, index:<span class="type">Int</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>为这个枚举写一个扩展，并遵循塄 TargetType，这个协议的Moya这个库规定的协议，可以按住Commond键+单击左键进入相应的文件进行查看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">extension</span> <span class="title">LXFNetworkTool</span>: <span class="title">TargetType</span> </span>&#123;</div><div class="line">    <span class="comment">/// baseURL 统一基本的URL</span></div><div class="line">    <span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="string">"http://gank.io/api/data/"</span>)!</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// path字段会追加至baseURL后面</span></div><div class="line">    <span class="keyword">var</span> path: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .data(<span class="keyword">let</span> type, <span class="keyword">let</span> size, <span class="keyword">let</span> index):</div><div class="line">            <span class="keyword">return</span> <span class="string">"\(type.rawValue)/\(size)/\(index)"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// HTTP的请求方式</span></div><div class="line">    <span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">get</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// 请求参数(会在请求时进行编码)</span></div><div class="line">    <span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// 参数编码方式(这里使用URL的默认方式)</span></div><div class="line">    <span class="keyword">var</span> parameterEncoding: <span class="type">ParameterEncoding</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">URLEncoding</span>.<span class="keyword">default</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// 这里用于单元测试，不需要的就像我一样随便写写</span></div><div class="line">    <span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"LinXunFeng"</span>.data(using: .utf8)!</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// 将要被执行的任务(请求：request 下载：upload 上传：download)</span></div><div class="line">    <span class="keyword">var</span> task: <span class="type">Task</span> &#123;</div><div class="line">        <span class="keyword">return</span> .request</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// 是否执行Alamofire验证，默认值为false</span></div><div class="line">    <span class="keyword">var</span> validate: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>定义一个全局变量用于整个项目的网络请求</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> lxfNetTool = <span class="type">RxMoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;()</div></pre></td></tr></table></figure><h1 id="RxDataSources"><a href="#RxDataSources" class="headerlink" title="RxDataSources"></a>RxDataSources</h1><blockquote><p>如何优雅的来实现tableView的数据源。其实RxDataSources官网上已经有很明确的使用说明，不过我还是总结一下整个过程吧<br>概念点 :RxDataSources是以section来做为数据结构来传输，这点很重要，可能很多同学会比较疑惑这句话吧，我在此举个例子，在传统的数据源实现的方法中有一个numberOfSection，我们在很多情况下只需要一个section，所以这个方法可实现，也可以不实现，默认返回的就是1，这给我们带来的一个迷惑点：【tableView是由row来组成的】，不知道在坐的各位中有没有是这么想的呢？？有的话那从今天开始就要认清楚这一点，【tableView其实是由section组成的】，所以在使用RxDataSources的过程中，即使你的setion只有一个，那你也得返回一个section的数组出去</p></blockquote><h2 id="自定义Section"><a href="#自定义Section" class="headerlink" title="自定义Section"></a>自定义Section</h2><blockquote><p>在我们自定义的Model中创建一个Section的结构体，并且创建一个扩展，遵循SectionModelType协议，实现相应的协议方法。约定俗成的写法呢请参考如下方式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="type">LXFModel</span>.swift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LXFSection</span> </span>&#123;</div><div class="line">    <span class="comment">// items就是rows</span></div><div class="line">    <span class="keyword">var</span> items: [<span class="type">Item</span>]</div><div class="line">    <span class="comment">// 你也可以这里加你需要的东西，比如 headerView 的 title</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFSection</span>: <span class="title">SectionModelType</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 重定义 Item 的类型为 LXFModel</span></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Item</span> = <span class="type">LXFModel</span></div><div class="line"></div><div class="line">    <span class="comment">// 实现协议中的方式</span></div><div class="line">    <span class="keyword">init</span>(original: <span class="type">LXFSection</span>, items: [<span class="type">LXFSection</span>.<span class="type">Item</span>]) &#123;</div><div class="line">        <span class="keyword">self</span> = original</div><div class="line">        <span class="keyword">self</span>.items = items</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="在控制器下创建一个数据源属性"><a href="#在控制器下创建一个数据源属性" class="headerlink" title="在控制器下创建一个数据源属性"></a>在控制器下创建一个数据源属性</h2><blockquote><p>以下代码均在 LXFViewController.swift 文件中</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// 创建一个数据源属性，类型为自定义的Section类型</span></div><div class="line"><span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">LXFSection</span>&gt;()</div></pre></td></tr></table></figure><h2 id="使用数据源属性绑定我们的cell"><a href="#使用数据源属性绑定我们的cell" class="headerlink" title="使用数据源属性绑定我们的cell"></a>使用数据源属性绑定我们的cell</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// 绑定cell</span></div><div class="line">dataSource.configureCell = &#123; ds, tv, ip, item <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这个地方使用了Reusable这个库，在LXFViewCell中遵守了相应的协议</span></div><div class="line">    <span class="comment">// 使其方便转换cell为非可选型的相应的cell类型</span></div><div class="line">    <span class="keyword">let</span> cell = tv.dequeueReusableCell(<span class="keyword">for</span>: ip) <span class="keyword">as</span> <span class="type">LXFViewCell</span></div><div class="line">    cell.picView.kf.setImage(with: <span class="type">URL</span>(string: item.url))</div><div class="line">    cell.descLabel.text = <span class="string">"描述: \(item.desc)"</span></div><div class="line">    cell.sourceLabel.text = <span class="string">"来源: \(item.source)"</span></div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="将sections序列绑定给我们的rows"><a href="#将sections序列绑定给我们的rows" class="headerlink" title="将sections序列绑定给我们的rows"></a>将sections序列绑定给我们的rows</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">output.sections.asDriver().drive(tableView.rx.items(dataSource:dataSource)).addDisposableTo(rx_disposeBag)</div></pre></td></tr></table></figure><h1 id="ViewModel的规范"><a href="#ViewModel的规范" class="headerlink" title="ViewModel的规范"></a>ViewModel的规范</h1><blockquote><p>MVVM思想就是将原本在ViewController的视图显示逻辑、验证逻辑、网络请求等代码存放于ViewModel中，让我们手中的ViewController瘦身。这些逻辑由ViewModel负责，外界不需要关心，外界只需要结果，ViewModel也只需要将结果给到外界，基于此，我们定义了一个协议LXFViewModelType</p></blockquote><h2 id="创建一个LXFViewModelType-swift"><a href="#创建一个LXFViewModelType-swift" class="headerlink" title="创建一个LXFViewModelType.swift"></a>创建一个LXFViewModelType.swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="type">LXFViewModelType</span>.swift</div><div class="line"></div><div class="line"><span class="comment">// associatedtype 关键字 用来声明一个类型的占位符作为协议定义的一部分</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">LXFViewModelType</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">Input</span></div><div class="line">    associatedtype <span class="type">Output</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(input: Input)</span></span> -&gt; <span class="type">Output</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="viewModel遵守LXFViewModelType协议"><a href="#viewModel遵守LXFViewModelType协议" class="headerlink" title="viewModel遵守LXFViewModelType协议"></a>viewModel遵守LXFViewModelType协议</h2><ul><li>可以为XFViewModelType的Input和Output定义别名，以示区分，如：你这个viewModel的用于请求首页模块相关联的，则可以命名为：HomeInput 和 HomeOutput</li><li>可以丰富我们的 Input 和 Output 。可以看到我为Output添加了一个序列，类型为我们自定义的LXFSection数组，在Input里面添加了一个请求类型(即要请求什么数据，比如首页的数据)</li><li>通过 transform 方法将input携带的数据进行处理，生成了一个Output</li></ul><blockquote><p>以下代码为了方便阅读，进行了部分删减</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="type">LXFViewModel</span>.swift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFViewModel</span>: <span class="title">LXFViewModelType</span> </span>&#123;</div><div class="line">   <span class="comment">// 存放着解析完成的模型数组</span></div><div class="line">   <span class="keyword">let</span> models = <span class="type">Variable</span>&lt;[<span class="type">LXFModel</span>]&gt;([])</div><div class="line"></div><div class="line">    <span class="comment">// 为LXFViewModelType的Input和Output定义别名</span></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Input</span> = <span class="type">LXFInput</span></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Output</span> = <span class="type">LXFOutput</span></div><div class="line"></div><div class="line">    <span class="comment">// 丰富我们的Input和Output</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LXFInput</span> </span>&#123;</div><div class="line">        <span class="comment">// 网络请求类型</span></div><div class="line">        <span class="keyword">let</span> category: <span class="type">LXFNetworkTool</span>.<span class="type">LXFNetworkCategory</span></div><div class="line"></div><div class="line">        <span class="keyword">init</span>(category: <span class="type">LXFNetworkTool</span>.<span class="type">LXFNetworkCategory</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.category = category</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LXFOutput</span> </span>&#123;</div><div class="line">        <span class="comment">// tableView的sections数据</span></div><div class="line">        <span class="keyword">let</span> sections: <span class="type">Driver</span>&lt;[<span class="type">LXFSection</span>]&gt;</div><div class="line"></div><div class="line">        <span class="keyword">init</span>(sections: <span class="type">Driver</span>&lt;[<span class="type">LXFSection</span>]&gt;) &#123;</div><div class="line">            <span class="keyword">self</span>.sections = sections</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(input: LXFViewModel.LXFInput)</span></span> -&gt; <span class="type">LXFViewModel</span>.<span class="type">LXFOutput</span> &#123;</div><div class="line">        <span class="keyword">let</span> sections = models.asObservable().<span class="built_in">map</span> &#123; (models) -&gt; [<span class="type">LXFSection</span>] <span class="keyword">in</span></div><div class="line">            <span class="comment">// 当models的值被改变时会调用，这是Variable的特性</span></div><div class="line">            <span class="keyword">return</span> [<span class="type">LXFSection</span>(items: models)] <span class="comment">// 返回section数组</span></div><div class="line">        &#125;.asDriver(onErrorJustReturn: [])</div><div class="line"></div><div class="line">        <span class="keyword">let</span> output = <span class="type">LXFOutput</span>(sections: sections)</div><div class="line"></div><div class="line">        <span class="comment">// 接下来的代码是网络请求，请结合项目查看，不然会不方便阅读和理解</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>在ViewController中初始化我们的input，通过transform得到output，然后将我们output中的sections序列绑定tableView的items</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="type">LXFViewController</span>.swift</div><div class="line"></div><div class="line"><span class="comment">// 初始化input</span></div><div class="line"><span class="keyword">let</span> vmInput = <span class="type">LXFViewModel</span>.<span class="type">LXFInput</span>(category: .welfare)</div><div class="line"><span class="comment">// 通过transform得到output</span></div><div class="line"><span class="keyword">let</span> vmOutput = viewModel.transform(input: vmInput)</div><div class="line"></div><div class="line">vmOutput.sections.asDriver().drive(tableView.rx.items(dataSource: dataSource)).addDisposableTo(rx_disposeBag)</div></pre></td></tr></table></figure><h1 id="RxSwift中使用MJRefresh"><a href="#RxSwift中使用MJRefresh" class="headerlink" title="RxSwift中使用MJRefresh"></a>RxSwift中使用MJRefresh</h1><h2 id="定义一个枚举LXFRefreshStatus，用于标志当前刷新状态"><a href="#定义一个枚举LXFRefreshStatus，用于标志当前刷新状态" class="headerlink" title="定义一个枚举LXFRefreshStatus，用于标志当前刷新状态"></a>定义一个枚举LXFRefreshStatus，用于标志当前刷新状态</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">LXFRefreshStatus</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">none</span></div><div class="line">    <span class="keyword">case</span> beingHeaderRefresh</div><div class="line">    <span class="keyword">case</span> endHeaderRefresh</div><div class="line">    <span class="keyword">case</span> beingFooterRefresh</div><div class="line">    <span class="keyword">case</span> endFooterRefresh</div><div class="line">    <span class="keyword">case</span> noMoreData</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="在LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus"><a href="#在LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus" class="headerlink" title="在LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus"></a>在LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// 给外界订阅，告诉外界的tableView当前的刷新状态</span></div><div class="line"><span class="keyword">let</span> refreshStatus = <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt;(.<span class="keyword">none</span>)</div></pre></td></tr></table></figure><blockquote><p>在进行网络请求并得到结果之后，修改refreshStatus的value为相应的LXFRefreshStatus项</p></blockquote><h2 id="外界订阅output的refreshStatus"><a href="#外界订阅output的refreshStatus" class="headerlink" title="外界订阅output的refreshStatus"></a>外界订阅output的refreshStatus</h2><blockquote><p>外界订阅output的refreshStatus，并且根据接收到的值进行相应的操作</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   vmOutput.refreshStatus.asObservable().subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] status <span class="keyword">in</span></div><div class="line">    <span class="keyword">switch</span> status &#123;</div><div class="line">    <span class="keyword">case</span> .beingHeaderRefresh:</div><div class="line">        <span class="keyword">self</span>?.tableView.mj_header.beginRefreshing()</div><div class="line">    <span class="keyword">case</span> .endHeaderRefresh:</div><div class="line">        <span class="keyword">self</span>?.tableView.mj_header.endRefreshing()</div><div class="line">    <span class="keyword">case</span> .beingFooterRefresh:</div><div class="line">        <span class="keyword">self</span>?.tableView.mj_footer.beginRefreshing()</div><div class="line">    <span class="keyword">case</span> .endFooterRefresh:</div><div class="line">        <span class="keyword">self</span>?.tableView.mj_footer.endRefreshing()</div><div class="line">    <span class="keyword">case</span> .noMoreData:</div><div class="line">        <span class="keyword">self</span>?.tableView.mj_footer.endRefreshingWithNoMoreData()</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">&#125;).addDisposableTo(rx_disposeBag)</div></pre></td></tr></table></figure><h2 id="output提供一个requestCommond用于请求数据"><a href="#output提供一个requestCommond用于请求数据" class="headerlink" title="output提供一个requestCommond用于请求数据"></a>output提供一个requestCommond用于请求数据</h2><blockquote><p>PublishSubject 的特点：即可以作为Observable，也可以作为Observer，说白了就是可以发送信号，也可以订阅信号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// 外界通过该属性告诉viewModel加载数据（传入的值是为了标志是否重新加载）</span></div><div class="line"><span class="keyword">let</span> requestCommond = <span class="type">PublishSubject</span>&lt;<span class="type">Bool</span>&gt;()</div></pre></td></tr></table></figure><blockquote><p>在transform中，我们对生成的output的requestCommond进行订阅</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   output.requestCommond.subscribe(onNext: &#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] isReloadData <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>.index = isReloadData ? <span class="number">1</span> : <span class="keyword">self</span>.index+<span class="number">1</span></div><div class="line">    lxfNetTool.request(.data(type: input.category, size: <span class="number">10</span>, index: <span class="keyword">self</span>.index)).mapArray(<span class="type">LXFModel</span>.<span class="keyword">self</span>).subscribe(&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (event) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> event &#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .next(modelArr):</div><div class="line">            <span class="keyword">self</span>?.models.value = isReloadData ? modelArr : (<span class="keyword">self</span>?.models.value ?? []) + modelArr</div><div class="line">            <span class="type">LXFProgressHUD</span>.showSuccess(<span class="string">"加载成功"</span>)</div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .error(error):</div><div class="line">            <span class="type">LXFProgressHUD</span>.showError(error.localizedDescription)</div><div class="line">        <span class="keyword">case</span> .completed:</div><div class="line">            output.refreshStatus.value = isReloadData ? .endHeaderRefresh : .endFooterRefresh</div><div class="line">        &#125;</div><div class="line">    &#125;).addDisposableTo(<span class="keyword">self</span>.rx_disposeBag)</div><div class="line">&#125;).addDisposableTo(rx_disposeBag)</div></pre></td></tr></table></figure><h2 id="在ViewController中初始化刷新控件"><a href="#在ViewController中初始化刷新控件" class="headerlink" title="在ViewController中初始化刷新控件"></a>在ViewController中初始化刷新控件</h2><blockquote><p>为tableView设置刷新控件，并且在创建刷新控件的回调中使用output的requestCommond发射信号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   tableView.mj_header = <span class="type">MJRefreshNormalHeader</span>(refreshingBlock: &#123; </div><div class="line">    vmOutput.requestCommond.onNext(<span class="literal">true</span>)</div><div class="line">&#125;)</div><div class="line">tableView.mj_footer = <span class="type">MJRefreshAutoNormalFooter</span>(refreshingBlock: &#123; </div><div class="line">    vmOutput.requestCommond.onNext(<span class="literal">false</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h1 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h1><ul><li><p>ViewController已经拿到output，当下拉加载数据的时候，使用output的requestCommond发射信息，告诉viewModel我们要加载数据</p></li><li><p>viewModel请求数据，在处理完json转模型或模型数组后修改models，当models的值被修改的时候会发信号给sections，sections在ViewController已经绑定到tableView的items了，所以此时tableView的数据会被更新。接着我们根据请求结果，修改output的refreshStatus属性的值</p><ul><li>当output的refreshStatus属性的值改变后，会发射信号，由于外界之前已经订阅了output的refreshStatus，此时就会根据refreshStatus的新值来处理刷新控件的状态</li></ul><p><a href="http://blog.csdn.net/lincsdnnet/article/details/77896404" target="_blank" rel="external">yuan wen</a></p><p><a href="https://github.com/LinXunFeng/RxSwiftDemo" target="_blank" rel="external">demo</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-Grammar- 资料</title>
      <link href="/2017/12/15/RxSwift/Grammar/RxSwift-%E8%B5%84%E6%96%99/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/chelongfei/article/details/50969901" target="_blank" rel="external">Driver</a></p><p><a href="http://blog.csdn.net/chelongfei/article/details/75314346" target="_blank" rel="external">RxSwift在UITableViewCell或者UICollectionViewCell中绑定数据遇到的UI混乱的问题</a></p><p><a href="https://www.jianshu.com/p/d57ff2b3e0d4" target="_blank" rel="external">【RxSwift系列】用RxSwift实现一个UITableView（一）</a></p><p><a href="https://www.jianshu.com/p/e510bc944508" target="_blank" rel="external">MVVM模式仿写斗鱼APP首页</a></p><p><a href="https://www.jianshu.com/p/431f645cb805" target="_blank" rel="external">RxSwift进阶与实战</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-UI控件的扩展</title>
      <link href="/2017/12/15/RxSwift/Grammar/%E5%9F%BA%E6%9C%ACUI%E6%8E%A7%E4%BB%B6%E7%9A%84%E6%89%A9%E5%B1%95/"/>
      <content type="html"><![CDATA[<h1 id="UITextField-UITextView"><a href="#UITextField-UITextView" class="headerlink" title="UITextField / UITextView"></a>UITextField / UITextView</h1><h2 id="监听多个UITextField"><a href="#监听多个UITextField" class="headerlink" title="监听多个UITextField"></a>监听多个UITextField</h2><blockquote><p>监听三个UITextField随便哪个的text变化了，都会引起代码执行，并且结果赋值到result的text</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> number1: <span class="type">UITextField</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> number2: <span class="type">UITextField</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> number3: <span class="type">UITextField</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> result: <span class="type">UILabel</span>!</div><div class="line"></div><div class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    <span class="type">Observable</span>.combineLatest(number1.rx.text.orEmpty, number2.rx.text.orEmpty, number3.rx.text.orEmpty) &#123; textValue1, textValue2, textValue3 -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> (<span class="type">Int</span>(textValue1) ?? <span class="number">0</span>) + (<span class="type">Int</span>(textValue2) ?? <span class="number">0</span>) + (<span class="type">Int</span>(textValue3) ?? <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">    .<span class="built_in">map</span> &#123; $<span class="number">0</span>.description &#125;</div><div class="line">    .bindTo(result.rx.text)</div><div class="line">    .disposed(by: disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="单个UITextField变化监听"><a href="#单个UITextField变化监听" class="headerlink" title="单个UITextField变化监听"></a>单个UITextField变化监听</h2><blockquote><p>官方：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// also test two way binding</span></div><div class="line"><span class="keyword">let</span> textValue = <span class="type">Variable</span>(<span class="string">""</span>)</div><div class="line"><span class="number">_</span> = textField.rx.textInput &lt;-&gt; textValue</div><div class="line"></div><div class="line">textValue.asObservable()</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.debug(<span class="string">"UITextField text \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div></pre></td></tr></table></figure><blockquote><p>例子：单个UITextField事件监听</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">usernameTF.rx.controlEvent([.editingDidBegin]) <span class="comment">//状态可以组合</span></div><div class="line"> .asObservable()</div><div class="line"> .subscribe(onNext: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">     <span class="built_in">print</span>(<span class="string">"begin edit"</span>)</div><div class="line"> &#125;).disposed(by: disposeBag)</div></pre></td></tr></table></figure><h2 id="UITextField遇到键盘Next-Go按钮时，焦点的切换"><a href="#UITextField遇到键盘Next-Go按钮时，焦点的切换" class="headerlink" title="UITextField遇到键盘Next/Go按钮时，焦点的切换"></a>UITextField遇到键盘Next/Go按钮时，焦点的切换</h2><blockquote><p>这里有个小坑，如果usernameTF和passwordTF用了Observable.combineLatest然后订阅的话，你会发现下面的delegate代码没用了，在usernameTF点击Next/Go不能切换到passwordTF了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> textField == usernameTF &#123;</div><div class="line">        passwordTF.becomeFirstResponder()</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        passwordTF.resignFirstResponder()</div><div class="line">        <span class="type">Log</span>(<span class="string">"view become"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>用事件监听即可，监听return key结束编辑的事件(editingDidEndOnExit)：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">/* editingDidEndOnExit: UIControlEvents // 'return key' ending editing */</span></div><div class="line"></div><div class="line">usernameTF.rx.controlEvent(.editingDidEndOnExit).subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.passwordTF.becomeFirstResponder()</div><div class="line">&#125;).disposed(by: disposeBag)</div><div class="line"></div><div class="line">passwordTF.rx.controlEvent(.editingDidEndOnExit).subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.passwordTF.resignFirstResponder()</div><div class="line">&#125;).disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UITextView变化监听"><a href="#UITextView变化监听" class="headerlink" title="UITextView变化监听"></a>UITextView变化监听</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   / also test two way binding</div><div class="line"><span class="keyword">let</span> textViewValue = <span class="type">Variable</span>(<span class="string">""</span>)</div><div class="line"><span class="number">_</span> = textView.rx.textInput &lt;-&gt; textViewValue</div><div class="line"></div><div class="line">textViewValue.asObservable()</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.debug(<span class="string">"UITextView text \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UIButton-UIBarButtonItem"><a href="#UIButton-UIBarButtonItem" class="headerlink" title="UIButton / UIBarButtonItem"></a>UIButton / UIBarButtonItem</h1><h2 id="监听按钮的点击（touchUpInside）"><a href="#监听按钮的点击（touchUpInside）" class="headerlink" title="监听按钮的点击（touchUpInside）"></a>监听按钮的点击（touchUpInside）</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> doSomethingOutlet: <span class="type">UIButton</span>!</div><div class="line">    </div><div class="line">doSomethingOutlet.rx.tap</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span> </div><div class="line">        <span class="keyword">self</span>?.showAlert() <span class="comment">//这里self指vc</span></div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div></pre></td></tr></table></figure><blockquote><p>也可以这样：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">button.rx.tap</div><div class="line">  .bindNext &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">      <span class="keyword">self</span>?.openAppPreferences()</div><div class="line">  &#125;</div><div class="line">  .disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UISegmentedControl-UISwitch"><a href="#UISegmentedControl-UISwitch" class="headerlink" title="UISegmentedControl / UISwitch"></a>UISegmentedControl / UISwitch</h1><blockquote><p>监听状态切换</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// also test two way binding</span></div><div class="line"><span class="keyword">let</span> segmentedValue = <span class="type">Variable</span>(<span class="number">0</span>)</div><div class="line"><span class="number">_</span> = segmentedControl.rx.value &lt;-&gt; segmentedValue</div><div class="line"></div><div class="line">segmentedValue.asObservable()</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.debug(<span class="string">"UISegmentedControl value \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">// also test two way binding</span></div><div class="line"><span class="keyword">let</span> switchValue = <span class="type">Variable</span>(<span class="literal">true</span>)</div><div class="line"><span class="number">_</span> = switcher.rx.value &lt;-&gt; switchValue</div><div class="line"></div><div class="line">switchValue.asObservable()</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.debug(<span class="string">"UISwitch value \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UIActivityIndicatorView"><a href="#UIActivityIndicatorView" class="headerlink" title="UIActivityIndicatorView"></a>UIActivityIndicatorView</h1><blockquote><p>状态指示器根据UISwitch的状态来决定是否显示旋转</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">switcher.rx.value</div><div class="line"> .bindTo(activityIndicator.rx.isAnimating)</div><div class="line"> .disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UISlider"><a href="#UISlider" class="headerlink" title="UISlider"></a>UISlider</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// also test two way binding</span></div><div class="line"><span class="keyword">let</span> sliderValue = <span class="type">Variable</span>&lt;<span class="type">Float</span>&gt;(<span class="number">1.0</span>)</div><div class="line"><span class="number">_</span> = slider.rx.value &lt;-&gt; sliderValue</div><div class="line"></div><div class="line">sliderValue.asObservable()</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.debug(<span class="string">"UISlider value \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UIDatePicker"><a href="#UIDatePicker" class="headerlink" title="UIDatePicker"></a>UIDatePicker</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">// also test two way binding</span></div><div class="line"><span class="keyword">let</span> dateValue = <span class="type">Variable</span>(<span class="type">Date</span>(timeIntervalSince1970: <span class="number">0</span>))</div><div class="line"><span class="number">_</span> = datePicker.rx.date &lt;-&gt; dateValue</div><div class="line"></div><div class="line">dateValue.asObservable()</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.debug(<span class="string">"UIDatePicker date \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="UIGestureRecognizer"><a href="#UIGestureRecognizer" class="headerlink" title="UIGestureRecognizer"></a>UIGestureRecognizer</h1><blockquote><p>手势回调，x是UIPanGestureRecognizer对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   mypan.rx.event</div><div class="line">.subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] x <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.debug(<span class="string">"UIGestureRecognizer event \(x.state)"</span>)</div><div class="line">    <span class="keyword">let</span> p = x.location(<span class="keyword">in</span>: x.view)</div><div class="line">    <span class="keyword">self</span>?.debug(<span class="string">"pan ges point: \(p)"</span>)</div><div class="line">&#125;)</div><div class="line">.disposed(by: disposeBag)</div></pre></td></tr></table></figure><h1 id="CLLocationManager"><a href="#CLLocationManager" class="headerlink" title="CLLocationManager"></a>CLLocationManager</h1><blockquote><p>还有一堆didxxx方法，自己Command点进去看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  manager.requestWhenInUseAuthorization()</div><div class="line"></div><div class="line">manager.rx.didUpdateLocations</div><div class="line">    .subscribe(onNext: &#123; x <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"rx.didUpdateLocations \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div><div class="line"></div><div class="line"><span class="number">_</span> = manager.rx.didFailWithError</div><div class="line">    .subscribe(onNext: &#123; x <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"rx.didFailWithError \(x)"</span>)</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">manager.rx.didChangeAuthorizationStatus</div><div class="line">    .subscribe(onNext: &#123; status <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Authorization status \(status)"</span>)</div><div class="line">    &#125;)</div><div class="line">    .disposed(by: disposeBag)</div><div class="line">    </div><div class="line">manager.startUpdatingLocation()</div></pre></td></tr></table></figure><h1 id="UITableView的扩展"><a href="#UITableView的扩展" class="headerlink" title="UITableView的扩展"></a>UITableView的扩展</h1><h2 id="单个section的情况"><a href="#单个section的情况" class="headerlink" title="单个section的情况"></a>单个section的情况</h2><blockquote><p>除了下面几个最常用的，还有itemDeselected、itemInserted、itemDeleted等等行为可以订阅，自己Command点进去看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTableViewExampleViewController</span> : <span class="title">ViewController</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> items = <span class="type">Observable</span>.just(</div><div class="line">            (<span class="number">0</span>..&lt;<span class="number">20</span>).<span class="built_in">map</span> &#123; <span class="string">"\($0)"</span> &#125;</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="comment">//大概是对cellForRowAtIndexPath的封装</span></div><div class="line">        items</div><div class="line">            .bindTo(tableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>, cellType: <span class="type">UITableViewCell</span>.<span class="keyword">self</span>)) &#123;</div><div class="line">                (row, element, cell) <span class="keyword">in</span></div><div class="line">                <span class="comment">//element 是 items[row]元素</span></div><div class="line">                cell.textLabel?.text = <span class="string">"\(element) @ row \(row)"</span></div><div class="line">            &#125;</div><div class="line">            .disposed(by: disposeBag)</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="comment">//点击某个cell触发, value 是 items[row]，类似的是tableView.rx.itemSelected，都是对didSelectRowAtIndexPath的封装</span></div><div class="line">        tableView.rx</div><div class="line">            .modelSelected(<span class="type">String</span>.<span class="keyword">self</span>)</div><div class="line">            .subscribe(onNext:  &#123; value <span class="keyword">in</span></div><div class="line">                <span class="type">DefaultWireframe</span>.presentAlert(<span class="string">"Tapped `\(value)`"</span>)</div><div class="line">            &#125;)</div><div class="line">            .disposed(by: disposeBag)</div><div class="line"></div><div class="line">        <span class="comment">//accessoryButtonTappedForRowWithIndexPath</span></div><div class="line">        tableView.rx</div><div class="line">            .itemAccessoryButtonTapped</div><div class="line">            .subscribe(onNext: &#123; indexPath <span class="keyword">in</span></div><div class="line">                <span class="type">DefaultWireframe</span>.presentAlert(<span class="string">"Tapped Detail @ \(indexPath.section),\(indexPath.row)"</span>)</div><div class="line">            &#125;)</div><div class="line">            .disposed(by: disposeBag)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="多section的情况"><a href="#多section的情况" class="headerlink" title="多section的情况"></a>多section的情况</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">SimpleTableViewExampleSectionedViewController</span> : <span class="title">ViewController</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>!</div><div class="line"></div><div class="line">    <span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">SectionModel</span>&lt;<span class="type">String</span>, <span class="type">Double</span>&gt;&gt;()</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> dataSource = <span class="keyword">self</span>.dataSource</div><div class="line"></div><div class="line">        <span class="keyword">let</span> items = <span class="type">Observable</span>.just([</div><div class="line">            <span class="type">SectionModel</span>(model: <span class="string">"First section"</span>, items: [</div><div class="line">                    <span class="number">11.0</span>,</div><div class="line">                    <span class="number">12.0</span>,</div><div class="line">                    <span class="number">13.0</span></div><div class="line">                ]),</div><div class="line">            <span class="type">SectionModel</span>(model: <span class="string">"Second section"</span>, items: [</div><div class="line">                    <span class="number">21.0</span>,</div><div class="line">                    <span class="number">22.0</span>,</div><div class="line">                    <span class="number">23.0</span></div><div class="line">                ]),</div><div class="line">            <span class="type">SectionModel</span>(model: <span class="string">"Third section"</span>, items: [</div><div class="line">                    <span class="number">31.0</span>,</div><div class="line">                    <span class="number">32.0</span>,</div><div class="line">                    <span class="number">33.0</span></div><div class="line">                ]),</div><div class="line">            ])</div><div class="line"></div><div class="line">        dataSource.configureCell = &#123; (<span class="number">_</span>, tv, indexPath, element) <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> cell = tv.dequeueReusableCell(withIdentifier: <span class="string">"Cell"</span>)!</div><div class="line">            cell.textLabel?.text = <span class="string">"\(element) @ row \(indexPath.row)"</span></div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        items</div><div class="line">            .bindTo(tableView.rx.items(dataSource: dataSource))</div><div class="line">            .disposed(by: disposeBag)</div><div class="line"></div><div class="line">        tableView.rx</div><div class="line">            .itemSelected</div><div class="line">            .<span class="built_in">map</span> &#123; indexPath <span class="keyword">in</span></div><div class="line">                <span class="keyword">return</span> (indexPath, dataSource[indexPath])</div><div class="line">            &#125;</div><div class="line">            .subscribe(onNext: &#123; indexPath, model <span class="keyword">in</span></div><div class="line">                <span class="type">DefaultWireframe</span>.presentAlert(<span class="string">"Tapped `\(model)` @ \(indexPath)"</span>)</div><div class="line">            &#125;)</div><div class="line">            .disposed(by: disposeBag)</div><div class="line"></div><div class="line">        tableView.rx</div><div class="line">            .setDelegate(<span class="keyword">self</span>)</div><div class="line">            .disposed(by: disposeBag)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, viewForHeaderInSection section: Int)</span></span> -&gt; <span class="type">UIView</span>? &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>(frame: <span class="type">CGRect</span>.zero)</div><div class="line">        label.text = dataSource[section].model</div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForHeaderInSection section: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// to prevent swipe to delete behavior</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://www.darkhandz.com/2017/02/06/%E5%AD%A6%E4%B9%A0RxSwift%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/" target="_blank" rel="external">原文</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-Subject</title>
      <link href="/2017/12/15/RxSwift/Grammar/Subject/"/>
      <content type="html"><![CDATA[<h1 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h1><blockquote><p>Subject是observable和Observer之间的桥梁<br>一个Subject既是一个Obserable也是一个Observer<br>既可以发出事件，也可以监听事件<br>Subject是一个代理，它既是Observer，也是Observable。因为它是一个Observer，它可以订阅一个或多个Observable;因为它是一个Observable，它又可以被其他的Observer订阅<br>可以传递/转发作为Observer收到的值，也可以主动发射值。</p></blockquote><ul><li>作为一个 Observer ，它可以订阅序列</li><li>同时作为一个 Observable ，它可以转发或者发射数据</li></ul><h1 id="Subject-有以下几种"><a href="#Subject-有以下几种" class="headerlink" title="Subject 有以下几种"></a>Subject 有以下几种</h1><ul><li>①PublishSubject 只发射给观察者订阅后的数据</li><li>②ReplaySubject</li><li>③BehaviorSubject</li><li>④Variable</li></ul><blockquote><p>PublishSubject, ReplaySubject和BehaviorSubject是不会自动发出completed事件的</p></blockquote><h2 id="①PublishSubject"><a href="#①PublishSubject" class="headerlink" title="①PublishSubject"></a>①PublishSubject</h2><blockquote><p>当有观察者订阅 PublishSubject 时，PublishSubject 会发射订阅之后的数据给这个观察者,<strong><em>只能接收到订阅他之后发生的事件</em></strong><br>于是这里存在丢失数据的问题，如需全部数据，推荐改用 ReplaySubject<br>subject.onNext()发出onNext事件<br>对应的还有onError()和onCompleted()事件</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/Swift-RxSwift-Subject-001.png" alt="001"></p><blockquote><p>如果序列因为错误终止发射序列，此时 PublishSubject 就不会发射数据，只是传递这次错误事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> publishSubject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"></div><div class="line">publishSubject.subscribe &#123; e <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 1, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">publishSubject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">publishSubject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line"></div><div class="line">publishSubject.subscribe &#123; e <span class="keyword">in</span> <span class="comment">/// 我们可以在这里看到，这个订阅只收到了两个数据，只有 "c" 和 "d"</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 2, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">publishSubject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">publishSubject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    </div><div class="line">subject.addObserver(<span class="string">"1"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🐶"</span>)</div><div class="line">subject.onNext(<span class="string">"🐱"</span>)</div><div class="line">    </div><div class="line">subject.addObserver(<span class="string">"2"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject.onNext(<span class="string">"🅱️"</span>)</div><div class="line"></div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🐶)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🐱)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🅰️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🅰️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🅱️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🅱️)</div></pre></td></tr></table></figure><blockquote><p>先以PublishSubject为例来解释Subject是一个代理的含义</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line">  <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">  subject.subscribe(&#123;(event) <span class="keyword">in</span> </div><div class="line">      <span class="built_in">print</span> (<span class="string">"Event:\(event)"</span>)</div><div class="line">  &#125;)</div><div class="line">  </div><div class="line"> <span class="comment">//打印结果</span></div><div class="line"><span class="type">Event</span>:next(<span class="number">1</span>)</div><div class="line"><span class="type">Event</span>:next(<span class="number">2</span>)</div><div class="line"><span class="type">Event</span>:completed</div></pre></td></tr></table></figure><ul><li>Subject作为一个Observable提供了subscribe等方法</li><li>在订阅之后，调用onNext()，向Observer发射了1、2，以及onCompleted()</li></ul><blockquote><p>调用Subject的on系列方法主动给Observer发送值<br>Subject可以作为代理转发订阅到的结果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">subject.subscribe(&#123; (event) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Event:\(event)"</span>)</div><div class="line">&#125;)</div><div class="line">   </div><div class="line"><span class="keyword">let</span> reveseSubject = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create(&#123; </div><div class="line"> (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    observer.onNext(<span class="number">2</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;)</div><div class="line">   </div><div class="line">reveseSubject.subscribe(subject)</div></pre></td></tr></table></figure><ul><li>subject订阅了reveseSubject，并将结果转发给了Observer</li><li>Observer订阅subject时,不会收到订阅之前subject的值</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"> subject.onNext(<span class="number">0</span>)</div><div class="line"> subject.subscribe(&#123;</div><div class="line">  (event) <span class="keyword">in</span></div><div class="line"> <span class="built_in">print</span>(<span class="string">"Event:\(event)"</span>)</div><div class="line">&#125;)</div><div class="line">    </div><div class="line">subject.onNext(<span class="number">1</span>)</div><div class="line">subject.onNext(<span class="number">2</span>)</div><div class="line">subject.onCompleted()</div><div class="line"></div><div class="line"><span class="comment">// 打印结果</span></div><div class="line"><span class="type">Event</span>:next(<span class="number">1</span>)</div><div class="line"><span class="type">Event</span>:next(<span class="number">2</span>)</div><div class="line"><span class="type">Event</span>:completed</div><div class="line">observer无法接收到<span class="number">0</span>这个值</div></pre></td></tr></table></figure><h2 id="②ReplaySubject"><a href="#②ReplaySubject" class="headerlink" title="②ReplaySubject"></a>②ReplaySubject</h2><blockquote><p>和 PushblishSubject 不同，不论观察者什么时候订阅， ReplaySubject 都会发射完整的数据给观察者<br>ReplaySubject和PublishSubject不同的是，Observer有可能接收到订阅之前的值</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/Swift-RxSwift-Subject-003.png" alt="003"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> replaySubject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">2</span>)</div><div class="line"></div><div class="line">replaySubject.subscribe &#123; e <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 1, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">replaySubject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">replaySubject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line"></div><div class="line">replaySubject.subscribe &#123; e <span class="keyword">in</span> <span class="comment">/// 我们可以在这里看到，这个订阅收到了四个数据</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 2, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">replaySubject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">replaySubject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div></pre></td></tr></table></figure><blockquote><p>ReplaySubject举例分析</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>.create(bufferSize: <span class="number">1</span>)</div><div class="line">  subject.onNext(<span class="number">0</span>)</div><div class="line">  subject.subscribe(&#123;</div><div class="line">   (event) <span class="keyword">in</span> </div><div class="line">   <span class="built_in">print</span>(<span class="string">"Event:\(event)"</span>)</div><div class="line">  &#125;)</div><div class="line">  subject.onNext(<span class="number">1</span>)</div><div class="line">  subject.onNext(<span class="number">2</span>)</div><div class="line">  subject.onCompleted()</div><div class="line">  </div><div class="line">  <span class="comment">//打印结果</span></div><div class="line">  <span class="type">Event</span>:next(<span class="number">0</span>)</div><div class="line"><span class="type">Event</span>:next(<span class="number">1</span>)</div><div class="line"><span class="type">Event</span>:next(<span class="number">2</span>)</div><div class="line"><span class="type">Event</span>:completed</div></pre></td></tr></table></figure><ul><li>ReplaySubject具有重放(replay)的功能，replay的个数可以通过参数指定。</li><li>可以将其理解为缓存的效果。</li></ul><blockquote><p>一般我们使用ReplaySubject的时候，都是先发射，后订阅，然后通过指定缓存的大小，可以获取对应的值。(注意：不考虑Error和Completed)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">Int</span>&gt;.create(bufferSize: <span class="number">1</span>)</div><div class="line"></div><div class="line">subject.onNext(<span class="number">0</span>)</div><div class="line">subject.onNext(<span class="number">1</span>)</div><div class="line">subject.onNext(<span class="number">2</span>)</div><div class="line"></div><div class="line">subject.subscribe(&#123;</div><div class="line"> (event) <span class="keyword">in</span> </div><div class="line"> <span class="built_in">print</span> (<span class="string">"Event:\(event)"</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//指定了bufferSize等于1，所以只缓存了最新的值，打印结果</span></div><div class="line"><span class="type">Event</span>:next(<span class="number">2</span>)</div><div class="line"><span class="type">Event</span>:completed</div></pre></td></tr></table></figure><ul><li>需要缓存所有值的时候,可以调用createUnbounded()方法</li></ul><h2 id="③BehaviorSubject"><a href="#③BehaviorSubject" class="headerlink" title="③BehaviorSubject"></a>③BehaviorSubject</h2><blockquote><p>当一个观察者订阅一个 BehaviorSubject ，它会发送原序列最近的那个值（如果原序列还有没发射值那就用一个默认值代替），之后继续发射原序列的值</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/Swift-RxSwift-Subject-004.png" alt="004"></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> behaviorSubject = <span class="type">BehaviorSubject</span>(value: <span class="string">"z"</span>)</div><div class="line">behaviorSubject.subscribe &#123; e <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 1, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">behaviorSubject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">behaviorSubject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line"></div><div class="line">behaviorSubject.subscribe &#123; e <span class="keyword">in</span> <span class="comment">/// 我们可以在这里看到，这个订阅收到了四个数据</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 2, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">behaviorSubject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">behaviorSubject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div><div class="line">behaviorSubject.on(.<span class="type">Completed</span>)</div></pre></td></tr></table></figure><blockquote><p>PublishSubject, ReplaySubject和BehaviorSubject是不会自动发出completed事件的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>(value: <span class="string">"🔴"</span>)</div><div class="line">    </div><div class="line">subject.addObserver(<span class="string">"1"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🐶"</span>)</div><div class="line">subject.onNext(<span class="string">"🐱"</span>)</div><div class="line">    </div><div class="line">subject.addObserver(<span class="string">"2"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject.onNext(<span class="string">"🅱️"</span>)</div><div class="line">    </div><div class="line">subject.addObserver(<span class="string">"3"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🍐"</span>)</div><div class="line">subject.onNext(<span class="string">"🍊"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🔴)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🐶)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🐱)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🐱) <span class="comment">//订阅之前的最后一个事件</span></div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🅰️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🅰️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🅱️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🅱️)</div><div class="line"><span class="type">Subscription</span>: <span class="number">3</span> <span class="type">Event</span>: next(🅱️) <span class="comment">//订阅之前的最后一个事件</span></div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🍐)</div><div class="line"><span class="type">Subscription</span>: <span class="number">3</span> <span class="type">Event</span>: next(🍐)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🍐)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span> <span class="type">Event</span>: next(🍊)</div><div class="line"><span class="type">Subscription</span>: <span class="number">3</span> <span class="type">Event</span>: next(🍊)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span> <span class="type">Event</span>: next(🍊)</div></pre></td></tr></table></figure><blockquote><p>BehaviorSubject类似于ReplaySubject具有缓存能力，但是略有不同<br>只缓存一个最新值，类似ReplaySubject.create(bufferSize: 1)<br>需要提供默认值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> behaviorSubject = <span class="type">BehaviorSubject</span>&lt;<span class="type">Int</span>&gt;(value: <span class="number">1</span>)</div><div class="line">behaviorSubject.subscribe(&#123; (event) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Event:\(event)"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="type">Event</span>:next(<span class="number">1</span>)</div></pre></td></tr></table></figure><ul><li>使用BehaviorSubject有一点好处，可以确定当Observer订阅时，至少可以收到最新的一个值</li></ul><h2 id="④Variable"><a href="#④Variable" class="headerlink" title="④Variable"></a>④Variable</h2><blockquote><p>Variable 是 BehaviorSubject 的一个封装<br>相比 BehaviorSubject ，它不会因为错误终止也不会正常终止，是一个无限序列<br>Variable是BehaviorSubject一个包装箱，就像是一个箱子一样，使用的时候需要调用asObservable()拆箱，里面的value是一个BehaviorSubject，他不会发出error事件，但是会自动发出completed事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"z"</span>)</div><div class="line">variable.asObservable().subscribe &#123; e <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 1, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">variable.value = <span class="string">"a"</span></div><div class="line">variable.value = <span class="string">"b"</span></div><div class="line">variable.asObservable().subscribe &#123; e <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscription: 1, event: \(e)"</span>)</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">variable.value = <span class="string">"c"</span></div><div class="line">variable.value = <span class="string">"d"</span></div></pre></td></tr></table></figure><blockquote><p>最常用的 Subject 应该就是 Variable<br>Variable 很适合做数据源，比如作为一个 UITableView 的数据源，我们可以在这里保留一个完整的 Array 数据，每一个订阅者都可以获得这个 Array</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> elements = <span class="type">Variable</span>&lt;[<span class="type">String</span>]&gt;([])</div></pre></td></tr></table></figure><blockquote><p>Variable和BehaviorSubject又很相似，Variable是BehaviorSubject的一个封装，同样具备了缓存最新值和提供默认值的能力但是Variable没有on系列方法，只提供了value属性。<br>直接对value进行set等同于调用了onNext()方法。<br>这表明了Variable不会发射error也不会发射completed<br>在Variable被销毁的时候会调用发射completed给Observer</p><p>在订阅Variable的时候，我们无法直接调用subscribe方法，需要先调用asObservable()方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> variable = <span class="type">Variable</span>&lt;<span class="type">Int</span>&gt;(<span class="number">1</span>)</div><div class="line">variable.asObservable().subscribe(&#123; (event) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Event:\(event)"</span>)</div><div class="line">&#125;)</div><div class="line">variable.value = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"><span class="type">Event</span>:next(<span class="number">1</span>)</div><div class="line"><span class="type">Event</span>:next(<span class="number">2</span>)</div><div class="line"><span class="type">Event</span>:completed</div></pre></td></tr></table></figure><blockquote><p>Variable可以用来储存数据，因为我们可以拥有value的get和set方法。比如</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="number">1</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Value: \(variable.value)"</span>)</div><div class="line">variable.value = <span class="number">2</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Value: \(variable.value)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//打印</span></div><div class="line"><span class="comment">//这是BehaviorSubject不具备的</span></div><div class="line">  <span class="type">Value</span>: <span class="number">1</span></div><div class="line">   <span class="type">Value</span>: <span class="number">2</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-创建序列Observable</title>
      <link href="/2017/12/15/RxSwift/Grammar/%E5%88%9B%E5%BB%BA%E5%BA%8F%E5%88%97Observable/"/>
      <content type="html"><![CDATA[<h1 id="Rx-几种创建方式"><a href="#Rx-几种创建方式" class="headerlink" title="Rx 几种创建方式"></a>Rx 几种创建方式</h1><ul><li>asObservable 返回一个序列</li><li>create 使用 Swift 闭包的方式创建序列</li><li>deferred 只有在有观察者订阅时，才去创建序列</li><li>empty 创建一个空的序列，只发射一个 .Completed</li><li>error 创建一个发射 error 终止的序列</li><li>toObservable 使用 SequenceType 创建序列</li><li>interval 创建一个每隔一段时间就发射的递增序列</li><li>never 不创建序列，也不发送通知</li><li>just 只创建包含一个元素的序列。换言之，只发送一个值和 .Completed</li><li>of 通过一组元素创建一个序列</li><li>range 创建一个有范围的递增序列</li><li>repeatElement 创建一个发射重复值的序列</li><li>timer 创建一个带延迟的序列</li></ul><h1 id="create"><a href="#create" class="headerlink" title="create"></a>create</h1><blockquote><p>使用 Swift 闭包的方式创建序列，这里创建了一个 Just 的示例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> myJust = &#123; (singleElement: <span class="type">Int</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">        observer.on(.<span class="type">Next</span>(singleElement))</div><div class="line">        observer.on(.<span class="type">Completed</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">_</span> = myJust(<span class="number">5</span>)</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="deferred"><a href="#deferred" class="headerlink" title="deferred"></a>deferred</h1><blockquote><p>只有在有观察者订阅时，才去创建序列</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  let deferredSequence: Observable&lt;Int&gt; = Observable.deferred &#123;</div><div class="line">    print(&quot;creating&quot;)</div><div class="line">    return Observable.create &#123; observer in</div><div class="line">        print(&quot;emmiting&quot;)</div><div class="line">        observer.on(.Next(0))</div><div class="line">        observer.on(.Next(1))</div><div class="line">        observer.on(.Next(2))</div><div class="line">        </div><div class="line">        return NopDisposable.instance</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">_ = deferredSequence</div><div class="line">    .subscribe &#123; event in</div><div class="line">        print(event)</div><div class="line">&#125;</div><div class="line"></div><div class="line">_ = deferredSequence</div><div class="line">    .subscribe &#123; event in</div><div class="line">        print(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h1><blockquote><p>创建一个空的序列，只发射一个 .Completed：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> emptySequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line"></div><div class="line"><span class="number">_</span> = emptySequence</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="error"><a href="#error" class="headerlink" title="error"></a>error</h1><blockquote><p>创建一个发射 error 终止的序列</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: -<span class="number">1</span>, userInfo: <span class="literal">nil</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> erroredSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.error(error)</div><div class="line"></div><div class="line"><span class="number">_</span> = erroredSequence</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="toObservable"><a href="#toObservable" class="headerlink" title="toObservable"></a>toObservable</h1><blockquote><p>使用 SequenceType 创建序列：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> sequenceFromArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].toObservable()</div><div class="line"></div><div class="line"><span class="number">_</span> = sequenceFromArray</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h1><blockquote><p>创建一个每隔一段时间就发射的递增序列：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> intervalSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line"></div><div class="line"><span class="number">_</span> = intervalSequence.subscribe &#123; event <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="never"><a href="#never" class="headerlink" title="never"></a>never</h1><blockquote><p>不创建序列，也不发送通知：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> neverSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.never()</div><div class="line"></div><div class="line"><span class="number">_</span> = neverSequence</div><div class="line">    .subscribe &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"这句话永远不会打出来."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="just"><a href="#just" class="headerlink" title="just"></a>just</h1><blockquote><p>只创建包含一个元素的序列。换言之，只发送一个值和 .Completed：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   et singleElementSequence = <span class="type">Observable</span>.just(<span class="number">32</span>)</div><div class="line"></div><div class="line"><span class="number">_</span> = singleElementSequence</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="of"><a href="#of" class="headerlink" title="of"></a>of</h1><blockquote><p>通过一组元素创建一个序列：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> sequenceOfElements<span class="comment">/* : Observable&lt;Int&gt; */</span> = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line"></div><div class="line"><span class="number">_</span> = sequenceOfElements</div><div class="line">    .subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="range"><a href="#range" class="headerlink" title="range"></a>range</h1><blockquote><p>创建一个有范围的递增序列：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> rangeSequence = <span class="type">Observable</span>.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="number">_</span> = rangeSequence.subscribe &#123; event <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="repeatElement"><a href="#repeatElement" class="headerlink" title="repeatElement"></a>repeatElement</h1><blockquote><p>创建一个发射重复值的序列：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> repeatElementSequence = <span class="type">Observable</span>.repeatElement(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="number">_</span> = repeatElementSequence.subscribe &#123; event <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h1><blockquote><p>创建一个带延迟的序列：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> timerSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.timer(<span class="number">1</span>, period: <span class="number">1</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line"></div><div class="line"><span class="number">_</span> = timerSequence.subscribe &#123; event <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-RxSwift-简介以及简单学习使用</title>
      <link href="/2017/12/15/RxSwift/Grammar/%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="Swift-RxSwift-简介以及简单学习使用"><a href="#Swift-RxSwift-简介以及简单学习使用" class="headerlink" title="Swift-RxSwift-简介以及简单学习使用"></a>Swift-RxSwift-简介以及简单学习使用</h1><blockquote><p><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Why.md" target="_blank" rel="external">RxSwift 项目文档中 Why</a> 已有详细介绍</p></blockquote><h2 id="Bindings"><a href="#Bindings" class="headerlink" title="Bindings"></a>Bindings</h2><blockquote><p>[RxWhy] -&gt; [Bindings] -&gt; [BindingsViewController.swift]</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Observable</span>.combineLatest(firstName.rx_text, lastName.rx_text) &#123; $<span class="number">0</span> + <span class="string">" "</span> + $<span class="number">1</span> &#125; <span class="comment">// ①</span></div><div class="line">          .<span class="built_in">map</span> &#123; <span class="string">"Greeting \($0)"</span> &#125;                                             <span class="comment">// ②</span></div><div class="line">          .bindTo(greetingLabel.rx_text)                                        <span class="comment">// ③</span></div></pre></td></tr></table></figure><ul><li>将 firstName 和 lastName 的 text 属性结合起来，并进行合并处理，也就是 $0 + “ “ + $1 这部分，用空格将两个值合并起来作为结果传递给后面使用</li><li>使用 map 的方法，将上一步得到值前面加上一个 Greeting ，并将该值传递给后面使用</li><li>bindTo 就是绑定，将上一步的值绑定到 greetingLabel 的 text</li></ul><blockquote><p>代码就是实时的执行</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">greetingLabel.text = <span class="string">"Greeting "</span> + firstName.text + <span class="string">" "</span> + lastName.text</div></pre></td></tr></table></figure><ul><li>要求是实时</li><li>每当 fisrtName.text 或者 lastName.text 改变时， greetingLabel.text 都要随之改变</li></ul><h2 id="ContentOffset"><a href="#ContentOffset" class="headerlink" title="ContentOffset"></a>ContentOffset</h2><blockquote><p>经常通过 delegate 处理 scrollView 的 contentOffset 变化问题</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(scrollView: UIScrollView)</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.title = <span class="string">"contentOffset.x = \(scrollView.contentOffset.y)"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>可能就和关联的逻辑分家了，内聚性啊…而且多个 scrollView ，还要做额外的判断处理，复杂性可想而知<br>也有写过通过 closure 来解决的，其实可以认为 Rx 自带了这些功能（而且更强大<br>[RxWhy] -&gt; [ContentOffset] -&gt; [ContentOffsetViewController.swift]<br>Note: 在使用了 rx_contentOffset 后，最好不要去更改 delegate<br>同样 button 也有类似的功能</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">tableView.rx_contentOffset</div><div class="line">  .<span class="built_in">map</span> &#123; $<span class="number">0</span>.y &#125;</div><div class="line">  .subscribeNext &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">      <span class="keyword">self</span>.title = <span class="string">"contentOffset.x = \($0)"</span></div><div class="line">  &#125;.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><h2 id="Tap"><a href="#Tap" class="headerlink" title="Tap"></a>Tap</h2><blockquote><p>button 的点击事件是一个很棘手的问题了，建立一个 target ，同时还使用的带字符串的 Select，button 的点击也和响应逻辑分家了<br>处理方式会有两个问题</p></blockquote><ul><li>使用了带 String 的 Target</li><li>点击的关联事件代码和处理的逻辑分开了</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">button.addTarget(<span class="keyword">self</span>, action: <span class="string">"tapButton"</span>, forControlEvents: .<span class="type">TouchDragInside</span>)</div></pre></td></tr></table></figure><blockquote><p>Rx 已经提供了 closure 的功能</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">button.rx_tap</div><div class="line"> .subscribeNext &#123;</div><div class="line">     <span class="built_in">print</span>(<span class="string">"Tap"</span>)</div><div class="line"> &#125;.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p><a href="http://t.swift.gg/d/2-rxswift" target="_blank" rel="external">资料来源</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIImagePickerController</title>
      <link href="/2017/12/14/Swift/UIKit/UIImagePickerController/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qq_14920635/article/details/51472057" target="_blank" rel="external">http://blog.csdn.net/qq_14920635/article/details/51472057</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIImagePickerController </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIImagePickerController </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-NSAttributedString</title>
      <link href="/2017/12/14/Swift/UIKit/NSAttributedString/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qq_14920635/article/details/76318309" target="_blank" rel="external">http://blog.csdn.net/qq_14920635/article/details/76318309</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> NSAttributedString </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> NSAttributedString </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Func-Mirror-反射</title>
      <link href="/2017/12/14/Swift/Func/Swift-Func-Mirror-%E5%8F%8D%E5%B0%84/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qq_14920635/article/details/77676231" target="_blank" rel="external">http://blog.csdn.net/qq_14920635/article/details/77676231</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Func-正则表达式</title>
      <link href="/2017/12/14/Swift/Func/Swift-Func-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>#常用的正则表达式方式</p><h2 id="在NSpredicate中使用"><a href="#在NSpredicate中使用" class="headerlink" title="在NSpredicate中使用"></a>在NSpredicate中使用</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> email = <span class="string">"lifusc464@qq.com"</span>  </div><div class="line"><span class="keyword">let</span> regex = <span class="string">"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;"</span>  </div><div class="line"><span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"SELF MATCHES %@"</span>, regex)  </div><div class="line"><span class="keyword">let</span> isValid = predicate.evaluate(with: email)  </div><div class="line"><span class="built_in">print</span>(isValid ? <span class="string">"正确的邮箱地址"</span> : <span class="string">"错误的邮箱地址"</span>)</div></pre></td></tr></table></figure><h2 id="利用String的RangeOfString-option-直接查找"><a href="#利用String的RangeOfString-option-直接查找" class="headerlink" title="利用String的RangeOfString: option: 直接查找"></a>利用String的RangeOfString: option: 直接查找</h2><blockquote><p>正则表达判断是否含有结果值 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">/** </span></div><div class="line"><span class="comment"> 正则表达判断是否含有结果值 </span></div><div class="line"><span class="comment"> - parameter pattern: 一个字符串类型的正则表达式 </span></div><div class="line"><span class="comment"> - parameter str: 需要比较判断的对象 </span></div><div class="line"><span class="comment"> - returns: 返回布尔值判断结果 </span></div><div class="line"><span class="comment"> - warning: 注意匹配到结果的话就会返回true，没有匹配到结果就会返回false </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">regex</span>(<span class="title">pattern</span>:<span class="title">String</span>, <span class="title">str</span>:<span class="title">String</span>) -&gt; <span class="title">Bool</span> </span>&#123;  </div><div class="line">    <span class="keyword">let</span> regex = <span class="keyword">try</span>! <span class="type">NSRegularExpression</span>(pattern: pattern, options:[<span class="type">NSRegularExpression</span>.<span class="type">Options</span>.caseInsensitive])  </div><div class="line">    <span class="keyword">let</span> resultNum = regex.numberOfMatches(<span class="keyword">in</span>: str, options: <span class="type">NSRegularExpression</span>.<span class="type">MatchingOptions</span>(rawValue: <span class="number">0</span>) , range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, str.characters.<span class="built_in">count</span>))  </div><div class="line">    <span class="keyword">if</span> resultNum&gt;=<span class="number">1</span> &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p> 正则表达式获取目的值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">/** </span></div><div class="line"><span class="comment"> 正则表达式获取目的值 </span></div><div class="line"><span class="comment"> - parameter pattern: 一个字符串类型的正则表达式 </span></div><div class="line"><span class="comment"> - parameter str: 需要比较判断的对象 </span></div><div class="line"><span class="comment"> - imports: 这里子串的获取先转话为NSString的[以后处理结果含NS的还是可以转换为NS前缀的方便] </span></div><div class="line"><span class="comment"> - returns: 返回目的字符串结果值数组(目前将String转换为NSString获得子串方法较为容易) </span></div><div class="line"><span class="comment"> - warning: 注意匹配到结果的话就会返回true，没有匹配到结果就会返回false </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">regexGetSub</span>(<span class="title">pattern</span>:<span class="title">String</span>, <span class="title">str</span>:<span class="title">String</span>) -&gt; [<span class="title">String</span>] </span>&#123;  </div><div class="line">    <span class="keyword">var</span> subStr = [<span class="type">String</span>]()  </div><div class="line">    <span class="keyword">let</span> regex = <span class="keyword">try</span>! <span class="type">NSRegularExpression</span>(pattern: pattern, options:[<span class="type">NSRegularExpression</span>.<span class="type">Options</span>.caseInsensitive])  </div><div class="line">    <span class="keyword">let</span> results = regex.matches(<span class="keyword">in</span>: str, options: <span class="type">NSRegularExpression</span>.<span class="type">MatchingOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>), range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, str.characters.<span class="built_in">count</span>))  </div><div class="line">    <span class="comment">//解析出子串  </span></div><div class="line">    <span class="keyword">for</span>  rst <span class="keyword">in</span> results &#123;  </div><div class="line">        <span class="keyword">let</span> nsStr = str <span class="keyword">as</span>  <span class="type">NSString</span>  <span class="comment">//可以方便通过range获取子串  </span></div><div class="line">        subStr.append(nsStr.substring(with: rst.range))  </div><div class="line">        <span class="comment">//str.substring(with: Range&lt;String.Index&gt;) //本应该用这个的，可以无法直接获得参数，必须自己手动获取starIndex 和 endIndex作为区间  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> subStr  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Func-使用iconfont图标</title>
      <link href="/2017/12/14/Swift/Func/Swift-Func-%E4%BD%BF%E7%94%A8iconfont%E5%9B%BE%E6%A0%87/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qq_14920635/article/details/78408761" target="_blank" rel="external">http://blog.csdn.net/qq_14920635/article/details/78408761</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-NSNotificationCenter-简介</title>
      <link href="/2017/12/14/Swift/UIKit/NSNotificationCenter-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="NSNotificationCenter"><a href="#NSNotificationCenter" class="headerlink" title="NSNotificationCenter"></a>NSNotificationCenter</h1><blockquote><p>如果被通知对象创建了，那么执行完发送通知之后就会执行被通知的selector的方法，之后再回来执行后一行代码<br>通知一般在mode与View需要交流（传递数据）时使用，或者也可以用于多线程的消息传递，也可是其他的信息传递,最常用的场景是页面值的回传</p></blockquote><h2 id="注册通知"><a href="#注册通知" class="headerlink" title="注册通知"></a>注册通知</h2><blockquote><p>参数：第一个是响应被通知的对象，一般是self， selector:一个自定义方法，实现得到通知后的操作（如果使用闭包的方法，就在回调中实现），<br>name:通知的名字（注意注册通知和发送通知必须一致才能够响应通知），<br>object:发通知的对象，如果填nil则表示接受所有通知，如果填上具体的对象，则是1对1的通知。<br>建议：如果通知多可以单独写一个方法放通知（调用第二个方法），如果通知比较少建议使用第一种，再实现其selector方法，注册通知是在需要被通知的类里写</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">NSNotificationCenter</span>.defaultCenter().addObserver(<span class="keyword">self</span>, selector: #selector(<span class="type">TiltleNotification</span>), name: <span class="string">"TiltleNotification"</span>, object: <span class="literal">nil</span>)<span class="comment">//注册了一个名字叫做TiltleNotification</span></div></pre></td></tr></table></figure><h2 id="发送通知post"><a href="#发送通知post" class="headerlink" title="发送通知post"></a>发送通知post</h2><blockquote><p>在需要通知的类（即需要传信息出去的类）中使用通知传递消息<br>name也可以这样写:NSNotification.Name.init(“TiltleNotification”) </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">NSNotificationCenter</span>.defaultCenter().postNotificationName(<span class="type">NSNotification</span>.<span class="type">Name</span>(<span class="string">"TiltleNotification"</span>), object: <span class="keyword">self</span>, userInfo: [<span class="string">"success"</span>:<span class="literal">true</span>,<span class="string">"img"</span>:<span class="type">UIImage</span>(named:<span class="string">"image"</span>])</div></pre></td></tr></table></figure><h2 id="在完成通知中的选择器方法"><a href="#在完成通知中的选择器方法" class="headerlink" title="在完成通知中的选择器方法"></a>在完成通知中的选择器方法</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pushBookTiltleNotification</span><span class="params">(notification:NSNotification)</span></span>&#123; <span class="comment">//记得参数加上，才能得到信息  </span></div><div class="line">      <span class="keyword">let</span> dict = notification.userInfo   </div><div class="line">      <span class="keyword">if</span> (dict[<span class="string">"success"</span>] <span class="keyword">as</span>! <span class="type">Bool</span>) &#123;<span class="comment">//获取传递过来的值,而且需要转换下  </span></div><div class="line">          <span class="type">ProgressHUD</span>.showSuccess(<span class="string">"通知成功"</span>)  </div><div class="line">      &#125;<span class="keyword">else</span>&#123;  </div><div class="line">          <span class="type">ProgressHUD</span>.showError(<span class="string">"通知失败"</span>)  </div><div class="line">      &#125;  </div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="移除通知"><a href="#移除通知" class="headerlink" title="移除通知"></a>移除通知</h2><blockquote><p>由于通知是单列的，所以使用完后必须在析构deinit中移除通知，否则后期将引发难以查询的莫名错误</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">deinit</span>&#123;  </div><div class="line">       </div><div class="line">      <span class="comment">//注意由于通知是单例的，所以用了之后需要析构，  </span></div><div class="line">      <span class="type">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class="keyword">self</span>, name: <span class="string">"TiltleNotification"</span>, object: <span class="literal">nil</span>)  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> NSNotificationCenter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> NSNotificationCenter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Func-高效切圆角</title>
      <link href="/2017/12/14/OC/Func/iOS-Func-%E9%AB%98%E6%95%88%E5%88%87%E5%9C%86%E8%A7%92/"/>
      <content type="html"><![CDATA[<h1 id="UIView（不包括其子类）"><a href="#UIView（不包括其子类）" class="headerlink" title="UIView（不包括其子类）"></a>UIView（不包括其子类）</h1><blockquote><p>UIView 只要设置图层的 cornerRadius 属性即可<br>（不明白的话，可以看看官方文档里对 cornerRadius 的描述）<br>设置 layer.masksToBounds = YES，会造成不必要的离屏渲染</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">view.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">view.layer.cornerRadius = <span class="number">3.</span>f;</div><div class="line"><span class="comment">// 以下两行，任写一行</span></div><div class="line">view.layer.masksToBounds = <span class="literal">NO</span>;</div><div class="line">view.clipToBounds = <span class="literal">NO</span>;</div></pre></td></tr></table></figure><blockquote><p> 以下两行，千万不要加！</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">view.layer.masksToBounds = <span class="literal">YES</span>;</div><div class="line">view.clipToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure><h1 id="文本类视图"><a href="#文本类视图" class="headerlink" title="文本类视图"></a>文本类视图</h1><h2 id="UITextField"><a href="#UITextField" class="headerlink" title="UITextField"></a>UITextField</h2><blockquote><p>UITextField有两种实现方法</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 支持设置圆角边框</span></div><div class="line"><span class="built_in">UITextField</span> *textField = [[<span class="built_in">UITextField</span> alloc] init];</div><div class="line">textField.borderStyle = <span class="built_in">UITextBorderStyleRoundedRect</span>;</div><div class="line"></div><div class="line"><span class="comment">// 与 UIView 类似</span></div><div class="line"><span class="built_in">UITextField</span> *textField = [[<span class="built_in">UITextField</span> alloc] init];</div><div class="line">textField.layer.cornerRadius = cornerRadius;</div></pre></td></tr></table></figure><h2 id="UITextView"><a href="#UITextView" class="headerlink" title="UITextView"></a>UITextView</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 与 UIView 类似</span></div><div class="line"><span class="built_in">UITextView</span> *textView = [[<span class="built_in">UITextView</span> alloc] init];</div><div class="line">textView.layer.cornerRadius = cornerRadius;</div></pre></td></tr></table></figure><h2 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] init];</div><div class="line"><span class="comment">// 重点在此！！设置视图的图层背景色，千万不要直接设置 label.backgroundColor</span></div><div class="line">label.layer.backgroundColor = [<span class="built_in">UIColor</span> grayColor].CGColor;</div><div class="line">label.layer.cornerRadius = cornerRadius;</div></pre></td></tr></table></figure><h1 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h1><blockquote><p>UIButton 的背景图片，如果是复杂的图片，可以依靠 UI 切图来实现<br>如果是简单的纯色背景图片，可以利用代码绘制带圆角的图片</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line"></div><div class="line"><span class="comment">// 设置 UIButton 的背景图片。</span></div><div class="line">[button setBackgroundImage:image forState:<span class="built_in">UIControlStateNormal</span>];</div></pre></td></tr></table></figure><blockquote><p>背景图片绘制方法</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">    + (<span class="built_in">UIImage</span> *)pureColorImageWithSize:(<span class="built_in">CGSize</span>)size color:(<span class="built_in">UIColor</span> *)color cornRadius:(<span class="built_in">CGFloat</span>)cornRadius &#123;</div><div class="line">      <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, size.width, size.height)];</div><div class="line">      view.backgroundColor = color;</div><div class="line">      view.layer.cornerRadius = cornerRadius;</div><div class="line">      <span class="comment">// 下面方法，第一个参数表示区域大小。第二个参数表示是否是非透明的。如果需要显示半透明效果，需要传NO，否则传YES。第三个参数是屏幕密度</span></div><div class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(view.bounds.size, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</div><div class="line">      [view.layer renderInContext:<span class="built_in">UIGraphicsGetCurrentContext</span>()];</div><div class="line">      <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">      <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">      <span class="keyword">return</span> image;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="UIImageView"><a href="#UIImageView" class="headerlink" title="UIImageView"></a>UIImageView</h1><blockquote><p>方式一：贝塞尔曲线切割圆角</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">UIImageView</span> *)roundedRectImageViewWithCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius &#123;</div><div class="line">    <span class="built_in">UIBezierPath</span> *bezierPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="keyword">self</span>.bounds cornerRadius:cornerRadius];</div><div class="line">    <span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    layer.path = bezierPath.CGPath;</div><div class="line">    <span class="keyword">self</span>.layer.mask = layer;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>绘制四个角的遮罩（使用场景受限）</p></blockquote><ul><li>在 UIImageView 上添加一个四个角有内容，其它部分是透明的视图，只对 UIImageView 圆角部分进行遮挡。但要保证被遮挡的部分背景色要与周围背景相同，避免穿帮。所以当 UIImageView 处于一个复杂的背景时，是不适合使用这个方法的</li></ul><blockquote><p>最不推荐做法（当一个页面只有少量圆角图片时才推荐使用）</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] init];</div><div class="line">imageView.layer.cornerRadius = <span class="number">5.</span>f;</div><div class="line">imageView.layer.masksToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Func </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISearchController-简介</title>
      <link href="/2017/12/14/Swift/UIKit/UISearchController-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISearchController </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITableView-双表联动</title>
      <link href="/2017/12/14/Swift/UIKit/UITableView-%E5%8F%8C%E8%A1%A8%E8%81%94%E5%8A%A8/"/>
      <content type="html"><![CDATA[<h1 id="FFTableViewCtl-swift"><a href="#FFTableViewCtl-swift" class="headerlink" title="FFTableViewCtl.swift"></a>FFTableViewCtl.swift</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FFTableViewCtl</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span></span>&#123;&#125;</div></pre></td></tr></table></figure><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><blockquote><p>左侧 菜单分类数据源</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span> <span class="built_in">lazy</span> <span class="keyword">var</span> categoryData = [<span class="type">FFCategoryModel</span>]()</div></pre></td></tr></table></figure><blockquote><p>右侧，某类型具体菜单详情</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span> <span class="built_in">lazy</span> <span class="keyword">var</span> foodData     = [[<span class="type">FFFoodModel</span>]]()</div></pre></td></tr></table></figure><blockquote><p>记录当前选择分类（菜类型）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span>  <span class="keyword">var</span> selectIndex  = <span class="number">0</span>   <span class="comment">//默认选择 0</span></div></pre></td></tr></table></figure><blockquote><p>记录是否向下滚动</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span>  <span class="keyword">var</span> isScrollDown = <span class="literal">true</span></div></pre></td></tr></table></figure><blockquote><p>记录最后Y方向偏移量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span>  <span class="keyword">var</span> lastOffsetY : <span class="type">CGFloat</span> = <span class="number">0.0</span></div></pre></td></tr></table></figure><blockquote><p>左侧TableView表</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span> <span class="built_in">lazy</span> <span class="keyword">var</span> leftTableView : <span class="type">UITableView</span> = &#123;</div><div class="line">    <span class="keyword">let</span> leftTableView = <span class="type">UITableView</span>()</div><div class="line">    leftTableView.delegate = <span class="keyword">self</span></div><div class="line">    leftTableView.dataSource = <span class="keyword">self</span></div><div class="line">    </div><div class="line">    leftTableView.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">80</span>, height: <span class="type">UIScreen</span>.main.bounds.height)</div><div class="line">    leftTableView.rowHeight = <span class="number">55</span></div><div class="line">    leftTableView.showsVerticalScrollIndicator = <span class="literal">false</span></div><div class="line">    leftTableView.separatorColor = <span class="type">UIColor</span>.clear</div><div class="line">    leftTableView.register(<span class="type">FFLeftTableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"FFLeftTableViewCell"</span>)</div><div class="line">    <span class="keyword">return</span> leftTableView</div><div class="line">&#125;()</div></pre></td></tr></table></figure><blockquote><p>右侧TableView表</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">fileprivate</span> <span class="built_in">lazy</span> <span class="keyword">var</span> rightTableView : <span class="type">UITableView</span> = &#123;</div><div class="line">    <span class="keyword">let</span> rightTableView = <span class="type">UITableView</span>()</div><div class="line">    rightTableView.delegate = <span class="keyword">self</span></div><div class="line">    rightTableView.dataSource = <span class="keyword">self</span></div><div class="line">    rightTableView.frame = <span class="type">CGRect</span>(x: <span class="number">80</span>, y: <span class="number">64</span>, width: <span class="type">UIScreen</span>.main.bounds.width - <span class="number">80</span>, height: <span class="type">UIScreen</span>.main.bounds.height - <span class="number">64</span>)</div><div class="line">    rightTableView.rowHeight = <span class="number">80</span></div><div class="line">    rightTableView.showsVerticalScrollIndicator = <span class="literal">false</span></div><div class="line">    rightTableView.register(<span class="type">FFRightTableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"FFRightTableViewCell"</span>)</div><div class="line">    <span class="keyword">return</span> rightTableView</div><div class="line">&#125;()</div></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">extension</span> <span class="title">FFTableViewCtl</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">configureData</span> <span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"meituan"</span>, ofType: <span class="string">"json"</span>)</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfFile: path) <span class="keyword">as</span> <span class="type">Data</span>?</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> anyObject = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data,</div><div class="line">                                                              options: .mutableContainers)</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> dict = anyObject <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">Any</span>]</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> datas = dict[<span class="string">"data"</span>] <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">Any</span>]</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> foods = datas[<span class="string">"food_spu_tags"</span>] <span class="keyword">as</span>? [[<span class="type">String</span> : <span class="type">Any</span>]]</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(foods)"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> food <span class="keyword">in</span> foods &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> model = <span class="type">FFCategoryModel</span>(dict: food)</div><div class="line">            categoryData.append(model)</div><div class="line">            </div><div class="line">            <span class="keyword">guard</span></div><div class="line">                <span class="keyword">let</span> spus = model.spus</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> datas = [<span class="type">FFFoodModel</span>]()</div><div class="line">            <span class="keyword">for</span> fModel <span class="keyword">in</span> spus &#123;</div><div class="line">                datas.append(fModel)</div><div class="line">            &#125;</div><div class="line">           foodData.append(datas)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="TableView-2个协议-实现"><a href="#TableView-2个协议-实现" class="headerlink" title="TableView 2个协议 实现"></a>TableView 2个协议 实现</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FFTableViewCtl</span> </span>&#123;<span class="comment">//DataSource //Delegate &#125;</span></div></pre></td></tr></table></figure><blockquote><p>行</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> leftTableView == tableView&#123;</div><div class="line">        <span class="keyword">return</span> categoryData.<span class="built_in">count</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> foodData[section].<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>cell</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="keyword">if</span> leftTableView == tableView &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"FFLeftTableViewCell"</span>,</div><div class="line">                                                 <span class="keyword">for</span>: indexPath)<span class="keyword">as</span>! <span class="type">FFLeftTableViewCell</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> model  = categoryData[indexPath.row]</div><div class="line">        cell.nameLab.text = model.name</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">        </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"FFRightTableViewCell"</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">FFRightTableViewCell</span></div><div class="line">        <span class="keyword">let</span> model = foodData[indexPath.section][indexPath.row]</div><div class="line">        cell.setDatas(model: model)</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>区 数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> leftTableView == tableView &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> categoryData.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p> 区 view- 设置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, viewForHeaderInSection section: Int)</span></span> -&gt; <span class="type">UIView</span>? &#123;</div><div class="line">    <span class="keyword">if</span> leftTableView == tableView &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">let</span> headerView = <span class="type">FFTableViewHeaderView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">UIScreen</span>.main.bounds.width, height: <span class="number">20</span>))</div><div class="line">        <span class="keyword">let</span> model = categoryData[section]</div><div class="line">        headerView.nameLab.text = model.name</div><div class="line">        <span class="keyword">return</span> headerView</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p> 区头view - 区高</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForHeaderInSection section: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">    <span class="keyword">if</span> leftTableView == tableView &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">20</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>区头view - 即将展示</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int)</span></span> &#123;</div><div class="line">    <span class="comment">// 当前的 tableView 是 FFRightTableView，FFRightTableView 滚动的方向向上，FFRightTableView 是用户拖拽而产生滚动的（（主要判断 RightTableView 用户拖拽而滚动的，还是点击 FFLeftTableView 而滚动的）</span></div><div class="line">    <span class="keyword">if</span>(rightTableView == tableView)</div><div class="line">        &amp;&amp; !isScrollDown</div><div class="line">        &amp;&amp; (rightTableView.isDragging || rightTableView.isDecelerating)&#123;</div><div class="line">        selectRow(index: section)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>区头view - 展示结束</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didEndDisplayingHeaderView view: UIView, forSection section: Int)</span></span> &#123;</div><div class="line">    <span class="comment">// 当前的 tableView 是 FFRightTableView，FFRightTableView 滚动的方向向下，FFRightTableView 是用户拖拽而产生滚动的（（主要判断 RightTableView 用户拖拽而滚动的，还是点击 FFLeftTableView 而滚动的）</span></div><div class="line">    <span class="keyword">if</span> (rightTableView == tableView)</div><div class="line">        &amp;&amp; isScrollDown</div><div class="line">        &amp;&amp; (rightTableView.isDragging || rightTableView.isDecelerating) &#123;</div><div class="line">        selectRow(index: section + <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>didSelct - 选择cell</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> leftTableView == tableView &#123;</div><div class="line">        selectIndex = indexPath.row</div><div class="line">        <span class="keyword">self</span>.scrollToTop(section: selectIndex, animated: <span class="literal">true</span>)</div><div class="line">        leftTableView.scrollToRow(at: <span class="type">IndexPath</span>(row: selectIndex, section: <span class="number">0</span>), at: .top, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>scrollViewDidScroll<br>标记一下 RightTableView 的滚动方向，是向上还是向下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> tableView = scrollView <span class="keyword">as</span>! <span class="type">UITableView</span></div><div class="line">    <span class="keyword">if</span> rightTableView == tableView &#123;</div><div class="line">        isScrollDown = lastOffsetY &lt; scrollView.contentOffset.y</div><div class="line">        lastOffsetY = scrollView.contentOffset.y</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="private-私有方法"><a href="#private-私有方法" class="headerlink" title="private 私有方法"></a>private 私有方法</h2><blockquote><p>selectRow 当拖动右边TableView，处理左边 TableView</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">selectRow</span><span class="params">(index:Int)</span></span>&#123;</div><div class="line">    leftTableView.selectRow(at: <span class="type">IndexPath</span>(row: index,</div><div class="line">                                          section: <span class="number">0</span>),</div><div class="line">                            animated: <span class="literal">true</span>,</div><div class="line">                            scrollPosition: .top)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>scrollToTop</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollToTop</span><span class="params">(section:Int,animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> headerRect = rightTableView.rect(forSection: section)</div><div class="line">    <span class="keyword">let</span> topHeader = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: headerRect.origin.y - rightTableView.contentInset.top)</div><div class="line">    rightTableView.setContentOffset(topHeader, animated: animated)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="FFLeftTableViewCell-swift"><a href="#FFLeftTableViewCell-swift" class="headerlink" title="FFLeftTableViewCell.swift"></a>FFLeftTableViewCell.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FFLeftTableViewCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line">        <span class="comment">// Initialization code</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> nameLab = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> yellowView = <span class="type">UIView</span>()</div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span> (style:<span class="type">UITableViewCellStyle</span>,reuseIdentifier:<span class="type">String</span>?)&#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(style: style, reuseIdentifier: reuseIdentifier)</div><div class="line">        selectionStyle = .<span class="keyword">none</span></div><div class="line">        initUI()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initUI</span><span class="params">()</span></span> &#123;</div><div class="line">        nameLab.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="number">60</span>, height: <span class="number">40</span>)</div><div class="line">        nameLab.numberOfLines = <span class="number">0</span></div><div class="line">        nameLab.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">15</span>)</div><div class="line">        nameLab.textColor = <span class="type">UIColor</span>(<span class="number">130</span>, <span class="number">130</span>, <span class="number">130</span>)</div><div class="line">        nameLab.highlightedTextColor = <span class="type">UIColor</span>(<span class="number">253</span>, <span class="number">212</span>, <span class="number">49</span>)</div><div class="line">        contentView.addSubview(nameLab)</div><div class="line">        </div><div class="line">        yellowView.frame = <span class="type">CGRect</span>(x:<span class="number">0</span>,y:<span class="number">5</span>,width:<span class="number">5</span>,height:<span class="number">45</span>)</div><div class="line">        yellowView.backgroundColor = <span class="type">UIColor</span>(<span class="number">253</span>, <span class="number">212</span>, <span class="number">49</span>)</div><div class="line">        contentView.addSubview(yellowView)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setSelected</span><span class="params">(<span class="number">_</span> selected: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setSelected(selected, animated: animated)</div><div class="line">        <span class="comment">// Configure the view for the selected state</span></div><div class="line">        </div><div class="line">        contentView.backgroundColor = selected ? <span class="type">UIColor</span>.white : <span class="type">UIColor</span>(white: <span class="number">0</span>, alpha: <span class="number">0.1</span>)</div><div class="line">        isHighlighted = selected</div><div class="line">        nameLab.isHighlighted = selected</div><div class="line">        yellowView.isHidden = !selected</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="FFRightTableViewCell-swift"><a href="#FFRightTableViewCell-swift" class="headerlink" title="FFRightTableViewCell.swift"></a>FFRightTableViewCell.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FFRightTableViewCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line">        <span class="comment">// Initialization code</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setSelected</span><span class="params">(<span class="number">_</span> selected: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setSelected(selected, animated: animated)</div><div class="line"></div><div class="line">        <span class="comment">// Configure the view for the selected state</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> nameLab = <span class="type">UILabel</span>()       <span class="comment">//名称</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> imgView = <span class="type">UIImageView</span>()   <span class="comment">//</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> priceLab = <span class="type">UILabel</span>()      <span class="comment">// 价格</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(style: <span class="type">UITableViewCellStyle</span>, reuseIdentifier: <span class="type">String</span>?)&#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(style: style, reuseIdentifier: reuseIdentifier)</div><div class="line">        initUI()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//#MARK:设置UI</span></div><div class="line">    <span class="function"><span class="keyword">func</span>  <span class="title">initUI</span><span class="params">()</span></span>&#123;</div><div class="line">        nameLab.frame = <span class="type">CGRect</span>(x: <span class="number">15</span>, y: <span class="number">15</span>, width: <span class="number">50</span>, height: <span class="number">50</span>)</div><div class="line">        contentView.addSubview(nameLab)</div><div class="line">        </div><div class="line">        imgView.frame = <span class="type">CGRect</span>(x: <span class="number">15</span>, y: <span class="number">15</span>, width: <span class="number">50</span>, height: <span class="number">50</span>)</div><div class="line">        contentView.addSubview(imgView)</div><div class="line">        </div><div class="line">        priceLab.frame = <span class="type">CGRect</span>(x: <span class="number">80</span>, y: <span class="number">45</span>, width: <span class="number">200</span>, height: <span class="number">30</span>)</div><div class="line">        priceLab.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)</div><div class="line">        priceLab.textColor = <span class="type">UIColor</span>.red</div><div class="line">        contentView.addSubview(priceLab)</div><div class="line">    &#125;</div><div class="line">   <span class="comment">//#MARK: 加载数据</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setDatas</span><span class="params">( model:FFFoodModel)</span></span>&#123;</div><div class="line">        <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> minPrice = model.minPrice,</div><div class="line">            <span class="keyword">let</span> picture = model.picture,</div><div class="line">            <span class="keyword">let</span> name = model.name</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">            priceLab.text = <span class="string">"￥\(minPrice)"</span></div><div class="line">            nameLab.text = name</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>.<span class="keyword">init</span>(string: picture)</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">      imgView.kf.setImage(with: url)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="FFCategoryModel-swift"><a href="#FFCategoryModel-swift" class="headerlink" title="FFCategoryModel.swift"></a>FFCategoryModel.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FFCategoryModel</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> icon: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> spus:    [<span class="type">FFFoodModel</span>]?</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(dict :[<span class="type">String</span>:<span class="type">Any</span>]) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        setValuesForKeys(dict)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forKey key: String)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> key == <span class="string">"spus"</span> &#123;</div><div class="line">           spus = <span class="type">Array</span>()</div><div class="line">            <span class="keyword">guard</span></div><div class="line">                <span class="keyword">let</span> datas = value <span class="keyword">as</span>? [[<span class="type">String</span>:<span class="type">Any</span>]]</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> dict <span class="keyword">in</span> datas&#123;</div><div class="line">                <span class="keyword">let</span> foodModel = <span class="type">FFFoodModel</span>(dict:dict)</div><div class="line">                spus?.append(foodModel)</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">super</span>.setValue(value, forKey: key)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forUndefinedKey key: String)</span></span> &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="FFFoodModel-swift"><a href="#FFFoodModel-swift" class="headerlink" title="FFFoodModel.swift"></a>FFFoodModel.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">FFFoodModel</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> picture : <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> minPrice : <span class="type">Float</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(dict : [<span class="type">String</span> : <span class="type">Any</span>]) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        setValuesForKeys(dict)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forKey key: String)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> key == <span class="string">"min_price"</span> &#123;</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> price = value <span class="keyword">as</span>? <span class="type">Float</span> <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</div><div class="line">            minPrice = price</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.setValue(value, forKey: key)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forUndefinedKey key: String)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="FFTableViewHeaderView-swift"><a href="#FFTableViewHeaderView-swift" class="headerlink" title="FFTableViewHeaderView.swift"></a>FFTableViewHeaderView.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FFTableViewHeaderView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line"> <span class="built_in">lazy</span> <span class="keyword">var</span> nameLab  = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span> (frame:<span class="type">CGRect</span>)&#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line">        backgroundColor = <span class="type">UIColor</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">0.8</span>)</div><div class="line">        nameLab.frame = <span class="type">CGRect</span>(x: <span class="number">15</span>, y: <span class="number">0</span>, width: <span class="number">200</span>, height: <span class="number">20</span>)</div><div class="line">        nameLab.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">13</span>)</div><div class="line">        addSubview(nameLab)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITableView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITableView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Error-网络错误锦集</title>
      <link href="/2017/12/14/Swift/Error/Swift-Error-%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
      <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><blockquote><p>错误信息</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&apos;s Info.plist file</div></pre></td></tr></table></figure><blockquote><p>修改info.plist</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">App Transport Security Settings</div><div class="line">  Allow Arbitrary Loads           YES</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Error-开发错误锦集</title>
      <link href="/2017/12/14/Swift/Error/Swift-Error-%E5%BC%80%E5%8F%91%E9%94%99%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
      <content type="html"><![CDATA[<h1 id="Model赋值"><a href="#Model赋值" class="headerlink" title="Model赋值"></a>Model赋值</h1><blockquote><p>某个key（比如has_next_page）没var，但数据里有(forUndefinedKey)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">reason:this <span class="class"><span class="keyword">class</span> <span class="title">is</span> <span class="title">not</span> <span class="title">key</span> <span class="title">value</span> <span class="title">coding</span>-<span class="title">compliant</span> <span class="title">for</span> <span class="title">the</span> <span class="title">key</span> <span class="title">has_next_page</span>.'</span></div></pre></td></tr></table></figure><blockquote><p>forKey/forUndefinedKey</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//forKey</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forKey key: String)</span></span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//forUndefinedKey</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forUndefinedKey key: String)</span></span> &#123;&#125;</div></pre></td></tr></table></figure><h1 id="添加环境变量-OS-ACTIVITY-MODE"><a href="#添加环境变量-OS-ACTIVITY-MODE" class="headerlink" title="添加环境变量 OS_ACTIVITY_MODE"></a>添加环境变量 OS_ACTIVITY_MODE</h1><blockquote><p>Xcode 8多余日志输出</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nw_socket_set_common_sockopts setsockopt SO_NOAPNFALLBK failed: [42] Protocol not available, dumping backtrace:</div></pre></td></tr></table></figure><blockquote><p>添加环境变量 </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">【product】-【scheme】-【Edit Scheme】-【Run】-【Argument】-【Environment Variable】添加key Value【OS_ACTIVITY_MODE disable】</div></pre></td></tr></table></figure><p>#检查字典或者数组的形式是否正确</p><blockquote><p>Swift编译时报错：Command failed due to signal: Segmentation fault: 11<br>在网络请求完，解析的时候遇到这个问题：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"http://api.budejie.com/api/api_open.php"</span>, parameters: [<span class="string">"a"</span>:<span class="string">"newlist"</span>, <span class="string">"c"</span>:<span class="string">"data"</span>, <span class="string">"type"</span>:<span class="number">1</span>]).responseJSON() &#123; response <span class="keyword">in</span></div><div class="line"></div><div class="line">        <span class="keyword">let</span> json = <span class="type">JSON</span>(response.result.value!)</div><div class="line">        arr = json[<span class="string">"list"</span>].arrayObject!</div><div class="line">        <span class="type">DRLog</span>(arr)</div><div class="line">        <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">      &#125;</div></pre></td></tr></table></figure><blockquote><p>在控制台上看到的确实是arr是一个数组形式，里面有多个NSDictionary形式，但是如果我们直接这个用：arr[index][“text”]是错误的。必须先将arr中的每个类似NSDictionary形式转换成NSDictionary：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> dic = arr[index] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line"><span class="keyword">let</span> text = dic[<span class="string">"text"</span>] <span class="keyword">as</span>? <span class="type">String</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIWebView-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/Swift-UIKit-UIWebView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h1><blockquote><p>UIWebView 继承与 UIView, 并且遵守了 UIScrollViewDelegate 协议, 所以它可以使用里面的方法和属性</p></blockquote><h1 id="遵守代理协议"><a href="#遵守代理协议" class="headerlink" title="遵守代理协议"></a>遵守代理协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="自定义UIWebVIew"><a href="#自定义UIWebVIew" class="headerlink" title="自定义UIWebVIew"></a>自定义UIWebVIew</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myWebView</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">       <span class="comment">// 1.获取 UIWebView 的 UIScrollView 属性</span></div><div class="line">       <span class="keyword">let</span> webScroll = webView.scrollView</div><div class="line">       <span class="built_in">println</span>(<span class="string">"webScroll = \(webScroll)"</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 2.获取 UIWebView 的 request 属性</span></div><div class="line">       <span class="keyword">let</span> webRequest = webView.request</div><div class="line">       <span class="built_in">println</span>(<span class="string">"webRequest = \(webRequest)"</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 3.获取 UIWebView 是否在接收数据的时候可以退后一步</span></div><div class="line">       <span class="keyword">let</span> webCanBack = webView.canGoBack</div><div class="line">       <span class="built_in">println</span>(<span class="string">"webCanBack = \(webCanBack)"</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 4.获取 UIWebView 是否在接收数据的时候可以前进一步</span></div><div class="line">       <span class="keyword">let</span> webCanGo = webView.canGoForward</div><div class="line">       <span class="built_in">println</span>(<span class="string">"webCanGo = \(webCanGo)"</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 5.获取 UIWebVIew 是否接受完数据</span></div><div class="line">       <span class="keyword">let</span> webLoading = webView.loading</div><div class="line">       <span class="built_in">println</span>(<span class="string">"webLoading = \(webLoading)"</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 6.设置 UIWebView 接收的数据是否可以通过手势来调整页面内容大小</span></div><div class="line">       webView.scalesPageToFit = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 7.设置 UIWebView 接收到得数据是什么类型的</span></div><div class="line">       webView.dataDetectorTypes = <span class="type">UIDataDetectorTypes</span>.<span class="type">All</span></div><div class="line"></div><div class="line">       <span class="comment">// 8.设置 UIWebView 内是否可以回放媒体</span></div><div class="line">       webView.allowsInlineMediaPlayback = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 9.设置 UIWebView 中的 HTML5 视频是否自动播放</span></div><div class="line">       webView.mediaPlaybackRequiresUserAction = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 10.设置 UIWebView 是否可以使用 Air 播放</span></div><div class="line">       webView.mediaPlaybackAllowsAirPlay = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 11.设置 UIWebView 是否使用同步加载(默认是False)</span></div><div class="line">       webView.suppressesIncrementalRendering = <span class="literal">false</span></div><div class="line"></div><div class="line">       <span class="comment">// 12.设置 UIWebView 在点击视图或者元素时是否显示键盘(默认是True)</span></div><div class="line">       webView.keyboardDisplayRequiresUserAction = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 13.设置 UIWebView 的分页模式</span></div><div class="line">       webView.paginationMode = <span class="type">UIWebPaginationMode</span>.<span class="type">RightToLeft</span></div><div class="line"></div><div class="line">       <span class="comment">// 14.设置 UIWebView 的分页打破模式</span></div><div class="line">       webView.paginationBreakingMode = <span class="type">UIWebPaginationBreakingMode</span>.<span class="type">Column</span></div><div class="line"></div><div class="line">       <span class="comment">// 15.设置 UIWebView 的分页长度</span></div><div class="line">       webView.pageLength = <span class="number">400</span></div><div class="line"></div><div class="line">       <span class="comment">// 16.设置 UIWebView 每个分页之间的宽度</span></div><div class="line">       webView.gapBetweenPages = <span class="number">100</span></div><div class="line"></div><div class="line">       <span class="comment">// 17.获取 UIWebView 的分页数量</span></div><div class="line">       <span class="keyword">let</span> webViewPageCount = webView.pageCount</div><div class="line">       <span class="built_in">println</span>(webViewPageCount)</div><div class="line"></div><div class="line">       <span class="comment">// 18.设置 UIWebView 的代理对象</span></div><div class="line">       webView.delegate = <span class="keyword">self</span></div><div class="line"></div><div class="line">       <span class="comment">// 19.发送网络请求</span></div><div class="line">       <span class="keyword">var</span> url:<span class="type">NSURL</span> = <span class="type">NSURL</span>(string:<span class="string">"http://www.baidu.com"</span>)!</div><div class="line">       <span class="keyword">var</span> request:<span class="type">NSURLRequest</span> = <span class="type">NSURLRequest</span>(<span class="type">URL</span>:url)</div><div class="line">       webView.loadRequest(request)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="实现代理方法"><a href="#实现代理方法" class="headerlink" title="实现代理方法"></a>实现代理方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.该方法是用来设置是否在 UIWebView 加载之前发送一个请求</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest, navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 2.该方法是在 UIWebView 在开发加载时调用</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(webView: UIWebView)</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"开始加载"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 3.该方法是在 UIWebView 加载完之后才调用</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(webView: UIWebView)</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"加载完成"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 4.该方法是在 UIWebView 请求失败的时候调用</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(webView: UIWebView, didFailLoadWithError error: NSError)</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"加载失败"</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="在-ViewDidLoad-方法中实现"><a href="#在-ViewDidLoad-方法中实现" class="headerlink" title="在 ViewDidLoad 方法中实现"></a>在 ViewDidLoad 方法中实现</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       <span class="keyword">self</span>.myWebView()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIWebView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIWebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIWebView-简介</title>
      <link href="/2017/12/14/Swift/UIKit/Swift-UIKit-UIWebView-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UIWebView的常用属性"><a href="#UIWebView的常用属性" class="headerlink" title="UIWebView的常用属性"></a>UIWebView的常用属性</h1><blockquote><p>1.设置 UIWebView 的代理对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> delegate: <span class="type">UIWebViewDelegate</span>?</div></pre></td></tr></table></figure><blockquote><p>2.获取 UIWebView 的 UIScrollView 属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> scrollView: <span class="type">UIScrollView</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>3.获取 UIWebView 的网络请求</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> request: <span class="type">NSURLRequest</span>? &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>4.获取 UIWebView 是否在接收数据的时候可以退后一步</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> canGoBack: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>5.获取 UIWebView 是否在接收数据的时候可以前进一步</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">var</span> canGoForward: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">```  </div><div class="line"></div><div class="line">&gt; <span class="number">6</span>.获取 <span class="type">UIWebView</span> 是否接受完数据</div><div class="line"></div><div class="line">```swift</div><div class="line">   <span class="keyword">var</span> loading: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>7.设置 UIWebView 接收的数据是否可以通过手势来调整页面内容大小</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> scalesPageToFit: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>8.设置 UIWebView 接收的数据是什么类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dataDetectorTypes: <span class="type">UIDataDetectorTypes</span></div></pre></td></tr></table></figure><blockquote><p>9.设置 UIWebView 内是否可以回放媒体</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> allowsInlineMediaPlayback: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>10.设置 UIWebView 中的 HTML5 视频是否自动播放(默认是True)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mediaPlaybackRequiresUserAction: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>11.设置 UIWebView 是否可以使用 Air 播放(默认是True)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mediaPlaybackAllowsAirPlay: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>12.设置 UIWebView 是否使用同步加载(默认是False)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> suppressesIncrementalRendering: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>13.设置 UIWebView 在点击视图或者元素时是否显示键盘(默认是True)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> keyboardDisplayRequiresUserAction: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>14.设置 UIWebView 的分页模式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> paginationMode: <span class="type">UIWebPaginationMode</span></div></pre></td></tr></table></figure><blockquote><p>15.设置 UIWebView 的分页打破模式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> paginationBreakingMode: <span class="type">UIWebPaginationBreakingMode</span></div></pre></td></tr></table></figure><blockquote><p>16.设置 UIWebView 的分页长度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pageLength: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>17.设置 UIWebView 之间的页面宽度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> gapBetweenPages: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>18.获取 UIWebView 的页面数量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pageCount: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><h1 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h1><blockquote><p>1.获取 UIWebView 的数据类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UIDataDetectorTypes</span> : <span class="title">RawOptionSetType</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> rawValue: <span class="type">UInt</span>)</div><div class="line">    <span class="keyword">init</span>(rawValue: <span class="type">UInt</span>)</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">PhoneNumber</span>: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Link</span>: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Address</span>: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">CalendarEvent</span>: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">None</span>: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">All</span>: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>2.设置 UIWebView 的 Navigation 类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UIWebViewNavigationType</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">LinkClicked</span></div><div class="line">    <span class="keyword">case</span> <span class="type">FormSubmitted</span></div><div class="line">    <span class="keyword">case</span> <span class="type">BackForward</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Reload</span></div><div class="line">    <span class="keyword">case</span> <span class="type">FormResubmitted</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Other</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>3.设置 UIWebView 的分页样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UIWebPaginationMode</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Unpaginated</span></div><div class="line">    <span class="keyword">case</span> <span class="type">LeftToRight</span></div><div class="line">    <span class="keyword">case</span> <span class="type">TopToBottom</span></div><div class="line">    <span class="keyword">case</span> <span class="type">BottomToTop</span></div><div class="line">    <span class="keyword">case</span> <span class="type">RightToLeft</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>4.设置 UIWebView 打破分页样式的样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UIWebPaginationBreakingMode</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Page</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Column</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="UIWebView的代理方法"><a href="#UIWebView的代理方法" class="headerlink" title="UIWebView的代理方法"></a>UIWebView的代理方法</h1><blockquote><p>1.该方法是用来设置是否在 UIWebView 加载之前发送一个请求</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest, navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是在 UIWebView 在开发加载时调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(webView: UIWebView)</span></span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是在 UIWebView 加载完之后才调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(webView: UIWebView)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是在 UIWebView 请求失败的时候调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(webView: UIWebView, didFailLoadWithError error: NSError)</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIWebView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIWebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UINavigationController-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/UINavigationController-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="UINavigationController"><a href="#UINavigationController" class="headerlink" title="UINavigationController"></a>UINavigationController</h1><blockquote><p>UINavigationController 是继承与 UIViewController 的, 所以里面的方法以及属性都是可以使用的.</p></blockquote><h1 id="首先我们要再AppDelegate-swift文件中实现"><a href="#首先我们要再AppDelegate-swift文件中实现" class="headerlink" title="首先我们要再AppDelegate.swift文件中实现"></a>首先我们要再AppDelegate.swift文件中实现</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">       <span class="comment">// Override point for customization after application launch.</span></div><div class="line"></div><div class="line">       <span class="keyword">self</span>.window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.mainScreen().bounds)</div><div class="line">       <span class="keyword">self</span>.window!.backgroundColor = <span class="type">UIColor</span>.grayColor()</div><div class="line">       <span class="keyword">self</span>.window!.makeKeyAndVisible()</div><div class="line"></div><div class="line">       <span class="keyword">let</span> viewController = <span class="type">ViewController</span>()</div><div class="line">       <span class="keyword">let</span> navigationController = <span class="type">UINavigationController</span>(rootViewController: viewController)</div><div class="line">       <span class="keyword">self</span>.window!.rootViewController = navigationController</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="遵守代理协议"><a href="#遵守代理协议" class="headerlink" title="遵守代理协议"></a>遵守代理协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UINavigationControllerDelegate</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h1 id="自定义UINavigationController"><a href="#自定义UINavigationController" class="headerlink" title="自定义UINavigationController"></a>自定义UINavigationController</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myNavigationContronller</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="comment">// 1.设置 UINavigationController 的 Title</span></div><div class="line">       <span class="keyword">self</span>.title = <span class="string">"UINavigationContronller"</span></div><div class="line"></div><div class="line">       <span class="comment">// 2.设置 UIVavigationController 的按钮 Title, Style, Target, Action 等方法属性</span></div><div class="line">       <span class="keyword">let</span> backBarButtonItem = <span class="type">UIBarButtonItem</span>(title: <span class="string">"返回"</span>, style: <span class="type">UIBarButtonItemStyle</span>.<span class="type">Plain</span>, target: <span class="keyword">self</span>, action: <span class="string">"backAction"</span>)</div><div class="line">       <span class="keyword">let</span> nextBarButtonItem = <span class="type">UIBarButtonItem</span>(title: <span class="string">"下一页"</span>, style: <span class="type">UIBarButtonItemStyle</span>.<span class="type">Plain</span>, target: <span class="keyword">self</span>, action: <span class="string">"nextAction"</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 3.设置 UINavigationItem</span></div><div class="line">       <span class="keyword">self</span>.navigationItem.leftBarButtonItem = backBarButtonItem</div><div class="line">       <span class="keyword">self</span>.navigationItem.rightBarButtonItem = nextBarButtonItem</div><div class="line"></div><div class="line">       <span class="comment">// 4.获取 UINavigationController 的顶部的视图控制器</span></div><div class="line">       <span class="keyword">let</span> topView = <span class="keyword">self</span>.navigationController?.topViewController</div><div class="line">       <span class="built_in">println</span>(topView)</div><div class="line"></div><div class="line">       <span class="comment">// 5.获取 UINavigationController 可见的视图控制器</span></div><div class="line">       <span class="keyword">let</span> visibleView = <span class="keyword">self</span>.navigationController?.visibleViewController</div><div class="line">       <span class="built_in">println</span>(visibleView)</div><div class="line"></div><div class="line">       <span class="comment">// 6.设置 UINavigationController 的导航栏控制器</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.viewControllers</div><div class="line"></div><div class="line">       <span class="comment">// 7.设置 UINavigationController 的导航栏控制器是否隐藏(默认是 false)</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.navigationBarHidden = <span class="literal">false</span></div><div class="line"></div><div class="line">       <span class="comment">// 8.获取 UINavigationController 的导航栏控制器</span></div><div class="line">       <span class="keyword">let</span> navigationBar = <span class="keyword">self</span>.navigationController?.navigationBar</div><div class="line">       <span class="built_in">println</span>(navigationBar)</div><div class="line"></div><div class="line">       <span class="comment">// 9.设置 UINavigationController 的内置工具栏是否可见(默认是 ture)</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.toolbarHidden = <span class="literal">false</span></div><div class="line"></div><div class="line">       <span class="comment">// 10.获取 UINavigationController 的 toolbar</span></div><div class="line">       <span class="keyword">let</span> toolbar = <span class="keyword">self</span>.navigationController?.toolbar</div><div class="line">       <span class="built_in">println</span>(toolbar)</div><div class="line"></div><div class="line">       <span class="comment">// 11.设置 UINavigationController 的代理对象</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.delegate = <span class="keyword">self</span></div><div class="line"></div><div class="line">       <span class="comment">// 12.获取 UINavigationController 的手势识别顶部视图控制器</span></div><div class="line">       <span class="keyword">let</span> pop = <span class="keyword">self</span>.navigationController?.interactivePopGestureRecognizer</div><div class="line">       <span class="built_in">println</span>(pop)</div><div class="line"></div><div class="line">       <span class="comment">// 13.设置 UINavigationController 当键盘出现时是否隐藏导航栏和工具栏</span></div><div class="line">       <span class="keyword">self</span>.navigationController!.hidesBarsWhenKeyboardAppears = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 14.设置 UINavigationController 是否使用向上滑动的手势隐藏导航栏和工具栏</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.hidesBarsOnSwipe = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 15.获取 UINavigationController 用手势识别隐藏导航栏和工具栏</span></div><div class="line">       <span class="keyword">let</span> barHide = <span class="keyword">self</span>.navigationController!.barHideOnSwipeGestureRecognizer</div><div class="line">       <span class="built_in">println</span>(barHide)</div><div class="line"></div><div class="line">       <span class="comment">// 16.设置 UINavigationController 是否在垂直显示时隐藏</span></div><div class="line">       <span class="keyword">self</span>.navigationController!.hidesBarsWhenVerticallyCompact = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 17.设置 UINavigationController 是否使用点击手势来隐藏</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.hidesBarsOnTap = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 18.获取 UINavigationController 隐藏时所使用的手势</span></div><div class="line">       <span class="keyword">let</span> barHideOnTap = <span class="keyword">self</span>.navigationController!.barHideOnTapGestureRecognizer</div><div class="line">       <span class="built_in">println</span>(barHideOnTap)</div><div class="line"></div><div class="line">       <span class="comment">// 19.设置 UINavigationController 的导航栏是否隐藏, 是否使用动画</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.setNavigationBarHidden(<span class="literal">true</span>, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 20.设置 UINavigationController 的工具栏是否隐藏, 是否使用动画</span></div><div class="line">       <span class="keyword">self</span>.navigationController?.setToolbarHidden(<span class="literal">true</span>, animated: <span class="literal">true</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="自定义代理方法以及监听方法"><a href="#自定义代理方法以及监听方法" class="headerlink" title="自定义代理方法以及监听方法"></a>自定义代理方法以及监听方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.该方法使用来设置 UINavigationController 将要显示时所调用的方法</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(navigationController: UINavigationController, willShowViewController viewController: UIViewController, animated: Bool)</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"UINavigationController 将要显示"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 2.该方法使用来设置 UINavigationController 完全显示时所调用的方法</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(navigationController: UINavigationController, didShowViewController viewController: UIViewController, animated: Bool)</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"UINavigationController 完全显示"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 3.返回按钮的监听方法</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">backAction</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"点击了返回"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 4.下一页按钮的监听方法</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">nextAction</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="built_in">println</span>(<span class="string">"点击了下一页"</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UINavigationController </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UINavigationController </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UINavigationController-简介</title>
      <link href="/2017/12/14/Swift/UIKit/UINavigationController-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UINavigationController常用属性"><a href="#UINavigationController常用属性" class="headerlink" title="UINavigationController常用属性"></a>UINavigationController常用属性</h1><blockquote><p>1.获取 UINavigationController 的顶部的视图控制器</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> topViewController: <span class="type">UIViewController</span>! &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>2.获取 UINavigationController 可见的视图控制器</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> visibleViewController: <span class="type">UIViewController</span>! &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>3.设置 UINavigationController 的 viewControllers 对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> viewControllers: [<span class="type">AnyObject</span>]!</div></pre></td></tr></table></figure><blockquote><p>4.设置 UINavigationController 的导航栏控制器是否隐藏, 默认是 false</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> navigationBarHidden: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>5.获取 UINavigationController 的导航栏控制器</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> navigationBar: <span class="type">UINavigationBar</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>6.设置 UINavigationController 的内置工具栏是否可见(默认是 ture)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> toolbarHidden: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>7.获取 UINavigationController 的 toolbar</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> toolbar: <span class="type">UIToolbar</span>! &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>8.设置 UINavigationController 的代理对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> delegate: <span class="type">UINavigationControllerDelegate</span>?</div></pre></td></tr></table></figure><blockquote><p>9.获取 UINavigationController 的手势识别顶部视图控制器</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> interactivePopGestureRecognizer: <span class="type">UIGestureRecognizer</span>! &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>10.设置 UINavigationController 当键盘出现时是否隐藏导航栏和工具栏</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hidesBarsWhenKeyboardAppears: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>11.设置 UINavigationController 是否使用向上滑动的手势隐藏导航栏和工具栏</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hidesBarsOnSwipe: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>12.获取 UINavigationController 用手势识别隐藏导航栏和工具栏</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> barHideOnSwipeGestureRecognizer: <span class="type">UIPanGestureRecognizer</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>13.设置 UINavigationController 是否在垂直显示时隐藏</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hidesBarsWhenVerticallyCompact: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>14.设置 UINavigationController 是否使用点击手势来隐藏</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hidesBarsOnTap: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>15.获取 UINavigationController 隐藏时所使用的手势</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> barHideOnTapGestureRecognizer: <span class="type">UITapGestureRecognizer</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><h1 id="UINavigationController常用的方法"><a href="#UINavigationController常用的方法" class="headerlink" title="UINavigationController常用的方法"></a>UINavigationController常用的方法</h1><blockquote><p>1.该方法是用来设置 UINavigationController 跳转到指定的视图控制器, 是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pushViewController</span><span class="params">(viewController: UIViewController, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是用来设置 UINavigationController Pop到其他视图控制器时是否使用动画, 并且返回的类型必须是 UIViewController</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">popViewControllerAnimated</span><span class="params">(animated: Bool)</span></span> -&gt; <span class="type">UIViewController</span>?</div></pre></td></tr></table></figure><blockquote><p>3.该方法是用来设置 UINavigationController Pop到指定的视图控制器, 是否使用动画, 返回的类型是任意类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">popToViewController</span><span class="params">(viewController: UIViewController, animated: Bool)</span></span> -&gt; [<span class="type">AnyObject</span>]?</div></pre></td></tr></table></figure><blockquote><p>4.该方法是用来设置 UINavigationController Pop到根视图时是否使用动画, 并且返回的类型必须是任意类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">popToRootViewControllerAnimated</span><span class="params">(animated: Bool)</span></span> -&gt; [<span class="type">AnyObject</span>]?</div></pre></td></tr></table></figure><blockquote><p>5.该方法是用来替换之前于 UINavigationController 绑定的视图控制器, 并且是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setViewControllers</span><span class="params">(viewControllers: [AnyObject]!, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>6.该方法是用来设置 UINavigationController 的导航栏是否隐藏, 是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setNavigationBarHidden</span><span class="params">(hidden: Bool, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>7.该方法是用来设置 UINavigationController 的工具栏是否隐藏, 是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setToolbarHidden</span><span class="params">(hidden: Bool, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>8.该方法是用来设置 UINavigationController 显示指定的 ViewController</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showViewController</span><span class="params">(vc: UIViewController, sender: AnyObject!)</span></span></div></pre></td></tr></table></figure><h1 id="UINavigationController代理方法"><a href="#UINavigationController代理方法" class="headerlink" title="UINavigationController代理方法"></a>UINavigationController代理方法</h1><blockquote><p>1.该方法使用来设置 UINavigationController 将要显示时所调用的方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(navigationController: UINavigationController, willShowViewController viewController: UIViewController, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>2.该方法使用来设置 UINavigationController 完全显示时所调用的方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(navigationController: UINavigationController, didShowViewController viewController: UIViewController, animated: Bool)</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UINavigationController </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UINavigationController </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISegmentedControl-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/UISegmentedControl-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="自定义UISegmentedContro"><a href="#自定义UISegmentedContro" class="headerlink" title="自定义UISegmentedContro"></a>自定义UISegmentedContro</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mySegmentedControl</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 1.自定义 UISegemtedControl 并且设置它的 Item 数组对象</span></div><div class="line">        <span class="keyword">var</span> segmented = <span class="type">UISegmentedControl</span>(items: [<span class="string">"分段一"</span>, <span class="string">"分段二"</span>])</div><div class="line"></div><div class="line">        <span class="comment">// 2.设置 UISegemtedControl 的中心点</span></div><div class="line">        segmented.center = <span class="type">CGPointMake</span>(<span class="keyword">self</span>.view.frame.width / <span class="number">2</span>, <span class="keyword">self</span>.view.frame.height / <span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 3.设置 UISegemtedControl 的尺寸</span></div><div class="line">        segmented.bounds = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">30</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 4.设置 UISegemtedControl 点击之后是否瞬间弹起, (默认是 false)</span></div><div class="line">        segmented.momentary = <span class="literal">true</span></div><div class="line"></div><div class="line">        <span class="comment">// 5.获取 UISegemtedControl 的分段按钮个数</span></div><div class="line">        <span class="keyword">var</span> number: <span class="type">Int</span> = segmented.numberOfSegments</div><div class="line"></div><div class="line">        <span class="comment">// 6.设置 UISegemtedControl 是否基于内容自动调整尺寸, 默认是 false, 前提是要不设置 UISegemtedControl 的尺寸</span></div><div class="line">        segmented.apportionsSegmentWidthsByContent = <span class="literal">false</span></div><div class="line"></div><div class="line">        <span class="comment">// 7.插入一个 UISegemtedControl 的分段按钮, 并且设置标题和索引, 以及是否使用动画</span></div><div class="line">        segmented.insertSegmentWithTitle(<span class="string">"分段三"</span>, atIndex: <span class="number">2</span>, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 8.插入一个 UISegemtedControl 作为分段按钮, 并且设置索引, 以及是否使用动画</span></div><div class="line">        segmented.insertSegmentWithImage(<span class="type">UIImage</span>(named: <span class="string">"image_black.jpg"</span>)!, atIndex: <span class="number">3</span>, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 9.删除指定索引的 UISegemtedControl 分段按钮, 以及是否使用动画</span></div><div class="line">        segmented.removeSegmentAtIndex(<span class="number">1</span>, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 10.删除所有 UISegemtedControl 的分段按钮</span></div><div class="line">        <span class="comment">//segmented.removeAllSegments()</span></div><div class="line"></div><div class="line">        <span class="comment">// 11.修改 UISegemtedControl 指定的 Item 分段按钮标题</span></div><div class="line">        segmented.setTitle(<span class="string">"分段四"</span>, forSegmentAtIndex: <span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 12.获取指定的 UISegemtedControl 分段按钮的标题</span></div><div class="line">        <span class="keyword">var</span> title: <span class="type">String</span> = segmented.titleForSegmentAtIndex(<span class="number">0</span>)!</div><div class="line">        <span class="built_in">println</span>(title)</div><div class="line"></div><div class="line">        <span class="comment">// 13.修改 UISegemtedControl 指定的 Item 分段按钮图片</span></div><div class="line">        segmented.setImage(<span class="type">UIImage</span>(named: <span class="string">"image_black.jpg"</span>)!, forSegmentAtIndex: <span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 14.获取指定的 UISegemtedControl 分段按钮的图片</span></div><div class="line">        <span class="keyword">var</span> image: <span class="type">UIImage</span> = segmented.imageForSegmentAtIndex(<span class="number">2</span>)!</div><div class="line">        <span class="built_in">println</span>(image)</div><div class="line"></div><div class="line">        <span class="comment">// 15.设置 UISegemtedControl 指定的 Item 宽度</span></div><div class="line">        segmented.setWidth(<span class="number">70</span>, forSegmentAtIndex: <span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 16.获取指定 UISegemtedControl 分段按钮的宽度</span></div><div class="line">        <span class="keyword">var</span> width: <span class="type">CGFloat</span> = segmented.widthForSegmentAtIndex(<span class="number">0</span>)</div><div class="line">        <span class="built_in">println</span>(width)</div><div class="line"></div><div class="line">        <span class="comment">// 17.设置 UISegemtedControl 指定的 Item 内容偏移量</span></div><div class="line">        segmented.setContentOffset(<span class="type">CGSizeMake</span>(<span class="number">5</span>, <span class="number">5</span>), forSegmentAtIndex: <span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 18.获取指定 UISegemtedControl 指定的 Item 内容偏移量</span></div><div class="line">        <span class="keyword">var</span> size: <span class="type">CGSize</span> = segmented.contentOffsetForSegmentAtIndex(<span class="number">0</span>)</div><div class="line">        <span class="built_in">println</span>(size)</div><div class="line"></div><div class="line">        <span class="comment">// 19.设置 UISegemtedControl 指定的 Item 是否可以点击</span></div><div class="line">        segmented.setEnabled(<span class="literal">true</span>, forSegmentAtIndex: <span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 20.获取指定 UISegemtedControl 指定的 Item 是否可以点击</span></div><div class="line">        <span class="keyword">var</span> bool: <span class="type">Bool</span> = segmented.isEnabledForSegmentAtIndex(<span class="number">0</span>)</div><div class="line">        <span class="built_in">println</span>(bool)</div><div class="line"></div><div class="line">        <span class="comment">// 21.获取 UISegemtedControl 可点击的 Item 数量</span></div><div class="line">        <span class="keyword">var</span> selected: <span class="type">Int</span> = segmented.selectedSegmentIndex</div><div class="line">        <span class="built_in">println</span>(selected)</div><div class="line"></div><div class="line">        <span class="comment">// 22.设置 UISegemtedControl 的样式颜色</span></div><div class="line">        segmented.tintColor = <span class="type">UIColor</span>.redColor()</div><div class="line"></div><div class="line">        <span class="comment">// 23.设置 UISegemtedControl 的背景图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式</span></div><div class="line">        segmented.setBackgroundImage(<span class="type">UIImage</span>(named: <span class="string">"image_black.jpg"</span>), forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>, barMetrics: <span class="type">UIBarMetrics</span>.<span class="type">Default</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 24.获取 UISegemtedControl 在指定的状态, 图片显示下的图片</span></div><div class="line">        <span class="keyword">var</span> backgroundImage: <span class="type">UIImage</span> = segmented.backgroundImageForState(<span class="type">UIControlState</span>.<span class="type">Normal</span>, barMetrics: <span class="type">UIBarMetrics</span>.<span class="type">Default</span>)!</div><div class="line">        <span class="built_in">println</span>(backgroundImage)</div><div class="line"></div><div class="line">        <span class="comment">// 25.设置 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式</span></div><div class="line">        segmented.setDividerImage(<span class="type">UIImage</span>(named: <span class="string">"image_divider"</span>), forLeftSegmentState: <span class="type">UIControlState</span>.<span class="type">Normal</span>, rightSegmentState: <span class="type">UIControlState</span>.<span class="type">Normal</span>, barMetrics: <span class="type">UIBarMetrics</span>.<span class="type">Default</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 26.获取 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式</span></div><div class="line">        <span class="keyword">var</span> divider: <span class="type">UIImage</span> = segmented.dividerImageForLeftSegmentState(<span class="type">UIControlState</span>.<span class="type">Normal</span>, rightSegmentState: <span class="type">UIControlState</span>.<span class="type">Normal</span>, barMetrics: <span class="type">UIBarMetrics</span>.<span class="type">Default</span>)!</div><div class="line">        <span class="built_in">println</span>(divider)</div><div class="line"></div><div class="line">        <span class="comment">// 27.添加 UISegemtedControl 的监听方法</span></div><div class="line">        segmented.addTarget(<span class="keyword">self</span>, action: <span class="string">"didClicksegmentedControlAction:"</span>, forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">ValueChanged</span>)</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 添加到 self.view</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(segmented)</div><div class="line">        </div><div class="line">      &#125;</div></pre></td></tr></table></figure><h1 id="UISegemtedControl的监听方法"><a href="#UISegemtedControl的监听方法" class="headerlink" title="UISegemtedControl的监听方法"></a>UISegemtedControl的监听方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">didClicksegmentedControlAction</span><span class="params">(segmented: UISegmentedControl!)</span></span> &#123;</div><div class="line">       <span class="keyword">var</span> index = segmented.selectedSegmentIndex</div><div class="line">       <span class="keyword">if</span> index == <span class="number">0</span> &#123;</div><div class="line">           <span class="built_in">println</span>(<span class="string">"分段按钮一"</span>)</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">1</span> &#123;</div><div class="line">           <span class="built_in">println</span>(<span class="string">"分段按钮二"</span>)</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">2</span> &#123;</div><div class="line">           <span class="built_in">println</span>(<span class="string">"分段按钮三"</span>)</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="在-viewDidLoad-中实现"><a href="#在-viewDidLoad-中实现" class="headerlink" title="在 viewDidLoad 中实现"></a>在 viewDidLoad 中实现</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="keyword">self</span>.mySegmentedControl()</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISegmentedControl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISegmentedControl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISegmentedControl-简介</title>
      <link href="/2017/12/14/Swift/UIKit/UISegmentedControl-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UISegemtedControl的常用属性"><a href="#UISegemtedControl的常用属性" class="headerlink" title="UISegemtedControl的常用属性"></a>UISegemtedControl的常用属性</h1><blockquote><p>1.初始化时设置 UISegemtedControl 的 Item 数组</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">init</span>(items: [<span class="type">AnyObject</span>])</div></pre></td></tr></table></figure><blockquote><p>2.设置 UISegemtedControl 点击之后是否瞬间弹起, (默认是 false)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> momentary: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>3.获取 UISegemtedControl 里有的分段按钮个数   </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> numberOfSegments: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>4.设置 UISegemtedControl 是否基于内容自动调整尺寸, 默认是 false, 前提是要不设置 UISegemtedControl 的尺寸</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> apportionsSegmentWidthsByContent: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>5.获取 UISegemtedControl 可点击的 Item 数量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> selectedSegmentIndex: <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>6.设置 UISegemtedControl 的样式颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tintColor: <span class="type">UIColor</span>!</div></pre></td></tr></table></figure><h1 id="UISegemtedControl的常用方法"><a href="#UISegemtedControl的常用方法" class="headerlink" title="UISegemtedControl的常用方法"></a>UISegemtedControl的常用方法</h1><blockquote><p>1.插入一个 UISegemtedControl 的分段按钮, 并且设置标题和索引, 以及是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSegmentWithTitle</span><span class="params">(title: String!, atIndex segment: Int, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>2.插入一个 UISegemtedControl 作为分段按钮, 并且设置索引, 以及是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSegmentWithImage</span><span class="params">(image: UIImage, atIndex segment: Int, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>3.删除指定索引的 UISegemtedControl 分段按钮, 以及是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeSegmentAtIndex</span><span class="params">(segment: Int, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.删除所有 UISegemtedControl 的分段按钮</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeAllSegments</span><span class="params">()</span></span></div></pre></td></tr></table></figure><blockquote><p>3.修改 UISegemtedControl 指定的 Item 分段按钮标题</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setTitle</span><span class="params">(title: String?, forSegmentAtIndex segment: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.获取指定的 UISegemtedControl 分段按钮的标题</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">titleForSegmentAtIndex</span><span class="params">(segment: Int)</span></span> -&gt; <span class="type">String</span>?</div></pre></td></tr></table></figure><blockquote><p>5.修改 UISegemtedControl 指定的 Item 分段按钮图片</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setImage</span><span class="params">(image: UIImage?, forSegmentAtIndex segment: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>6.获取指定的 UISegemtedControl 分段按钮的图片</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">imageForSegmentAtIndex</span><span class="params">(segment: Int)</span></span> -&gt; <span class="type">UIImage</span>?</div></pre></td></tr></table></figure><blockquote><p>7.设置 UISegemtedControl 指定的 Item 宽度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWidth</span><span class="params">(width: CGFloat, forSegmentAtIndex segment: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>8.获取指定 UISegemtedControl 分段按钮的宽度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">widthForSegmentAtIndex</span><span class="params">(segment: Int)</span></span> -&gt; <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>9.设置 UISegemtedControl 指定的 Item 内容偏移量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setContentOffset</span><span class="params">(offset: CGSize, forSegmentAtIndex segment: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>10.获取指定 UISegemtedControl 指定的 Item 内容偏移量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">contentOffsetForSegmentAtIndex</span><span class="params">(segment: Int)</span></span> -&gt; <span class="type">CGSize</span></div></pre></td></tr></table></figure><blockquote><p>11.设置 UISegemtedControl 指定的 Item 是否可以点击</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setEnabled</span><span class="params">(enabled: Bool, forSegmentAtIndex segment: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>12.获取指定 UISegemtedControl 指定的 Item 是否可以点击</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isEnabledForSegmentAtIndex</span><span class="params">(segment: Int)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>13.设置 UISegemtedControl 的背景图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setBackgroundImage</span><span class="params">(backgroundImage: UIImage?, forState state: UIControlState, barMetrics: UIBarMetrics)</span></span></div></pre></td></tr></table></figure><blockquote><p>14.获取 UISegemtedControl 在指定的状态, 图片显示下的图片</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">backgroundImageForState</span><span class="params">(state: UIControlState, barMetrics: UIBarMetrics)</span></span> -&gt; <span class="type">UIImage</span>?</div></pre></td></tr></table></figure><blockquote><p>15.设置 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setDividerImage</span><span class="params">(dividerImage: UIImage?, forLeftSegmentState leftState: UIControlState, rightSegmentState rightState: UIControlState, barMetrics: UIBarMetrics)</span></span></div></pre></td></tr></table></figure><blockquote><p>16.获取 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dividerImageForLeftSegmentState</span><span class="params">(leftState: UIControlState, rightSegmentState rightState: UIControlState, barMetrics: UIBarMetrics)</span></span> -&gt; <span class="type">UIImage</span>?</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISegmentedControl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISegmentedControl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISwitch-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/UISwitch-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="自定义UISwitch"><a href="#自定义UISwitch" class="headerlink" title="自定义UISwitch"></a>自定义UISwitch</h1><blockquote><p>UISwitch 是继承于 UIControl, 所以 UIControl 里面的属性和方法 UISwitch 都是可以用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mySwitch</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="comment">// 1.自定义 UISwitch</span></div><div class="line">       <span class="keyword">var</span> switchButton = <span class="type">UISwitch</span>()</div><div class="line"></div><div class="line">       <span class="comment">// 2.设置 UISwitch 的位置</span></div><div class="line">       switchButton.center = <span class="type">CGPointMake</span>(<span class="keyword">self</span>.view.frame.width / <span class="number">2</span>, <span class="keyword">self</span>.view.frame.height / <span class="number">2</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 3.设置 UISwitch 打开时底图渐变颜色, 默认是从白变绿</span></div><div class="line">       switchButton.onTintColor = <span class="type">UIColor</span>.redColor()</div><div class="line"></div><div class="line">       <span class="comment">// 4.设置 UISwitch 关闭时底图渐变颜色, 默认是从绿变白</span></div><div class="line">       switchButton.tintColor = <span class="type">UIColor</span>.blackColor()</div><div class="line"></div><div class="line">       <span class="comment">// 5.设置 UISwitch 的小圆点颜色, 默认是白色</span></div><div class="line">       switchButton.thumbTintColor = <span class="type">UIColor</span>.blueColor()</div><div class="line"></div><div class="line">       <span class="comment">// 6.设置 UISwitch 是否打开</span></div><div class="line">       switchButton.on = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 7.设置 UISwitch 是否打开, 并且是否打开动画效果</span></div><div class="line">       switchButton.setOn(<span class="literal">true</span>, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 8.添加到 UISwitch 到 self.view</span></div><div class="line">       <span class="keyword">self</span>.view.addSubview(switchButton)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="在-viewDidLoad中实现"><a href="#在-viewDidLoad中实现" class="headerlink" title="在 viewDidLoad中实现"></a>在 viewDidLoad中实现</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="keyword">self</span>.mySwitch()</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISwitch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISwitch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISwitch-简介</title>
      <link href="/2017/12/14/Swift/UIKit/UISwitch-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UISwitch的常用属性"><a href="#UISwitch的常用属性" class="headerlink" title="UISwitch的常用属性"></a>UISwitch的常用属性</h1><blockquote><p>1.设置 UISwitch 打开时底图渐变颜色, 默认是从白变绿</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> onTintColor: <span class="type">UIColor</span>!</div></pre></td></tr></table></figure><blockquote><p>2.设置 UISwitch 关闭时底图渐变颜色, 默认是从白变绿    </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tintColor: <span class="type">UIColor</span>?</div></pre></td></tr></table></figure><blockquote><p>3.设置 UISwitch 的小圆点颜色, 默认是白色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> thumbTintColor: <span class="type">UIColor</span>?</div></pre></td></tr></table></figure><blockquote><p>4.设置 UISwitch 是否打开</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> on: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>5.设置 UISwitch 的位置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">init</span>(frame: <span class="type">CGRect</span>)</div></pre></td></tr></table></figure><blockquote><p>6.设置 UISwitch 是否打开, 并且是否打开动画效果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setOn</span><span class="params">(on: Bool, animated: Bool)</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISwitch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISwitch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITextField-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/UITextField-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="遵守代理协议"><a href="#遵守代理协议" class="headerlink" title="遵守代理协议"></a>遵守代理协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITextFieldDelegate</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><h1 id="添加UITextField"><a href="#添加UITextField" class="headerlink" title="添加UITextField"></a>添加UITextField</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTextField</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 1.创建UITextField, 并且设置它的Frame</span></div><div class="line">      textField.frame = <span class="type">CGRectMake</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 2.设置UITextField的背景颜色</span></div><div class="line">      textField.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line"></div><div class="line">      <span class="comment">// 3.设置UITextField的显示样式</span></div><div class="line">      textField.borderStyle = <span class="type">UITextBorderStyle</span>.<span class="type">RoundedRect</span></div><div class="line"></div><div class="line">      <span class="comment">// 4.设置UITextField的编辑状态, 默认是永远不打开, 这里设置的是在编辑时才打开</span></div><div class="line">      textField.clearButtonMode = <span class="type">UITextFieldViewMode</span>.<span class="type">WhileEditing</span></div><div class="line"></div><div class="line">      <span class="comment">// 5.设置UITextField的键盘样式</span></div><div class="line">      textField.keyboardType = <span class="type">UIKeyboardType</span>.<span class="type">ASCIICapable</span></div><div class="line"></div><div class="line">      <span class="comment">// 6.设置UITextField的首字母是否大写</span></div><div class="line">      textField.autocapitalizationType = <span class="type">UITextAutocapitalizationType</span>.<span class="type">Sentences</span></div><div class="line"></div><div class="line">      <span class="comment">// 7.设置UITextField的键盘外观颜色</span></div><div class="line">      textField.keyboardAppearance = <span class="type">UIKeyboardAppearance</span>.<span class="type">Dark</span></div><div class="line"></div><div class="line">      <span class="comment">// 8.设置UITextField的return样式</span></div><div class="line">      textField.returnKeyType = <span class="type">UIReturnKeyType</span>.<span class="type">Default</span></div><div class="line"></div><div class="line">      <span class="comment">// 9.设置UITextField预输入的文字</span></div><div class="line">      textField.attributedText = <span class="type">NSAttributedString</span>(string: <span class="string">"ABCDEFG"</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 10.设置UITextField的提示文字</span></div><div class="line">      textField.placeholder = <span class="string">"请输入您的名字"</span></div><div class="line"></div><div class="line">      <span class="comment">// 11.设置UITextField的代理对象</span></div><div class="line">      textField.delegate = <span class="keyword">self</span></div><div class="line"></div><div class="line">      <span class="comment">// 12.设置UITextField内容的垂直对齐方式, 默认是center</span></div><div class="line">      textField.contentVerticalAlignment = <span class="type">UIControlContentVerticalAlignment</span>.<span class="type">Top</span></div><div class="line"></div><div class="line">      <span class="comment">// 13.再次编辑时对旧内容进行自动清除, 默认是false</span></div><div class="line">      textField.clearsOnBeginEditing = <span class="literal">true</span></div><div class="line"></div><div class="line">      <span class="comment">// 14.根据TextField的大小自动缩放字体大小, 默认是false</span></div><div class="line">      textField.adjustsFontSizeToFitWidth = <span class="literal">true</span></div><div class="line"></div><div class="line">      <span class="comment">// 15.添加到父视图</span></div><div class="line">      <span class="keyword">self</span>.view.addSubview(textField)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="实现代理方法"><a href="#实现代理方法" class="headerlink" title="实现代理方法"></a>实现代理方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">       <span class="comment">// 取消第一响应者</span></div><div class="line">       textField.resignFirstResponder()</div><div class="line">       <span class="comment">// 返回true</span></div><div class="line">       <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="在ViewDidload实现"><a href="#在ViewDidload实现" class="headerlink" title="在ViewDidload实现"></a>在ViewDidload实现</h1><blockquote><p>UITExtField不会自动换行的, 所以我们只可能限制用户所输入多少个字符, 如果需要自动换行, 那就需要去了解UITextVIew</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       <span class="keyword">self</span>.myTextField()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITextField </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITextField </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITxtxField-简介</title>
      <link href="/2017/12/14/Swift/UIKit/Swift-UIKit-UITxtxField-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UITxtxField的常用状态"><a href="#UITxtxField的常用状态" class="headerlink" title="UITxtxField的常用状态"></a>UITxtxField的常用状态</h1><h2 id="TextField边框的样式"><a href="#TextField边框的样式" class="headerlink" title="TextField边框的样式"></a>TextField边框的样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITextBorderStyle</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// TextField边框什么都没有, 默认是方角</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Line</span> <span class="comment">// TextField边框有一条黑色的实现围着, 默认也是方角的</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Bezel</span> <span class="comment">// TextField边框有两条线围着, 形成一定的层次感, 默认也是方角的</span></div><div class="line">    <span class="keyword">case</span> <span class="type">RoundedRect</span> <span class="comment">// TextField边框什么都没有, 默认是圆角</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="TextField的快速删除状态"><a href="#TextField的快速删除状态" class="headerlink" title="TextField的快速删除状态"></a>TextField的快速删除状态</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITextFieldViewMode</span> : <span class="title">Int</span> </span>&#123;    </div><div class="line">    <span class="keyword">case</span> <span class="type">Never</span> <span class="comment">// 永远都不打开</span></div><div class="line">    <span class="keyword">case</span> <span class="type">WhileEditing</span> <span class="comment">// 在编辑的状态才打开</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UnlessEditing</span> <span class="comment">// 在非编辑的状态才打开</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Always</span> <span class="comment">// 一直打开</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="TextField的键盘样式"><a href="#TextField的键盘样式" class="headerlink" title="TextField的键盘样式"></a>TextField的键盘样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIKeyboardType</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Default</span> <span class="comment">// 显示默认的键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">ASCIICapable</span> <span class="comment">// 显示所有ASCII表的所有字符</span></div><div class="line">    <span class="keyword">case</span> <span class="type">NumbersAndPunctuation</span> <span class="comment">// 数字和标点符号的键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">URL</span> <span class="comment">// 输入网站所使用的键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">NumberPad</span> <span class="comment">// 纯数字键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">PhonePad</span> <span class="comment">// 为了方便输入手机号码所使用的键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">NamePhonePad</span> <span class="comment">// 为了方便输入名字和电话号码所使用的键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">EmailAddress</span> <span class="comment">// 面向邮箱所使用的键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">DecimalPad</span> <span class="comment">// 面向带小数点的数字键盘</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Twitter</span> <span class="comment">// 面向Twitter等社交所使用的键盘, 为了方便@和#</span></div><div class="line">    <span class="keyword">case</span> <span class="type">WebSearch</span> <span class="comment">// 面向网站所使用的键盘</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="TextField的大写样式"><a href="#TextField的大写样式" class="headerlink" title="TextField的大写样式"></a>TextField的大写样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITextAutocapitalizationType</span> : <span class="title">Int</span> </span>&#123;   </div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// 不自动大写</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Words</span> <span class="comment">// 单个单词首字母大写</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Sentences</span> <span class="comment">// 句子首字母大写</span></div><div class="line">    <span class="keyword">case</span> <span class="type">AllCharacters</span> <span class="comment">// 全部大写</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="TextField的键盘外观颜色"><a href="#TextField的键盘外观颜色" class="headerlink" title="TextField的键盘外观颜色"></a>TextField的键盘外观颜色</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIKeyboardAppearance</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Default</span> <span class="comment">// 默认是光亮的</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Dark</span> <span class="comment">// 设置为黑暗颜色</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Light</span> <span class="comment">// 设置为光亮的颜色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="TextField的Return样式"><a href="#TextField的Return样式" class="headerlink" title="TextField的Return样式"></a>TextField的Return样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIReturnKeyType</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Default</span> <span class="comment">// 模样的样式</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Go</span> <span class="comment">// 标着有Go的蓝色样式</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Google</span> <span class="comment">// 标着Google的蓝色样式, 用于语音搜索, 显示的样式是Search</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Join</span> <span class="comment">// 标有Join的蓝色按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Next</span> <span class="comment">// 标着有Next的蓝色按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Route</span> <span class="comment">// 标着有Route的蓝色按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Search</span> <span class="comment">// 标着有Search的蓝色按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Send</span> <span class="comment">// 标着有Send的蓝色按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Yahoo</span> <span class="comment">// 标着有Yahoo的蓝色按钮, 显示的样式是Search</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Done</span> <span class="comment">// 标着有Done的蓝色按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">EmergencyCall</span> <span class="comment">// 标着有EmergencyCall的蓝色按钮, 紧急呼救的按钮</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="TextField的右边显示图样式"><a href="#TextField的右边显示图样式" class="headerlink" title="TextField的右边显示图样式"></a>TextField的右边显示图样式</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITextFieldViewMode</span> : <span class="title">Int</span> </span>&#123;   </div><div class="line">    <span class="keyword">case</span> <span class="type">Never</span> <span class="comment">// 永远不显示</span></div><div class="line">    <span class="keyword">case</span> <span class="type">WhileEditing</span> <span class="comment">// 在编辑的情况下显示</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UnlessEditing</span> <span class="comment">// 在非编辑的情况下显示</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Always</span> <span class="comment">// 永远显示</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITextField的垂直排列方式"><a href="#UITextField的垂直排列方式" class="headerlink" title="UITextField的垂直排列方式"></a>UITextField的垂直排列方式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIControlContentVerticalAlignment</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Center</span> <span class="comment">// 居中对齐, 默认</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Top</span> <span class="comment">// 顶部对齐</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Bottom</span> <span class="comment">// 底部对齐</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Fill</span> <span class="comment">// 平铺整个TextField的高度</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITextField的水平排列方式"><a href="#UITextField的水平排列方式" class="headerlink" title="UITextField的水平排列方式"></a>UITextField的水平排列方式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIControlContentHorizontalAlignment</span> : <span class="title">Int</span> </span>&#123;   </div><div class="line">    <span class="keyword">case</span> <span class="type">Center</span> <span class="comment">// 居中对齐</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Left</span> <span class="comment">// 左对齐, 默认</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Right</span> <span class="comment">// 右对齐</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Fill</span> <span class="comment">// 平铺整个TextField的宽度</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="UITextField的常用属性"><a href="#UITextField的常用属性" class="headerlink" title="UITextField的常用属性"></a>UITextField的常用属性</h1><blockquote><p>字体颜色, 默认的字体颜色是黑色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> textColor: <span class="type">UIColor</span>!</div></pre></td></tr></table></figure><blockquote><p>字体大小, 默认的字体大小是12</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">var</span> font: <span class="type">UIFont</span>!</div><div class="line">``` </div><div class="line"></div><div class="line">&gt;字体对齐方式, 默认是向左对齐</div><div class="line"></div><div class="line">```swift</div><div class="line">   <span class="keyword">var</span> textAlignment: <span class="type">NSTextAlignment</span></div></pre></td></tr></table></figure><blockquote><p>边框的样式, 默认是None. </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> borderStyle: <span class="type">UITextBorderStyle</span></div></pre></td></tr></table></figure><blockquote><p>快捷清楚的按钮, 默认是不打开的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> clearButtonMode: <span class="type">UITextFieldViewMode</span></div></pre></td></tr></table></figure><blockquote><p>提示文本, 默认是nil, 字体颜色是70%的灰</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> placeholder: <span class="type">String</span>?</div></pre></td></tr></table></figure><blockquote><p>再次编辑时对旧内容进行自动清除, 默认是false</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> clearsOnBeginEditing: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>根据TextField的大小自动缩放字体大小, 默认是false</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> adjustsFontSizeToFitWidth: <span class="type">Bool</span></div></pre></td></tr></table></figure><h1 id="常用代理方法"><a href="#常用代理方法" class="headerlink" title="常用代理方法"></a>常用代理方法</h1><blockquote><p>点击return会结束编辑, 也可以在这里设置取消TextField的第一响应者, 使键盘隐藏</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(textField: UITextField)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>可限制文字输入的长度以及特定的字符, 如果返回true, 那么就是可以修改, 如果返回false就不可修改</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITxtxField </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITxtxField </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIImage-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/UIImage-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myImage</span><span class="params">()</span></span> &#123;</div><div class="line">   <span class="comment">// 1.创建一个UIImageView, 并且设置它的frame</span></div><div class="line">       <span class="keyword">var</span> myImageView = <span class="type">UIImageView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.size.width, <span class="keyword">self</span>.view.frame.size.height))</div><div class="line"></div><div class="line">       <span class="comment">// 2.设置UIImage的图片名, 以及展示的样式</span></div><div class="line">       <span class="keyword">var</span> myImage = <span class="type">UIImage</span>(named: <span class="string">"image_bate.jpg"</span>)?.imageWithRenderingMode(<span class="type">UIImageRenderingMode</span>.<span class="type">Automatic</span>)</div><div class="line">       <span class="comment">// 3.把UIImage添加到ImageView里面去</span></div><div class="line">       myImageView.image = myImage</div><div class="line"></div><div class="line">       <span class="keyword">self</span>.view.addSubview(myImageView)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><blockquote><p>在viewDidload中实现:</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       <span class="keyword">self</span>.myImage()</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>由于UIImage不能单独的拿出来展示, 它必须依赖于某个一个继承于UIView的一个View, 比如UIImageView或者UIButton, 这些都是可以的</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIImage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIImage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIImage-简介</title>
      <link href="/2017/12/14/Swift/UIKit/UIImage-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UIImage的状态"><a href="#UIImage的状态" class="headerlink" title="UIImage的状态"></a>UIImage的状态</h1><blockquote><p>UIImageOrientation</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIImageOrientation</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Up</span> <span class="comment">//默认方向</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Down</span> <span class="comment">//180°旋转</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Left</span> <span class="comment">//逆时针旋转90°</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Right</span> <span class="comment">//顺时针旋转90°</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UpMirrored</span> <span class="comment">//水平向上翻转</span></div><div class="line">    <span class="keyword">case</span> <span class="type">DownMirrored</span> <span class="comment">//水平向下翻转</span></div><div class="line">    <span class="keyword">case</span> <span class="type">LeftMirrored</span> <span class="comment">//逆时针旋转90°后再垂直翻转</span></div><div class="line">    <span class="keyword">case</span> <span class="type">RightMirrored</span> <span class="comment">//顺时针旋转90°后再垂直翻转</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>UIImageResizingMode</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIImageResizingMode</span> : <span class="title">Int</span> </span>&#123;    </div><div class="line">    <span class="keyword">case</span> <span class="type">Tile</span> <span class="comment">//平铺到调整完位置的图像</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Stretch</span> <span class="comment">//拉伸到调整完位置的图像</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>UIImageRenderingMode</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UIImageRenderingMode</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Automatic</span> <span class="comment">//默认上下文显示的图像位置</span></div><div class="line">    <span class="keyword">case</span> <span class="type">AlwaysOriginal</span> <span class="comment">//总是以图片为模板</span></div><div class="line">    <span class="keyword">case</span> <span class="type">AlwaysTemplate</span> <span class="comment">//会把图像作为绘画的模板, 忽略其他颜色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h1><blockquote><p>UIImage里面虽然有很多属性, 但唯一常用的属性就只有设置获取image名字的属性.</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">init</span>?(named name: <span class="type">String</span>) -&gt; <span class="type">UIImage</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIImage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIImage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITableViewCell-简单使用</title>
      <link href="/2017/12/14/Swift/UIKit/UITableViewCell-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="UITableViewCell-简单使用"><a href="#UITableViewCell-简单使用" class="headerlink" title="UITableViewCell-简单使用"></a>UITableViewCell-简单使用</h1><blockquote><p>由于 TableViewCell 是不可以单独存在的, 所以必须得依赖于 UITableView</p></blockquote><h1 id="遵守-TableView-代理协议以及数据源协议"><a href="#遵守-TableView-代理协议以及数据源协议" class="headerlink" title="遵守 TableView 代理协议以及数据源协议"></a>遵守 TableView 代理协议以及数据源协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="自定义-TableVIew"><a href="#自定义-TableVIew" class="headerlink" title="自定义 TableVIew"></a>自定义 TableVIew</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTableView</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">var</span> tableView = <span class="type">UITableView</span>(frame: <span class="keyword">self</span>.view.frame, style: <span class="type">UITableViewStyle</span>.<span class="type">Plain</span>)</div><div class="line">       tableView.dataSource = <span class="keyword">self</span></div><div class="line">       tableView.delegate = <span class="keyword">self</span></div><div class="line">       <span class="keyword">self</span>.view.addSubview(tableView)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="实现数据源方法"><a href="#实现数据源方法" class="headerlink" title="实现数据源方法"></a>实现数据源方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">5</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="自定义-UITableViewCell"><a href="#自定义-UITableViewCell" class="headerlink" title="自定义 UITableViewCell"></a>自定义 UITableViewCell</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="comment">// 1.自定义 UITableViewCell 的样式以及标签, reuseIdentifier 是 Cell 得标签, 作用和 Tag 类似</span></div><div class="line">        <span class="keyword">var</span> cell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Value1</span>, reuseIdentifier: <span class="string">"cell"</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 2.设置 UITableViewCell 的标题Label</span></div><div class="line">        cell.textLabel!.text = <span class="string">"我是 Cell"</span></div><div class="line"></div><div class="line">        <span class="comment">// 3.设置 UITableViewCell 的简介Label</span></div><div class="line">        cell.detailTextLabel?.text = <span class="string">"Cell"</span></div><div class="line"></div><div class="line">        <span class="comment">// 4.设置 UITableViewCell 的 imageView 图片</span></div><div class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: <span class="string">"image_black.jpg"</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 5.设置 UITableViewCell 的编辑模式是否开启, 以及是否执行动画效果</span></div><div class="line">        cell.setEditing(<span class="literal">true</span>, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 6.设置 UITableViewCell 的背景色</span></div><div class="line">        cell.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line"></div><div class="line">        <span class="comment">// 7.设置 UITableViewCell 的编辑模式辅助按钮</span></div><div class="line">        cell.editingAccessoryType = <span class="type">UITableViewCellAccessoryType</span>.<span class="type">DisclosureIndicator</span></div><div class="line"></div><div class="line">        <span class="comment">// 8.设置 UITableViewCell 被选中的样式</span></div><div class="line">        cell.selectionStyle = <span class="type">UITableViewCellSelectionStyle</span>.<span class="type">Default</span></div><div class="line"></div><div class="line">        <span class="comment">// 9.设置 UITableViewCell 分割线的位置</span></div><div class="line">        cell.separatorInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 10.设置 UITableViewCell 被选中时的背景View</span></div><div class="line">        cell.selectedBackgroundView = <span class="literal">nil</span></div><div class="line"></div><div class="line">        <span class="comment">// 11.设置 UITableViewCell 的辅助按钮样式</span></div><div class="line">        cell.accessoryType = <span class="type">UITableViewCellAccessoryType</span>.<span class="type">DisclosureIndicator</span></div><div class="line"></div><div class="line">        <span class="comment">// 返回自定的 Cell</span></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="开启-TableViewCell-的编辑模式"><a href="#开启-TableViewCell-的编辑模式" class="headerlink" title="开启 TableViewCell 的编辑模式"></a>开启 TableViewCell 的编辑模式</h1> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITableViewCell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITableViewCell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITableViewCell</title>
      <link href="/2017/12/14/Swift/UIKit/UITableViewCell-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h1><h2 id="UITableViewCell-显示的样式"><a href="#UITableViewCell-显示的样式" class="headerlink" title="UITableViewCell 显示的样式"></a>UITableViewCell 显示的样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCellStyle</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Default</span> <span class="comment">// 默认显示样式</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Value1</span> <span class="comment">// 样式一</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Value2</span> <span class="comment">// 样式二</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Subtitle</span> <span class="comment">// 副标题样式</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableViewCell-选中的样式"><a href="#UITableViewCell-选中的样式" class="headerlink" title="UITableViewCell 选中的样式"></a>UITableViewCell 选中的样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCellEditingStyle</span> : <span class="title">Int</span> </span>&#123;   </div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// 没有</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Delete</span> <span class="comment">// 删除</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Insert</span> <span class="comment">// 添加</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableViewCell-辅助按钮的样式"><a href="#UITableViewCell-辅助按钮的样式" class="headerlink" title="UITableViewCell 辅助按钮的样式"></a>UITableViewCell 辅助按钮的样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCellAccessoryType</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// 没有按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">DisclosureIndicator</span> <span class="comment">// 蓝色向右的箭头</span></div><div class="line">    <span class="keyword">case</span> <span class="type">DetailDisclosureButton</span> <span class="comment">// 蓝色向右的箭头以及信息按钮</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Checkmark</span> <span class="comment">// 复选框</span></div><div class="line">    @availability(iOS, introduced=<span class="number">7.0</span>)</div><div class="line">    <span class="keyword">case</span> <span class="type">DetailButton</span> <span class="comment">// 信息按钮</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableViewCell-常用属性"><a href="#UITableViewCell-常用属性" class="headerlink" title="UITableViewCell 常用属性"></a>UITableViewCell 常用属性</h2><blockquote><p>1.初始化 Cell 的 Style 以及标签名</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">init</span>(style: <span class="type">UITableViewCellStyle</span>, reuseIdentifier: <span class="type">String</span>?)</div></pre></td></tr></table></figure><blockquote><p>2.设置 Cell 的 ImageView 内容</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> imageView: <span class="type">UIImageView</span>? &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>3.设置 Cell 的 textLabel 的内容</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> textLabel: <span class="type">UILabel</span>? &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>4.设置 Cell 的 副标题内容</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> detailTextLabel: <span class="type">UILabel</span>? &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>5.设置 Cell 的内容 View</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> contentView: <span class="type">UIView</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>6.设置 Cell 的背景 View</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> backgroundView: <span class="type">UIView</span>?</div></pre></td></tr></table></figure><blockquote><p>7.设置 Cell 被选中时的背景 View</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> selectedBackgroundView: <span class="type">UIView</span>!</div></pre></td></tr></table></figure><blockquote><p>8.设置 Cell 多选中得背景 View</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> multipleSelectionBackgroundView: <span class="type">UIView</span>?</div></pre></td></tr></table></figure><blockquote><p>9.设置 Cell 被选中时的 Style</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> selectionStyle: <span class="type">UITableViewCellSelectionStyle</span></div></pre></td></tr></table></figure><blockquote><p>10.设置 Cell 编辑的 Style</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> editingStyle: <span class="type">UITableViewCellEditingStyle</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>11.设置 Cell 是否开启编辑状态</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> editing: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>12.设置 Cell 的辅助按钮样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> accessoryType: <span class="type">UITableViewCellAccessoryType</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITableViewCell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITableViewCell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITableView-简单使用</title>
      <link href="/2017/12/13/Swift/UIKit/UITableView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="遵守代理协议和数据源协议"><a href="#遵守代理协议和数据源协议" class="headerlink" title="遵守代理协议和数据源协议"></a>遵守代理协议和数据源协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><h1 id="自定义-UITableView"><a href="#自定义-UITableView" class="headerlink" title="自定义 UITableView"></a>自定义 UITableView</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTableView</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="comment">// 1.设置 TableView 的 frame 和 style</span></div><div class="line">       <span class="keyword">var</span> tableView: <span class="type">UITableView</span> = <span class="type">UITableView</span>(frame: <span class="keyword">self</span>.view.frame, style: <span class="type">UITableViewStyle</span>.<span class="type">Plain</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 2.设置 TableView 的背景色</span></div><div class="line">       tableView.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.0</span>, green: <span class="number">127.0</span>, blue: <span class="number">127.0</span>, alpha: <span class="number">1.0</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 3.设置 TableView 的代理对象</span></div><div class="line">       tableView.delegate = <span class="keyword">self</span></div><div class="line"></div><div class="line">       <span class="comment">// 4.设置 TableView 的数据源对象</span></div><div class="line">       tableView.dataSource = <span class="keyword">self</span></div><div class="line"></div><div class="line">       <span class="comment">// 5.设置 TableView 每一行 Cell 的高度</span></div><div class="line">       tableView.rowHeight = <span class="number">44</span></div><div class="line"></div><div class="line">       <span class="comment">// 6.设置 TableView 每一行 Cell 页头的行高</span></div><div class="line">       tableView.sectionHeaderHeight = <span class="number">50</span></div><div class="line"></div><div class="line">       <span class="comment">// 7.设置 TableView 每一行 Cell 页尾的行高</span></div><div class="line">       tableView.sectionFooterHeight = <span class="number">50</span></div><div class="line"></div><div class="line">       <span class="comment">// 8.设置 TableView 每一行 Cell 的估计行高</span></div><div class="line">       tableView.estimatedRowHeight = <span class="number">100</span></div><div class="line"></div><div class="line">       <span class="comment">// 9.设置 TableView 每一行 Cell 的页头估计行高</span></div><div class="line">       tableView.estimatedSectionHeaderHeight = <span class="number">50</span></div><div class="line"></div><div class="line">       <span class="comment">// 10.设置 TableView 每一行 Cell 的页尾估计行高</span></div><div class="line">       tableView.estimatedSectionFooterHeight = <span class="number">50</span></div><div class="line"></div><div class="line">       <span class="comment">// 11.设置 TableView 每一行 Cell 之间分割线位置(分别是: 上, 左, 下, 右)</span></div><div class="line">       tableView.separatorInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">50</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 12.设置 TableView 每一行 Cell 之间分割线的颜色</span></div><div class="line">       tableView.separatorColor = <span class="type">UIColor</span>.redColor()</div><div class="line"></div><div class="line">       <span class="comment">// 13.设置 TableView 每一行 Cell 之间的分割效果(暂无方法, 目前只是用来实例化)</span></div><div class="line">       tableView.separatorEffect = <span class="type">UIVisualEffect</span>()</div><div class="line"></div><div class="line">       <span class="comment">// 14.设置 TableView 每一行 Cell 之间的分割线样式(默认是 SingleLine 样式)</span></div><div class="line">       tableView.separatorStyle = <span class="type">UITableViewCellSeparatorStyle</span>.<span class="type">SingleLine</span></div><div class="line"></div><div class="line">       <span class="comment">// 15.设置 TableView 的背景 View 对象</span></div><div class="line">       tableView.backgroundView = <span class="type">UIView</span>()</div><div class="line"></div><div class="line">       <span class="comment">// 16.设置 TableView 的编辑模式是否开启, 并且是否使用动画效果</span></div><div class="line">       tableView.setEditing(<span class="literal">true</span>, animated: <span class="literal">true</span>)</div><div class="line">       <span class="comment">// 17.添加到 self.view 上</span></div><div class="line">       <span class="keyword">self</span>.view.addSubview(tableView)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="实现代理方法和数据源方法"><a href="#实现代理方法和数据源方法" class="headerlink" title="实现代理方法和数据源方法"></a>实现代理方法和数据源方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.该方法是用来设置 TableView 有多少组 Cell</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">2</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 2.该方法是用来设置 TableView 有多少行 Cell</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">2</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 3.该方法是用来设置 TableView 每一行 Cell 的详细内容</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">      <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>()</div><div class="line">      cell.backgroundColor = <span class="type">UIColor</span>.blueColor()</div><div class="line">      <span class="keyword">return</span> cell</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 4.该方法是用来设置 TableView 每一行 Cell 的标题内容</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"我是页头"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 5.该方法是用来设置 TableView 每一行 Cell 的页尾内容</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForFooterInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"我是页尾"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 6.该方法是用来设置 TableView 每一行 Cell 的高度, 一旦这里设置了, 那么在自定义里的 rowHeight 属性就会被覆盖</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">100</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 7.该方法是用来响应 TableVIewCell 被点击的事件</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"我被点击了"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 8.该方法是用来设置 TableView 每一行 Cell 的编辑模式, 如果不设置, 默认都是删除</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">UITableViewCellEditingStyle</span>.<span class="type">Insert</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 9.该方法是用来设置 Tabelview 的左滑快捷按钮, 只要写了该方法, 默认打开</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 10.该方法是用来设置 TabelView 左滑快捷按钮的详细内容以及操作</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForDeleteConfirmationButtonForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">String</span>! &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"删除"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 11.该方法是用来设置 TableView 是否可以拖拽到其他行数, 只要写了该方法, 默认打开</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, moveRowAtIndexPath sourceIndexPath: NSIndexPath, toIndexPath destinationIndexPath: NSIndexPath)</span></span> &#123;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITableView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITableView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITableView-简介</title>
      <link href="/2017/12/13/Swift/UIKit/UITableView-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UITableview常用属性"><a href="#UITableview常用属性" class="headerlink" title="UITableview常用属性"></a>UITableview常用属性</h1><h2 id="UITableView-的样式"><a href="#UITableView-的样式" class="headerlink" title="UITableView 的样式"></a>UITableView 的样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewStyle</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Plain</span> <span class="comment">// 平铺样式</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Grouped</span> <span class="comment">// 分组样式</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableView-添加或者删除-Cell-时的动画"><a href="#UITableView-添加或者删除-Cell-时的动画" class="headerlink" title="UITableView 添加或者删除 Cell 时的动画"></a>UITableView 添加或者删除 Cell 时的动画</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewRowAnimation</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Fade</span> <span class="comment">// 淡入淡出</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Right</span> <span class="comment">// 从右添加</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Left</span> <span class="comment">// 从左添加</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Top</span> <span class="comment">// 从上添加</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Bottom</span> <span class="comment">// 从底部添加</span></div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// 没有动画</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Middle</span> <span class="comment">// 从中间添加</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Automatic</span> <span class="comment">// 随机添加</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableView-滚动时指定的位置"><a href="#UITableView-滚动时指定的位置" class="headerlink" title="UITableView 滚动时指定的位置"></a>UITableView 滚动时指定的位置</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewScrollPosition</span> : <span class="title">Int</span> </span>&#123;   </div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// 不指定</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Top</span> <span class="comment">// 指定上面</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Middle</span> <span class="comment">// 指定中间</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Bottom</span> <span class="comment">// 指定底部</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableView-分割线的样式"><a href="#UITableView-分割线的样式" class="headerlink" title="UITableView 分割线的样式"></a>UITableView 分割线的样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCellSeparatorStyle</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> <span class="comment">// 没有分割线</span></div><div class="line">    <span class="keyword">case</span> <span class="type">SingleLine</span> <span class="comment">// 单行分割线</span></div><div class="line">    <span class="keyword">case</span> <span class="type">SingleLineEtched</span> <span class="comment">// 多行分割线融合</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="UITableView-属性"><a href="#UITableView-属性" class="headerlink" title="UITableView 属性"></a>UITableView 属性</h2><blockquote><p>1.设置 UITableView 的位置以及Style</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">init</span>(frame: <span class="type">CGRect</span>, style: <span class="type">UITableViewStyle</span>)    </div><div class="line"><span class="keyword">var</span> style: <span class="type">UITableViewStyle</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>2.设置数据源对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">unowned</span>(unsafe) <span class="keyword">var</span> dataSource: <span class="type">UITableViewDataSource</span>?</div></pre></td></tr></table></figure><blockquote><p>3.设置代理对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">unowned</span>(unsafe) <span class="keyword">var</span> delegate: <span class="type">UITableViewDelegate</span>?</div></pre></td></tr></table></figure><blockquote><p>4.设置 Cell 的行高</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> rowHeight: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>5.设置 Cell 的标题高度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sectionHeaderHeight: <span class="type">CGFloat</span></div><div class="line">``` </div><div class="line"></div><div class="line">&gt; <span class="number">6</span>.设置 <span class="type">Cell</span> 的页尾高度</div><div class="line"></div><div class="line">```swift</div><div class="line"><span class="keyword">var</span> sectionFooterHeight: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>7.设置估计的 Cell 的行高</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> estimatedRowHeight: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>8.设置估计的 Cell 的标题行高</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> estimatedSectionHeaderHeight: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>9.设置估计的 Cell 的页尾行高</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> estimatedSectionFooterHeight: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>10.设置 Cell 与 Cell 之间的分割线位置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> separatorInset: <span class="type">UIEdgeInsets</span></div></pre></td></tr></table></figure><blockquote><p>11.设置 UITableView 的背景 View 对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> backgroundView: <span class="type">UIView</span>?</div></pre></td></tr></table></figure><h1 id="常用数据源方法"><a href="#常用数据源方法" class="headerlink" title="常用数据源方法"></a>常用数据源方法</h1><ul><li>要使用数据源方法(DataSoucre方法), 首先我们需要遵守 UITableView 的数据源方法(UITableViewDataSoucre)协议</li></ul><blockquote><p>1.该方法是用来设置 TableView 有多少行 Cell</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是用来设置 TableView 每一行 Cell 的详细内容</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是用来设置 TableView 有多少组 Cell</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是用来设置每一组 Cell 的标题内容</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>?</div></pre></td></tr></table></figure><blockquote><p>5.该方法是用来设置每一组 Cell 的页尾内容</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForFooterInSection section: Int)</span></span> -&gt; <span class="type">String</span>?</div></pre></td></tr></table></figure><blockquote><p>6.该方法使用来设置 TableView 左滑快捷</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">optional func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath)</div></pre></td></tr></table></figure><blockquote><p>7.该方法是用来设置 TableView 是否可以拖拽到其他行数, 只要写了该方法, 默认打开</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, moveRowAtIndexPath sourceIndexPath: NSIndexPath, toIndexPath destinationIndexPath: NSIndexPath)</span></span></div></pre></td></tr></table></figure><h1 id="常用代理方法"><a href="#常用代理方法" class="headerlink" title="常用代理方法"></a>常用代理方法</h1><blockquote><p>1.该方法是用来设置每一行 Cell 的高度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是用来设置 Cell 标题内容的高度(如果该方法使用了, 那么在自定义 TableView 的sectionHeaderHeight属性就会被覆盖)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, heightForHeaderInSection section: Int)</span></span> -&gt; <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是用来设置 Cell 页尾内容的高度(如果该方法使用了, 那么在自定义 TableView 的sectionFooterHeight属性就会被覆盖)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, heightForFooterInSection section: Int)</span></span> -&gt; <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是用来设置 TableView 左滑快捷按钮的内容以及详细操作</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForDeleteConfirmationButtonForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">String</span>!</div></pre></td></tr></table></figure><blockquote><p>5.该方法是用来设置 TableView 每一行 Cell 的编辑模式, 如果不设置, 默认都是删除</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITableView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITableView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIScrollView-简单使用</title>
      <link href="/2017/12/13/Swift/UIKit/UIScrollView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="实例化UIScrollView-UIImageView-UIImage"><a href="#实例化UIScrollView-UIImageView-UIImage" class="headerlink" title="实例化UIScrollView, UIImageView, UIImage"></a>实例化UIScrollView, UIImageView, UIImage</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UIScrollViewDelegate</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> scrollView =  <span class="type">UIScrollView</span>()</div><div class="line">    <span class="keyword">var</span> imageView =  <span class="type">UIImageView</span>()</div><div class="line">    <span class="keyword">var</span> imageURL = <span class="type">UIImage</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="设置UIScrollView"><a href="#设置UIScrollView" class="headerlink" title="设置UIScrollView"></a>设置UIScrollView</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myScrollView</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 1.1设置ScrollView的Frame</span></div><div class="line">      scrollView.frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.width, <span class="keyword">self</span>.view.frame.height)</div><div class="line"></div><div class="line">      <span class="comment">// 1.2设置ScrollView的边距</span></div><div class="line">      scrollView.contentInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 1.3设置ScrollView的代理</span></div><div class="line">      scrollView.delegate = <span class="keyword">self</span></div><div class="line"></div><div class="line">      <span class="comment">// 1.4设置ScrollView的最小缩放比例</span></div><div class="line">      scrollView.minimumZoomScale = <span class="number">0.1</span></div><div class="line"></div><div class="line">      <span class="comment">// 1.5设置ScrollView的最大缩放比例</span></div><div class="line">      scrollView.maximumZoomScale = <span class="number">1.5</span></div><div class="line"></div><div class="line">      <span class="comment">// 1.6添加到父视图</span></div><div class="line">      <span class="keyword">self</span>.view.addSubview(scrollView)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="设置UIImageView"><a href="#设置UIImageView" class="headerlink" title="设置UIImageView"></a>设置UIImageView</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myImageView</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 2.1设置ImageView的图片</span></div><div class="line">      imageURL = <span class="type">UIImage</span>(named: <span class="string">"image_landscape3.jpg"</span>)!</div><div class="line"></div><div class="line">      <span class="comment">// 2.2设置添加图片的方法以及对象</span></div><div class="line">      <span class="keyword">self</span>.setImage(imageURL)</div><div class="line"></div><div class="line">      <span class="comment">// 2.3添加到ScrollView上</span></div><div class="line">      scrollView.addSubview(imageView)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="设置UIImage"><a href="#设置UIImage" class="headerlink" title="设置UIImage"></a>设置UIImage</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setImage</span> <span class="params">(image: UIImage)</span></span> &#123;</div><div class="line">        <span class="comment">// 3.1设置image对象</span></div><div class="line">        imageURL = image</div><div class="line"></div><div class="line">        <span class="comment">// 3.2设置imageView的image内容</span></div><div class="line">        imageView.image = image</div><div class="line"></div><div class="line">        <span class="comment">// 3.3设置imageView根据image自动调整大小</span></div><div class="line">        imageView.sizeToFit()</div><div class="line"></div><div class="line">        <span class="comment">// 3.4设置ScrollView的内容大小为image的大小</span></div><div class="line">        scrollView.contentSize = image.size</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIScrollView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> UIScrollView </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIScrollView-简介</title>
      <link href="/2017/12/13/Swift/UIKit/UIScrollView-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UIScrollView的常用属性"><a href="#UIScrollView的常用属性" class="headerlink" title="UIScrollView的常用属性"></a>UIScrollView的常用属性</h1><blockquote><p> 设置内容的中心点, 默认是0</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> contentOffset: <span class="type">CGPoint</span></div></pre></td></tr></table></figure><blockquote><p>设置内容的宽高, 默认是0</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> contentSize: <span class="type">CGSize</span></div></pre></td></tr></table></figure><blockquote><p>设置UIScrollView的边距, 默认是0</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> contentInset: <span class="type">UIEdgeInsets</span></div></pre></td></tr></table></figure><blockquote><p>设置UIScrollView是否可以翻页, 默认是false</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pagingEnabled: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>设置UIScrollView是否可用, 默认是true </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> scrollEnabled: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>设置UIScrollView的水平滚动, 默认是true</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> showsHorizontalScrollIndicator: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>设置UIScrollView的垂直滚动, 默认是true</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> showsVerticalScrollIndicator: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>设置UIScrollView滚动条显示的位置, 默认是0</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> scrollIndicatorInsets: <span class="type">UIEdgeInsets</span></div></pre></td></tr></table></figure><blockquote><p>设置最小的缩放比例, 默认是1.0</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> minimumZoomScale: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>设置最大的缩放比例, 默认是1.0</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> maximumZoomScale: <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>设置点击状态栏就回到ScrollView的最顶部, 默认是true</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> scrollsToTop: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>设置缩放视图时是否有弹簧效果, 默认是true</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bouncesZoom: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>设置ScrollView是否滚动时是否有弹簧效果, 默认是true</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bounces: <span class="type">Bool</span></div></pre></td></tr></table></figure><h1 id="UIScrollView的常用方法"><a href="#UIScrollView的常用方法" class="headerlink" title="UIScrollView的常用方法"></a>UIScrollView的常用方法</h1><blockquote><p>拖拽视图时调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure><blockquote><p>刚开始拖拽视图的时候调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginDragging</span><span class="params">(scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure><blockquote><p>拖拽停止的时候调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDragging</span><span class="params">(scrollView: UIScrollView, willDecelerate decelerate: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>当视图滚动速度开始减慢的时候调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginDecelerating</span><span class="params">(scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure><blockquote><p>当拖拽的视图完全停下来后才调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure><blockquote><p>当ScrollView的动画执行完之后才调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndScrollingAnimation</span><span class="params">(scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure><blockquote><p>设置视图的比例放大或者缩小</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">optional func viewForZoomingInScrollView(scrollView: UIScrollView) -&gt; UIView?</div></pre></td></tr></table></figure><blockquote><p>当完成比例放大或者缩小的时候调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndZooming</span><span class="params">(scrollView: UIScrollView, withView view: UIView!, atScale scale: CGFloat)</span></span></div></pre></td></tr></table></figure><blockquote><p>是否可以点击状态栏回到最顶部, 默认是true</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewShouldScrollToTop</span><span class="params">(scrollView: UIScrollView)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>当点击状态栏回到顶部的时候才调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScrollToTop</span><span class="params">(scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIScrollView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> UIScrollView </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITextView-简单使用</title>
      <link href="/2017/12/13/Swift/UIKit/Swift-UIKit-UITextView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="遵守代理协议"><a href="#遵守代理协议" class="headerlink" title="遵守代理协议"></a>遵守代理协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITextViewDelegate</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="自定义UITextView"><a href="#自定义UITextView" class="headerlink" title="自定义UITextView"></a>自定义UITextView</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTextView</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">       <span class="comment">// 1.自定义 UITextView 以及文本容器的大小</span></div><div class="line">       <span class="keyword">var</span> textView = <span class="type">UITextView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="keyword">self</span>.view.frame.width, <span class="number">200</span>))</div><div class="line"></div><div class="line">       <span class="comment">// 2.设置 UITextView 的文本内容</span></div><div class="line">       textView.text = <span class="string">"http://www.baidu.com\nabcdefghijk"</span></div><div class="line"></div><div class="line">       <span class="comment">// 3.设置 UITextView 的文本颜色</span></div><div class="line">       textView.textColor = <span class="type">UIColor</span>.redColor()</div><div class="line"></div><div class="line">       <span class="comment">// 4.设置 UITextView 的文字大小</span></div><div class="line">       textView.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">30</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 5.设置 UITextView 的文字对齐方式</span></div><div class="line">       textView.textAlignment = <span class="type">NSTextAlignment</span>.<span class="type">Center</span></div><div class="line"></div><div class="line">       <span class="comment">// 6.设置 UITextView 是否可编辑</span></div><div class="line">       textView.editable = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 7.设置 UITextView 是否可以选中</span></div><div class="line">       textView.selectable = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 8.设置 UITextView 的背景颜色</span></div><div class="line">       textView.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line"></div><div class="line">       <span class="comment">// 9.设置 UITextView 的超文本样式</span></div><div class="line">       textView.dataDetectorTypes = <span class="type">UIDataDetectorTypes</span>.<span class="type">All</span></div><div class="line"></div><div class="line">       <span class="comment">// 10.设置 UITextView 的文本长按时是否可以更改为粗体, 斜体或者斜体下划线样式</span></div><div class="line">       textView.allowsEditingTextAttributes = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 11.设置 UITextView 的文本容器边界</span></div><div class="line">       textView.textContainerInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line">       <span class="comment">// 12.设置 UITextView 是否点击编辑时把旧内容全选</span></div><div class="line">       textView.clearsOnInsertion = <span class="literal">true</span></div><div class="line"></div><div class="line">       <span class="comment">// 13.设置 UITextView 的代理对象</span></div><div class="line">       textView.delegate = <span class="keyword">self</span></div><div class="line"></div><div class="line">       <span class="comment">// 14.添加到 self.view</span></div><div class="line">       <span class="keyword">self</span>.view.addSubview(textView)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="实现代理方法"><a href="#实现代理方法" class="headerlink" title="实现代理方法"></a>实现代理方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.该方法是用来设置 UITextView 是否可以编辑</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textViewShouldBeginEditing</span><span class="params">(textView: UITextView)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"正在开始编辑"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 2.该方法是用来设置 UITextView 是否可以结束编辑</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textViewShouldEndEditing</span><span class="params">(textView: UITextView)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"正在结束编辑"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 3.该方法是用来设置 UITextView 在开始编辑时调用</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textViewDidBeginEditing</span><span class="params">(textView: UITextView)</span></span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"开始编辑"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 4.该方法是用来设置 UITextView 在结束编辑时调用</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textViewDidEndEditing</span><span class="params">(textView: UITextView)</span></span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"结束编辑"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 5.该方法是用来设置 UITextView 内容是否可更改</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textView</span><span class="params">(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"正在更改内容"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 6.该方法是用来设置 UITextView 内容更改后时调用</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textViewDidChange</span><span class="params">(textView: UITextView)</span></span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"内容已经改变"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 7.该方法是用来选择需要更改内容的 UITextView</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">textViewDidChangeSelection</span><span class="params">(textView: UITextView)</span></span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"已经选择要更改内容的文本框"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="在-viewDidLoad-调用"><a href="#在-viewDidLoad-调用" class="headerlink" title="在 viewDidLoad 调用"></a>在 viewDidLoad 调用</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       <span class="keyword">self</span>.myTextView()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITextView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITextView-简介</title>
      <link href="/2017/12/13/Swift/UIKit/Swift-UIKit-UITextView-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UITextView常用属性"><a href="#UITextView常用属性" class="headerlink" title="UITextView常用属性"></a>UITextView常用属性</h1><blockquote><p>1.设置 UITextView 的文字</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> text: <span class="type">String</span>!</div></pre></td></tr></table></figure><blockquote><p>2.设置 UITextView 的字体大小</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> font: <span class="type">UIFont</span>!</div></pre></td></tr></table></figure><blockquote><p>3.设置 UITextView 的字体颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> textColor: <span class="type">UIColor</span>!</div></pre></td></tr></table></figure><blockquote><p>4.设置 UITextView 的字体排序, 默认是从左往右</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> textAlignment: <span class="type">NSTextAlignment</span></div></pre></td></tr></table></figure><blockquote><p>5.设置 UITextView 是否可编辑</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> editable: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>6.设置 UITextView 是否可以点击</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> selectable: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>7.设置 UITextView 的超文本样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dataDetectorTypes: <span class="type">UIDataDetectorTypes</span></div></pre></td></tr></table></figure><blockquote><p>8.设置 UITextView 在长按下是否可以选择不同的文字样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">var</span> allowsEditingTextAttributes: <span class="type">Bool</span></div><div class="line">```  </div><div class="line"></div><div class="line">&gt; <span class="number">9</span>.设置 <span class="type">UITextView</span> 的文本容器边界</div><div class="line"></div><div class="line">```swift</div><div class="line"><span class="keyword">var</span> textContainerInset: <span class="type">UIEdgeInsets</span></div></pre></td></tr></table></figure><blockquote><p>10.设置 UITextView 是否点击编辑时把旧内容全选</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> clearsOnInsertion: <span class="type">Bool</span></div></pre></td></tr></table></figure><h1 id="UITextView-的代理方法"><a href="#UITextView-的代理方法" class="headerlink" title="UITextView 的代理方法"></a>UITextView 的代理方法</h1><blockquote><p>1.该方法是用来设置 UITextView 是否可以编辑</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textViewShouldBeginEditing</span><span class="params">(textView: UITextView)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是用来设置 UITextView 是否可以结束编辑</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textViewShouldEndEditing</span><span class="params">(textView: UITextView)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是用来设置 UITextView 在开始编辑时调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textViewDidBeginEditing</span><span class="params">(textView: UITextView)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是用来设置 UITextView 在结束编辑时调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textViewDidEndEditing</span><span class="params">(textView: UITextView)</span></span></div></pre></td></tr></table></figure><blockquote><p>5.该方法是用来设置 UITextView 内容是否可更改</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textView</span><span class="params">(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String)</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>6.该方法是用来设置 UITextView 内容更改后时调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textViewDidChange</span><span class="params">(textView: UITextView)</span></span></div></pre></td></tr></table></figure><blockquote><p>7.该方法是用来选择需要更改内容的 UITextView</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">textViewDidChangeSelection</span><span class="params">(textView: UITextView)</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITextView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIActionSheet-简单使用</title>
      <link href="/2017/12/13/Swift/UIKit/UIActionSheet-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="遵守代理协议"><a href="#遵守代理协议" class="headerlink" title="遵守代理协议"></a>遵守代理协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UIActionSheetDelegate</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><h1 id="自定义UIButton并且监听-ActionSheet-方法"><a href="#自定义UIButton并且监听-ActionSheet-方法" class="headerlink" title="自定义UIButton并且监听 ActionSheet 方法"></a>自定义UIButton并且监听 ActionSheet 方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myButton</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> button: <span class="type">UIButton</span> = <span class="type">UIButton</span>.buttonWithType(<span class="type">UIButtonType</span>.<span class="type">System</span>) <span class="keyword">as</span>! <span class="type">UIButton</span></div><div class="line">        button.frame = <span class="type">CGRectMake</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">20</span>)</div><div class="line">        button.setTitle(<span class="string">"弹窗"</span>, forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line">        button.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">        button.addTarget(<span class="keyword">self</span>, action: <span class="string">"myActionSheet"</span>, forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">TouchUpInside</span>)</div><div class="line">        <span class="keyword">self</span>.view.addSubview(button)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="自定义UIActionSheet"><a href="#自定义UIActionSheet" class="headerlink" title="自定义UIActionSheet"></a>自定义UIActionSheet</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myActionSheet</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 1.自定义 UIActionSheet, 并且设置标题, 代理对象, 以及按钮的标题</span></div><div class="line">      <span class="keyword">var</span> actionSheet = <span class="type">UIActionSheet</span>(title: <span class="string">"UIActionSheet"</span>, delegate: <span class="keyword">self</span>, cancelButtonTitle: <span class="string">"取消"</span>, destructiveButtonTitle: <span class="string">"按钮一"</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 2.设置 UIActionSheet 的样式</span></div><div class="line">      actionSheet.actionSheetStyle = <span class="type">UIActionSheetStyle</span>.<span class="type">Default</span></div><div class="line"></div><div class="line">      <span class="comment">// 3.设置取消按钮的索引</span></div><div class="line">      actionSheet.cancelButtonIndex = <span class="number">1</span></div><div class="line"></div><div class="line">      <span class="comment">// 4.设置destructive的索引值</span></div><div class="line">      actionSheet.destructiveButtonIndex = <span class="number">0</span></div><div class="line"></div><div class="line">      <span class="comment">// 5.添加其他按钮的标题</span></div><div class="line">      actionSheet.addButtonWithTitle(<span class="string">"按钮二"</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 6.设置按钮标题的索引</span></div><div class="line">      actionSheet.buttonTitleAtIndex(<span class="number">1</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 7.显示到 self.view 上</span></div><div class="line">       actionSheet.showInView(<span class="keyword">self</span>.view)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="实现UIActionSheet代理方法"><a href="#实现UIActionSheet代理方法" class="headerlink" title="实现UIActionSheet代理方法"></a>实现UIActionSheet代理方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.该方法是在 UIActionSheet 上的按钮被点击时调用的</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int)</span></span> &#123;</div><div class="line">     <span class="built_in">println</span>(<span class="string">"被点击了"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 2.该方法是在 UIActionSheet 上的点击了取消按钮时调用的</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">actionSheetCancel</span><span class="params">(actionSheet: UIActionSheet)</span></span> &#123;</div><div class="line">     <span class="built_in">println</span>(<span class="string">"点击了取消按钮"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 3.该方法是在 UIActionSheet 完全即将显示的时候调用的</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">willPresentActionSheet</span><span class="params">(actionSheet: UIActionSheet)</span></span> &#123;</div><div class="line">     <span class="built_in">println</span>(<span class="string">"UIActionSheet即将显示"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 4.该方法是在 UIActionSheet 完全显示的时候调用的</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">didPresentActionSheet</span><span class="params">(actionSheet: UIActionSheet)</span></span> &#123;</div><div class="line">     <span class="built_in">println</span>(<span class="string">"UIActionSheet完全显示"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 5.该方法是在 UIActionSheet 完全即将消失的时候调用的</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, willDismissWithButtonIndex buttonIndex: Int)</span></span> &#123;</div><div class="line">     <span class="built_in">println</span>(<span class="string">"UIActionSheet即将消失"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 6.该方法是在 UIActionSheet 完全消失的时候调用的</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, didDismissWithButtonIndex buttonIndex: Int)</span></span> &#123;</div><div class="line">     <span class="built_in">println</span>(<span class="string">"UIActionSheet完全消失"</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h1 id="在viewDidLoad实现"><a href="#在viewDidLoad实现" class="headerlink" title="在viewDidLoad实现"></a>在viewDidLoad实现</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       <span class="keyword">self</span>.myButton()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIActionSheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIActionSheet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIActionSheet-简介</title>
      <link href="/2017/12/13/Swift/UIKit/UIActionSheet-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UIActionSheet常用属性"><a href="#UIActionSheet常用属性" class="headerlink" title="UIActionSheet常用属性"></a>UIActionSheet常用属性</h1><blockquote><p>1.设置 UIActionSheet 的代理对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> delegate: <span class="type">UIActionSheetDelegate</span>?</div></pre></td></tr></table></figure><blockquote><p>2.设置 UIActionSheet 的标题</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> title: <span class="type">String</span></div></pre></td></tr></table></figure><blockquote><p>3.设置 UIActionSheet 的样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> actionSheetStyle: <span class="type">UIActionSheetStyle</span></div></pre></td></tr></table></figure><blockquote><p>4.读取 UIActionSheet 里有多少个按钮</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> numberOfButtons: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>5.设置 UIActionSheet 取消按钮的索引</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> cancelButtonIndex: <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>6.设置其他按钮的索引</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> destructiveButtonIndex: <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>7.读取 UIActionSheet 其他按钮的索引值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> firstOtherButtonIndex: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><blockquote><p>8.读取 UIActionSheet 是否可见</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> visible: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure><h1 id="UIActionSheet的常用方法"><a href="#UIActionSheet的常用方法" class="headerlink" title="UIActionSheet的常用方法"></a>UIActionSheet的常用方法</h1><blockquote><p>1.该方法是用来添加 UIActionSheet 的按钮标题</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addButtonWithTitle</span><span class="params">(title: String)</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是用来设置 UIActionSheet 的按钮索引</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">buttonTitleAtIndex</span><span class="params">(buttonIndex: Int)</span></span> -&gt; <span class="type">String</span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是来用设置 UIActionSheet 显示到 ToolBar</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showFromToolbar</span><span class="params">(view: UIToolbar!)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是用来设置 UIActionSheet 显示到 TabBar</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showFromTabBar</span><span class="params">(view: UITabBar!)</span></span></div></pre></td></tr></table></figure><blockquote><p>5.该方法是用来设置来自 UIBarButtonItem 的 UIActionSheet, 并且是否开启动画效果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showFromBarButtonItem</span><span class="params">(item: UIBarButtonItem!, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>6.该方法是用来设置 UIActionSheet 的显示的视图大小, 以及指定视图和是否开启动画效果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showFromRect</span><span class="params">(rect: CGRect, inView view: UIView!, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>7.该方法是用来设置 UIActionSheet 显示到哪一个视图</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showInView</span><span class="params">(view: UIView!)</span></span></div></pre></td></tr></table></figure><blockquote><p>8.该方法是用来设置 UIActionSheet 消失的按钮索引, 以及是否使用动画</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dismissWithClickedButtonIndex</span><span class="params">(buttonIndex: Int, animated: Bool)</span></span></div></pre></td></tr></table></figure><h1 id="UIActionSheet的代理方法"><a href="#UIActionSheet的代理方法" class="headerlink" title="UIActionSheet的代理方法"></a>UIActionSheet的代理方法</h1><blockquote><p>1.该方法是在 UIActionSheet 上的按钮被点击时调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是在 UIActionSheet 上的点击了取消按钮时调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">actionSheetCancel</span><span class="params">(actionSheet: UIActionSheet)</span></span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是在 UIActionSheet 完全即将显示的时候调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">willPresentActionSheet</span><span class="params">(actionSheet: UIActionSheet)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是在 UIActionSheet 完全显示的时候调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">didPresentActionSheet</span><span class="params">(actionSheet: UIActionSheet)</span></span></div></pre></td></tr></table></figure><blockquote><p>5.该方法是在 UIActionSheet 完全即将消失的时候调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, willDismissWithButtonIndex buttonIndex: Int)</span></span></div></pre></td></tr></table></figure><blockquote><p>6.该方法是在 UIActionSheet 完全消失的时候调用的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, didDismissWithButtonIndex buttonIndex: Int)</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIActionSheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIActionSheet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Func-字典模型互转</title>
      <link href="/2017/12/13/Swift/Func/Swift-Func-%E5%AD%97%E5%85%B8%E6%A8%A1%E5%9E%8B%E4%BA%92%E8%BD%AC/"/>
      <content type="html"><![CDATA[<h1 id="字典–-gt-模型"><a href="#字典–-gt-模型" class="headerlink" title="字典–&gt;模型"></a>字典–&gt;模型</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">NSObject</span> </span>&#123;  <span class="comment">//模型类</span></div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> icon:<span class="type">String</span>?</div><div class="line"></div><div class="line">   <span class="comment">// print时会调用。相当于java中的 toString()。为了代码整洁下面的模型去了这个计算属性。测试时请下载demo</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">internal</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="string">"name: \(name) \n icon:\(icon) \n"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> dict = [<span class="string">"name"</span>:<span class="string">"Jack"</span>,<span class="string">"icon"</span>:<span class="string">"lufy.png"</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> user = <span class="type">User</span>.objectWithKeyValues(dict) <span class="keyword">as</span>? <span class="type">User</span>&#123;</div><div class="line">             <span class="built_in">print</span>(<span class="string">"\(user)"</span>)</div><div class="line">        &#125;</div><div class="line">  &#125;</div><div class="line">  输出： name: <span class="type">Optional</span>(<span class="string">"Jack"</span>) </div><div class="line">        icon: <span class="type">Optional</span>(<span class="string">"lufy.png"</span>)</div></pre></td></tr></table></figure><h1 id="字典–-gt-模型-：模型中包裹模型"><a href="#字典–-gt-模型-：模型中包裹模型" class="headerlink" title="字典–&gt;模型 ：模型中包裹模型"></a>字典–&gt;模型 ：模型中包裹模型</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//模型类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Status</span> :<span class="title">NSObject</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> text:<span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> user:<span class="type">User</span>?        <span class="comment">//与 1 中的模型相同</span></div><div class="line">    <span class="keyword">var</span> retweetedStatus:<span class="type">Status</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">let</span> dict = [<span class="string">"text"</span>:<span class="string">"Agree!Nice weather!"</span>,</div><div class="line">                  <span class="string">"user"</span>:[<span class="string">"name"</span>:<span class="string">"Jack"</span>,<span class="string">"icon"</span>:<span class="string">"lufy.png"</span>],</div><div class="line">                  <span class="string">"retweetedStatus"</span>:[<span class="string">"text"</span>:<span class="string">"Nice weather!"</span>,</div><div class="line">                                     <span class="string">"user"</span>:[<span class="string">"name"</span>:<span class="string">"Rose"</span>,<span class="string">"icon"</span>:<span class="string">"nami.png"</span>]]                                      </div><div class="line">                 ]</div><div class="line"></div><div class="line">      <span class="keyword">if</span> <span class="keyword">let</span> status = <span class="type">Status</span>.objectWithKeyValues(dict) <span class="keyword">as</span>? <span class="type">Status</span>&#123;</div><div class="line">          <span class="built_in">print</span>(<span class="string">"\(status)"</span>)</div><div class="line">      &#125;</div><div class="line"> &#125;</div><div class="line">输出： </div><div class="line">    text:<span class="type">Optional</span>(<span class="string">"Agree!Nice weather!"</span>)</div><div class="line">    user:<span class="type">Optional</span>(name: <span class="type">Optional</span>(<span class="string">"Jack"</span>)  icon:<span class="type">Optional</span>(<span class="string">"lufy.png"</span>))</div><div class="line">    retweetedStatus:<span class="type">Optional</span>(text:<span class="type">Optional</span>(<span class="string">"Nice weather!"</span>)</div><div class="line">                             user:<span class="type">Optional</span>(name: <span class="type">Optional</span>(<span class="string">"Rose"</span>)icon:<span class="type">Optional</span>(<span class="string">"nami.png"</span>))</div><div class="line">                             retweetedStatus:<span class="literal">nil</span>)</div></pre></td></tr></table></figure><h1 id="字典–-gt-模型：-字典中包裹数组，-数组中的元素是-一个模型对应的字典"><a href="#字典–-gt-模型：-字典中包裹数组，-数组中的元素是-一个模型对应的字典" class="headerlink" title="字典–&gt;模型： 字典中包裹数组， 数组中的元素是 一个模型对应的字典"></a>字典–&gt;模型： 字典中包裹数组， 数组中的元素是 一个模型对应的字典</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//模型类， 必须遵守DictModelProtocol协议， 并实现customClassMapping方法。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGroup</span>: <span class="title">NSObject</span>,<span class="title">DictModelProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> groupName:<span class="type">String</span>?;            <span class="comment">//团队名称</span></div><div class="line">    <span class="keyword">var</span> numbers:<span class="type">NSArray</span>?              <span class="comment">//成员，保存User实例</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">customClassMapping</span><span class="params">()</span></span> -&gt; [<span class="type">String</span>: <span class="type">String</span>]?&#123;</div><div class="line">        <span class="keyword">return</span> [<span class="string">"numbers"</span>:<span class="string">"User"</span>];   <span class="comment">//指定numbers数组中的元素类型是User</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">()</span></span>&#123;</div><div class="line">   <span class="keyword">let</span> dict = [<span class="string">"groupName"</span>:<span class="string">"Dream Team"</span>,</div><div class="line">                 <span class="string">"numbers"</span>:[[<span class="string">"name"</span>:<span class="string">"Jack"</span>,<span class="string">"icon"</span>:<span class="string">"lufy.png"</span>],</div><div class="line">                            [<span class="string">"name"</span>:<span class="string">"Rose"</span>,<span class="string">"icon"</span>:<span class="string">"nami.png"</span>]]</div><div class="line">               ]</div><div class="line">   <span class="keyword">if</span> <span class="keyword">let</span> group = <span class="type">UserGroup</span>.objectWithKeyValues(dict)&#123;</div><div class="line">       <span class="built_in">print</span>(<span class="string">"\(group)"</span>)</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出： groupName:<span class="type">Optional</span>(<span class="string">"Dream Team"</span>)</div><div class="line">      numbers:<span class="type">Optional</span>((</div><div class="line">                        <span class="string">"name: Optional(\"Jack\") \n icon:Optional(\"lufy.png\") \n"</span>,</div><div class="line">                        <span class="string">"name: Optional(\"Rose\") \n icon:Optional(\"nami.png\") \n"</span></div><div class="line">    ))</div></pre></td></tr></table></figure><h1 id="字典–-gt-模型：-将一个字典数组转成模型数组"><a href="#字典–-gt-模型：-将一个字典数组转成模型数组" class="headerlink" title="字典–&gt;模型： 将一个字典数组转成模型数组"></a>字典–&gt;模型： 将一个字典数组转成模型数组</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">func4</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> arrayOfStatus = [[<span class="string">"text"</span>:<span class="string">"Agree!Nice weather!"</span>,</div><div class="line">                             <span class="string">"user"</span>:[<span class="string">"name"</span>:<span class="string">"Jack"</span>,</div><div class="line">                                     <span class="string">"icon"</span>:<span class="string">"lufy.png"</span></div><div class="line">                                    ],</div><div class="line">                            <span class="string">"retweetedStatus"</span>:[<span class="string">"text"</span>:<span class="string">"Nice weather!"</span>,</div><div class="line">                                                <span class="string">"user"</span>:[<span class="string">"name"</span>:<span class="string">"Rose"</span>,</div><div class="line">                                                        <span class="string">"icon"</span>:<span class="string">"nami.png"</span></div><div class="line">                                                       ]</div><div class="line">                                               ]</div><div class="line">                            ],</div><div class="line">                            [<span class="string">"text"</span>:<span class="string">"2___Agree!Nice weather!"</span>,</div><div class="line">                              <span class="string">"user"</span>:[<span class="string">"name"</span>:<span class="string">"2___Jack"</span>,</div><div class="line">                                       <span class="string">"icon"</span>:<span class="string">"2___lufy.png"</span></div><div class="line">                                     ],</div><div class="line">                            <span class="string">"retweetedStatus"</span>:[<span class="string">"text"</span>:<span class="string">"2___Nice weather!"</span>,</div><div class="line">                                                <span class="string">"user"</span>:[<span class="string">"name"</span>:<span class="string">"2___Rose"</span>,</div><div class="line">                                                        <span class="string">"icon"</span>:<span class="string">"2___nami.png"</span></div><div class="line">                                                       ]</div><div class="line">                                               ]</div><div class="line">                            ]]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> status = <span class="type">Status</span>.objectArrayWithKeyValuesArray(arrayOfStatus)&#123;</div><div class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> status&#123; <span class="comment">//打印出数组的元素</span></div><div class="line">                <span class="built_in">print</span>(item)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">输出： </div><div class="line">    text:<span class="type">Optional</span>(<span class="string">"Agree!Nice weather!"</span>)</div><div class="line">    user:<span class="type">Optional</span>(name: <span class="type">Optional</span>(<span class="string">"Jack"</span>)icon:<span class="type">Optional</span>(<span class="string">"lufy.png"</span>))</div><div class="line">    retweetedStatus:<span class="type">Optional</span>(text:<span class="type">Optional</span>(<span class="string">"Nice weather!"</span>)</div><div class="line">                             user:<span class="type">Optional</span>(name: <span class="type">Optional</span>(<span class="string">"Rose"</span>) icon:<span class="type">Optional</span>(<span class="string">"nami.png"</span>))</div><div class="line">                             retweetedStatus:<span class="literal">nil</span></div><div class="line">    )</div><div class="line"></div><div class="line">    text:<span class="type">Optional</span>(<span class="string">"2___Agree!Nice weather!"</span>)</div><div class="line">    user:<span class="type">Optional</span>(name: <span class="type">Optional</span>(<span class="string">"2___Jack"</span>)icon:<span class="type">Optional</span>(<span class="string">"2___lufy.png"</span>))</div><div class="line">    retweetedStatus:<span class="type">Optional</span>(text:<span class="type">Optional</span>(<span class="string">"2___Nice weather!"</span>)</div><div class="line">                             user:<span class="type">Optional</span>(name: <span class="type">Optional</span>(<span class="string">"2___Rose"</span>)icon:<span class="type">Optional</span>(<span class="string">"2___nami.png"</span>))</div><div class="line">                             retweetedStatus:<span class="literal">nil</span></div><div class="line">    )</div></pre></td></tr></table></figure><h1 id="模型–-gt-字典"><a href="#模型–-gt-字典" class="headerlink" title="模型–&gt;字典"></a>模型–&gt;字典</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">func5</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> user = <span class="type">User</span>()</div><div class="line">        user.name = <span class="string">"hejunm"</span></div><div class="line">        user.icon = <span class="string">"my.png"</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> dict = user.keyValues&#123;</div><div class="line">            <span class="keyword">do</span>&#123; <span class="comment">//转化为JSON 字符串，打印出来更直观</span></div><div class="line">                <span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.dataWithJSONObject(dict, options: .<span class="type">PrettyPrinted</span>)</div><div class="line">                <span class="built_in">print</span>(<span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>))</div><div class="line">            &#125;<span class="keyword">catch</span>&#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">输出：    </div><div class="line"> <span class="type">Optional</span>(&#123;</div><div class="line">  <span class="string">"icon"</span> : <span class="string">"my.png"</span>,</div><div class="line">  <span class="string">"name"</span> : <span class="string">"hejunm"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h1 id="模型–-gt-字典：-模型中还有模型"><a href="#模型–-gt-字典：-模型中还有模型" class="headerlink" title="模型–&gt;字典： 模型中还有模型"></a>模型–&gt;字典： 模型中还有模型</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">func6</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> user = <span class="type">User</span>()</div><div class="line">       user.name = <span class="string">"retweeted user hejunm"</span></div><div class="line">       user.icon = <span class="string">"my.png"</span></div><div class="line"></div><div class="line">       <span class="keyword">let</span> retweetedStatus = <span class="type">Status</span>();  <span class="comment">//转发微博</span></div><div class="line">       retweetedStatus.text = <span class="string">"this is retweeted status"</span>;</div><div class="line">       retweetedStatus.user = user</div><div class="line"></div><div class="line"></div><div class="line">       <span class="keyword">let</span> oriUser = <span class="type">User</span>()</div><div class="line">       oriUser.name = <span class="string">"original user"</span></div><div class="line">       oriUser.icon = <span class="string">"my.png"</span></div><div class="line"></div><div class="line">       <span class="keyword">let</span> oriStatus = <span class="type">Status</span>(); <span class="comment">//原微博</span></div><div class="line">       oriStatus.text = <span class="string">"this is original status"</span></div><div class="line">       oriStatus.user = oriUser</div><div class="line">       oriStatus.retweetedStatus = retweetedStatus</div><div class="line"></div><div class="line">       <span class="keyword">let</span> dict =  oriStatus.keyValues</div><div class="line">       <span class="keyword">do</span>&#123; <span class="comment">//转化为JSON 字符串</span></div><div class="line">           <span class="keyword">var</span> data = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.dataWithJSONObject(dict!, options: .<span class="type">PrettyPrinted</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>))</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出：  </div><div class="line"> <span class="type">Optional</span>(&#123;</div><div class="line"> <span class="string">"text"</span> : <span class="string">"this is original status"</span>,</div><div class="line"> <span class="string">"user"</span> : &#123;</div><div class="line">           <span class="string">"icon"</span> : <span class="string">"my.png"</span>,</div><div class="line">           <span class="string">"name"</span> : <span class="string">"original user"</span></div><div class="line">          &#125;,</div><div class="line">  <span class="string">"retweetedStatus"</span> : &#123;</div><div class="line">    <span class="string">"text"</span> : <span class="string">"this is retweeted status"</span>,</div><div class="line">    <span class="string">"user"</span> : &#123;</div><div class="line">      <span class="string">"icon"</span> : <span class="string">"my.png"</span>,</div><div class="line">      <span class="string">"name"</span> : <span class="string">"retweeted user hejunm"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h1 id="模型–-gt-字典-：-模型数组转字典数组"><a href="#模型–-gt-字典-：-模型数组转字典数组" class="headerlink" title="模型–&gt;字典 ： 模型数组转字典数组"></a>模型–&gt;字典 ： 模型数组转字典数组</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">func7</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> user1 = <span class="type">User</span>()</div><div class="line">        user1.name = <span class="string">"hejunm_1"</span></div><div class="line">        user1.icon = <span class="string">"my.png_1"</span></div><div class="line"></div><div class="line">        <span class="keyword">let</span> user2 = <span class="type">User</span>()</div><div class="line">        user2.name = <span class="string">"hejunm_2"</span></div><div class="line">        user2.icon = <span class="string">"my.png_2"</span></div><div class="line"></div><div class="line">        <span class="keyword">let</span> userArray = [user1,user2] <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> dicts = userArray.keyValuesArray&#123;</div><div class="line">            <span class="keyword">do</span>&#123;</div><div class="line">                <span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.dataWithJSONObject(dicts, options: .<span class="type">PrettyPrinted</span>) <span class="comment">//转成json字符串</span></div><div class="line">                <span class="built_in">print</span>(<span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>))</div><div class="line">            &#125;<span class="keyword">catch</span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">输出： </div><div class="line"><span class="type">Optional</span>([</div><div class="line">  &#123;</div><div class="line">    <span class="string">"icon"</span> : <span class="string">"my.png_1"</span>,</div><div class="line">    <span class="string">"name"</span> : <span class="string">"hejunm_1"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"icon"</span> : <span class="string">"my.png_2"</span>,</div><div class="line">    <span class="string">"name"</span> : <span class="string">"hejunm_2"</span></div><div class="line">  &#125;</div><div class="line">])</div></pre></td></tr></table></figure><h1 id="源码-字典–-gt-模型"><a href="#源码-字典–-gt-模型" class="headerlink" title="源码 - 字典–&gt;模型"></a>源码 - 字典–&gt;模型</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="comment">/** 当字典中存在数组， 并且数组中保存的值得类型是字典， 那么就需要指定数组中的字典对应的类类型。</span></div><div class="line"><span class="comment"> 这里以键值对的形式保存</span></div><div class="line"><span class="comment"> eg 字典如下：</span></div><div class="line"><span class="comment"> key: [[key1:value1, key2:value2],[key1:value3, key2:value4],[key1:value5, key2:value6]]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> key：  key值</span></div><div class="line"><span class="comment"> value: 字典[key1:value1, key2:value2] 对应的模型</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="meta">@objc</span> <span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">DictModelProtocol</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">customClassMapping</span><span class="params">()</span></span> -&gt; [<span class="type">String</span>: <span class="type">String</span>]?</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//dict: 要进行转换的字典</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">objectWithKeyValues</span>(<span class="title">dict</span>: <span class="title">NSDictionary</span>)-&gt;<span class="title">AnyObject</span>?</span>&#123;</div><div class="line">        <span class="keyword">if</span> <span class="type">HEFoundation</span>.isClassFromFoundation(<span class="keyword">self</span>) &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"只有自定义模型类才可以字典转模型"</span>)</div><div class="line">            <span class="built_in">assert</span>(<span class="literal">true</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> obj:<span class="type">AnyObject</span> = <span class="keyword">self</span>.<span class="keyword">init</span>()</div><div class="line">        <span class="keyword">var</span> cls:<span class="type">AnyClass</span> = <span class="keyword">self</span>.classForCoder()                                           <span class="comment">//当前类的类型</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="string">"NSObject"</span> !=  <span class="string">"\(cls)"</span>)&#123;</div><div class="line">            <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">            <span class="keyword">let</span> properties =  class_copyPropertyList(cls, &amp;<span class="built_in">count</span>)                         <span class="comment">//获取属性列表</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">let</span> property = properties[<span class="type">Int</span>(i)]                                         <span class="comment">//获取模型中的某一个属性</span></div><div class="line"></div><div class="line">                <span class="keyword">let</span> propertyType = <span class="type">String</span>.fromCString(property_getAttributes(property))!  <span class="comment">//属性类型</span></div><div class="line"></div><div class="line">                <span class="keyword">let</span> propertyKey = <span class="type">String</span>.fromCString(property_getName(property))!         <span class="comment">//属性名称</span></div><div class="line">                <span class="keyword">if</span> propertyKey == <span class="string">"description"</span>&#123; <span class="keyword">continue</span>  &#125;                              <span class="comment">//description是Foundation中的计算型属性，是实例的描述信息</span></div><div class="line"></div><div class="line"></div><div class="line">                <span class="keyword">var</span> value:<span class="type">AnyObject</span>! = dict[propertyKey]      <span class="comment">//取得字典中的值</span></div><div class="line">                <span class="keyword">if</span> value == <span class="literal">nil</span> &#123;<span class="keyword">continue</span>&#125;</div><div class="line"></div><div class="line">                <span class="keyword">let</span> valueType =  <span class="string">"\(value.classForCoder)"</span>     <span class="comment">//字典中保存的值得类型</span></div><div class="line">                <span class="keyword">if</span> valueType == <span class="string">"NSDictionary"</span>&#123;               <span class="comment">//1，值是字典。 这个字典要对应一个自定义的模型类并且这个类不是Foundation中定义的类型。</span></div><div class="line">                    <span class="keyword">let</span> subModelStr:<span class="type">String</span>! = <span class="type">HEFoundation</span>.getType(propertyType)</div><div class="line">                    <span class="keyword">if</span> subModelStr == <span class="literal">nil</span>&#123;</div><div class="line">                        <span class="built_in">print</span>(<span class="string">"你定义的模型与字典不匹配。 字典中的键\(propertyKey)  对应一个自定义的 模型"</span>)</div><div class="line">                        <span class="built_in">assert</span>(<span class="literal">true</span>)</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> subModelClass = <span class="type">NSClassFromString</span>(subModelStr)&#123;</div><div class="line">                        value = subModelClass.objectWithKeyValues(value <span class="keyword">as</span>! <span class="type">NSDictionary</span>) <span class="comment">//递归</span></div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> valueType == <span class="string">"NSArray"</span>&#123;              <span class="comment">//值是数组。 数组中存放字典。 将字典转换成模型。 如果协议中没有定义映射关系，就不做处理</span></div><div class="line"></div><div class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.respondsToSelector(<span class="string">"customClassMapping"</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> <span class="keyword">var</span> subModelClassName = cls.customClassMapping()?[propertyKey]&#123;   <span class="comment">//子模型的类名称</span></div><div class="line">                            subModelClassName =  <span class="type">HEFoundation</span>.bundlePath+<span class="string">"."</span>+subModelClassName</div><div class="line">                            <span class="keyword">if</span> <span class="keyword">let</span> subModelClass = <span class="type">NSClassFromString</span>(subModelClassName)&#123;</div><div class="line">                                value = subModelClass.objectArrayWithKeyValuesArray(value <span class="keyword">as</span>! <span class="type">NSArray</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">              obj.setValue(value, forKey: propertyKey)</div><div class="line">            &#125;</div><div class="line">            free(properties)                            <span class="comment">//释放内存</span></div><div class="line">            cls = cls.superclass()!                     <span class="comment">//处理父类</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> obj</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     将字典数组转换成模型数组</span></div><div class="line"><span class="comment">     array: 要转换的数组, 数组中包含的字典所对应的模型类就是 调用这个类方法的类</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">     当数组中嵌套数组， 内部的数组包含字典，cls就是内部数组中的字典对应的模型</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">objectArrayWithKeyValuesArray</span>(<span class="title">array</span>: <span class="title">NSArray</span>)-&gt;<span class="title">NSArray</span>?</span>&#123;</div><div class="line">        <span class="keyword">if</span> array.<span class="built_in">count</span> == <span class="number">0</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> result = [<span class="type">AnyObject</span>]()</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> array&#123;</div><div class="line">            <span class="keyword">let</span> type = <span class="string">"\(item.classForCoder)"</span></div><div class="line">            <span class="keyword">if</span> type == <span class="string">"NSDictionary"</span>&#123;</div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> model = objectWithKeyValues(item <span class="keyword">as</span>! <span class="type">NSDictionary</span>)&#123;</div><div class="line">                    result.append(model)</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> type == <span class="string">"NSArray"</span>&#123;</div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> model =  objectArrayWithKeyValuesArray(item <span class="keyword">as</span>! <span class="type">NSArray</span>)&#123;</div><div class="line">                    result.append(model)</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                result.append(item)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> result.<span class="built_in">count</span>==<span class="number">0</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="源码-模型–-gt-字典"><a href="#源码-模型–-gt-字典" class="headerlink" title="源码 - 模型–&gt;字典"></a>源码 - 模型–&gt;字典</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> keyValues:[<span class="type">String</span>:<span class="type">AnyObject</span>]?&#123;                   <span class="comment">//获取一个模型对应的字典</span></div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">var</span> result = [<span class="type">String</span>: <span class="type">AnyObject</span>]()           <span class="comment">//保存结果</span></div><div class="line">            <span class="keyword">var</span> classType:<span class="type">AnyClass</span> = <span class="keyword">self</span>.classForCoder</div><div class="line">            <span class="keyword">while</span>(<span class="string">"NSObject"</span> !=  <span class="string">"\(classType)"</span> )&#123;</div><div class="line">                <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">                <span class="keyword">let</span> properties = class_copyPropertyList(classType, &amp;<span class="built_in">count</span>)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span>&#123;</div><div class="line">                    <span class="keyword">let</span> property = properties[<span class="type">Int</span>(i)]</div><div class="line">                    <span class="keyword">let</span> propertyKey = <span class="type">String</span>.fromCString(property_getName(property))!         <span class="comment">//模型中属性名称</span></div><div class="line">                    <span class="keyword">let</span> propertyType = <span class="type">String</span>.fromCString(property_getAttributes(property))!  <span class="comment">//模型中属性类型</span></div><div class="line"></div><div class="line">                    <span class="keyword">if</span> <span class="string">"description"</span> == propertyKey&#123; <span class="keyword">continue</span> &#125;   <span class="comment">//描述，不是属性</span></div><div class="line"></div><div class="line">                    <span class="keyword">let</span> tempValue:<span class="type">AnyObject</span>!  = <span class="keyword">self</span>.valueForKey(propertyKey)</div><div class="line">                    <span class="keyword">if</span>  tempValue == <span class="literal">nil</span> &#123; <span class="keyword">continue</span> &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> =  <span class="type">HEFoundation</span>.getType(propertyType) &#123;         <span class="comment">//1,自定义的类</span></div><div class="line">                        result[propertyKey] = tempValue.keyValues</div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (propertyType.containsString(<span class="string">"NSArray"</span>))&#123;       <span class="comment">//2, 数组, 将数组中的模型转成字典</span></div><div class="line">                        result[propertyKey] = tempValue.keyValuesArray       <span class="comment">//3， 基本数据</span></div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        result[propertyKey] = tempValue</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                free(properties)</div><div class="line">                classType = classType.superclass()!</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> result.<span class="built_in">count</span> == <span class="number">0</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> result</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSArray</span></span>&#123;  <span class="comment">//数组的拓展</span></div><div class="line">    <span class="keyword">var</span> keyValuesArray:[<span class="type">AnyObject</span>]?&#123;</div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">var</span> result = [<span class="type">AnyObject</span>]()</div><div class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>&#123;</div><div class="line">                <span class="keyword">if</span> !<span class="type">HEFoundation</span>.isClassFromFoundation(item.classForCoder)&#123; <span class="comment">//1,自定义的类</span></div><div class="line">                    <span class="keyword">let</span> subKeyValues:[<span class="type">String</span>:<span class="type">AnyObject</span>]! = item.keyValues</div><div class="line">                    <span class="keyword">if</span>  subKeyValues == <span class="literal">nil</span> &#123;<span class="keyword">continue</span>&#125;</div><div class="line">                    result.append(subKeyValues)</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> item.classForCoder == <span class="type">NSArray</span>.classForCoder()&#123;    <span class="comment">//2, 如果item 是数组</span></div><div class="line">                    <span class="keyword">let</span> subKeyValues:[<span class="type">AnyObject</span>]! = item.keyValuesArray</div><div class="line">                    <span class="keyword">if</span>  subKeyValues == <span class="literal">nil</span> &#123;<span class="keyword">continue</span>&#125;</div><div class="line">                    result.append(subKeyValues)</div><div class="line">                &#125;<span class="keyword">else</span>&#123;                                                     <span class="comment">//3, 基本数据类型</span></div><div class="line">                    result.append(item)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> result.<span class="built_in">count</span> == <span class="number">0</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> result</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HEFoundation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="keyword">set</span> = <span class="type">NSSet</span>(array: [</div><div class="line">                                    <span class="type">NSURL</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSDate</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSValue</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSData</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSError</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSArray</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSDictionary</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSString</span>.classForCoder(),</div><div class="line">                                    <span class="type">NSAttributedString</span>.classForCoder()</div><div class="line">                                  ])</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span>  bundlePath = <span class="type">NSBundle</span>.mainBundle().infoDictionary![<span class="string">"CFBundleExecutable"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="comment">/*** 判断某个类是否是 Foundation中自带的类 */</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">isClassFromFoundation</span>(<span class="title">c</span>:<span class="title">AnyClass</span>)-&gt;<span class="title">Bool</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span>  result = <span class="literal">false</span></div><div class="line">        <span class="keyword">if</span> <span class="built_in">c</span> == <span class="type">NSObject</span>.classForCoder()&#123;</div><div class="line">            result = <span class="literal">true</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">set</span>.enumerateObjectsUsingBlock(&#123; (foundation,  stop) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span>  <span class="built_in">c</span>.isSubclassOfClass(foundation <span class="keyword">as</span>! <span class="type">AnyClass</span>) &#123;</div><div class="line">                    result = <span class="literal">true</span></div><div class="line">                    stop.initialize(<span class="literal">true</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** 很据属性信息， 获得自定义类的 类名*/</span></div><div class="line">     <span class="comment">/**</span></div><div class="line"><span class="comment">     let propertyType = String.fromCString(property_getAttributes(property))! 获取属性类型</span></div><div class="line"><span class="comment">     到这个属性的类型是自定义的类时， 会得到下面的格式： T+@+"+..+工程的名字+数字+类名+"+,+其他,</span></div><div class="line"><span class="comment">     而我们想要的只是类名，所以要修改这个字符串</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">getType</span>(<span class="title">var</span> <span class="title">code</span>:<span class="title">String</span>)-&gt;<span class="title">String</span>?</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !code.containsString(bundlePath)&#123; <span class="comment">//不是自定义类</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        code = code.componentsSeparatedByString(<span class="string">"\""</span>)[<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> range = code.rangeOfString(bundlePath)&#123;</div><div class="line">            code = code.substringFromIndex(range.endIndex)</div><div class="line">            <span class="keyword">var</span> numStr = <span class="string">""</span> <span class="comment">//类名前面的数字</span></div><div class="line">            <span class="keyword">for</span> <span class="built_in">c</span>:<span class="type">Character</span> <span class="keyword">in</span> code.characters&#123;</div><div class="line">                <span class="keyword">if</span> <span class="built_in">c</span> &lt;= <span class="string">"9"</span> &amp;&amp; <span class="built_in">c</span> &gt;= <span class="string">"0"</span>&#123;</div><div class="line">                    numStr+=<span class="type">String</span>(<span class="built_in">c</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> numRange = code.rangeOfString(numStr)&#123;</div><div class="line">                code = code.substringFromIndex(numRange.endIndex)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> bundlePath+<span class="string">"."</span>+code</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/hejunmeng/article/details/51280570" target="_blank" rel="external">原文</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-AppKit-NSTimer-定时器</title>
      <link href="/2017/12/13/Swift/UIKit/NSTimer-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <content type="html"><![CDATA[<h1 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSTimer</span> : <span class="title">NSObject</span></span></div></pre></td></tr></table></figure><h2 id="定时器的作用"><a href="#定时器的作用" class="headerlink" title="定时器的作用"></a>定时器的作用</h2><ul><li>在指定的时间执行指定的任务</li><li>间隔一段时间执行指定任务</li></ul><h1 id="定时器的创建"><a href="#定时器的创建" class="headerlink" title="定时器的创建"></a>定时器的创建</h1><h2 id="scheduled方式"><a href="#scheduled方式" class="headerlink" title="scheduled方式"></a>scheduled方式</h2><ul><li>创建并启动定时器</li><li>默认将时钟以NSDefaultRunLoopMode模式添加到运行循环</li><li>用户发生交互的时候时钟将暂停</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">      public class func scheduledTimerWithTimeInterval(ti: NSTimeInterval,  </span></div><div class="line"><span class="comment">                                           target aTarget: AnyObject,  </span></div><div class="line"><span class="comment">                                       selector aSelector: Selector,  </span></div><div class="line"><span class="comment">                                                 userInfo: AnyObject?,  </span></div><div class="line"><span class="comment">                                          repeats yesOrNo: Bool) -&gt; NSTimer </span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">      参数： </span></div><div class="line"><span class="comment">          TimeInterval：触发时间，单位秒 </span></div><div class="line"><span class="comment">          target：定时起触发对象 </span></div><div class="line"><span class="comment">          selector：定时器响应方法 </span></div><div class="line"><span class="comment">          userInfo：用户信息 </span></div><div class="line"><span class="comment">          repeats：是否重复执行，YES 每个指定的时间重复执行，NO 只执行一次 </span></div><div class="line"><span class="comment">  */</span>  </div><div class="line"> </div><div class="line">  <span class="comment">// 创建并启动定时器  </span></div><div class="line">  <span class="keyword">let</span> timer:<span class="type">NSTimer</span> = <span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">2.0</span>,   </div><div class="line">                                                      target: <span class="keyword">self</span>,   </div><div class="line">                                                    selector: #selector(<span class="type">YPScrollView</span>.timerChange),<span class="number">2</span>  </div><div class="line">                                                    userInfo: <span class="literal">nil</span>,   </div><div class="line">                                                     repeats: <span class="literal">true</span>)</div></pre></td></tr></table></figure><h2 id="timer方式"><a href="#timer方式" class="headerlink" title="timer方式"></a>timer方式</h2><ul><li>创建定时器添加到运行循环</li><li>将时钟以指定模式添加到运行循环</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">/* </span></div><div class="line"><span class="comment">    mode： </span></div><div class="line"><span class="comment">        NSDefaultRunLoopMode: 时钟，网络。           发生用户交互的时候，时钟会被暂停 </span></div><div class="line"><span class="comment">        NSRunLoopCommonModes: 用户交互，响应级别高。  发生用户交互的时候，时钟仍然会触发，如果时钟触发方法非常 </span></div><div class="line"><span class="comment">                                                    耗时，使用此方式时用户操作会造成非常严重的卡顿。 </span></div><div class="line"><span class="comment">*/</span>  </div><div class="line">  </div><div class="line"><span class="comment">// 创建定时器  </span></div><div class="line"><span class="keyword">let</span> timer:<span class="type">NSTimer</span> = <span class="type">NSTimer</span>(timeInterval: <span class="number">2.0</span>,   </div><div class="line">                                  target: <span class="keyword">self</span>,   </div><div class="line">                                selector: #selector(<span class="type">ViewController</span>.updateTimer(<span class="number">_</span>:)),   </div><div class="line">                                userInfo: <span class="literal">nil</span>,   </div><div class="line">                                 repeats: <span class="literal">true</span>)  </div><div class="line">  </div><div class="line"><span class="comment">// 将定时器添加到运行循环  </span></div><div class="line"><span class="type">NSRunLoop</span>.currentRunLoop().addTimer(timer, forMode: <span class="type">NSRunLoopCommonModes</span>)</div></pre></td></tr></table></figure><h1 id="定时器的启动与关闭"><a href="#定时器的启动与关闭" class="headerlink" title="定时器的启动与关闭"></a>定时器的启动与关闭</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 启动定时器  </span></div><div class="line">timer.fireDate = <span class="type">NSDate</span>.distantFuture()  </div><div class="line">      </div><div class="line"><span class="comment">// 暂停定时器  </span></div><div class="line">timer.fireDate = <span class="type">NSDate</span>.distantPast()  </div><div class="line">      </div><div class="line"><span class="comment">// 关闭定时器，永久关闭定时器  </span></div><div class="line">timer.invalidate()</div></pre></td></tr></table></figure><h1 id="子线程定时器的创建"><a href="#子线程定时器的创建" class="headerlink" title="子线程定时器的创建"></a>子线程定时器的创建</h1><blockquote><p>在子线程创建定时器时，需要手动开启子线程的运行循环</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>)) &#123;   </div><div class="line"> </div><div class="line">     <span class="comment">// 在子线程创建定时器  </span></div><div class="line">     <span class="comment">/* </span></div><div class="line"><span class="comment">         scheduled 或 timer 方式创建 </span></div><div class="line"><span class="comment">     */</span>  </div><div class="line">     <span class="keyword">let</span> timer:<span class="type">NSTimer</span> = <span class="type">NSTimer</span>(timeInterval: <span class="number">2.0</span>,   </div><div class="line">                          target: <span class="keyword">self</span>,   </div><div class="line">                        selector: #selector(<span class="type">ViewController</span>.updateTimer(<span class="number">_</span>:)),   </div><div class="line">                        userInfo: <span class="literal">nil</span>,   </div><div class="line">                         repeats: <span class="literal">true</span>)  </div><div class="line">     <span class="type">NSRunLoop</span>.currentRunLoop().addTimer(timer, forMode: <span class="type">NSRunLoopCommonModes</span>)  </div><div class="line"> </div><div class="line">     <span class="comment">// 启动子线程的运行循环  </span></div><div class="line">     <span class="comment">/* </span></div><div class="line"><span class="comment">         这句代码就是一个死循环！如果不停止运行循环，不会执行添加到此句之后的任何代码 </span></div><div class="line"><span class="comment">     */</span>  </div><div class="line">     <span class="type">CFRunLoopRun</span>()  </div><div class="line"> </div><div class="line">     <span class="comment">// 停止子线程运行循环之前，不会执行添加到此处的任何代码  </span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> num:<span class="type">Int</span> = <span class="number">0</span>  </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">updateTimer</span><span class="params">(timer:NSTimer)</span></span> &#123;  </div><div class="line"> </div><div class="line">     num  = num + <span class="number">1</span>  </div><div class="line"> </div><div class="line">     <span class="comment">// 满足条件后，停止当前的运行循环  </span></div><div class="line">     <span class="keyword">if</span> (num == <span class="number">8</span>) &#123;  </div><div class="line"> </div><div class="line">         <span class="comment">// 停止当前的运行循环  </span></div><div class="line">         <span class="comment">/* </span></div><div class="line"><span class="comment">             一旦停止了运行循环，后续代码能够执行，执行完毕后，线程被自动销毁 </span></div><div class="line"><span class="comment">         */</span>  </div><div class="line">         <span class="type">CFRunLoopStop</span>(<span class="type">CFRunLoopGetCurrent</span>())  </div><div class="line">     &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">/ 延时调用  </div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">    1.5 秒后自动调用 self 的 hideHUD 方法 </span></div><div class="line"><span class="comment">*/</span>  </div><div class="line"><span class="keyword">self</span>.performSelector(#selector(<span class="type">NsTimer</span>.hideHUD), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">1.5</span>)  </div><div class="line">  </div><div class="line"><span class="comment">// 取消延时调用  </span></div><div class="line"><span class="type">NSObject</span>.cancelPreviousPerformRequestsWithTarget(<span class="keyword">self</span>, selector: #selector(<span class="type">NsTimer</span>.hideHUD), object: <span class="literal">nil</span>)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> / 延时调用  </div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">    1.5 秒后自动调用 self 的 hideHUD 方法 </span></div><div class="line"><span class="comment">*/</span>  </div><div class="line"><span class="keyword">self</span>.performSelector(#selector(<span class="type">NsTimer</span>.hideHUD), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">1.5</span>)  </div><div class="line">  </div><div class="line"><span class="comment">// 取消延时调用  </span></div><div class="line"><span class="type">NSObject</span>.cancelPreviousPerformRequestsWithTarget(<span class="keyword">self</span>, selector: #selector(<span class="type">NsTimer</span>.hideHUD), object: <span class="literal">nil</span>)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> / 延时调用  </div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">    1.5 秒后自动调用 self 的 hideHUD 方法 </span></div><div class="line"><span class="comment">*/</span>  </div><div class="line"><span class="keyword">self</span>.performSelector(#selector(<span class="type">NsTimer</span>.hideHUD), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">1.5</span>)  </div><div class="line">  </div><div class="line"><span class="comment">// 取消延时调用  </span></div><div class="line"><span class="type">NSObject</span>.cancelPreviousPerformRequestsWithTarget(<span class="keyword">self</span>, selector: #selector(<span class="type">NsTimer</span>.hideHUD), object: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> NSTimer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> NSTimer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UICollectionView-简单使用</title>
      <link href="/2017/12/13/Swift/UIKit/UICollectionView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="遵守协议"><a href="#遵守协议" class="headerlink" title="遵守协议"></a>遵守协议</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UICollectionViewDataSource</span>, <span class="title">UICollectionViewDelegate</span>, <span class="title">UICollectionViewDelegateFlowLayout</span> </span>&#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="自定义UICollectionView"><a href="#自定义UICollectionView" class="headerlink" title="自定义UICollectionView"></a>自定义UICollectionView</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">myCollectionView</span><span class="params">()</span></span> &#123;  </div><div class="line">        <span class="comment">// 1.自定义 Item 的FlowLayout  </span></div><div class="line">        <span class="keyword">let</span> flowLayout = <span class="type">UICollectionViewFlowLayout</span>()  </div><div class="line">  </div><div class="line">        <span class="comment">// 2.设置 Item 的 Size  </span></div><div class="line">        flowLayout.itemSize = <span class="type">CGSizeMake</span>(<span class="number">90</span>, <span class="number">120</span>)  </div><div class="line">  </div><div class="line">        <span class="comment">// 3.设置 Item 的排列方式  </span></div><div class="line">        flowLayout.scrollDirection = <span class="type">UICollectionViewScrollDirection</span>.<span class="type">Vertical</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 4.设置 Item 的四周边距  </span></div><div class="line">        flowLayout.sectionInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)  </div><div class="line">  </div><div class="line">        <span class="comment">// 5.设置同一竖中上下相邻的两个 Item 之间的间距  </span></div><div class="line">        flowLayout.minimumLineSpacing = <span class="number">20</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 6.设置同一行中相邻的两个 Item 之间的间距  </span></div><div class="line">        flowLayout.minimumInteritemSpacing = <span class="number">20</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 7.设置UICollectionView 的页头尺寸  </span></div><div class="line">        flowLayout.headerReferenceSize = <span class="type">CGSizeMake</span>(<span class="number">100</span>, <span class="number">50</span>)  </div><div class="line">  </div><div class="line">        <span class="comment">// 8.设置 UICollectionView 的页尾尺寸  </span></div><div class="line">        flowLayout.footerReferenceSize = <span class="type">CGSizeMake</span>(<span class="number">100</span>, <span class="number">50</span>)  </div><div class="line">  </div><div class="line">        <span class="comment">// 1.自定义 UICollectionView 的位置大小, 以及 Item 的显示样式为 flowLayout  </span></div><div class="line">        <span class="keyword">var</span> collection = <span class="type">UICollectionView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, <span class="keyword">self</span>.view.frame.width, <span class="keyword">self</span>.view.frame.height - <span class="number">64</span>), collectionViewLayout: flowLayout)  </div><div class="line">  </div><div class="line">        <span class="comment">// 2.设置 UICollectionView 的背景颜色  </span></div><div class="line">        collection.backgroundColor = <span class="type">UIColor</span>.whiteColor()  </div><div class="line">  </div><div class="line">        <span class="comment">// 3.设置 UICollectionView 垂直滚动是否滚到 Item 的最底部内容  </span></div><div class="line">        collection.alwaysBounceVertical = <span class="literal">true</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 4.设置 UICollectionView 垂直滚动是否滚到 Item 的最右边内容  </span></div><div class="line">        collection.alwaysBounceHorizontal = <span class="literal">true</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 5.设置 UICollectionView 的数据源对象  </span></div><div class="line">        collection.dataSource = <span class="keyword">self</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 6.设置 UICollectionView 的代理对象  </span></div><div class="line">        collection.delegate = <span class="keyword">self</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 7.设置 UICollectionView 的单元格点击(默认是 true)  </span></div><div class="line">        collection.allowsSelection = <span class="literal">true</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 8.设置 UICollectionView 的单元格多选(默认是 false)  </span></div><div class="line">        collection.allowsMultipleSelection = <span class="literal">false</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 9.开启 UICollectionView 的分页显示效果  </span></div><div class="line">        collection.pagingEnabled = <span class="literal">true</span>  </div><div class="line">  </div><div class="line">        <span class="comment">// 10.注册 UICollectionViewCell  </span></div><div class="line">collection.registerClass(<span class="type">UICollectionViewCell</span>.<span class="keyword">self</span>, forCellWithReuseIdentifier: <span class="string">"cell"</span>)  </div><div class="line">        <span class="comment">// 11.添加到 self.view 上  </span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(collection)  </div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="自定义UINavigationBar"><a href="#自定义UINavigationBar" class="headerlink" title="自定义UINavigationBar"></a>自定义UINavigationBar</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">myNavigationBar</span><span class="params">()</span></span> &#123;  </div><div class="line">    <span class="comment">// 1.自定义 NavigationBar, 设置它的位置大小  </span></div><div class="line">    <span class="keyword">var</span> navigationBar = <span class="type">UINavigationBar</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.width, <span class="number">64</span>))  </div><div class="line">    <span class="comment">// 2.设置 NavigationBar 的背景色  </span></div><div class="line">    navigationBar.backgroundColor = <span class="type">UIColor</span>.redColor()  </div><div class="line">    <span class="comment">// 3.自定义 NavigationItem 设定它的 Title  </span></div><div class="line">    <span class="keyword">let</span> navigationItem = <span class="type">UINavigationItem</span>(title: <span class="string">"UICollectionView演示"</span>)  </div><div class="line">    <span class="comment">// 4.自定义 UIBarButtonItem 的Title, Style, Target 的对象, 已经监听的方法  </span></div><div class="line">    <span class="keyword">let</span> leftButton = <span class="type">UIBarButtonItem</span>(title: <span class="string">"返回"</span>, style: <span class="type">UIBarButtonItemStyle</span>.<span class="type">Plain</span>, target: <span class="keyword">self</span>, action: <span class="string">"back"</span>)  </div><div class="line">    <span class="comment">// 5.设置 Navigation 左边的按钮为 leftButton  </span></div><div class="line">    navigationItem.leftBarButtonItem = leftButton  </div><div class="line">    <span class="comment">// 6.把 NavigationItem 添加到 NavigationBar  </span></div><div class="line">    navigationBar.pushNavigationItem(navigationItem, animated: <span class="literal">true</span>)  </div><div class="line">    <span class="comment">// 7.添加到到 self.view 上  </span></div><div class="line">    <span class="keyword">self</span>.view.addSubview(navigationBar)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 8.NavigationBar监听方法  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">back</span><span class="params">()</span></span> &#123;  </div><div class="line">    <span class="built_in">println</span>(<span class="string">"点击了返回"</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="UICollectionView的代理方法-数据源方法-FlowLayout-方法"><a href="#UICollectionView的代理方法-数据源方法-FlowLayout-方法" class="headerlink" title="UICollectionView的代理方法, 数据源方法, FlowLayout 方法"></a>UICollectionView的代理方法, 数据源方法, FlowLayout 方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 1.该方法是用来设置返回 CollectionViewCell 的组数  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInCollectionView</span><span class="params">(collectionView: UICollectionView)</span></span> -&gt; <span class="type">Int</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 2.该方法是用来设置返回 CollectionViewCell 的个数  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">15</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 3.该方法是用来设置 CollectionViewCell 的内容  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;  </div><div class="line">    <span class="keyword">var</span> collectionCell = collectionView.dequeueReusableCellWithReuseIdentifier(<span class="string">"cell"</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">UICollectionViewCell</span>  </div><div class="line">    collectionCell.backgroundColor = <span class="type">UIColor</span>.redColor()  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> collectionCell  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 4.该方法是点击了 CollectionViewCell 时调用的监听方法  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath)</span></span> &#123;  </div><div class="line">    <span class="built_in">println</span>(<span class="string">"aaa"</span>)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 5.该方法是用来设置 CollectionViewCell 的大小  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGSize</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="type">CGSizeMake</span>(<span class="number">90</span>, <span class="number">120</span>)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 6.该方法是用来设置 CollectionViewCell 四周的边距  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAtIndex section: Int)</span></span> -&gt; <span class="type">UIEdgeInsets</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="type">UIEdgeInsetsMake</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 7.该方法是用来设置同一行 CollectionViewCell 之间的间距  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAtIndex section: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">20</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 8.该方法是用来设置同一列 CollectionViewCell 之间的间距  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAtIndex section: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">20</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 9.该方法是用来设置 CollectionView 的页头尺寸  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int)</span></span> -&gt; <span class="type">CGSize</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="type">CGSizeMake</span>(<span class="number">100</span>, <span class="number">50</span>)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// 10.该方法是用来设置 CollectionView 的页尾尺寸  </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int)</span></span> -&gt; <span class="type">CGSize</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="type">CGSizeMake</span>(<span class="number">100</span>, <span class="number">50</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UICollectionView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UICollectionView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UICollectionView-简介</title>
      <link href="/2017/12/13/Swift/UIKit/UICollectionView-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<h1 id="UICollectionView的常用属性"><a href="#UICollectionView的常用属性" class="headerlink" title="UICollectionView的常用属性"></a>UICollectionView的常用属性</h1><blockquote><p>1.设置位置和大小  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">init</span>(frame: <span class="type">CGRect</span>, collectionViewLayout layout: <span class="type">UICollectionViewLayout</span>)</div></pre></td></tr></table></figure><blockquote><p>2.设置子视图的布局方式 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> collectionViewLayout: <span class="type">UICollectionViewLayout</span></div></pre></td></tr></table></figure><blockquote><p>3.设置UICollectionView的代理对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">unowned</span>(unsafe) <span class="keyword">var</span> delegate: <span class="type">UICollectionViewDelegate</span>?</div></pre></td></tr></table></figure><blockquote><p>4.设置UICollectionView的数据源对象  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">unowned</span>(unsafe) <span class="keyword">var</span> dataSource: <span class="type">UICollectionViewDataSource</span>?</div></pre></td></tr></table></figure><blockquote><p>5.设置UICollectionView的背景视图</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var backgroundView: UIView?</div></pre></td></tr></table></figure><blockquote><p>6.设置 UICollectionView 的 Cell 是否可以点击  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> allowsSelection: <span class="type">Bool</span></div></pre></td></tr></table></figure><blockquote><p>7.设置 UICollectionView 的 Cell 是否可以多选  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> allowsMultipleSelection: <span class="type">Bool</span></div></pre></td></tr></table></figure><h1 id="UICollectionViewCell显示的样式"><a href="#UICollectionViewCell显示的样式" class="headerlink" title="UICollectionViewCell显示的样式"></a>UICollectionViewCell显示的样式</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">UICollectionViewScrollPosition</span> : <span class="title">RawOptionSetType</span> </span>&#123;  </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> rawValue: <span class="type">UInt</span>)  </div><div class="line">    <span class="keyword">init</span>(rawValue: <span class="type">UInt</span>)  </div><div class="line">  </div><div class="line">    <span class="comment">// 1.没有样式  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">None</span>: <span class="type">UICollectionViewScrollPosition</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 2.垂直居中显示  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">CenteredVertically</span>: <span class="type">UICollectionViewScrollPosition</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 3.向下显示  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Bottom</span>: <span class="type">UICollectionViewScrollPosition</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 4.向左显示  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Left</span>: <span class="type">UICollectionViewScrollPosition</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 5.水平居中显示  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">CenteredHorizontally</span>: <span class="type">UICollectionViewScrollPosition</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 6.向右显示  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Right</span>: <span class="type">UICollectionViewScrollPosition</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="UICollectionView常用的方法"><a href="#UICollectionView常用的方法" class="headerlink" title="UICollectionView常用的方法"></a>UICollectionView常用的方法</h1><blockquote><p>1.设置UICollectionView的注册类, 以及标示符  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerClass</span><span class="params">(cellClass: AnyClass?, forCellWithReuseIdentifier identifier: String)</span></span></div></pre></td></tr></table></figure><blockquote><p>2.设置 UICollectionView的注册Nib, 以及标示符  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerNib</span><span class="params">(nib: UINib?, forCellWithReuseIdentifier identifier: String)</span></span></div></pre></td></tr></table></figure><blockquote><p>3.设置 UICollectionView 的注册类, 以及辅助视图名称, 标示符 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerClass</span><span class="params">(viewClass: AnyClass?, forSupplementaryViewOfKind elementKind: String, withReuseIdentifier identifier: String)</span></span></div></pre></td></tr></table></figure><blockquote><p>4.设置 UICollectionView的注册Nib, 以及辅助视图名称, 标示符  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerNib</span><span class="params">(nib: UINib?, forSupplementaryViewOfKind kind: String, withReuseIdentifier identifier: String)</span></span></div></pre></td></tr></table></figure><blockquote><p>5.设置 UICollectionView 可重用的 Cell 以及所以路径</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dequeueReusableCellWithReuseIdentifier</span><span class="params">(identifier: String, forIndexPath indexPath: NSIndexPath!)</span></span> -&gt; <span class="type">AnyObject</span></div></pre></td></tr></table></figure><blockquote><p>6.设置 UICollectionView 可重用的的辅视图, 标示符, 以及索引路径</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dequeueReusableSupplementaryViewOfKind</span><span class="params">(elementKind: String, withReuseIdentifier identifier: String, forIndexPath indexPath: NSIndexPath!)</span></span> -&gt; <span class="type">AnyObject</span></div></pre></td></tr></table></figure><blockquote><p>7.选择 Item 的索引路径  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexPathsForSelectedItems</span><span class="params">()</span></span> -&gt; [<span class="type">AnyObject</span>]</div></pre></td></tr></table></figure><blockquote><p>8.选择 Item 的索引路径, 以及是否使用动画, 显示样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectItemAtIndexPath</span><span class="params">(indexPath: NSIndexPath?, animated: Bool, scrollPosition: UICollectionViewScrollPosition)</span></span></div></pre></td></tr></table></figure><blockquote><p>9.取消选择 Item 的索引路径, 以及是否使用动画 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deselectItemAtIndexPath</span><span class="params">(indexPath: NSIndexPath?, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>10.刷新数据  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadData</span><span class="params">()</span></span></div></pre></td></tr></table></figure><blockquote><p>11.设置 UICollectionView 的集合视图布局, 及是否使用动画 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setCollectionViewLayout</span><span class="params">(layout: UICollectionViewLayout, </span></span></div><div class="line"><span class="function"><span class="params">                           animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>12.设置 UICollectionView 的集合视图布局, 及是否使用动画, 以及完成之后的闭包方法 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setCollectionViewLayout</span><span class="params">(layout: UICollectionViewLayout,</span></span></div><div class="line"><span class="function"><span class="params">                           animated: Bool, </span></span></div><div class="line"><span class="function"><span class="params">                         completion: <span class="params">(<span class="params">(Bool)</span></span></span></span> -&gt; <span class="type">Void</span>)!)</div></pre></td></tr></table></figure><blockquote><p>13.设置 UICollectionView 显示多少个 Item  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>14.设置 UICollectionView 显示多少组 Item  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfItemsInSection</span><span class="params">(section: Int)</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>15.设置 UICollectionView 滚动到第几个 Item 的索引路径, 以及显示样式和是否启用动画 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollToItemAtIndexPath</span><span class="params">(indexPath: NSIndexPath, atScrollPosition scrollPosition: UICollectionViewScrollPosition, animated: Bool)</span></span></div></pre></td></tr></table></figure><blockquote><p>16.在 UICollectionView 中插入某个 Item </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSections</span><span class="params">(sections: NSIndexSet)</span></span></div></pre></td></tr></table></figure><blockquote><p>17.在 UICollectionView 中删除某个 Item </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteSections</span><span class="params">(sections: NSIndexSet)</span></span></div></pre></td></tr></table></figure><blockquote><p>18.在 UICollectionView 中刷新某个 Item  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadSections</span><span class="params">(sections: NSIndexSet)</span></span></div></pre></td></tr></table></figure><blockquote><p>19.移动 UICollectionView 中某个 Item 到某个位置  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveSection</span><span class="params">(section: Int, toSection newSection: Int)</span></span></div></pre></td></tr></table></figure><h1 id="UICollectionView代理方法"><a href="#UICollectionView代理方法" class="headerlink" title="UICollectionView代理方法"></a>UICollectionView代理方法</h1><blockquote><p>1.点击 Item 时调用的方法  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath)</span></span></div></pre></td></tr></table></figure><blockquote><p>2.取消选中 Item 时调用的方法  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, didDeselectItemAtIndexPath indexPath: NSIndexPath)</span></span></div></pre></td></tr></table></figure><h1 id="UICollectionView数据源方法"><a href="#UICollectionView数据源方法" class="headerlink" title="UICollectionView数据源方法"></a>UICollectionView数据源方法</h1><blockquote><p>1.设置UICollectionView有多少个Item </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><blockquote><p>2.设置 UICollectionViewCell 所显示的内容, 以及索引路径</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span></div></pre></td></tr></table></figure><blockquote><p>3.设置 UICollectionView 有多少组 Cell  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInCollectionView</span><span class="params">(collectionView: UICollectionView)</span></span> -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure><h1 id="UICollectionView的集视图布局方法"><a href="#UICollectionView的集视图布局方法" class="headerlink" title="UICollectionView的集视图布局方法"></a>UICollectionView的集视图布局方法</h1><blockquote><p>1.该方法是用来设置 UICollectionView 的 Item 尺寸大小 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGSize</span></div></pre></td></tr></table></figure><blockquote><p>2.该方法是用来设置 UICollectionView 的 Item 四周的边界 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, </span></span></div><div class="line"><span class="function"><span class="params">                layout collectionViewLayout: UICollectionViewLayout,</span></span></div><div class="line"><span class="function"><span class="params">             insetForSectionAtIndex section: Int)</span></span> -&gt; <span class="type">UIEdgeInsets</span></div></pre></td></tr></table></figure><blockquote><p>3.该方法是用来设置 UICollectionView 的 Item 上下之间的最小间距<br>如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, </span></span></div><div class="line"><span class="function"><span class="params">                layout collectionViewLayout: UICollectionViewLayout, </span></span></div><div class="line"><span class="function"><span class="params">minimumLineSpacingForSectionAtIndex section: Int)</span></span> -&gt; <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>4.该方法是用来设置 UICollectionView 的 Item 左右之间的最小间距(如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView,</span></span></div><div class="line"><span class="function"><span class="params">                layout collectionViewLayout: UICollectionViewLayout, </span></span></div><div class="line"><span class="function"><span class="params">                minimumInteritemSpacingForSectionAtIndex section: Int)</span></span> -&gt; <span class="type">CGFloat</span></div></pre></td></tr></table></figure><blockquote><p>5.该方法是用来设置 UICollectionView 的页头尺寸<br>如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, </span></span></div><div class="line"><span class="function"><span class="params">                layout collectionViewLayout: UICollectionViewLayout,</span></span></div><div class="line"><span class="function"><span class="params">    referenceSizeForHeaderInSection section: Int)</span></span> -&gt; <span class="type">CGSize</span></div></pre></td></tr></table></figure><blockquote><p>6.该方法是用来设置 UIcollectionView 的页尾尺寸(如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性) </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int)</span></span> -&gt; <span class="type">CGSize</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UICollectionView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UICollectionView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Network-AFNetworking-网络请求</title>
      <link href="/2017/12/13/Swift/Network/Swift-Network-AFNetworking-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <content type="html"><![CDATA[<h1 id="创建数据请求类"><a href="#创建数据请求类" class="headerlink" title="创建数据请求类"></a>创建数据请求类</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">import</span> UIKit  </div><div class="line"><span class="keyword">import</span> AFNetworking  </div><div class="line"><span class="comment">//请求方法  </span></div><div class="line"><span class="comment">/// - GET:  get  </span></div><div class="line"><span class="comment">/// - POST: post  </span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RequsetMethod</span>:<span class="title">String</span> </span>&#123;  </div><div class="line">    <span class="keyword">case</span> <span class="type">GET</span> = <span class="string">"GET"</span>  </div><div class="line">    <span class="keyword">case</span> <span class="type">POST</span> =  <span class="string">"POST"</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SPFNetWorkManager</span>: <span class="title">AFHTTPSessionManager</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="comment">//单例  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedTools:<span class="type">SPFNetWorkManager</span> = &#123;  </div><div class="line">        <span class="keyword">let</span> instance = <span class="type">SPFNetWorkManager</span>()  </div><div class="line">        instance.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/html"</span>)  </div><div class="line">        instance.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/plain"</span>)  </div><div class="line">        <span class="keyword">return</span> instance  </div><div class="line">    &#125;()  </div><div class="line">    <span class="comment">// 定义请求完成的回调的别名  </span></div><div class="line">    <span class="keyword">typealias</span> httptoolBack = (response:<span class="type">AnyObject</span>?,error:<span class="type">NSError</span>?)-&gt;()  </div><div class="line">      </div><div class="line">    <span class="comment">/// 请求数据  </span></div><div class="line">    <span class="comment">///  </span></div><div class="line">    <span class="comment">/// - parameter urlString:  请求地址  </span></div><div class="line">    <span class="comment">/// - parameter parameters: 请求参数  </span></div><div class="line">    <span class="comment">/// - parameter finished:   请求成功或者失败的回调  </span></div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(method: RequsetMethod = .GET, urlString: String, parameters: AnyObject?, finished:httptoolBack)</span></span>&#123;  </div><div class="line">          </div><div class="line">          </div><div class="line">        <span class="comment">// 定义请求成功的闭包  </span></div><div class="line">        <span class="keyword">let</span> success = &#123; (dataTask: <span class="type">NSURLSessionDataTask</span>, responseObject: <span class="type">AnyObject</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  </div><div class="line">            finished(response: responseObject, error: <span class="literal">nil</span>)  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="comment">// 定义请求失败的闭包  </span></div><div class="line">        <span class="keyword">let</span> failure = &#123; (dataTask: <span class="type">NSURLSessionDataTask</span>?, error: <span class="type">NSError</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  </div><div class="line">            finished(response: <span class="literal">nil</span>, error: error)  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> method == .<span class="type">GET</span> &#123;  </div><div class="line">              </div><div class="line">            <span class="type">GET</span>(urlString, parameters: parameters, progress: <span class="literal">nil</span>, success: success, failure: failure)  </div><div class="line">        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">            <span class="type">POST</span>(urlString, parameters: parameters, progress: <span class="literal">nil</span>, success: success, failure: failure)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">      </div><div class="line">      </div><div class="line">      </div><div class="line">    <span class="comment">/// 发送请求(上传文件)  </span></div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestWithData</span><span class="params">(data: NSData, name: String, urlString: String, parameters: AnyObject?, finished:httptoolBack)</span></span> &#123;  </div><div class="line">        <span class="comment">// 定义请求成功的闭包  </span></div><div class="line">        <span class="keyword">let</span> success = &#123; (dataTask: <span class="type">NSURLSessionDataTask</span>, responseObject: <span class="type">AnyObject</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  </div><div class="line">            finished(response: responseObject, error: <span class="literal">nil</span>)  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="comment">// 定义请求失败的闭包  </span></div><div class="line">        <span class="keyword">let</span> failure = &#123; (dataTask: <span class="type">NSURLSessionDataTask</span>?, error: <span class="type">NSError</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  </div><div class="line">            finished(response: <span class="literal">nil</span>, error: error)  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="type">POST</span>(urlString, parameters: parameters, constructingBodyWithBlock: &#123; (formData) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  </div><div class="line">            formData.appendPartWithFileData(data, name: name, fileName: <span class="string">"aa"</span>, mimeType: <span class="string">"application/octet-stream"</span>)  </div><div class="line">            &#125;, progress: <span class="literal">nil</span>, success: success, failure: failure)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> urlString = <span class="string">"http://192.168.3.7:8080/FreshFun/homepage.do"</span>  </div><div class="line">       <span class="comment">//创建httpTool 实例  </span></div><div class="line">       <span class="keyword">let</span> <span class="type">HttpRequest</span> = <span class="type">SPFNetWorkManager</span>.sharedTools  </div><div class="line">       </div><div class="line">       <span class="comment">//发送GET请求  </span></div><div class="line">       <span class="type">HttpRequest</span>.request(<span class="type">RequsetMethod</span>.<span class="type">GET</span>, urlString: urlString, parameters:<span class="literal">nil</span> ) &#123; (response, error) <span class="keyword">in</span>  </div><div class="line">           <span class="built_in">print</span>(response)  </div><div class="line">       &#125;</div></pre></td></tr></table></figure><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Optional</span>(&#123;  </div><div class="line">           goodsMoney = <span class="string">"22.00"</span>;  </div><div class="line">           <span class="string">"goods_des"</span> = <span class="string">"\U9999\U8549\U8089333"</span>;  </div><div class="line">           <span class="string">"goods_img"</span> = <span class="string">"/image/2016/9/8/1473340021432.png"</span>;  </div><div class="line">           <span class="string">"goods_name"</span> = <span class="type">BananaMeat</span>;  </div><div class="line">           id = <span class="number">4</span>;  </div><div class="line">           marketMoney = <span class="string">"31.43"</span>;  </div><div class="line">       &#125;）</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Network </category>
          
          <category> AFNetworking </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Lib-SnapKit-自动布局</title>
      <link href="/2017/12/13/Swift/Lib/SnapKit-%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2bad53a2a180" target="_blank" rel="external">https://www.jianshu.com/p/2bad53a2a180</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Lib </category>
          
          <category> SnapKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Lib-Kingfisher-图片加载库</title>
      <link href="/2017/12/13/Swift/Lib/Kingfisher-%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/djh996064549/article/details/71085679" target="_blank" rel="external">http://blog.csdn.net/djh996064549/article/details/71085679</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Lib </category>
          
          <category> Kingfisher </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Lib-SSKeychain-数据本地化方式之一</title>
      <link href="/2017/12/13/OC/Lib/OC-Lib-SSKeychain-%E6%95%B0%E6%8D%AE%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%96%B9%E5%BC%8F%E4%B9%8B%E4%B8%80/"/>
      <content type="html"><![CDATA[<h1 id="keychain与userdefaults"><a href="#keychain与userdefaults" class="headerlink" title="keychain与userdefaults"></a>keychain与userdefaults</h1><blockquote><p>keychain</p></blockquote><ul><li>将数据加密后存储在本地,更安全.路径:Library/Application Support/iPhone Simulator/模拟器版本/Library/Keychains/</li><li>当你删除APP后,keychain存储的数据不会删除 </li></ul><blockquote><p>userdefaults</p></blockquote><ul><li>数据以明文的形式保存在.plist文件中.路径:Library/Application Support/iPhone Simulator/模拟器版本/Applications/应用对应的数字/Library/Preference/.plist文件<ul><li>当你删除APP后,user defaults存储的数据会随着APP而删掉</li></ul></li></ul><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><blockquote><p>导入</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod &apos;SSKeychain&apos;</div></pre></td></tr></table></figure><blockquote><p>实现</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;SSKeychain.h&gt;</div><div class="line">#import &lt;SSKeychainQuery.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">//应用名称(保证唯一性)</div><div class="line">#define ServiceName @&quot;com.zx.tec.SSKeychainTest&quot;</div><div class="line">//账号</div><div class="line">#define Account @&quot;test2&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line"></div><div class="line">    [superviewDidLoad];</div><div class="line"></div><div class="line">    /**</div><div class="line"></div><div class="line">     *  SSKeychain 是一种本地存储方式不会因为程序卸载而清除 用于存储私密 及唯一 的标示</div><div class="line">     *</div><div class="line">     *  五个方法:(用到两个)</div><div class="line">     *  + (NSArray *)allAccounts;</div><div class="line">     *  + (NSArray *)accountsForService:(NSString *)serviceName;</div><div class="line">     *  + (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;</div><div class="line">     *  + (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account;</div><div class="line">     *  + (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;</div><div class="line">     */</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">#pragma mark - 开始使用 SSKeychain</div><div class="line">    //获取uuid(如果想获取唯一标示,存储以 uuid为密码存储 下次登陆直接读取检测是否安装)</div><div class="line">    //CFUUIDRef uuid = CFUUIDCreate(NULL);</div><div class="line">    //assert(uuid != NULL);</div><div class="line">    //CFStringRef uuidStr = CFUUIDCreateString(NULL, uuid);</div><div class="line">    // NSLog(@&quot;%@~~%@&quot;, uuidStr, [NSString stringWithFormat:@&quot;%@&quot;, uuidStr]);</div><div class="line">    /**</div><div class="line">     *  + (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;//获取指定 serviceName和 account 的密码</div><div class="line">     *</div><div class="line">     *  + (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;//存储指定 serviceName和 account 的密码</div><div class="line">     *</div><div class="line">     */</div><div class="line"></div><div class="line">    NSString *passWord = @&quot;123456&quot;;</div><div class="line">    if (![SSKeychainpasswordForService:ServiceNameaccount:Account]) &#123;//查看本地是否存储指定 serviceName和 account 的密码</div><div class="line">        //如果没设置密码则设定密码 并存储</div><div class="line">        [SSKeychainsetPassword:passWord forService:ServiceNameaccount:Account];</div><div class="line">        //打印密码信息</div><div class="line">        NSString *retrieveuuid = [SSKeychainpasswordForService:ServiceNameaccount:Account];</div><div class="line">        NSLog(@&quot;SSKeychain存储显示:未安装过:%@&quot;, retrieveuuid);</div><div class="line">    &#125;else&#123;</div><div class="line">        //曾经安装过则直接能打印出密码信息(即使删除了程序再次安装也会打印密码信息) 区别于 NSUSerDefault</div><div class="line">        NSString *retrieveuuid = [SSKeychainpasswordForService:ServiceNameaccount:Account];</div><div class="line">        NSLog(@&quot;SSKeychain存储显示 :已安装过:%@&quot;, retrieveuuid);</div><div class="line">    &#125;</div><div class="line">#warning 区别于 NSUSerDefault (删除应用程序后存储的数据就会消失)</div><div class="line">    if (![[NSUserDefaultsstandardUserDefaults]boolForKey:@&quot;TestOne&quot;]) &#123;</div><div class="line">        [[NSUserDefaultsstandardUserDefaults]setBool:YESforKey:@&quot;TestOne&quot;];</div><div class="line">        NSLog(@&quot;NSUSerDefault存储显示:未安装&quot;);</div><div class="line">    &#125;else&#123;</div><div class="line">        NSLog(@&quot;NSUSerDefault存储显示:安装过&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Lib </category>
          
          <category> SSKeychain </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Func-Symbolicatecrash分析Crash文件</title>
      <link href="/2017/12/12/OC/Func/iOS-Func-Symbolicatecrash%E5%88%86%E6%9E%90crash%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<h1 id="没有集成发送崩溃报告功能"><a href="#没有集成发送崩溃报告功能" class="headerlink" title="没有集成发送崩溃报告功能"></a>没有集成发送崩溃报告功能</h1><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><blockquote><p>所有崩溃记录都会记录在设备上，没有集成让用户发送崩溃报告功能的i，要获得crash文件就必须先连上崩溃过的机器</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">打开Xcode---&gt;选择Window -&gt; Devices，选择你自己的机器，然后点击View Device Logs，打开小窗口，这是机器上至目前为止存的所有app的崩溃信息了</div><div class="line">如果是好久没看过这个信息，打开后还要读取好久才能完全读完，总之，找到你的app最后一次崩溃记录，右键导出</div></pre></td></tr></table></figure><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Symbolicatecrash%E5%88%86%E6%9E%90crash%E6%96%87%E4%BB%B6-001.png" alt="001"></p><blockquote><p>导出来的.crash文件，上半部分都是一些基本信息（基本没用），重点看下崩溃部分的记录</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Symbolicatecrash%E5%88%86%E6%9E%90crash%E6%96%87%E4%BB%B6-002.png" alt="002"></p><blockquote><p>找到你上次发布的ipa（如果实在没有了就再从Archives里导出来一个，但一定要保证是你上次发布用的那个），右键 -&gt; 打开方式 -&gt; 归档实用工具(就是解压缩)，然后把Payload文件夹下的.app文件也扔到刚刚的crash文件夹里<br>接下来还需要dSYM文件，还是在Archives里，找到发布用的那个，右键Show in Finder</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Symbolicatecrash%E5%88%86%E6%9E%90crash%E6%96%87%E4%BB%B6-003.png" alt="003"></p><blockquote><p>然后对文件夹中的这个.xcarchive文件右键，显示包内容，就可以看到一个名为dSYMs的文件夹，把里面的.dSYM文件拷出来，还是放到桌面的crash文件夹里</p></blockquote><h2 id="symbolicatecrash是一个隐藏工具"><a href="#symbolicatecrash是一个隐藏工具" class="headerlink" title="symbolicatecrash是一个隐藏工具"></a>symbolicatecrash是一个隐藏工具</h2><blockquote><p>/Applications/Xcode8.1.app/Contents/SharedFrameworks/DTDeviceKitBase.framework/Versions/A/Resources/symbolicatecrash</p><p>终端中输入命令搜索：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ find /Applications/Xcode8.1.app -name symbolicatecrash -type f</div></pre></td></tr></table></figure><ul><li>这个路径拷贝一下，然后粘到Finder的“前往文件夹”下，前往，就可以看到symbolicatecrash工具了，现在把它也拷到桌面的crash文件夹里。至此，crash文件夹里现在有4个文件了，分别是.app, .crash, .dSYM, symbolicatecrash。接下来就是用终端敲命令，生成更易分析的crash</li></ul><blockquote><p>首先用cd命令进入到crash文件夹下，然后输入以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./symbolicatecrash /Users/xxxx/Desktop/crash/InOrder.crash /Users/xxxx/Desktop/crash/InOrder.app.dSYM &gt; Control_symbol.crash</div></pre></td></tr></table></figure><blockquote><p>上述命令中，”xxxx”和”InOrder”请自行替换成对应的名称。运行，这时候终端可能会报错Error: “DEVELOPER_DIR” is not defined at /usr/local/bin/symbolicatecrash line 53. 这时候在终端中再输入如下（Xcode6.1.app依然是要替换成实际名称）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ export DEVELOPER_DIR=&quot;/Applications/Xcode8.1.app/Contents/Developer&quot;</div></pre></td></tr></table></figure><blockquote><p>然后再跑一下刚刚的那个命令，这时候看一下桌面的crash文件夹下就会多出一个名为“Control_symbol.crash”的文件，这就是可定位问题的crash文件了，我们打开看一下</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Symbolicatecrash%E5%88%86%E6%9E%90crash%E6%96%87%E4%BB%B6-004.png" alt="004"></p><blockquote><p>现在红框里原来的那些乱七八糟的东西已经“翻译”成了崩溃在具体的哪一个.m文件的哪一行。下面就是进行合理的猜想和调试了，比如我的崩溃就是因为这个第三方时间选择控件使用截取字符串的形式来获得时间，像09:23 PM就被固定的拆成了时、分、上下午标识3段，结果用户使用24小时制的时候，时间就成了21:23，没了上下午标识，array[2]超出下标妥妥的闪退。想想我脑洞也是蛮大的，这种问题原因都被猜到了</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Symbolicatecrash </tag>
            
            <tag> Crash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-AccessControl-open</title>
      <link href="/2017/12/11/Swift/Grammar/AccessControl-open/"/>
      <content type="html"><![CDATA[<h1 id="open"><a href="#open" class="headerlink" title="open"></a>open</h1><blockquote><p>open弥补public语义上的不足</p></blockquote><h1 id="pubic"><a href="#pubic" class="headerlink" title="pubic"></a>pubic</h1><blockquote><p>现在的pubic有两层含义：</p></blockquote><ul><li>①这个元素可以在其他作用域被访问</li><li>②这个元素可以在其他作用域被继承或者override</li></ul><h1 id="继承问题"><a href="#继承问题" class="headerlink" title="继承问题"></a>继承问题</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>继承是一件危险的事情<br>尤其对于一个framework或者module的设计者而言<br>在自身的module内，类或者属性对于作者而言是清晰的，能否被继承或者override都是可控的,但是对于使用它的人，有时会希望传达出这个类或者属性不应该被继承或者修改,这个对应的就是 final </p></blockquote><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><blockquote><p>问题在于在标记之后，在任何地方都不能override<br>而对于lib的设计者而言，希望得到的是在module内可以被override<br>在被import到其他地方后其他用户使用的时候不能被override</p><p>这就是open产生的初衷<br>通过open和public标记区别一个元素在其他module中是只能被访问还是可以被override</p></blockquote><p>##举例分析 ModuleA</p><blockquote><p>这个类在ModuleA的范围外是不能被继承的，只能被访问</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonSubclassableParentClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">    <span class="comment">// 这是错误的写法，因为class已经不能被继承</span></div><div class="line">    <span class="comment">// 所以他的方法的访问权限不能大于类的访问权限</span></div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// final的含义保持不变</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">baz</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 在ModuleA的范围外可以被继承</span></div><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SubclassableParentClass</span> </span>&#123;</div><div class="line">    <span class="comment">// 这个属性在ModuleA的范围外不能被override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> size : <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="comment">// 这个方法在ModuleA的范围外不能被override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 这个方法在任何地方都可以被override</span></div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">///final的含义保持不变</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">baz</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// final的含义保持不变</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">/// ModuleB:</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> ModuleA</div><div class="line"></div><div class="line"><span class="comment">// 这个写法是错误的，编译会失败</span></div><div class="line"><span class="comment">// 因为NonSubclassableParentClass类访问权限标记的是public，只能被访问不能被继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubclassA</span> : <span class="title">NonSubclassableParentClass</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">// 这样写法可以通过，因为SubclassableParentClass访问权限为 `open`.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubclassB</span> : <span class="title">SubclassableParentClass</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="comment">// 这样写也会编译失败</span></div><div class="line">    <span class="comment">// 因为这个方法在SubclassableParentClass 中的权限为public，不是`open'.</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 这个方法因为在SubclassableParentClass中标记为open，所以可以这样写</span></div><div class="line">    <span class="comment">// 这里不需要再声明为open，因为这个类是internal的</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SubclassC</span> : <span class="title">SubclassableParentClass</span> </span>&#123;</div><div class="line">    <span class="comment">// 这种写法会编译失败，因为这个类已经标记为open</span></div><div class="line">    <span class="comment">// 这个方法override是一个open的方法，则也需要表明访问权限</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123; &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SubclassD</span> : <span class="title">SubclassableParentClass</span> </span>&#123;</div><div class="line">    <span class="comment">// 正确的写法，方法也需要标记为open</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123; &#125;    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SubclassE</span> : <span class="title">SubclassableParentClass</span> </span>&#123;</div><div class="line">    <span class="comment">// 也可以显式的指出这个方法不能在被override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123; &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> AccessControl </tag>
            
            <tag> open </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-AccessControl-private/filePrivate访问控制-私有</title>
      <link href="/2017/12/11/Swift/Grammar/AccessControl-private:filePrivate/"/>
      <content type="html"><![CDATA[<h1 id="private"><a href="#private" class="headerlink" title="private"></a>private</h1><blockquote><p>在原有的swift中的private 并非真正的私有<br>一个变量定义为private，在同一个文件中的其他类依然是可以访问到的<br>在使用extension的时候很明显</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name = <span class="string">"private"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">User</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> accessPrivate: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>带来了两个问题：</p></blockquote><ul><li>标记为private时，意为真的私有还是文件内可共享</li><li>如果意图为真正的私有时，必须保证这个类或者结构体在一个单独的文件里。否则可能同文件里其他的代码访问到</li></ul><h1 id="fileprivate"><a href="#fileprivate" class="headerlink" title="fileprivate"></a>fileprivate</h1><blockquote><p>在swift 3中，新增加 fileprivate 来显式的表明，这个元素的访问权限为 <strong>文件内私有</strong></p></blockquote><ul><li>过去的private对应现在的fileprivate</li><li>现在的private则是真正的私有，离开了这个<strong>类</strong>或者<strong>结构体</strong>的作用域外面就无法访问</li></ul>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> AccessControl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> AccessControl </tag>
            
            <tag> fileprivate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-RequiredInit必要初始化器</title>
      <link href="/2017/12/11/Swift/Grammar/RequiredInit%E5%BF%85%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8/"/>
      <content type="html"><![CDATA[<h1 id="必要初始化器"><a href="#必要初始化器" class="headerlink" title="必要初始化器"></a>必要初始化器</h1><blockquote><p>重写类的时候经常提示要添加代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">       <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><blockquote><p>必要初始化器，这种情况一般会出现在继承了遵守NSCoding protocol的类，比如UIView系列的类、UIViewController系列的类</p></blockquote><h2 id="为什么一定要添加"><a href="#为什么一定要添加" class="headerlink" title="为什么一定要添加"></a>为什么一定要添加</h2><blockquote><p>这是NSCoding protocol定义的，遵守了NSCoding protoaol的所有类必须继承<br>只是有的情况会隐式继承，而有的情况下需要显示实现</p></blockquote><h2 id="什么情况下要显示添加："><a href="#什么情况下要显示添加：" class="headerlink" title="什么情况下要显示添加："></a>什么情况下要显示添加：</h2><blockquote><p>当我们在子类定义了指定初始化器(包括自定义和重写父类指定初始化器)，那么必须显示实现required init?(coder aDecoder: NSCoder)，而其他情况下则会隐式继承，可不用理会。</p></blockquote><h2 id="什么情况下会调用："><a href="#什么情况下会调用：" class="headerlink" title="什么情况下会调用："></a>什么情况下会调用：</h2><blockquote><p>当使用storyboard实现界面的时候，程序会调用这个初始化器。<br>注意要去掉fatalError，fatalError的意思是无条件停止执行并打印。<br>在obj-c中可以通过下面代码实现</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSException</span> *exception = [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"HotTeaException"</span> </div><div class="line">                                                 reason:<span class="string">@"The tea is too hot"</span> </div><div class="line">                                               userInfo:<span class="literal">nil</span>];</div><div class="line"> <span class="keyword">@throw</span> exception;</div></pre></td></tr></table></figure><h1 id="举例分析"><a href="#举例分析" class="headerlink" title="举例分析"></a>举例分析</h1><h2 id="普通子类"><a href="#普通子类" class="headerlink" title="普通子类"></a>普通子类</h2><blockquote><p>通常情况下，一说到required修饰符，最先想到的应该就是普通类（class）的init()方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> str:<span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.str = str</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="定义一个MyClass的子类（subclass）并实例化这个子类"><a href="#定义一个MyClass的子类（subclass）并实例化这个子类" class="headerlink" title="定义一个MyClass的子类（subclass）并实例化这个子类"></a>定义一个MyClass的子类（subclass）并实例化这个子类</h2><blockquote><p>在实例化MySubClass时，其实是继承了它父类MyClass的init()方法<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>:<span class="title">MyClass</span> </span>&#123;</div><div class="line"> &#125;</div><div class="line"><span class="keyword">var</span> <span class="type">MySubClass</span>(str:<span class="string">"Hello Swift"</span>)</div></pre></td></tr></table></figure></p></blockquote><h2 id="子类的初始化方法"><a href="#子类的初始化方法" class="headerlink" title="子类的初始化方法"></a>子类的初始化方法</h2><blockquote><p>子类中添加一个init()方法<br>在init()方法前加上override修饰符，表示MySubClass重写了其父类的init()方法，然后还要调用父类的init()方法，并将参数一并传给父类的方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>:<span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str:str)</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> <span class="type">MySubClass</span>(str:<span class="string">"Hello Swift"</span></div></pre></td></tr></table></figure><blockquote><p>当子类的初始化方法参数类型与父类的初始化方法参数类型不同时，我们就不必在子类的初始化方法前加override修饰符了，但是要把子类初始化方法的参数类型转换为符合父类初始化方法的参数类型，然后传给父类的初始化方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> lass <span class="type">MyClass</span> &#123;</div><div class="line">    <span class="keyword">var</span> str:<span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.str = str</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>:<span class="title">MyClass</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">init</span>(i:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str:<span class="type">String</span>(i))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">MySubClass</span>(i: <span class="number">10</span>)</div></pre></td></tr></table></figure><h2 id="给父类的init-方法加上required修饰符"><a href="#给父类的init-方法加上required修饰符" class="headerlink" title="给父类的init()方法加上required修饰符"></a>给父类的init()方法加上required修饰符</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> str:<span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.str = str</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>:<span class="title">MyClass</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">init</span>(i:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str:<span class="type">String</span>(i))</div><div class="line">    &#125;</div><div class="line">     <span class="comment">// 编译错误</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">MySubClass</span>(i: <span class="number">10</span>)</div></pre></td></tr></table></figure><blockquote><p>因为我们没有实现父类中要去必须要实现的方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> str:<span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.str = str</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>:<span class="title">MyClass</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str: str)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(i:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str:<span class="type">String</span>(i))</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">MySubClass</span>(i: <span class="number">10</span>)</div></pre></td></tr></table></figure><blockquote><p>子类需要添加异于父类的初始化方法时，必须先要实现父类中使用required修饰符修饰过的初始化方法，并且也要使用required修饰符而不是override<br>如果子类中不需要添加任何初始化方法，我们则可以忽略父类的required初始化方法：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> str:<span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(str:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.str = str</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>:<span class="title">MyClass</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//编译器不会报错，因为如果子类没有任何初始化方法时，Swift会默认使用父类的初始化方法You do not have to provide an explicit implementation of a required initializer if you can satisfy the requirement with an inherited initialiser.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">MySubClass</span>(str: <span class="string">"hello swift"</span>)</div></pre></td></tr></table></figure><h1 id="required修饰符的使用规则"><a href="#required修饰符的使用规则" class="headerlink" title="required修饰符的使用规则"></a>required修饰符的使用规则</h1><ul><li>required修饰符只能用于修饰类初始化方法</li><li>当子类含有异于父类的初始化方法时（初始化方法参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override</li><li>当子类没有初始化方法时，可以不用实现父类的required初始化方法</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote><p>如果代码实现界面，那么我们只要根据编译器提示添加必要初始化器后，就不用理会，我们创建界面的工作可以在自定义的初始化器里实现。</p><p>补充：let vc = UIViewController()方式初始化类<br>UIViewController类视乎只有两个初始化器，一个是必要初始化器init?(coder aDecoder: NSCoder)，一个是指定初始化器init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?)，那么为什么我们可以用let vc = UIViewController()这种方式初始化类呢？原因可能是这个初始化方式是来自uikit,也就是调用了Object-c下的UIViewController初始化方法，是object-c bridge过来的</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> RequiredInit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> RequiredInit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-4.0更新</title>
      <link href="/2017/12/11/Swift/Grammar/4-0%E6%9B%B4%E6%96%B0/"/>
      <content type="html"><![CDATA[<h1 id="用系统方法setValuesForKeys-赋值问题-swift4"><a href="#用系统方法setValuesForKeys-赋值问题-swift4" class="headerlink" title="用系统方法setValuesForKeys()赋值问题 (swift4)"></a>用系统方法setValuesForKeys()赋值问题 (swift4)</h1><blockquote><p>在swift3中，编译器自动推断@objc，换句话说，它自动添加@objc<br>在swift4中，编译器不再自动推断，你必须显式添加@objc</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="meta">@objc</span> <span class="keyword">var</span> content = <span class="string">""</span></div><div class="line">swift <span class="number">4.0</span> 版本要在前面加<span class="meta">@objc</span></div></pre></td></tr></table></figure><blockquote><p>还有一种更简单的方法，不必一个一个属性的添加,下面这种写法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="meta">@objc</span>Members</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="setValuesForKeys-奔溃-swift4"><a href="#setValuesForKeys-奔溃-swift4" class="headerlink" title="setValuesForKeys()奔溃(swift4)"></a>setValuesForKeys()奔溃(swift4)</h1><blockquote><p>@objc解决了单个属性的问题，一个属性的值是数组字典，用setValuesForKeys()  程序奔溃，xcode9.0.1提示如下 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">[__NSCFConstantString <span class="built_in">count</span>]: unrecognized selector sent to instance <span class="number">0x102cb3290</span></div></pre></td></tr></table></figure><blockquote><p>造成崩溃是因为该字段如果为空 用了空串来占位，造成数据类型不一致而崩溃。这个在swift3中没有问题 </p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> Swift4.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift4.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Guard-关键字/守护</title>
      <link href="/2017/12/11/Swift/Grammar/%E5%85%B3%E9%94%AE%E5%AD%97-Guard-%E5%AE%88%E6%8A%A4/"/>
      <content type="html"><![CDATA[<h1 id="guard语句"><a href="#guard语句" class="headerlink" title="guard语句"></a>guard语句</h1><blockquote><p>guard语句判断其后的表达式布尔值为false时，才会执行之后代码块里的代码，如果为true，则跳过整个guard语句<br>guard语句只会有一个代码块，if语句可以if else多个代码块<br>类似  OC里的Continue</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">checkup</span><span class="params">(person: [String: String!])</span></span> &#123;</div><div class="line">   </div><div class="line">    <span class="comment">// 检查身份证，如果身份证没带，则不能进入考场</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> id = person[<span class="string">"id"</span>] <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有身份证，不能进入考场!"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">// 检查准考证，如果准考证没带，则不能进入考场</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> examNumber = person[<span class="string">"examNumber"</span>] <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有准考证，不能进入考场!"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">// 身份证和准考证齐全，方可进入考场</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"您的身份证号为:\(id)，准考证号为:\(examNumber)。请进入考场!"</span>)</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line">checkup([<span class="string">"id"</span>: <span class="string">"123456"</span>]) <span class="comment">// 没有准考证，不能进入考场!</span></div><div class="line">checkup([<span class="string">"examNumber"</span>: <span class="string">"654321"</span>]) <span class="comment">// 没有身份证，不能进入考场!</span></div><div class="line">checkup([<span class="string">"id"</span>: <span class="string">"123456"</span>, <span class="string">"examNumber"</span>: <span class="string">"654321"</span>]) <span class="comment">// 您的身份证号为:123456，准考证号为:654321。请进入考场!</span></div></pre></td></tr></table></figure><blockquote><p>上述代码中的第一个guard语句用于检查身份证，如果检查到身份证没带，也就是表达式为false时，执行大括号里的代码，并返回。第二个guard语句则检查准考证。<br>如果两证齐全，则执行最后一个打印语句，上面的两个guard语句大括号内的代码都不会执行，因为他们表达式的布尔值都是true。<br>这里值得注意的是，id和examNumber可以在guard语句之外使用，也就是说当guard对其表达式进行验证后，id和examNumber可在整个方法的作用域中使用，并且是解包后的</p></blockquote><h1 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h1><blockquote><p>用if else实现的方法显然不如guard实现的那么精准。而且id和examNumber的作用域只限在if的第一个大括号内，超出这个作用域编译就会报错</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> func checkupUseIf(person: [String: String!]) &#123;</div><div class="line">     </div><div class="line">    <span class="keyword">if</span> let <span class="keyword">id</span> = person[<span class="string">"id"</span>], let examNumber = person[<span class="string">"examNumber"</span>] &#123;</div><div class="line">        print(<span class="string">"您的身份证号为:\(id)，准考证号为:\(examNumber)。请进入考场！"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        print(<span class="string">"证件不齐全，不能进入考场!"</span>)</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    print(<span class="string">"您的身份证号为:\(id)，准考证号为:\(examNumber)"</span>)  <span class="comment">// 报异常</span></div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line">checkupUseIf([<span class="string">"id"</span>: <span class="string">"123456"</span>]) <span class="comment">// 证件不齐全，不能进入考场!</span></div><div class="line">checkupUseIf([<span class="string">"examNumber"</span>: <span class="string">"654321"</span>]) <span class="comment">// 证件不齐全，不能进入考场!</span></div><div class="line">checkupUseIf([<span class="string">"id"</span>: <span class="string">"123456"</span>, <span class="string">"examNumber"</span>: <span class="string">"654321"</span>]) <span class="comment">// 您的身份证号为:123456，准考证号为:654321。请进入考场!</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> Guard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> Guard </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Inheritance-类继承</title>
      <link href="/2017/12/10/Swift/Grammar/Inheritance-%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
      <content type="html"><![CDATA[<h1 id="Inheritance-类继承-简介"><a href="#Inheritance-类继承-简介" class="headerlink" title="Inheritance-类继承-简介"></a>Inheritance-类继承-简介</h1><blockquote><p>继承性是面向语言特征之一<br>swift的类继承只能发生生在类上，不能发生在枚举和结构体上<br>swift中一个类可以继承另一个类的方法、属性、下标等特征<br>子类   父类（超类）<br>子类继承父类后，可重写父类的方法、属性、下标等<br>单继承，但可遵从多个协议，多重继承可以通过遵从多个协议实现</p></blockquote><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><blockquote><p>场景：面向对象的程序员岳克奎，在编程过程中需要描述和处理个人信息<br>定义类Person</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">var</span>  name:<span class="type">String</span></div><div class="line">    <span class="keyword">var</span> age :<span class="type">Int</span></div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desription</span><span class="params">()</span></span>-&gt;<span class="type">String</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(name)年龄是：\(age)岁"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">        name = <span class="string">""</span></div><div class="line">        age = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>场景：1天后岳克奎遇到新需求，需描述和处理学生的信息，于是定义了一个新的类Student</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">    <span class="keyword">var</span>  name:<span class="type">String</span></div><div class="line">    <span class="keyword">var</span> age :<span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> school: <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"\(name)年龄是：\(age)岁"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">        name = <span class="string">""</span></div><div class="line">        age = <span class="number">1</span></div><div class="line">        school = <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>继承方式写</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> school: <span class="type">String</span>  <span class="comment">//子类新增</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123; <span class="comment">//重写父类 构造函数</span></div><div class="line">        school = <span class="string">""</span>  <span class="comment">// 注意 school 和  super.init() 顺序</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        name = <span class="string">""</span></div><div class="line">       age = <span class="number">6</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="构造函数的调用规则"><a href="#构造函数的调用规则" class="headerlink" title="构造函数的调用规则"></a>构造函数的调用规则</h1><h2 id="修改上面案例"><a href="#修改上面案例" class="headerlink" title="修改上面案例"></a>修改上面案例</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//Person</span></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">       <span class="keyword">var</span>  name:<span class="type">String</span></div><div class="line">       <span class="keyword">var</span> age :<span class="type">Int</span></div><div class="line">       </div><div class="line">       <span class="function"><span class="keyword">func</span> <span class="title">desription</span><span class="params">()</span></span>-&gt;<span class="type">String</span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"\(name)年龄是：\(age)岁"</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">convenience</span> <span class="keyword">init</span> () &#123;       <span class="comment">//  ① 便利构造函数</span></div><div class="line">           <span class="keyword">self</span>.<span class="keyword">init</span> (name: <span class="string">"岳克奎"</span>)</div><div class="line">           <span class="keyword">self</span>.age = <span class="number">99</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">convenience</span> <span class="keyword">init</span> (name: <span class="type">String</span>) &#123; <span class="comment">// ② 便利构造函数</span></div><div class="line">           <span class="keyword">self</span>.<span class="keyword">init</span>(name:name,age:<span class="number">18</span>)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">init</span>(name: <span class="type">String</span>,age: <span class="type">Int</span>) &#123;  <span class="comment">// ③ 指定构造函数</span></div><div class="line">           <span class="keyword">self</span>.name = name</div><div class="line">           <span class="keyword">self</span>.age = age</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span></span>&#123;</div><div class="line">       <span class="keyword">var</span> school: <span class="type">String</span></div><div class="line">       <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>,school: <span class="type">String</span> ) &#123; <span class="comment">// ④ 指定构造函数</span></div><div class="line">          <span class="keyword">self</span>.school = school</div><div class="line">           <span class="keyword">super</span>.<span class="keyword">init</span>(name: name, age: age)</div><div class="line">          </div><div class="line">       &#125;</div><div class="line">       <span class="keyword">convenience</span> <span class="keyword">override</span> <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123; <span class="comment">// ⑤ 便利构造函数</span></div><div class="line">           <span class="keyword">self</span>.<span class="keyword">init</span> (name: name, age: age, school: <span class="string">"许昌学院"</span>)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">let</span> oneStudent = <span class="type">Student</span>()</div><div class="line">   <span class="built_in">print</span>(<span class="string">"学生： \(oneStudent.desription())"</span>)<span class="comment">//学生： 岳克奎年龄是：99岁</span></div></pre></td></tr></table></figure><h2 id="构造函数之间的调用形成构造函数链"><a href="#构造函数之间的调用形成构造函数链" class="headerlink" title="构造函数之间的调用形成构造函数链"></a>构造函数之间的调用形成构造函数链</h2><blockquote><p>swift限制构造函数之间代理调用规则3条：</p><p>1.指定构造函数必须调用其直接父类的指定构造函数</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Student中的 ④ 指定函数调用Person中③ 指定构造函数</div></pre></td></tr></table></figure><blockquote><p>2.便利构造函数必须调用同一类中定义的其他构造函数</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Student 中的 ⑤ 便利构造函数 调用 同一类中  ④号构造函数，</div><div class="line">Person中的  ① 便利构造函数调用同一类中的  ② 便利构造函数，</div><div class="line">Person中的 ② 便利构造函数 调用同一类中的 ③ 指定构造函数</div></pre></td></tr></table></figure><blockquote><p>3.便利构造函数必须最终以调用一个指定构造函数结束</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Student 中的 ⑤ 便利构造函数 调用 同一类中  ④号构造函数，</div><div class="line"> Person中的 ② 便利构造函数 调用同一类中的 ③ 指定构造函数</div></pre></td></tr></table></figure><h1 id="构造过程安全检查"><a href="#构造过程安全检查" class="headerlink" title="构造过程安全检查"></a>构造过程安全检查</h1><h2 id="类的构造的两个阶段"><a href="#类的构造的两个阶段" class="headerlink" title="类的构造的两个阶段"></a>类的构造的两个阶段</h2><blockquote><p>分析图：书Page 200页</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1.分配内存 ---&gt;初始化子类存储属性---&gt;沿构造函数链向上初始父类存储属性 </div><div class="line">到达构造函数链顶部，出书画全部的父类存储属性</div><div class="line"></div><div class="line">2.修改属性  ---&gt; 调用方法</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> Inheritance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> Inheritance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Character字符</title>
      <link href="/2017/12/08/Swift/Grammar/Character%E5%AD%97%E7%AC%A6/"/>
      <content type="html"><![CDATA[<h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><ul><li>swift 采用Unicode编码</li><li><p>一个字符可以用字符本身，也可以用Unicode编码</p><h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2></li><li><p>C 和 OC等，字符放在(‘)之间的</p></li><li>Swift （””）双引号<blockquote><p>Unicode编码可以有 单、双、四字节编码<br>表现形式  \u{}     n为1-8个16尽职数</p></blockquote></li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> andSign1:<span class="type">Character</span> = <span class="string">"&amp;"</span>       <span class="comment">//用字符本</span></div><div class="line"><span class="built_in">print</span>(andSign1)                    <span class="comment">// &amp;</span></div><div class="line"><span class="keyword">let</span> andSign2:<span class="type">Character</span> = <span class="string">"\u&#123;26&#125;"</span>  <span class="comment">//用Unicode编码</span></div><div class="line"><span class="built_in">print</span>(andSign2)                    <span class="comment">// &amp;</span></div></pre></td></tr></table></figure><blockquote><p>Swift字符类型是Character。声明let/var<br>如果省略Character类型声明,自动推段是字符串，”&amp;”默认是字符串类型</p></blockquote><h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><table><thead><tr><th>字符表示</th><th>Uicode编码</th><th>说明</th></tr></thead><tbody><tr><td>\t</td><td>\u{0009}</td><td>水平制表符tab</td></tr><tr><td>\n</td><td>\u{000a}</td><td>换行</td></tr><tr><td>\r</td><td>\u{000d}</td><td>回车</td></tr><tr><td>\”</td><td>\u{0022}</td><td>双引号</td></tr><tr><td>\’</td><td>\u{0027}</td><td>单引号</td></tr><tr><td>\</td><td>\u{005c}</td><td>反斜线</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//转义符</span></div><div class="line">      <span class="keyword">let</span> specialCharTab1 = <span class="string">"Yue\tKekui"</span></div><div class="line">      <span class="built_in">print</span>(<span class="string">"specialCharTab1:\(specialCharTab1)"</span>)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Lazy-懒加载</title>
      <link href="/2017/12/08/Swift/Grammar/Lazy-%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <content type="html"><![CDATA[<h1 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a>惰性初始化</h1><blockquote><p>懒加载本质上是一个 闭包<br>懒加载会在第一次访问的时候执行, 闭包执行结束后, 会把结果保存在 属性 中<br>后续调用, 直接返回 属性 的内容<br>懒加载的属性会分配空间, 存储值<br>只要调用过一次, 懒加载后面的闭包再也不会执行了<br>延迟加载, 减少内存的消耗,初始化并且分配空间, 会提前创建<br>可以解除解包的烦恼<br>被设置为 nil, 懒加载也不会再次执行<br>懒加载的代码只会在第一次调用的时候, 执行闭包, 然后将闭包的结果保存在 的属性中<br>Swift中，有两种方式来惰性初始化</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">DemoLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="comment">//模型 ---&gt; 给视图设置模型, 由视图自己根据模型的数据显示内容</span></div><div class="line">    <span class="keyword">var</span> person: <span class="type">Student</span>? &#123;</div><div class="line">        <span class="comment">// 就是替代 OC 中重写 setter 方法 , 区别: 再也不需要考虑  _成员变量 = 值, OC 中如果是 copy 属性, 应该 _成员变量 = [值 copy]</span></div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">         <span class="comment">// 此时 name 属性已经有值, 可以直接使用设置 UI 内容</span></div><div class="line">            text = person?.name</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="keyword">var</span> label: <span class="type">DemoLabel</span>?</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">        &#123;&#125; 包装代码</span></div><div class="line"><span class="comment">        () 执行代码</span></div><div class="line"><span class="comment">        日常开发:</span></div><div class="line"><span class="comment">        1. 闭包中的智能提示不好</span></div><div class="line"><span class="comment">        2. 闭包中如果出现 self. 还需要注意循环引用</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> label2 = &#123; () -&gt; <span class="type">DemoLabel</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> l = <span class="type">DemoLabel</span>()</div><div class="line">        <span class="comment">// 设置 Label 的属性...</span></div><div class="line">        <span class="keyword">return</span> l</div><div class="line">    &#125;()</div><div class="line">   </div><div class="line">    <span class="comment">// 注意: 一旦 label 被设置为 nil, 懒加载也不会再次执行</span></div><div class="line">    <span class="comment">// 懒加载的代码只会在第一次调用的时候, 执行闭包, 然后将闭包的结果保存在 label 的属性中</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> label3: <span class="type">UILabel</span>? = <span class="type">UILabel</span>()</div><div class="line">   </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">      </div><div class="line">        <span class="comment">// 设置 UI</span></div><div class="line">        setupUI()</div><div class="line">      </div><div class="line">        label3?.text = <span class="string">"hello"</span></div><div class="line">        label3?.sizeToFit()</div><div class="line">       </div><div class="line">        <span class="built_in">print</span>(label3 <span class="keyword">as</span> <span class="type">Any</span>)</div><div class="line">       </div><div class="line">        label3 = <span class="literal">nil</span></div><div class="line">       </div><div class="line">        <span class="built_in">print</span>(label3 <span class="keyword">as</span> <span class="type">Any</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupUI</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 1. swvf控件</span></div><div class="line">        label = <span class="type">DemoLabel</span>()</div><div class="line">        <span class="comment">// ! 解包, 为了参与计算, addSubView 用 subViews 数组记录控件, 数组中不允许加入 nil</span></div><div class="line">        <span class="comment">// ? 可选解包, 调用方法, 如果为 nil, 不调用方法, 但是不能参与计算</span></div><div class="line">        view.addSubview(label!)</div><div class="line">       </div><div class="line">        label?.text = <span class="string">"hello"</span></div><div class="line">        label?.sizeToFit()</div><div class="line">        label?.center = view.center</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Swift 中一定注意不要主动清理视图或者控件// 因为懒加载不会再次创建</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="简单表达式"><a href="#简单表达式" class="headerlink" title="简单表达式"></a>简单表达式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> first = <span class="type">NSArray</span>(objects: <span class="string">"1"</span>,<span class="string">"2"</span>)</div></pre></td></tr></table></figure><p>##闭包</p><blockquote><p>不要忘记最后的小括号，只有加了小括号，必包才会在掉用的时候立刻执行<br>要类型声明lazy var second:String，这样Xcode会进行类型检</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> second:<span class="type">String</span> = &#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"second"</span></div><div class="line">       &#125;()  </div><div class="line"><span class="comment">//&#123;&#125; 包装代码 () 执行代码</span></div></pre></td></tr></table></figure><h1 id="惰性初始化的使用场景"><a href="#惰性初始化的使用场景" class="headerlink" title="惰性初始化的使用场景"></a>惰性初始化的使用场景</h1><h2 id="①属性本身依赖于外部因素才能初始化"><a href="#①属性本身依赖于外部因素才能初始化" class="headerlink" title="①属性本身依赖于外部因素才能初始化"></a>①属性本身依赖于外部因素才能初始化</h2><blockquote><p>completeURL表示完整的URL，这个变量依赖于自身的url是否含有<a href="http://前缀" target="_blank" rel="external">http://前缀</a></p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> url:<span class="type">NSString</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> completeURL:<span class="type">NSString</span> = &#123;</div><div class="line">        [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.url.hasPrefix(<span class="string">"http://"</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.url</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"http://"</span>.stringByAppendingString(<span class="keyword">self</span>.url)</div><div class="line">        &#125;</div><div class="line">        &#125;()</div><div class="line">    <span class="keyword">init</span>(url:<span class="type">NSString</span>)&#123;</div><div class="line">        <span class="keyword">self</span>.url = url</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="②属性需要复杂计算，消耗大量CPU"><a href="#②属性需要复杂计算，消耗大量CPU" class="headerlink" title="②属性需要复杂计算，消耗大量CPU"></a>②属性需要复杂计算，消耗大量CPU</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> second:<span class="type">Int</span> = &#123;</div><div class="line">       <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">100000</span>&#123;</div><div class="line">           sum += i</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> sum</div><div class="line">       &#125;()</div></pre></td></tr></table></figure><h2 id="③属性不确定是否会使用到"><a href="#③属性不确定是否会使用到" class="headerlink" title="③属性不确定是否会使用到"></a>③属性不确定是否会使用到</h2><blockquote><p>官网的例子，注意，对于Manager来说，使用的时候，可能导入，也可能不倒入数据。从硬盘读取数据的代价是很大的，不导入数据的时候，不要初始化</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataImporter</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    DataImporter is a class to import data from an external file.</span></div><div class="line"><span class="comment">    The class is assumed to take a non-trivial amount of time to initialize.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">var</span> fileName = <span class="string">"data.txt"</span></div><div class="line">    <span class="comment">// the DataImporter class would provide data importing functionality here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> importer = <span class="type">DataImporter</span>()</div><div class="line">    <span class="keyword">var</span> data = [<span class="type">String</span>]()</div><div class="line">    <span class="comment">// the DataManager class would provide data management functionality here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> manager = <span class="type">DataManager</span>()</div><div class="line">manager.data.append(<span class="string">"Some data"</span>)</div><div class="line">manager.data.append(<span class="string">"Some more data"</span>)</div></pre></td></tr></table></figure><h2 id="④定制化的初始化"><a href="#④定制化的初始化" class="headerlink" title="④定制化的初始化"></a>④定制化的初始化</h2><blockquote><p>有些初始化只需要初始化一次，在变量定义的地方初始化，有助于代码维护</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> dataArray:<span class="type">NSMutableArray</span> = &#123;</div><div class="line">       <span class="keyword">var</span> array = <span class="type">NSMutableArray</span>()</div><div class="line">       <span class="keyword">for</span>  i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">100</span>&#123;</div><div class="line">           array.addObject(<span class="type">NSNumber</span>(integer: i))</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> array</div><div class="line">       &#125;()</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> Lazy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> Lazy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Override重写</title>
      <link href="/2017/12/08/Swift/Grammar/Override-%E9%87%8D%E5%86%99/"/>
      <content type="html"><![CDATA[<h1 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h1><blockquote><p>定义可继承的基础类<br>nameStr： 人名<br>abilityInt ： 能力值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">var</span> nameStr: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> abilityInt: <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">des</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(nameStr)的能力值\(abilityInt)"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">        nameStr    = <span class="string">"YueKekui"</span></div><div class="line">        abilityInt = <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="重写父类方法"><a href="#重写父类方法" class="headerlink" title="重写父类方法"></a>重写父类方法</h1><h2 id="重写init"><a href="#重写init" class="headerlink" title="重写init"></a>重写init</h2><blockquote><p>init<br>nationalityStr:新加国籍</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinesePeople</span>:<span class="title">People</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">var</span> nationalityStr = <span class="string">"中国🇨🇳"</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        nameStr    = <span class="string">"ChenJian"</span></div><div class="line">        abilityInt = <span class="number">666</span></div><div class="line">        <span class="comment">//self.nameStr = "LuGaygay"</span></div><div class="line">        <span class="comment">//self.abilityInt = 8888</span></div><div class="line">        <span class="comment">//继承了父类的属性，因此nameStr、 self.nameStr的属性</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">des</span><span class="params">()</span></span>-&gt;<span class="type">String</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.des() + <span class="string">"他是\(nationalityStr)人"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> onePeople =  <span class="type">ChinesePeople</span>.<span class="keyword">init</span>()</div><div class="line"><span class="built_in">print</span>( onePeople.des()) <span class="comment">// ChenJian的能力值666他是中国🇨🇳人</span></div></pre></td></tr></table></figure><h1 id="重写属性"><a href="#重写属性" class="headerlink" title="重写属性"></a>重写属性</h1><blockquote><p>子类并不知道继承来的属性是储值型还是算值型，它只知道继承来的属性有一个名字和类型，所以在重写属性时必须把它的名字和类型都写出来<br>储值属性可以重写为算值属性<br>只读可以重写为读写；读写不能重写为只读<br>不想重写getter，可以直接返回super.Someproperty</p></blockquote><h2 id="Get-Set"><a href="#Get-Set" class="headerlink" title="Get/Set"></a>Get/Set</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmericanPeople</span>: <span class="title">ChinesePeople</span> </span>&#123;</div><div class="line">   <span class="comment">// override var nationalityStr = "美国🇺🇸"</span></div><div class="line"><span class="comment">////重写了父类的属性nationalityStr，因此self和super的nationalityStr是两个不同的属性</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> nationalityStr:<span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.nationalityStr</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="keyword">super</span>.nationalityStr = <span class="string">"美国🇺🇸"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="打印-1"><a href="#打印-1" class="headerlink" title="打印"></a>打印</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> secondPeople = <span class="type">AmericanPeople</span>.<span class="keyword">init</span>()</div><div class="line">     secondPeople.nationalityStr = <span class="string">"注意重写set get的返回"</span></div><div class="line">     <span class="built_in">print</span>(secondPeople.des()) <span class="comment">// ChenJian的能力值666他是美国🇺🇸人</span></div></pre></td></tr></table></figure><h1 id="重写属性观察器"><a href="#重写属性观察器" class="headerlink" title="重写属性观察器"></a>重写属性观察器</h1><blockquote><p>可以为继承来的变量储值属性添加属性观察器<br>可以值重写didSet或willSet</p></blockquote><h2 id="didSet"><a href="#didSet" class="headerlink" title="didSet"></a>didSet</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AustraliansPeople</span>: <span class="title">People</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> richInt = <span class="number">1</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> abilityInt: <span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            richInt = <span class="type">Int</span>(abilityInt*<span class="number">2</span>)+<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写打印方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">des</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.des()+<span class="string">"财富指标\(richInt)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="打印-2"><a href="#打印-2" class="headerlink" title="打印"></a>打印</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> thirdPeople = <span class="type">AustraliansPeople</span>.<span class="keyword">init</span>()</div><div class="line">     thirdPeople.abilityInt = <span class="number">5</span></div><div class="line">     <span class="built_in">print</span>(thirdPeople.des())  <span class="comment">//YueKekui的能力值5财富指标12</span></div></pre></td></tr></table></figure><h1 id="防止重写"><a href="#防止重写" class="headerlink" title="防止重写"></a>防止重写</h1><blockquote><p>通过把方法、属性或下标标记为final来防止它们被重写<br>在扩展中，添加到类里的方法、属性或下标也可以在扩展的定义里标记为final<br>可以在class前添加final来将整个定义为不能重写，这样的类是不可继承的</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITableView</title>
      <link href="/2017/12/07/Swift/UIKit/UITableView/"/>
      <content type="html"><![CDATA[<h1 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h1><h2 id="声明tableView-UITableView变量"><a href="#声明tableView-UITableView变量" class="headerlink" title="声明tableView:UITableView变量"></a>声明tableView:UITableView变量</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> kSize=<span class="type">UIScreen</span>.main.bounds;</div><div class="line"><span class="keyword">var</span> _tableView:<span class="type">UITableView</span>!          <span class="comment">//tableView</span></div><div class="line"><span class="keyword">var</span>  data :[(<span class="type">String</span>,<span class="type">String</span>)] = [(<span class="string">"寥寥"</span>,<span class="string">"有点绿"</span>),(<span class="string">"卢Gaygay"</span>,<span class="string">"有点Gay"</span>),(<span class="string">"222"</span>,<span class="string">"2---2"</span>),(<span class="string">"333"</span>,<span class="string">"3--3"</span>)]      <span class="comment">//数据源</span></div></pre></td></tr></table></figure><h2 id="声明tableView的数据源的代理协议"><a href="#声明tableView的数据源的代理协议" class="headerlink" title="声明tableView的数据源的代理协议"></a>声明tableView的数据源的代理协议</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITableViewDataSource</span>,<span class="title">UITableViewDelegate</span> </span>&#123;</div></pre></td></tr></table></figure><h2 id="MARK-设置tableView"><a href="#MARK-设置tableView" class="headerlink" title="MARK: 设置tableView"></a>MARK: 设置tableView</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeTableView</span><span class="params">()</span></span>  &#123;</div><div class="line">   _tableView = <span class="type">UITableView</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0.0</span>,</div><div class="line">                                               y: <span class="number">64</span>,</div><div class="line">                                               width: kSize.width,</div><div class="line">                                               height: kSize.height-<span class="number">64</span>),</div><div class="line">                                 style:.plain)</div><div class="line">    <span class="keyword">self</span>.view.addSubview(_tableView);  <span class="comment">// 添加tableView</span></div><div class="line">    _tableView.dataSource = <span class="keyword">self</span>;</div><div class="line">    _tableView.delegate = <span class="keyword">self</span>;</div><div class="line">    _tableView.showsVerticalScrollIndicator = <span class="literal">false</span></div><div class="line">    _tableView.showsHorizontalScrollIndicator = <span class="literal">false</span></div><div class="line">    </div><div class="line">    _tableView.tableFooterView = <span class="type">UIView</span>()    <span class="comment">//tableFooter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="MARK-实现tableView-dataSource协议中方法"><a href="#MARK-实现tableView-dataSource协议中方法" class="headerlink" title="MARK: 实现tableView.dataSource协议中方法"></a>MARK: 实现tableView.dataSource协议中方法</h2><h3 id="MARK-行"><a href="#MARK-行" class="headerlink" title="MARK: 行"></a>MARK: 行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> data.<span class="built_in">count</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="MARK-Cell"><a href="#MARK-Cell" class="headerlink" title="MARK: Cell"></a>MARK: Cell</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="keyword">var</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"陈建"</span>)</div><div class="line">    <span class="keyword">if</span> cell == <span class="literal">nil</span> &#123;</div><div class="line">        cell = <span class="type">UITableViewCell</span>(style:<span class="type">UITableViewCellStyle</span>.<span class="keyword">default</span>,reuseIdentifier:<span class="string">"陈建"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> btn:<span class="type">UIButton</span> = <span class="type">UIButton</span>.<span class="keyword">init</span>(type:<span class="type">UIButtonType</span>.custom)</div><div class="line">    btn.frame = <span class="type">CGRect</span>(x:<span class="type">UIScreen</span>.main.bounds.width - <span class="number">100</span>, y:<span class="number">10</span>, width:<span class="number">80</span>, height:<span class="number">50</span>)</div><div class="line">    btn.backgroundColor = <span class="type">UIColor</span>.red;</div><div class="line">    btn.setTitle(<span class="string">"btn标题"</span>, <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</div><div class="line">    btn.setTitleColor(<span class="type">UIColor</span>.blue, <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</div><div class="line">    btn.tag = indexPath.row</div><div class="line">    btn.addTarget(<span class="keyword">self</span>, action:#selector(clickBtnAction), <span class="keyword">for</span>: .touchUpInside)</div><div class="line">    </div><div class="line">    cell?.textLabel?.text = data[indexPath.row].<span class="number">0</span>;</div><div class="line">    cell?.contentView.addSubview(btn);</div><div class="line">    cell?.accessoryType=<span class="type">UITableViewCellAccessoryType</span>.disclosureIndicator</div><div class="line">    <span class="keyword">return</span> cell!</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="MARK-cell-高度"><a href="#MARK-cell-高度" class="headerlink" title="MARK: cell- 高度"></a>MARK: cell- 高度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">66</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="头部高度"><a href="#头部高度" class="headerlink" title="头部高度"></a>头部高度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForHeaderInSection section: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.01</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="底部高度"><a href="#底部高度" class="headerlink" title="底部高度"></a>底部高度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForFooterInSection section: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.01</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选中cell时触发"><a href="#选中cell时触发" class="headerlink" title="选中cell时触发"></a>选中cell时触发</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"indexPath.row = SelectRow 第\(indexPath.row)行"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="取消选中cell时"><a href="#取消选中cell时" class="headerlink" title="取消选中cell时"></a>取消选中cell时</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didDeselectRowAt indexPath: IndexPath)</span></span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"indexPath.row = DeselectRow 第\(indexPath.row)行"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="允许编辑cell"><a href="#允许编辑cell" class="headerlink" title="允许编辑cell"></a>允许编辑cell</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canEditRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="右滑触发删除按钮"><a href="#右滑触发删除按钮" class="headerlink" title="右滑触发删除按钮"></a>右滑触发删除按钮</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">UITableViewCellEditingStyle</span>.<span class="keyword">init</span>(rawValue: <span class="number">1</span>)!</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="点击删除cell时触发"><a href="#点击删除cell时触发" class="headerlink" title="点击删除cell时触发"></a>点击删除cell时触发</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"indexPath.row = editingStyle第\(indexPath.row)行"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="点击btn的方法"><a href="#点击btn的方法" class="headerlink" title="点击btn的方法"></a>点击btn的方法</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clickBtnAction</span> <span class="params">(sender:UIButton)</span></span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"点击了 btn"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITableView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITableView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-Error-AFN</title>
      <link href="/2017/12/07/OC/Code/OC-Code-Error-AFN/"/>
      <content type="html"><![CDATA[<h1 id="不接受返回类型"><a href="#不接受返回类型" class="headerlink" title="不接受返回类型"></a>不接受返回类型</h1><blockquote><p>解决方案：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">AFURLResponseSerialization.m中，228行左右</div><div class="line">把 这句： self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;, nil];</div><div class="line"></div><div class="line">修改为：</div><div class="line"></div><div class="line">self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;,@&quot;text/html&quot;, nil];</div><div class="line">在进行网络请求时出现-1016 是因为只支持text/json，application/json，text/javascript</div></pre></td></tr></table></figure><h1 id="3840错误"><a href="#3840错误" class="headerlink" title="3840错误"></a>3840错误</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> Error Domain=NSCocoaErrorDomain Code=3840 &quot;Invalid value around character 64.&quot; UserInfo=&#123;NSDebugDescription=Invalid value around character 64.&#125;</div><div class="line">服务器没有返回json数据</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Error </category>
          
          <category> AFN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Error </tag>
            
            <tag> AFN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Func-网络状况侦测</title>
      <link href="/2017/12/07/OC/Func/iOS-Func-%E7%BD%91%E7%BB%9C%E7%8A%B6%E5%86%B5%E4%BE%A6%E6%B5%8B/"/>
      <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/ios/samplecode/Reachability/Reachability.zip" target="_blank" rel="external">官方示例程序</a></p><blockquote><p>将Reachability.h 和 Reachability.m 加到自己的项目中<br>并引用 SystemConfiguration.framework</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> 网络的几种状态</div><div class="line"><span class="comment">// the network state of the device for Reachability 2.0.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; </div><div class="line"> NotReachable = <span class="number">0</span>, <span class="comment">//无连接 </span></div><div class="line"> ReachableViaWiFi, <span class="comment">//使用3G/GPRS网络</span></div><div class="line"> ReachableViaWWAN <span class="comment">//使用WiFi网络</span></div><div class="line">&#125; NetworkStatus;</div></pre></td></tr></table></figure><blockquote><p>运用</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> <span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Reachability.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIAlertController</span> *alertVC;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 创建网络探测对象</span></div><div class="line">    Reachability *reach = [Reachability reachabilityWithHostName:<span class="string">@"www.baidu.com"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 想通知中心注册通知</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(networkChange:) name:kReachabilityChangedNotification object:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 开启通知监控</span></div><div class="line">    [reach startNotifier];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 网络状况发生改变后，执行该方法</span></div><div class="line">- (<span class="keyword">void</span>)networkChange:(<span class="built_in">NSNotification</span> *)noti &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.alertVC = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"网络提示"</span> message:<span class="string">@"当前网络状况有变更"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">UIAlertAction</span> *action1 = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"确定"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">        [_alertVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">    &#125;];</div><div class="line">    [_alertVC addAction:action1];</div><div class="line">    </div><div class="line">    </div><div class="line">     Reachability * reach = [noti object];</div><div class="line">    <span class="comment">// 判断当前网络是否可达，可达则继续后边的判断：通过哪种途径到达，不可达，直接返回，不再执行后边的代码</span></div><div class="line">    <span class="keyword">if</span> ([reach isReachable]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"网络可达"</span>);</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"网络有故障"</span>);</div><div class="line">        _alertVC.message = <span class="string">@"当前网络有故障"</span>;</div><div class="line">        [<span class="keyword">self</span> presentViewController:_alertVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([reach isReachableViaWiFi]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"通过WIFI到达"</span>);</div><div class="line">        _alertVC.message = <span class="string">@"当前网络是无线网,为您加载高清资源"</span>;</div><div class="line">        [<span class="keyword">self</span> presentViewController:_alertVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([reach isReachableViaWWAN]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"通过基站到达"</span>);</div><div class="line">        _alertVC.message = <span class="string">@"当前网络是流量，正在为您节省流量"</span>;</div><div class="line">        [<span class="keyword">self</span> presentViewController:_alertVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"通过其他到达"</span>);</div><div class="line">        _alertVC.message = <span class="string">@"当前使用未知网络"</span>;</div><div class="line">        [<span class="keyword">self</span> presentViewController:_alertVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIWebView/WKWebView</title>
      <link href="/2017/12/07/Swift/UIKit/Swift-UIKit-UIWebView-WKWebView/"/>
      <content type="html"><![CDATA[<h1 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h1><blockquote><p>UIWebView功能强大，除了能够显示页面之外，还能显示HTML语言，CSS，PPT，Word等等，其用法也简单</p></blockquote><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> webView = <span class="type">UIWebView</span>.<span class="keyword">init</span>(frame:<span class="keyword">self</span>.view.frame)</div></pre></td></tr></table></figure><p>##添加<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.view.addSubview(webView)</div></pre></td></tr></table></figure></p><h2 id="加载网页"><a href="#加载网页" class="headerlink" title="加载网页"></a>加载网页</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">webView.loadRequest(<span class="type">NSURLRequest</span>(url:<span class="type">NSURL</span>.<span class="keyword">init</span>(string:<span class="string">"http://www.jianshu.com/u/1acf2b5a2f69"</span>) <span class="keyword">as</span>! <span class="type">URL</span>) <span class="keyword">as</span> <span class="type">URLRequest</span>)</div></pre></td></tr></table></figure><h2 id="脚本注入"><a href="#脚本注入" class="headerlink" title="脚本注入"></a>脚本注入</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> jsPath =  <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"app"</span>, ofType: <span class="string">"js"</span>)</div></pre></td></tr></table></figure><h2 id="获取到脚本中的内容"><a href="#获取到脚本中的内容" class="headerlink" title="获取到脚本中的内容"></a>获取到脚本中的内容</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> jsString :<span class="type">String</span> = <span class="keyword">try</span>! <span class="type">String</span>(contentsOfFile: jsPath!, encoding: <span class="number">4</span>)</div><div class="line"><span class="comment">//将获得的文本内容后面的\n替换为空的字符串</span></div><div class="line">jsString = jsString.stringByReplacingOccurrencesOfString(<span class="string">"\n"</span>, withString: <span class="string">""</span>)</div></pre></td></tr></table></figure><h2 id="触发脚本"><a href="#触发脚本" class="headerlink" title="触发脚本"></a>触发脚本</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">webView.stringByEvaluatingJavaScriptFromString(jsString <span class="keyword">as</span> <span class="type">String</span>)</div></pre></td></tr></table></figure><h2 id="webView-scalesPageToFit"><a href="#webView-scalesPageToFit" class="headerlink" title="webView.scalesPageToFit"></a>webView.scalesPageToFit</h2><blockquote><p>有点时候我们加载的网页页面比较大的话 是无法的完全显示在webView上，这个时候我们需要调节webView的scalesPageToFit属性来实现页面适应webView区域的效果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">webView.scalesPageToFit = <span class="literal">true</span></div></pre></td></tr></table></figure><h2 id="dataDetectorTypes"><a href="#dataDetectorTypes" class="headerlink" title="dataDetectorTypes"></a>dataDetectorTypes</h2><blockquote><p>我们可以通过设置webView的dataDetectorTypes属性来识别出网页上的电话号码，超链接，邮箱等一些特殊信息，在我们对其进行相关操作的时候可以出发关联事件</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> webView.dataDetectorTypes = .address</div><div class="line"></div><div class="line"><span class="comment">//dataDetectorTypes包含以下类型：</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">UIDataDetectorTypes</span> : <span class="title">OptionSet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(rawValue: <span class="type">UInt</span>)</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> phoneNumber: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Phone number detection</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> link: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// URL detection</span></div><div class="line"></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">4.0</span>, *)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> address: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Street address detection</span></div><div class="line"></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">4.0</span>, *)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> calendarEvent: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Event detection</span></div><div class="line"></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> shipmentTrackingNumber: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Shipment tracking number detection</span></div><div class="line"></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> flightNumber: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Flight number detection</span></div><div class="line"></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> lookupSuggestion: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Information users may want to look up</span></div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> all: <span class="type">UIDataDetectorTypes</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Enable all types, including types that may be added later</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>UIWebView在加载网页的时候有一些对应的状态，我们可以进行检测：<br>首先实现其代理：UIWebViewDelegate<br>然后设置其代理对象：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">webView.delegate = <span class="keyword">self</span>;</div></pre></td></tr></table></figure><blockquote><p>实现代理方法：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UIWebViewDelegate</span> : <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//链接地址发生改变的时候调用</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class="type">Bool</span></div><div class="line"></div><div class="line"><span class="comment">//开始加载</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span></div><div class="line"></div><div class="line"><span class="comment">//完成加载</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span></div><div class="line"></div><div class="line"><span class="comment">//加载失败</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, didFailLoadWithError error: Error)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>可以对webView加载状态进行控制，比如：停止加载，继续加载等，其设置方法为：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//重新加载</span></div><div class="line">- (void)reload;</div><div class="line"><span class="comment">//停止加载</span></div><div class="line">- (void)stopLoading;</div><div class="line"><span class="comment">//返回</span></div><div class="line">- (void)goBack;</div><div class="line"><span class="comment">//前往</span></div><div class="line">- (void)goForward;</div></pre></td></tr></table></figure><blockquote><p>以下是UIWebView对于HTML语言，本地文件等信息的加载：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//加载HTML文本</span></div><div class="line">- (void)loadHTMLString:(<span class="type">NSString</span> *)string baseURL:(nullable <span class="type">NSURL</span> *)baseURL;</div><div class="line"></div><div class="line"><span class="comment">//加载Data类型</span></div><div class="line">- (void)loadData:(<span class="type">NSData</span> *)data <span class="type">MIMEType</span>:(<span class="type">NSString</span> *)<span class="type">MIMEType</span> textEncodingName:(<span class="type">NSString</span> *)textEncodingName baseURL:(<span class="type">NSURL</span> *)baseURL;</div><div class="line"></div><div class="line"><span class="comment">//实现与JS的交互</span></div><div class="line">- (nullable <span class="type">NSString</span> *)stringByEvaluatingJavaScriptFromString:(<span class="type">NSString</span> *)script;</div></pre></td></tr></table></figure><h1 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h1><blockquote><p>使用方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//创建</span></div><div class="line"><span class="keyword">let</span> wkWebView = <span class="type">WKWebView</span>()</div><div class="line"></div><div class="line"><span class="comment">//设置位置和大小</span></div><div class="line">wkWebView.frame = <span class="keyword">self</span>.view.frame;</div><div class="line"></div><div class="line"><span class="comment">//创建的时候就设置位置和大小</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    public init(frame: CGRect, configuration: WKWebViewConfiguration)</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">let</span> webview = <span class="type">WKWebView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.width, <span class="keyword">self</span>.view.frame.height))</div><div class="line"></div><div class="line"><span class="comment">//添加</span></div><div class="line"><span class="keyword">self</span>.view.addSubview(wkWebView)</div><div class="line"></div><div class="line"><span class="comment">//请求</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    open func load(_ request: URLRequest) -&gt; WKNavigation?</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">wkWebView.load(<span class="type">NSURLRequest</span>(url: <span class="type">NSURL</span>(string:<span class="string">"http://www.baidu.com"</span>) <span class="keyword">as</span>! <span class="type">URL</span>) <span class="keyword">as</span> <span class="type">URLRequest</span>)</div></pre></td></tr></table></figure><blockquote><p>WKWebView的代理方法：<br>WKNavigationDelegate<br>通过WKNavigationDelegate提供的代理方法，我们可以追踪WKWebView加载的过程</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> /页面开始加载时调用</div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 页面加载失败时调用</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 当内容开始返回时调用</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 页面加载完成之后调用</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span></div></pre></td></tr></table></figure><blockquote><p>页面跳转的代理方法有三种，分为（收到跳转与决定是否跳转两种）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 接收到服务器跳转请求之后调用</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 在发送请求之前，决定是否跳转</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="comment">// 在收到响应后，决定是否跳转</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping <span class="params">(WKNavigationResponsePolicy)</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//web内容视图被终止的时候触发</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">9.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webViewWebContentProcessDidTerminate</span><span class="params">(<span class="number">_</span> webView: WKWebView)</span></span></div></pre></td></tr></table></figure><blockquote><p>WKUIDelegate</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">/ 创建一个新的<span class="type">WebView</span></div><div class="line">   <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">   <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, createWebViewWith configuration: WKWebViewConfiguration, <span class="keyword">for</span> navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures)</span></span> -&gt; <span class="type">WKWebView</span>?</div></pre></td></tr></table></figure><blockquote><p>web界面的三种提示框（警告框、确认框、输入框）分别对应三种代理方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment"> *  web界面中有弹出警告框时调用</span></div><div class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></div><div class="line"><span class="comment"> *  @param message           警告框中的内容</span></div><div class="line"><span class="comment"> *  @param frame             主窗口</span></div><div class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></div><div class="line"><span class="comment"> */</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  web界面中有弹出确认框时调用</span></div><div class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></div><div class="line"><span class="comment"> *  @param message           确认框中的内容</span></div><div class="line"><span class="comment"> *  @param frame             主窗口</span></div><div class="line"><span class="comment"> *  @param completionHandler 确认框消失调用</span></div><div class="line"><span class="comment"> */</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptConfirmPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">(Bool)</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  web界面中有弹出输入框时调用</span></div><div class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></div><div class="line"><span class="comment"> *  @param message           输入框中的内容</span></div><div class="line"><span class="comment"> *  @param frame             主窗口</span></div><div class="line"><span class="comment"> *  @param completionHandler 输入框消失调用</span></div><div class="line"><span class="comment"> */</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: String, defaultText: String?, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">(String?)</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure><blockquote><p>WKScriptMessageHandler</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">userContentController</span><span class="params">(<span class="number">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage)</span></span></div></pre></td></tr></table></figure><blockquote><p>这个方法是WKscriptMessageHandler协议中必须实现的方法，是提高App与web端交互的关键，它可以直接将接收到的JS脚本转为OC或Swift对象<br>获取网页标题<br>需要遵守WKNavigationDelegate协议并设置：webview.navigationDelegate = self<br>网页加载完的时候我们能获取网页的标题，所以这个步骤应该写在网页状态加载完成的方法里面：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(webView: WKWebView, didFinishNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">   <span class="comment">//print(self.webview.title) </span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><blockquote><p>获取当前网页的url</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(webView: WKWebView, decidePolicyForNavigationAction navigationAction:WKNavigationAction, decisionHandler: <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt;<span class="type">Void</span>) &#123;</div><div class="line">         </div><div class="line"><span class="keyword">var</span> urlString:<span class="type">NSString</span>! = navigationAction.request.<span class="type">URL</span>?.absoluteString</div><div class="line"></div><div class="line">decisionHandler(<span class="type">WKNavigationActionPolicy</span>.<span class="type">Allow</span>)<span class="comment">//一定要加上这一句代码不然会出异常          </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>前进，后退，停止。。。<br>WKWebView想UIWebView一样，可以获取一些状态，以及进行对应操作</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">reload</span><span class="params">()</span></span><span class="comment">//重新加载</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">stopLoading</span><span class="params">()</span></span><span class="comment">//停止加载</span></div><div class="line">    </div><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">goBack</span><span class="params">()</span></span><span class="comment">//返回</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">goForward</span><span class="params">()</span></span><span class="comment">//前进</span></div><div class="line"> </div><div class="line"><span class="comment">//能不能后退 前往 加载</span></div><div class="line"><span class="keyword">open</span> <span class="keyword">var</span> canGoBack: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="keyword">var</span> canGoForward: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">open</span> <span class="keyword">var</span> isLoading: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIWebView/WKWebView </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIImageView</title>
      <link href="/2017/12/07/Swift/UIKit/UIImageView/"/>
      <content type="html"><![CDATA[<h1 id="UIImageView"><a href="#UIImageView" class="headerlink" title="UIImageView"></a>UIImageView</h1><h2 id="创建的时候直接设置图片"><a href="#创建的时候直接设置图片" class="headerlink" title="创建的时候直接设置图片"></a>创建的时候直接设置图片</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(image:<span class="type">UIImage</span>(named:<span class="string">"girl"</span>))</div></pre></td></tr></table></figure><h2 id="先创建出对象再设置图片"><a href="#先创建出对象再设置图片" class="headerlink" title="先创建出对象再设置图片"></a>先创建出对象再设置图片</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> imageView1 = <span class="type">UIImageView</span>()</div><div class="line">imageView1.image = <span class="type">UIImage</span>(named:<span class="string">"girl"</span>)</div></pre></td></tr></table></figure><h2 id="图片获取"><a href="#图片获取" class="headerlink" title="图片获取"></a>图片获取</h2><blockquote><p>从文件目录中获取图片</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource:<span class="string">"girl"</span>, ofType: <span class="string">"png"</span>)</div><div class="line"><span class="keyword">let</span> newImage = <span class="type">UIImage</span>(contentsOfFile: path!)</div></pre></td></tr></table></figure><blockquote><p>网络地址获取图片</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string:<span class="string">"http://image.cnpp.cn/upload/images/20160905/09380421552_400x300.jpg"</span>)</div><div class="line"><span class="keyword">let</span> data = <span class="keyword">try</span>! <span class="type">Data</span>(contentsOf: url!)</div><div class="line"><span class="keyword">let</span> smallImage = <span class="type">UIImage</span>(data: data)</div><div class="line"><span class="comment">//imageView1.image = smallImage</span></div><div class="line"><span class="keyword">let</span> imageView1 = <span class="type">UIImageView</span>(image:smallImage)</div></pre></td></tr></table></figure><h2 id="图片显示填充样式"><a href="#图片显示填充样式" class="headerlink" title="图片显示填充样式"></a>图片显示填充样式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">imageView1.contentMode = <span class="type">UIViewContentMode</span>.scaleAspectFit</div></pre></td></tr></table></figure><h2 id="对于UIImageView的图片填充样式有多种"><a href="#对于UIImageView的图片填充样式有多种" class="headerlink" title="对于UIImageView的图片填充样式有多种"></a>对于UIImageView的图片填充样式有多种</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIViewContentMode</span> : <span class="title">Int</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">case</span> scaleToFill</div><div class="line"></div><div class="line"><span class="keyword">case</span> scaleAspectFit <span class="comment">// contents scaled to fit with fixed aspect. remainder is transparent</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> scaleAspectFill <span class="comment">// contents scaled to fill with fixed aspect. some portion of content may be clipped.</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> redraw <span class="comment">// redraw on bounds change (calls -setNeedsDisplay)</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> center <span class="comment">// contents remain same size. positioned adjusted.</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> top</div><div class="line"></div><div class="line"><span class="keyword">case</span> bottom</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="keyword">left</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="keyword">right</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> topLeft</div><div class="line"></div><div class="line"><span class="keyword">case</span> topRight</div><div class="line"></div><div class="line"><span class="keyword">case</span> bottomLeft</div><div class="line"></div><div class="line"><span class="keyword">case</span> bottomRight</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="分组图片轮展"><a href="#分组图片轮展" class="headerlink" title="分组图片轮展"></a>分组图片轮展</h2><blockquote><p>UIImageView中有设置多张图片一块展示的功能，类似于幻灯片的自动播放。其实现过程如下：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//设置图片数组</span></div><div class="line">imageView1.animationImages = [<span class="type">UIImage</span>(named:<span class="string">"2"</span>)!,<span class="type">UIImage</span>(named:<span class="string">"3"</span>)!]</div><div class="line"></div><div class="line"><span class="comment">//所有图片展示完一遍的总时长</span></div><div class="line">imageView1.animationDuration = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">//开始</span></div><div class="line">imageView1.startAnimating()</div><div class="line"></div><div class="line"><span class="comment">//结束</span></div><div class="line">imageView1.stopAnimating()</div></pre></td></tr></table></figure><h2 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件"></a>添加点击事件</h2><blockquote><p>UIImageView和UILabel类似，其用户交互默认关闭，我们要给其添加点击事件，需要打开其用户交互</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  imageView1.isUserInteractionEnabled = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> tapGestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action:#selector(<span class="type">ViewController</span>.tapGestureRecognizer(sender:)))</div><div class="line"></div><div class="line">imageView1.addGestureRecognizer(tapGestureRecognizer)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tapGestureRecognizer</span><span class="params">(sender:UITapGestureRecognizer)</span></span> &#123;</div><div class="line">    <span class="comment">//code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//边框设置</span></div><div class="line">imageView.layer.borderColor = <span class="type">UIColor</span>.redColor().<span class="type">CGColor</span></div><div class="line">imageView.layer.borderWidth = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">//圆角的设置</span></div><div class="line">imageView.layer.cornerRadius = <span class="number">150</span></div><div class="line">imageView.layer.masksToBounds = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="type">UIImageView</span>继承<span class="type">UIView</span>，很多常见的属性在此就不列举。。</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIImageView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIImageView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISegmentedControl-分段选择控件</title>
      <link href="/2017/12/07/Swift/UIKit/UISegmentedControl-%E5%88%86%E6%AE%B5%E9%80%89%E6%8B%A9%E6%8E%A7%E4%BB%B6/"/>
      <content type="html"><![CDATA[<h1 id="UISegmentedControl"><a href="#UISegmentedControl" class="headerlink" title="UISegmentedControl"></a>UISegmentedControl</h1><blockquote><p>继承自UIControl</p></blockquote><h2 id="分段选项显示"><a href="#分段选项显示" class="headerlink" title="分段选项显示"></a>分段选项显示</h2><p>###初始化数据源</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> items = [<span class="string">"见哥1"</span>,<span class="string">"见哥2"</span>,<span class="type">UIImage</span>(named:<span class="string">"1"</span>)!] <span class="keyword">as</span> [<span class="type">Any</span>]</div></pre></td></tr></table></figure><h3 id="初始化对象"><a href="#初始化对象" class="headerlink" title="初始化对象"></a>初始化对象</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> segmentedControl = <span class="type">UISegmentedControl</span>(items:items)</div></pre></td></tr></table></figure><h3 id="设置位置"><a href="#设置位置" class="headerlink" title="设置位置"></a>设置位置</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.center = <span class="keyword">self</span>.view.center</div></pre></td></tr></table></figure><h3 id="当前选中下标"><a href="#当前选中下标" class="headerlink" title="当前选中下标"></a>当前选中下标</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.selectedSegmentIndex = <span class="number">1</span></div></pre></td></tr></table></figure><p>##添加事件</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.addTarget(<span class="keyword">self</span>, action: #selector(segmentedControlChanged), <span class="keyword">for</span>: <span class="type">UIControlEvents</span>.valueChanged)</div></pre></td></tr></table></figure><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.view.addSubview(segmentedControl)</div></pre></td></tr></table></figure><h2 id="选择点击后的事件"><a href="#选择点击后的事件" class="headerlink" title="选择点击后的事件"></a>选择点击后的事件</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">segmentedControlChanged</span><span class="params">(sender:UISegmentedControl)</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(sender.selectedSegmentIndex)</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(sender.titleForSegment(at: sender.selectedSegmentIndex))</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="添加删除选项"><a href="#添加删除选项" class="headerlink" title="添加删除选项"></a>添加删除选项</h2><blockquote><p>UISegmentedControl每个选项的宽度在默认情况下会根据选项的个数自动分配，而个数在初始化控件之后可以添加和删除</p></blockquote><h3 id="添加图片选项"><a href="#添加图片选项" class="headerlink" title="添加图片选项"></a>添加图片选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.insertSegment(with: <span class="type">UIImage</span>(named:<span class="string">"2"</span>), at: <span class="number">0</span>, animated: <span class="literal">true</span>)</div></pre></td></tr></table></figure><h3 id="添加文字选项"><a href="#添加文字选项" class="headerlink" title="添加文字选项"></a>添加文字选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.insertSegment(withTitle: <span class="string">"见哥0"</span>, at: <span class="number">1</span>, animated: <span class="literal">true</span>)</div></pre></td></tr></table></figure><h3 id="移除制定下标的选项"><a href="#移除制定下标的选项" class="headerlink" title="移除制定下标的选项"></a>移除制定下标的选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.removeSegment(at: <span class="number">1</span>, animated: <span class="literal">true</span>)</div></pre></td></tr></table></figure><h3 id="移出所有segment"><a href="#移出所有segment" class="headerlink" title="移出所有segment"></a>移出所有segment</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segment.removeAllSegments()</div></pre></td></tr></table></figure><h3 id="颜色设定"><a href="#颜色设定" class="headerlink" title="颜色设定"></a>颜色设定</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmentedControl.tintColor = <span class="type">UIColor</span>.red</div></pre></td></tr></table></figure><h3 id="获取颜色"><a href="#获取颜色" class="headerlink" title="获取颜色"></a>获取颜色</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> segmentColor = segment.tintColor</div></pre></td></tr></table></figure><h3 id="显示文字修改"><a href="#显示文字修改" class="headerlink" title="显示文字修改"></a>显示文字修改</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmented.setTitle(<span class="string">"swfit"</span>, forSegmentAt:<span class="number">1</span>)</div></pre></td></tr></table></figure><h3 id="获取某一个下标下的标题"><a href="#获取某一个下标下的标题" class="headerlink" title="获取某一个下标下的标题"></a>获取某一个下标下的标题</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> title = segment.titleForSegmentAtIndex(<span class="number">1</span>)</div></pre></td></tr></table></figure><h3 id="修改选项图片"><a href="#修改选项图片" class="headerlink" title="修改选项图片"></a>修改选项图片</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmented.setImage(<span class="type">UIImage</span>(named:<span class="string">"icon"</span>), forSegmentAt:<span class="number">2</span>)</div></pre></td></tr></table></figure><h3 id="获取某一个下标下得图片"><a href="#获取某一个下标下得图片" class="headerlink" title="获取某一个下标下得图片"></a>获取某一个下标下得图片</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> image = segment.imageForSegmentAtIndex(<span class="number">2</span>)</div></pre></td></tr></table></figure><h3 id="修改选项内容偏移位置"><a href="#修改选项内容偏移位置" class="headerlink" title="修改选项内容偏移位置"></a>修改选项内容偏移位置</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segmented.setContentOffset(<span class="type">CGSize</span>(width:<span class="number">10</span>, height:<span class="number">7</span>), forSegmentAt:<span class="number">1</span>)</div></pre></td></tr></table></figure><h2 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h2><blockquote><p>UISegmentedControl每个选项的宽度在默认情况下会根据选项的个数自动分配，但是有时候根据项目情况的需要，我们也是可以手动来进行设置/获取的。</p></blockquote><h3 id="设置指定下标选项的宽度"><a href="#设置指定下标选项的宽度" class="headerlink" title="设置指定下标选项的宽度"></a>设置指定下标选项的宽度</h3><p>segmentedControl.setWidth(10, forSegmentAt: 1)</p><h3 id="获取某一个下标segment的宽度"><a href="#获取某一个下标segment的宽度" class="headerlink" title="获取某一个下标segment的宽度"></a>获取某一个下标segment的宽度</h3><p>var width = segment.widthForSegmentAtIndex(2)</p><h3 id="是否根据segment的内容改变segment的宽度"><a href="#是否根据segment的内容改变segment的宽度" class="headerlink" title="是否根据segment的内容改变segment的宽度"></a>是否根据segment的内容改变segment的宽度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segment.apportionsSegmentWidthsByContent = <span class="literal">true</span></div></pre></td></tr></table></figure><p>###momentary属性</p><blockquote><p>分段选择控件在点击之后一直处于选中状态，除非点击其他分段，才恢复。 momentary属性用来设置是否一直保持选中状态，当设置为YES时，点击选中，但一会就是恢复到正常状态<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">segment.momentary = <span class="literal">true</span></div></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISegmentedControl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISegmentedControl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UISwitch</title>
      <link href="/2017/12/07/Swift/UIKit/UISwitch/"/>
      <content type="html"><![CDATA[<h1 id="UISwitch"><a href="#UISwitch" class="headerlink" title="UISwitch"></a>UISwitch</h1><blockquote><p>继承自UIControl</p></blockquote><h2 id="UISwitch的大小是确定的不能进行修改-51-31"><a href="#UISwitch的大小是确定的不能进行修改-51-31" class="headerlink" title="UISwitch的大小是确定的不能进行修改 51*31"></a>UISwitch的大小是确定的不能进行修改 51*31</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> switchOne = <span class="type">UISwitch</span>(frame:<span class="type">CGRect</span>(x:<span class="number">10.0</span>, y:<span class="number">100.0</span>, width:<span class="number">0.0</span>,height: <span class="number">0.0</span>))</div><div class="line"><span class="keyword">self</span>.view.addSubview(switchOne)</div><div class="line">switchOne.backgroundColor = <span class="type">UIColor</span> .yellow;</div></pre></td></tr></table></figure><h2 id="设置打开状态背景颜色"><a href="#设置打开状态背景颜色" class="headerlink" title="设置打开状态背景颜色"></a>设置打开状态背景颜色</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">switchOne.onTintColor = <span class="type">UIColor</span>.brown</div></pre></td></tr></table></figure><h2 id="设置关闭状态的背景颜色"><a href="#设置关闭状态的背景颜色" class="headerlink" title="设置关闭状态的背景颜色"></a>设置关闭状态的背景颜色</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">switchOne.tintColor = <span class="type">UIColor</span>.orange</div></pre></td></tr></table></figure><h2 id="开关快的颜色"><a href="#开关快的颜色" class="headerlink" title="开关快的颜色"></a>开关快的颜色</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">switchOne.thumbTintColor = <span class="type">UIColor</span>.red</div></pre></td></tr></table></figure><h2 id="设置开关状态"><a href="#设置开关状态" class="headerlink" title="设置开关状态"></a>设置开关状态</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">switchOne.setOn(<span class="literal">true</span>, animated: <span class="literal">true</span>)</div></pre></td></tr></table></figure><h2 id="添加按钮事件"><a href="#添加按钮事件" class="headerlink" title="添加按钮事件"></a>添加按钮事件</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">switchOne.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.switchOneValueChanged(sender:)), <span class="keyword">for</span>: <span class="type">UIControlEvents</span>.valueChanged)</div></pre></td></tr></table></figure><h2 id="状态改变之后的执行方法"><a href="#状态改变之后的执行方法" class="headerlink" title="状态改变之后的执行方法"></a>状态改变之后的执行方法</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchOneValueChanged</span><span class="params">(sender:UISwitch)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是一个帅哥，你信不？value=%d"</span>,sender.isOn)</div><div class="line">&#125;</div><div class="line"></div><div class="line">switchOne.onImage = <span class="type">UIImage</span>(named:<span class="string">"1"</span>)</div><div class="line">switchOne.offImage = <span class="type">UIImage</span>(named:<span class="string">"2"</span>)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISwitch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISwitch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIStepper</title>
      <link href="/2017/12/07/Swift/UIKit/UIStepper/"/>
      <content type="html"><![CDATA[<h1 id="UIStepper"><a href="#UIStepper" class="headerlink" title="UIStepper"></a>UIStepper</h1><h2 id="创建-frame"><a href="#创建-frame" class="headerlink" title="创建+frame"></a>创建+frame</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> stepper = <span class="type">UIStepper</span>()</div><div class="line">stepper.center = <span class="keyword">self</span>.view.center</div></pre></td></tr></table></figure><h2 id="设置最大和最小值"><a href="#设置最大和最小值" class="headerlink" title="设置最大和最小值"></a>设置最大和最小值</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.maximumValue = <span class="number">10</span></div><div class="line">stepper.minimumValue = <span class="number">1</span></div></pre></td></tr></table></figure><h2 id="当前值"><a href="#当前值" class="headerlink" title="当前值"></a>当前值</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.value = <span class="number">1</span></div></pre></td></tr></table></figure><h2 id="每次变化的单位"><a href="#每次变化的单位" class="headerlink" title="每次变化的单位"></a>每次变化的单位</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.stepValue = <span class="number">1</span></div></pre></td></tr></table></figure><h2 id="按住的时候连续变化"><a href="#按住的时候连续变化" class="headerlink" title="按住的时候连续变化"></a>按住的时候连续变化</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.isContinuous = <span class="literal">true</span></div></pre></td></tr></table></figure><h2 id="是否循环-当增长到最大值的时候再从新开始"><a href="#是否循环-当增长到最大值的时候再从新开始" class="headerlink" title="是否循环 当增长到最大值的时候再从新开始"></a>是否循环 当增长到最大值的时候再从新开始</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.wraps = <span class="literal">true</span></div></pre></td></tr></table></figure><h2 id="改变事件添加"><a href="#改变事件添加" class="headerlink" title="改变事件添加"></a>改变事件添加</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.addTarget(<span class="keyword">self</span>, action:#selector(<span class="type">ViewController</span>.stepperChanged(stepper:)), <span class="keyword">for</span>: <span class="type">UIControlEvents</span>.valueChanged)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">stepperChanged</span><span class="params">(stepper:UIStepper)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是一个帅哥，你信不？value=%d"</span>,stepper.value)</div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>.view.addSubview(stepper)</div></pre></td></tr></table></figure><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.tintColor = <span class="type">UIColor</span>.green</div></pre></td></tr></table></figure><h2 id="设置img"><a href="#设置img" class="headerlink" title="设置img"></a>设置img</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">stepper.setDecrementImage(<span class="type">UIImage</span>(named:<span class="string">"1"</span>), <span class="keyword">for</span>: .normal)</div><div class="line">stepper.setIncrementImage(<span class="type">UIImage</span>(named:<span class="string">"1"</span>), <span class="keyword">for</span>: .normal)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIStepper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UIStepper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift—UIKit-UISlider</title>
      <link href="/2017/12/07/Swift/UIKit/UISlider/"/>
      <content type="html"><![CDATA[<h1 id="UISlider"><a href="#UISlider" class="headerlink" title="UISlider"></a>UISlider</h1><h2 id="创建-frame"><a href="#创建-frame" class="headerlink" title="创建+frame"></a>创建+frame</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> slider = <span class="type">UISlider</span>()</div><div class="line">slider.frame = <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">100</span>, width: <span class="number">200</span>, height: <span class="number">50</span>)</div></pre></td></tr></table></figure><p>##最小/大值</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.minimumValue = <span class="number">0</span></div><div class="line">slider.maximumValue = <span class="number">1</span></div></pre></td></tr></table></figure><h2 id="当前值（在取值范围之内的位置）"><a href="#当前值（在取值范围之内的位置）" class="headerlink" title="当前值（在取值范围之内的位置）"></a>当前值（在取值范围之内的位置）</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.value = <span class="number">0.5</span></div></pre></td></tr></table></figure><p>##按钮最小/大端图片<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.minimumValueImage = <span class="type">UIImage</span>(named:<span class="string">"SSS"</span>)</div><div class="line">slider.maximumValueImage = <span class="type">UIImage</span>(named:<span class="string">"DDD"</span>)</div></pre></td></tr></table></figure></p><h2 id="不同状态之下，圆点显示图片"><a href="#不同状态之下，圆点显示图片" class="headerlink" title="不同状态之下，圆点显示图片"></a>不同状态之下，圆点显示图片</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.setThumbImage(<span class="type">UIImage</span>(named:<span class="string">""</span>), <span class="keyword">for</span>: .normal)</div><div class="line">slider.setThumbImage(<span class="type">UIImage</span>(named:<span class="string">""</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">slider.setThumbImage(<span class="type">UIImage</span>(named:<span class="string">""</span>), <span class="keyword">for</span>: .disabled)</div><div class="line">slider.setThumbImage(<span class="type">UIImage</span>(named:<span class="string">""</span>), <span class="keyword">for</span>: .selected)</div></pre></td></tr></table></figure><p>##设置圆点的颜色</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.thumbTintColor = <span class="type">UIColor</span>.red</div></pre></td></tr></table></figure><h2 id="设置划过和没有划过颜色（圆点左-右）"><a href="#设置划过和没有划过颜色（圆点左-右）" class="headerlink" title="设置划过和没有划过颜色（圆点左/右）"></a>设置划过和没有划过颜色（圆点左/右）</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.minimumTrackTintColor = <span class="type">UIColor</span>.yellow</div><div class="line">slider.maximumTrackTintColor = <span class="type">UIColor</span>.brown</div></pre></td></tr></table></figure><h2 id="改变事件"><a href="#改变事件" class="headerlink" title="改变事件"></a>改变事件</h2><blockquote><p>滑块滑动停止后才触发ValueChanged事件 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">slider.isContinuous = <span class="literal">false</span></div><div class="line">slider.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.change(slider:)), <span class="keyword">for</span>: <span class="type">UIControlEvents</span>.valueChanged)</div><div class="line">slider.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.sliderDragUp(sender:)), <span class="keyword">for</span>: <span class="type">UIControlEvents</span>.touchUpInside)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(slider:UISlider)</span></span> &#123;</div><div class="line">       <span class="built_in">print</span>(<span class="string">"slider.value = %d"</span>,slider.value)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sliderDragUp</span><span class="params">(sender: UISlider)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"value:(sender.value)"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UISlider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UISlider </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UITextField</title>
      <link href="/2017/12/07/Swift/UIKit/Swift-UIKit-UITextField/"/>
      <content type="html"><![CDATA[<h1 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h1><blockquote><p>创建+frame</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> textField = <span class="type">UITextField</span>(frame: <span class="type">CGRect</span>(x:<span class="number">10</span>, y:<span class="number">60</span>, width:<span class="number">200</span>, height:<span class="number">30</span>))</div><div class="line"><span class="comment">// let textField = UITextField()</span></div><div class="line"><span class="comment">// textField.frame = CGRect(x:20,y:30,width:100,height:30)</span></div></pre></td></tr></table></figure><blockquote><p>设置边框样式为圆角矩形</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.borderStyle = <span class="type">UITextBorderStyle</span>.roundedRect</div><div class="line"><span class="keyword">self</span>.view.addSubview(textField)</div></pre></td></tr></table></figure><blockquote><p>文本输入框的边框样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UITextBorderStyle</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">none</span> 无边框</div><div class="line">        <span class="keyword">case</span> line 直线边框</div><div class="line">        <span class="keyword">case</span> bezel 圆角矩形边框</div><div class="line">        <span class="keyword">case</span> roundedRect 边线+阴影</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>文本输入框的提示文字</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.placeholder = <span class="string">"请输入相关信息"</span></div></pre></td></tr></table></figure><blockquote><p>文字大小超过文本框长度时自动缩小字号，而不是隐藏显示省略号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> textField.adjustsFontSizeToFitWidth=<span class="literal">true</span>  <span class="comment">//当文字超出文本框宽度时，自动调整文字大小</span></div><div class="line">textField.minimumFontSize=<span class="number">14</span>              <span class="comment">//最小可缩小的字号</span></div></pre></td></tr></table></figure><blockquote><p>水平/垂直对齐方式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">/** 水平对齐 **/</span></div><div class="line">textField.textAlignment = .<span class="keyword">right</span> <span class="comment">//水平右对齐</span></div><div class="line">textField.textAlignment = .center <span class="comment">//水平居中对齐</span></div><div class="line">textField.textAlignment = .<span class="keyword">left</span> <span class="comment">//水平左对齐</span></div><div class="line"> </div><div class="line"><span class="comment">/** 垂直对齐 **/</span></div><div class="line">textField.contentVerticalAlignment = .top  <span class="comment">//垂直向上对齐</span></div><div class="line">textField.contentVerticalAlignment = .center  <span class="comment">//垂直居中对齐</span></div><div class="line">textField.contentVerticalAlignment = .bottom  <span class="comment">//垂直向下对齐</span></div></pre></td></tr></table></figure><blockquote><p>背景图片设置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.borderStyle = .<span class="keyword">none</span> <span class="comment">//先要去除边框样式</span></div><div class="line">textField.background = <span class="type">UIImage</span>(named:<span class="string">"background1"</span>)</div></pre></td></tr></table></figure><blockquote><p>清除按钮（输入框内右侧小叉）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.clearButtonMode = .whileEditing  <span class="comment">//编辑时出现清除按钮</span></div><div class="line">textField.clearButtonMode = .unlessEditing  <span class="comment">//编辑时不出现，编辑后才出现清除按钮</span></div><div class="line">textField.clearButtonMode = .always  <span class="comment">//一直显示清除按钮</span></div></pre></td></tr></table></figure><blockquote><p>键盘类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Default</span>：                系统默认的虚拟键盘</div><div class="line"><span class="type">ASCII</span> <span class="type">Capable</span>：          显示英文字母的虚拟键盘</div><div class="line"><span class="type">Numbers</span> and <span class="type">Punctuation</span>：显示数字和标点的虚拟键盘</div><div class="line"><span class="type">URL</span>：                    显示便于输入url网址的虚拟键盘</div><div class="line"><span class="type">Number</span> <span class="type">Pad</span>：             显示便于输入数字的虚拟键盘</div><div class="line"><span class="type">Phone</span> <span class="type">Pad</span>：              显示便于拨号呼叫的虚拟键盘</div><div class="line"><span class="type">Name</span> <span class="type">Phone</span> <span class="type">Pad</span>：         显示便于聊天拨号的虚拟键盘</div><div class="line"><span class="type">Email</span> <span class="type">Address</span>：          显示便于输入<span class="type">Email</span>的虚拟键盘</div><div class="line"><span class="type">Decimal</span> <span class="type">Pad</span>：            显示用于输入数字和小数点的虚拟键盘</div><div class="line"><span class="type">Twitter</span>：                显示方便些<span class="type">Twitter</span>的虚拟键盘</div><div class="line"><span class="type">Web</span> <span class="type">Search</span>：             显示便于在网页上书写的虚拟键盘</div></pre></td></tr></table></figure><blockquote><p>设置文本框关联的键盘</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.keyboardType = <span class="type">UIKeyboardType</span>.numberPad</div></pre></td></tr></table></figure><blockquote><p>使文本框失去焦点，并收回键盘</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.resignFirstResponder()</div></pre></td></tr></table></figure><blockquote><p>设置键盘return键的样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> extField.returnKeyType = <span class="type">UIReturnKeyType</span>.done     <span class="comment">//表示完成输入</span></div><div class="line">textField.returnKeyType = <span class="type">UIReturnKeyType</span>.go      <span class="comment">//表示完成输入，同时会跳到另一页</span></div><div class="line">textField.returnKeyType = <span class="type">UIReturnKeyType</span>.search  <span class="comment">//表示搜索</span></div><div class="line">textField.returnKeyType = <span class="type">UIReturnKeyType</span>.<span class="built_in">join</span>    <span class="comment">//表示注册用户或添加数据</span></div><div class="line">textField.returnKeyType = <span class="type">UIReturnKeyType</span>.next    <span class="comment">//表示继续下一步</span></div><div class="line">textField.returnKeyType = <span class="type">UIReturnKeyType</span>.send    <span class="comment">//表示发送</span></div></pre></td></tr></table></figure><blockquote><p>键盘return键的响应</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">import</span> UIKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITextFieldDelegate</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">         </div><div class="line">        <span class="keyword">let</span> textField = <span class="type">UITextField</span>(frame: <span class="type">CGRect</span>(x:<span class="number">10</span>,y:<span class="number">160</span>,width:<span class="number">200</span>,height:<span class="number">30</span>))</div><div class="line">        <span class="comment">//设置边框样式为圆角矩形</span></div><div class="line">        textField.borderStyle = <span class="type">UITextBorderStyle</span>.roundedRect</div><div class="line">        textField.returnKeyType = <span class="type">UIReturnKeyType</span>.done</div><div class="line">        textField.delegate=<span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(textField)</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">//收起键盘</span></div><div class="line">        textField.resignFirstResponder()</div><div class="line">        <span class="comment">//打印出文本框中的值</span></div><div class="line">        <span class="built_in">print</span>(textField.text)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>输入/显示文本字体的颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">textField.textColor = <span class="type">UIColor</span>.cyan</div></pre></td></tr></table></figure><blockquote><p>文本框的字体大小设置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//text.font = [UIFont fontWithName:@"Arial" size:20.0f];   //设置输入框内容的字体样式和大小</span></div><div class="line">textField.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)</div></pre></td></tr></table></figure><blockquote><p>文本输入框的代理设置（遵守UITextFieldDelegate协议）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITextFieldDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">textField.delegate = <span class="keyword">self</span></div></pre></td></tr></table></figure><blockquote><p>输入框的背景颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">text.backgroundColor = [<span class="type">UIColor</span> whiteColor]<span class="comment">//设置输入框的背景颜色，此时设置为白色 如果使用了自定义的背景图片边框会被忽略掉 ~~~</span></div></pre></td></tr></table></figure><blockquote><p>输入框中一开始就有的文字</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">text.text = @<span class="string">"文字"</span>;</div></pre></td></tr></table></figure><blockquote><p>是否自动纠错</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> text.autocorrectionType = <span class="type">UITextAutocorrectionTypeNo</span></div><div class="line"> 几种选择样式</div><div class="line">typedef <span class="class"><span class="keyword">enum</span> </span>&#123;</div><div class="line"><span class="type">UITextAutocorrectionTypeDefault</span>, 默认</div><div class="line"><span class="type">UITextAutocorrectionTypeNo</span>, 不自动纠错</div><div class="line"><span class="type">UITextAutocorrectionTypeYes</span>, 自动纠错</div><div class="line">&#125; <span class="type">UITextAutocorrectionType</span>;</div></pre></td></tr></table></figure><blockquote><p>再次编辑就清空</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">text.clearsOnBeginEditing = <span class="type">YES</span></div></pre></td></tr></table></figure><blockquote><p>首字母是否自动大</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> text.autocapitalizationType = <span class="type">UITextAutocapitalizationTypeNone</span>;</div><div class="line">typedef <span class="class"><span class="keyword">enum</span> </span>&#123;</div><div class="line"><span class="type">UITextAutocapitalizationTypeNone</span>, 不自动大写</div><div class="line"><span class="type">UITextAutocapitalizationTypeWords</span>, 单词首字母大写</div><div class="line"><span class="type">UITextAutocapitalizationTypeSentences</span>, 句子的首字母大写</div><div class="line"><span class="type">UITextAutocapitalizationTypeAllCharacters</span>, 所有字母都大写</div><div class="line">&#125; <span class="type">UITextAutocapitalizationType</span>;</div></pre></td></tr></table></figure><blockquote><p>键盘外观</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> textView.keyboardAppearance=<span class="type">UIKeyboardAppearanceDefault</span></div><div class="line"> </div><div class="line">typedef <span class="class"><span class="keyword">enum</span> </span>&#123;</div><div class="line"><span class="type">UIKeyboardAppearanceDefault</span>， 默认外观，浅灰色</div><div class="line"><span class="type">UIKeyboardAppearanceAlert</span>， 深灰 石墨色</div><div class="line">&#125; <span class="type">UIReturnKeyType</span>;</div></pre></td></tr></table></figure><blockquote><p>最右侧加图片是以下代码（左侧类似）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="type">UIImageView</span> *image=[[<span class="type">UIImageView</span> alloc] initWithImage:[<span class="type">UIImage</span> imageNamed:@<span class="string">"right.png"</span>]] <span class="comment">//</span></div><div class="line">text.rightView=image;</div><div class="line">text.rightViewMode = <span class="type">UITextFieldViewModeAlways</span></div><div class="line"></div><div class="line">typedef <span class="class"><span class="keyword">enum</span> </span>&#123;</div><div class="line"><span class="type">UITextFieldViewModeNever</span>,</div><div class="line"><span class="type">UITextFieldViewModeWhileEditing</span>,</div><div class="line"><span class="type">UITextFieldViewModeUnlessEditing</span>,</div><div class="line"><span class="type">UITextFieldViewModeAlways</span></div><div class="line">&#125; <span class="type">UITextFieldViewMode</span>;</div></pre></td></tr></table></figure><blockquote><p>重写绘制行为<br>除了UITextField对象的风格选项，你还可以定制化UITextField对象，为他添加许多不同的重写方法，来改变文本字段的显示行为。这些方法都会返回一个CGRect结构，制定了文本字段每个部件的边界范围。以下方法都可以重写</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> – textRectForBounds:　　 <span class="comment">//重写来重置文字区域</span></div><div class="line">– drawTextInRect:　　 <span class="comment">//改变绘文字属性.重写时调用super可以按默认图形属性绘制,若自己完全重写绘制函数，就不用调用super了.</span></div><div class="line">– placeholderRectForBounds:　　<span class="comment">//重写来重置占位符区域</span></div><div class="line">– drawPlaceholderInRect:　　<span class="comment">//重写改变绘制占位符属性.重写时调用super可以按默认图形属性绘制,若自己完全重写绘制函数，就不用调用super了.</span></div><div class="line">– borderRectForBounds:　　<span class="comment">//重写来重置边缘区域</span></div><div class="line">– editingRectForBounds:　　<span class="comment">//重写来重置编辑区域</span></div><div class="line">– clearButtonRectForBounds:　　<span class="comment">//重写来重置clearButton位置,改变size可能导致button的图片失真</span></div><div class="line">– leftViewRectForBounds:</div><div class="line">– rightViewRectForBounds:</div></pre></td></tr></table></figure><blockquote><p>委托方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> (<span class="type">BOOL</span>)textFieldShouldBeginEditing:(<span class="type">UITextField</span> *)textField&#123;</div><div class="line"><span class="comment">//返回一个BOOL值，指定是否循序文本字段开始编辑</span></div><div class="line"><span class="keyword">return</span> <span class="type">YES</span>;</div><div class="line">&#125;</div><div class="line">(void)textFieldDidBeginEditing:(<span class="type">UITextField</span> *)textField&#123;</div><div class="line"><span class="comment">//开始编辑时触发，文本字段将成为first responder</span></div><div class="line">&#125;</div><div class="line">(<span class="type">BOOL</span>)textFieldShouldEndEditing:(<span class="type">UITextField</span> *)textField&#123;</div><div class="line"><span class="comment">//返回BOOL值，指定是否允许文本字段结束编辑，当编辑结束，文本字段会让出first responder</span></div><div class="line"><span class="comment">//要想在用户结束编辑时阻止文本字段消失，可以返回NO</span></div><div class="line"><span class="comment">//这对一些文本字段必须始终保持活跃状态的程序很有用，比如即时消息</span></div><div class="line"><span class="keyword">return</span> <span class="type">NO</span>;</div><div class="line">&#125;</div><div class="line">(<span class="type">BOOL</span>)textField:(<span class="type">UITextField</span>*)textField shouldChangeCharactersInRange:(<span class="type">NSRange</span>)range replacementString:(<span class="type">NSString</span> *)string&#123;</div><div class="line"><span class="comment">//当用户使用自动更正功能，把输入的文字修改为推荐的文字时，就会调用这个方法。</span></div><div class="line"><span class="comment">//这对于想要加入撤销选项的应用程序特别有用</span></div><div class="line"><span class="comment">//可以跟踪字段内所做的最后一次修改，也可以对所有编辑做日志记录,用作审计用途。</span></div><div class="line"><span class="comment">//要防止文字被改变可以返回NO</span></div><div class="line"><span class="comment">//这个方法的参数中有一个NSRange对象，指明了被改变文字的位置，建议修改的文本也在其中</span></div><div class="line"><span class="keyword">return</span> <span class="type">YES</span>;</div><div class="line">&#125;</div><div class="line">(<span class="type">BOOL</span>)textFieldShouldClear:(<span class="type">UITextField</span> *)textField&#123;</div><div class="line"><span class="comment">//返回一个BOOL值指明是否允许根据用户请求清除内容</span></div><div class="line"><span class="comment">//可以设置在特定条件下才允许清除内容</span></div><div class="line"><span class="keyword">return</span> <span class="type">YES</span>;</div><div class="line">&#125;</div><div class="line">-(<span class="type">BOOL</span>)textFieldShouldReturn:(<span class="type">UITextField</span> *)textField&#123;</div><div class="line"><span class="comment">//返回一个BOOL值，指明是否允许在按下回车键时结束编辑</span></div><div class="line"><span class="comment">//如果允许要调用resignFirstResponder 方法，这回导致结束编辑，而键盘会被收起[textField resignFirstResponder];</span></div><div class="line"><span class="comment">//查一下resign这个单词的意思就明白这个方法了</span></div><div class="line"><span class="keyword">return</span> <span class="type">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>通知</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="type">UITextField</span>派生自<span class="type">UIControl</span>，所以<span class="type">UIControl</span>类中的通知系统在文本字段中也可以使用。除了<span class="type">UIControl</span>类的标准事件，你还可以使用下列<span class="type">UITextField</span>类特有的事件</div><div class="line"><span class="type">UITextFieldTextDidBeginEditingNotification</span></div><div class="line"><span class="type">UITextFieldTextDidChangeNotification</span></div><div class="line"><span class="type">UITextFieldTextDidEndEditingNotification</span></div><div class="line">当文本字段退出编辑模式时触发。通知的object属性存储了最终文本。</div><div class="line">因为文本字段要使用键盘输入文字，所以下面这些事件发生时，也会发送动作通知</div><div class="line"><span class="type">UIKeyboardWillShowNotification</span>   <span class="comment">//键盘显示之前发送</span></div><div class="line"><span class="type">UIKeyboardDidShowNotification</span>    <span class="comment">//键盘显示之后发送</span></div><div class="line"><span class="type">UIKeyboardWillHideNotification</span>   <span class="comment">//键盘隐藏之前发送</span></div><div class="line"><span class="type">UIKeyboardDidHideNotification</span>    <span class="comment">//键盘隐藏之后发送</span></div><div class="line"></div><div class="line"><span class="comment">//添加通知方法</span></div><div class="line"><span class="type">NSNotificationCenter</span>.defaultCenter().addObserver(<span class="keyword">self</span>, selector: <span class="type">Selector</span>(<span class="string">"textFiledEditChanged:"</span>), name: <span class="type">UITextFieldTextDidChangeNotification</span>, object: textfield)</div></pre></td></tr></table></figure><blockquote><p>限制只能输入特定的字符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> -(<span class="type">BOOL</span>)textField:(<span class="type">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="type">NSRange</span>)range replacementString:(<span class="type">NSString</span> *)string&#123;</div><div class="line"><span class="type">NSCharacterSet</span> *cs;</div><div class="line">cs = [[<span class="type">NSCharacterSet</span> characterSetWithCharactersInString:<span class="type">NUMBERS</span>]invertedSet];</div><div class="line"><span class="type">NSString</span> *filtered = [[string componentsSeparatedByCharactersInSet:cs]componentsJoinedByString:@<span class="string">""</span>];<span class="comment">//按cs分离出数组,数组按@""分离出字符串</span></div><div class="line"><span class="type">BOOL</span> canChange = [string isEqualToString:filtered];</div><div class="line"><span class="keyword">return</span> canChange;</div><div class="line">&#125;</div><div class="line">上面这个<span class="type">NUMBERS</span>是一个宏，可以在文件顶部定义：</div><div class="line">define <span class="type">NUMBERS</span> @”<span class="number">0123456789</span>\n”</div><div class="line">如果你要限制输入英文和数字的话，就可以把这个定义为：</div><div class="line">define kAlphaNum @”<span class="type">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</span>″</div></pre></td></tr></table></figure><blockquote><p>限制只能输入一定长度的字符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> (<span class="type">BOOL</span>)textField:(<span class="type">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="type">NSRange</span>)range replacementString:(<span class="type">NSString</span> *)string;</div><div class="line">&#123; <span class="comment">//string就是此时输入的那个字符 textField就是此时正在输入的那个输入框 返回YES就是可以改变输入框的值 NO相反</span></div><div class="line"><span class="keyword">if</span> ([string isEqualToString:@<span class="string">"\n"</span>]) <span class="comment">//按会车可以改变</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="type">YES</span>;</div><div class="line">&#125;</div><div class="line"><span class="type">NSString</span> * toBeString = [textField.text stringByReplacingCharactersInRange:range withString:string];<span class="comment">//得到输入框的内容</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.myTextField == textField) <span class="comment">//判断是否时我们想要限定的那个输入框</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> ([toBeString length] &gt; <span class="number">20</span>) &#123; <span class="comment">//如果输入框内容大于20则弹出警告</span></div><div class="line">textField.text = [toBeString substringToIndex:<span class="number">20</span>];</div><div class="line"><span class="type">UIAlertView</span> *alert = [[[<span class="type">UIAlertView</span> alloc] initWithTitle:<span class="literal">nil</span> message:@<span class="string">"超过最大字数不能输入了"</span> delegate:<span class="literal">nil</span> cancelButtonTitle:@<span class="string">"Ok"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>] autorelease];</div><div class="line">[alert show];</div><div class="line"><span class="keyword">return</span> <span class="type">NO</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="type">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置能不能进行编辑/用户交互的开关</span></div><div class="line">textfield.enabled = <span class="literal">true</span></div><div class="line">textfield.userInteractionEnabled = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">//设置圆角属性</span></div><div class="line">textField.layer.cornerRadius = <span class="number">10.0</span></div><div class="line">textField.layer.masksToBounds = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">//自定义输入源控件</span></div><div class="line"><span class="keyword">let</span> inputview = <span class="type">UIButton</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="type">CGRectGetWidth</span>(<span class="keyword">self</span>.view.bounds), <span class="number">100.0</span>))</div><div class="line">inputview.setImage(<span class="type">UIImage</span>(named: <span class="string">"normalImage"</span>), forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line">inputview.backgroundColor = <span class="type">UIColor</span>.lightGrayColor()</div><div class="line">inputview.addTarget(<span class="keyword">self</span>, action: <span class="type">Selector</span>(<span class="string">"click:"</span>), forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">TouchUpInside</span>)</div><div class="line">textfield.inputView = inputview</div><div class="line"></div><div class="line"><span class="comment">// 自定义输入源控件副视图</span></div><div class="line"><span class="keyword">let</span> accessoryview = <span class="type">UIView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="type">CGRectGetWidth</span>(<span class="keyword">self</span>.view.bounds), <span class="number">40.0</span>))</div><div class="line">accessoryview.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line"><span class="keyword">let</span> accessoryLeft = <span class="type">UIButton</span>(frame: <span class="type">CGRectMake</span>(<span class="number">10.0</span>, <span class="number">10.0</span>, <span class="number">60.0</span>, <span class="number">20.0</span>))</div><div class="line">accessoryview.addSubview(accessoryLeft)</div><div class="line">accessoryLeft.setTitle(<span class="string">"取消"</span>, forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line">accessoryLeft.backgroundColor = <span class="type">UIColor</span>.orangeColor()</div><div class="line">accessoryLeft.addTarget(<span class="keyword">self</span>, action: <span class="type">Selector</span>(<span class="string">"leftClick:"</span>), forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">TouchUpInside</span>)</div><div class="line"><span class="keyword">let</span> accessoryRight = <span class="type">UIButton</span>(frame: <span class="type">CGRectMake</span>((<span class="type">CGRectGetWidth</span>(accessoryview.bounds) - <span class="number">10.0</span> - <span class="number">60.0</span>), <span class="number">10.0</span>, <span class="number">60.0</span>, <span class="number">20.0</span>))</div><div class="line">accessoryview.addSubview(accessoryRight)</div><div class="line">accessoryRight.setTitle(<span class="string">"确定"</span>, forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line">accessoryRight.backgroundColor = <span class="type">UIColor</span>.orangeColor()</div><div class="line">accessoryRight.addTarget(<span class="keyword">self</span>, action: <span class="type">Selector</span>(<span class="string">"rightClick:"</span>), forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">TouchUpInside</span>)</div><div class="line">textfield.inputAccessoryView = accessoryview</div><div class="line"></div><div class="line"><span class="comment">// 自定义输入源控件时响应事件</span></div><div class="line"><span class="comment">// MARK: - click</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">click</span><span class="params">(button:UIButton)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">self</span>.view.endEditing(<span class="literal">true</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MARK: - left/right click</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">leftClick</span><span class="params">(button:UIButton)</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"取消"</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightClick</span><span class="params">(button:UIButton)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">self</span>.view.endEditing(<span class="literal">true</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"确定"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UITextField </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UITextField </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UILabel</title>
      <link href="/2017/12/06/Swift/UIKit/UILabel/"/>
      <content type="html"><![CDATA[<h1 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h1><blockquote><p>创建&amp;&amp; 设置frame</p></blockquote> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> lab = <span class="type">UILabel</span>(frame:<span class="type">CGRect</span>(x:<span class="number">10</span>,y:<span class="number">100</span>,width:<span class="keyword">self</span>.view.frame.size.width - <span class="number">40</span>,height:<span class="number">200</span>))</div><div class="line"></div><div class="line"> 或</div><div class="line"> </div><div class="line"><span class="keyword">let</span> lab = <span class="type">UILabel</span>()</div><div class="line">lab.frame = <span class="type">CGRect</span>(x:<span class="number">10</span>,y:<span class="number">100</span>,width:<span class="keyword">self</span>.view.frame.size.width - <span class="number">40</span>,height:<span class="number">200</span>)</div></pre></td></tr></table></figure><blockquote><p>添加父层</p></blockquote> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.view.addSubview(lab);</div></pre></td></tr></table></figure><blockquote><p>显示文本内容</p></blockquote> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.text = <span class="string">"chen jian !"</span></div></pre></td></tr></table></figure><blockquote><p>设置bg颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.backgroundColor = <span class="type">UIColor</span>.green</div></pre></td></tr></table></figure><blockquote><p>文字颜色</p></blockquote> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.textColor = <span class="type">UIColor</span>.white</div></pre></td></tr></table></figure><blockquote><p>文字对齐方式</p></blockquote> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line">lab.textAlignment = <span class="type">NSTextAlignment</span>.<span class="keyword">left</span></div></pre></td></tr></table></figure><blockquote><p>高亮文字颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.highlightedTextColor = <span class="type">UIColor</span>.cyan</div></pre></td></tr></table></figure><blockquote><p>阴影颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.shadowColor = <span class="type">UIColor</span>.black</div></pre></td></tr></table></figure><blockquote><p>阴影偏移位置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.shadowOffset = <span class="type">CGSize</span>(width:-<span class="number">5</span>,height:<span class="number">5</span>)</div></pre></td></tr></table></figure><blockquote><p>设置圆角</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.layer.cornerRadius = <span class="number">20</span></div><div class="line">lab.layer.masksToBounds = <span class="literal">true</span></div></pre></td></tr></table></figure><blockquote><p>边框的宽度和颜色</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.layer.borderColor = <span class="type">UIColor</span>.green.cgColor</div><div class="line">lab.layer.borderWidth = <span class="number">2</span></div></pre></td></tr></table></figure><blockquote><p>文字类型/大小</p></blockquote> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.font = <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">20</span>)  <span class="comment">//加粗类型</span></div><div class="line">lab.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">20</span>)      <span class="comment">//文字大小</span></div><div class="line">lab.font = <span class="type">UIFont</span>.italicSystemFont(ofSize: <span class="number">20</span>)<span class="comment">//斜体类型</span></div><div class="line">lab.font = <span class="type">UIFont</span>(name:<span class="string">"您好"</span>,size:<span class="number">50</span>)         <span class="comment">//大小和文字一起设置</span></div></pre></td></tr></table></figure><blockquote><p>显示de样式</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   lab.lineBreakMode = <span class="type">NSLineBreakMode</span>.byCharWrapping</div><div class="line">   </div><div class="line">   <span class="comment">// NSParagraphStyle</span></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">6.0</span>, *)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">NSLineBreakMode</span> : <span class="title">Int</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">case</span> byWordWrapping <span class="comment">// Wrap at word boundaries, default</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> byCharWrapping <span class="comment">// Wrap at character boundaries</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> byClipping <span class="comment">// Simply clip</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> byTruncatingHead <span class="comment">// Truncate at head of line: "...wxyz"</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> byTruncatingTail <span class="comment">// Truncate at tail of line: "abcd..."</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> byTruncatingMiddle <span class="comment">// Truncate middle of line:  "ab...yz"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>多行de显示</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.numberOfLines = <span class="number">2</span> <span class="comment">//最多显示2行</span></div><div class="line">lab.numberOfLines = <span class="number">0</span> <span class="comment">// 默认没有行数显示</span></div><div class="line">lab.numberOfLines = <span class="number">1</span> <span class="comment">//只能显示一行</span></div></pre></td></tr></table></figure><blockquote><p>自动调整文字de大小</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">lab.adjustsFontSizeToFitWidth  =  <span class="literal">true</span></div></pre></td></tr></table></figure><h1 id="富文本设置"><a href="#富文本设置" class="headerlink" title="富文本设置"></a>富文本设置</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">//创建对象</span></div><div class="line"><span class="keyword">let</span> attributeString = <span class="type">NSMutableAttributedString</span>(string:<span class="string">"Welcome to Swift! Welcome to Swift! Welcome to Swift! Welcome to Swift!"</span>)</div><div class="line"><span class="comment">//设置字体大小/字体类型</span></div><div class="line">attributeString.addAttribute(<span class="type">NSFontAttributeName</span>, value: <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue-Bold"</span>, size: <span class="number">16</span>)!, range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">6</span>))</div><div class="line"><span class="comment">//设置背景颜色           </span></div><div class="line">attributeString.addAttribute(<span class="type">NSForegroundColorAttributeName</span>, value: <span class="type">UIColor</span>.red, range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">3</span>))          </div><div class="line"><span class="comment">//设置文档背景色     attributeString.addAttribute(NSBackgroundColorDocumentAttribute, value: UIColor.lightGray, range: NSMakeRange(10, 10))</span></div><div class="line"><span class="comment">//设置下划线</span></div><div class="line">attributeString.addAttribute(<span class="type">NSUnderlineStyleAttributeName</span>, value:<span class="type">NSUnderlineStyle</span>.<span class="type">StyleSingle</span>.rawValue, range: <span class="type">NSMakeRange</span>(<span class="number">5</span>,<span class="number">12</span>))</div><div class="line">        </div><div class="line">testLable.attributedText = attributeString;</div></pre></td></tr></table></figure><h1 id="文本高度计算"><a href="#文本高度计算" class="headerlink" title="文本高度计算"></a>文本高度计算</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">extension</span> <span class="title">NSString</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textSizeWithFont</span><span class="params">(font: UIFont, constrainedToSize size:CGSize)</span></span> -&gt; <span class="type">CGSize</span> &#123;</div><div class="line">        <span class="keyword">var</span> textSize:<span class="type">CGSize</span>!</div><div class="line">        <span class="keyword">if</span> <span class="type">CGSizeEqualToSize</span>(size, <span class="type">CGSizeZero</span>) &#123;</div><div class="line">            <span class="keyword">let</span> attributes = <span class="type">NSDictionary</span>(object: font, forKey: <span class="type">NSFontAttributeName</span>)</div><div class="line">            textSize = <span class="keyword">self</span>.sizeWithAttributes(attributes)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> option = <span class="type">NSStringDrawingOptions</span>.<span class="type">UsesLineFragmentOrigin</span></div><div class="line">            <span class="keyword">let</span> attributes = <span class="type">NSDictionary</span>(object: font, forKey: <span class="type">NSFontAttributeName</span>)</div><div class="line">            <span class="keyword">let</span> stringRect = <span class="keyword">self</span>.boundingRectWithSize(size, options: option, attributes: attributes, context: <span class="literal">nil</span>)</div><div class="line">            textSize = stringRect.size</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> textSize</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UILabel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> UILabel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-UIButton</title>
      <link href="/2017/12/06/Swift/UIKit/UIButton/"/>
      <content type="html"><![CDATA[<h1 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h1><blockquote><p>UIButton继承自UIControl</p></blockquote><h2 id="创建btn"><a href="#创建btn" class="headerlink" title="创建btn"></a>创建btn</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> btn: <span class="type">UIButton</span> = <span class="type">UIButton</span>()   <span class="comment">//没有样式</span></div><div class="line"><span class="comment">//let btns:UIButton =UIButton(type: UIButtonType)//有样式</span></div><div class="line"><span class="comment">//let button = UIButton(frame:CGRect(x:10, y:150, width:100, height:30))//简化创建方式</span></div><div class="line"><span class="keyword">self</span>.view.addSubview(button)</div></pre></td></tr></table></figure><h2 id="UIButtonType有以下类型"><a href="#UIButtonType有以下类型" class="headerlink" title="UIButtonType有以下类型"></a>UIButtonType有以下类型</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIButtonType</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> custom <span class="comment">// no button type</span></div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</div><div class="line">    <span class="keyword">case</span> system <span class="comment">// standard system button</span></div><div class="line">    <span class="keyword">case</span> detailDisclosure</div><div class="line">    <span class="keyword">case</span> infoLight</div><div class="line">    <span class="keyword">case</span> infoDark</div><div class="line">    <span class="keyword">case</span> contactAdd</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> roundedRect: <span class="type">UIButtonType</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Deprecated, use UIButtonTypeSystem instead</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">let</span>  btn: <span class="type">UIButton</span> = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)</div></pre></td></tr></table></figure><h2 id="UIButton设置字内容和颜色"><a href="#UIButton设置字内容和颜色" class="headerlink" title="UIButton设置字内容和颜色"></a>UIButton设置字内容和颜色</h2><blockquote><p>UIButton所对应的状态有几种</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">     Normal          (默认状态)</span></div><div class="line"><span class="comment">     Highlighted    （高亮状态）点击按钮不放</span></div><div class="line"><span class="comment">     Disabled       （使能状态）就是是否可用状态--&gt;禁用的状态才会显现</span></div><div class="line"><span class="comment">     Selected       （选中状态）通过selected属性设置</span></div><div class="line"><span class="comment"> */</span></div><div class="line"> </div><div class="line"> </div><div class="line"> /显示文字</div><div class="line">button1.setTitle(<span class="string">"普通状态"</span>, <span class="keyword">for</span>: .normal)</div><div class="line">button1.setTitle(<span class="string">"高粱状态"</span>, <span class="keyword">for</span>: .highlighted)</div><div class="line">button1.setTitle(<span class="string">"禁用状态"</span>, <span class="keyword">for</span>: .disabled)</div><div class="line"><span class="comment">//显示文字颜色</span></div><div class="line">button1.setTitleColor(<span class="type">UIColor</span>.red, <span class="keyword">for</span>: .normal)</div><div class="line">button1.setTitleColor(<span class="type">UIColor</span>.blue, <span class="keyword">for</span>: .highlighted)</div><div class="line">button1.setTitleColor(<span class="type">UIColor</span>.cyan, <span class="keyword">for</span>: .selected)</div><div class="line">button1.setTitleColor(<span class="type">UIColor</span>.cyan, <span class="keyword">for</span>: .disabled)</div><div class="line"><span class="comment">//阴影文字颜色设置</span></div><div class="line">button1.setTitleShadowColor(<span class="type">UIColor</span>.cyan, <span class="keyword">for</span>: .normal)</div><div class="line">button1.setTitleShadowColor(<span class="type">UIColor</span>.green, <span class="keyword">for</span>: .highlighted)</div><div class="line">button1.setTitleShadowColor(<span class="type">UIColor</span>.brown, <span class="keyword">for</span>: .disabled)</div><div class="line">button1.setTitleShadowColor(<span class="type">UIColor</span>.darkGray, <span class="keyword">for</span>: .selected)</div></pre></td></tr></table></figure><h2 id="UIButton设置背景颜色和背景图片"><a href="#UIButton设置背景颜色和背景图片" class="headerlink" title="UIButton设置背景颜色和背景图片"></a>UIButton设置背景颜色和背景图片</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//背景颜色</span></div><div class="line">button2.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line"><span class="comment">//背景图片    button4.setBackgroundImage(UIImage(named:"XXX"), for: .normal)</span></div></pre></td></tr></table></figure><h2 id="UIButton设置字体大小"><a href="#UIButton设置字体大小" class="headerlink" title="UIButton设置字体大小"></a>UIButton设置字体大小</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">button.titleLabel?.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">12</span>)</div></pre></td></tr></table></figure><h2 id="禁用UIButton"><a href="#禁用UIButton" class="headerlink" title="禁用UIButton"></a>禁用UIButton</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> button.isEnabled = <span class="literal">false</span></div><div class="line">button.isEnabled = <span class="literal">true</span></div></pre></td></tr></table></figure><h2 id="设置圆角"><a href="#设置圆角" class="headerlink" title="设置圆角"></a>设置圆角</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> button.layer.cornerRadius = <span class="number">5</span></div><div class="line">button.layer.masksToBounds = <span class="literal">true</span></div></pre></td></tr></table></figure><h2 id="设置边框宽度-颜色"><a href="#设置边框宽度-颜色" class="headerlink" title="设置边框宽度/颜色"></a>设置边框宽度/颜色</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> button.layer.borderWidth = <span class="number">2</span></div><div class="line">button.layer.borderColor = <span class="type">UIColor</span>.red.cgColor</div></pre></td></tr></table></figure><h2 id="设置背景图片为圆角"><a href="#设置背景图片为圆角" class="headerlink" title="设置背景图片为圆角"></a>设置背景图片为圆角</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> buttonImage.setImage(<span class="type">UIImage</span>(named:<span class="string">"1"</span>) , forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line"><span class="comment">//设置背景图片为圆角</span></div><div class="line">buttonImage.imageView?.layer.cornerRadius = <span class="number">50</span></div><div class="line"></div><div class="line">默认情况下按钮会被渲染成单一颜色；系统蓝</div><div class="line">button.setImage(<span class="type">UIImage</span>(named:<span class="string">"icon1"</span>),forState:.<span class="type">Normal</span>)  <span class="comment">//设置图标</span></div><div class="line">button.adjustsImageWhenHighlighted=<span class="literal">false</span> <span class="comment">//使触摸模式下按钮也不会变暗（半透明）</span></div><div class="line">button.adjustsImageWhenDisabled=<span class="literal">false</span> <span class="comment">//使禁用模式下按钮也不会变暗（半透明）</span></div><div class="line"></div><div class="line">也可以设置成保留图标原来的颜色</div><div class="line"><span class="keyword">let</span> iconImage = <span class="type">UIImage</span>(named:<span class="string">"icon2"</span>)?.withRenderingMode(.alwaysOriginal)</div><div class="line">button.setImage(iconImage, <span class="keyword">for</span>:.normal)  <span class="comment">//设置图标</span></div><div class="line">button.adjustsImageWhenHighlighted = <span class="literal">false</span> <span class="comment">//使触摸模式下按钮也不会变暗（半透明）</span></div><div class="line">button.adjustsImageWhenDisabled = <span class="literal">false</span> <span class="comment">//使禁用模式下按钮也不会变暗（半透明）</span></div></pre></td></tr></table></figure><h2 id="UIButton上图片和文字调整"><a href="#UIButton上图片和文字调整" class="headerlink" title="UIButton上图片和文字调整"></a>UIButton上图片和文字调整</h2><blockquote><p>UIButton上添加图片和文字，有时需要我们调整,方向为逆时针方向，上、左、下、右依次去设置的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  btn.imageEdgeInsets =<span class="type">UIEdgeInsetsMake</span>(top: <span class="type">CGFloat</span>, <span class="keyword">left</span>: <span class="type">CGFloat</span>, bottom: <span class="type">CGFloat</span>, <span class="keyword">right</span>: <span class="type">CGFloat</span>)</div><div class="line"></div><div class="line">btn.titleEdgeInsets =<span class="type">UIEdgeInsetsMake</span>(top: <span class="type">CGFloat</span>, <span class="keyword">left</span>: <span class="type">CGFloat</span>, bottom: <span class="type">CGFloat</span>, <span class="keyword">right</span>: <span class="type">CGFloat</span>)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//创建一个图片一个文字的按钮  </span></div><div class="line"><span class="keyword">let</span> btn2: <span class="type">UIButton</span> = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)  </div><div class="line">btn2.frame = <span class="type">CGRectMake</span>(<span class="number">50</span>, <span class="number">100</span>, <span class="number">120</span>, <span class="number">35</span>)  </div><div class="line">btn2.setImage(<span class="type">UIImage</span>(named: <span class="string">"1"</span>), forState: .<span class="type">Normal</span>)  </div><div class="line">btn2.backgroundColor = <span class="type">UIColor</span>.blackColor()  </div><div class="line">btn2.titleLabel?.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">20</span>)  </div><div class="line">btn2.imageView?.contentMode = <span class="type">UIViewContentMode</span>.<span class="type">ScaleAspectFit</span>  </div><div class="line">btn2.setTitle(<span class="string">"图片按钮"</span>, forState: .<span class="type">Normal</span>)  </div><div class="line"><span class="comment">//偏移量，分别为上下左右  </span></div><div class="line">btn2.imageEdgeInsets = <span class="type">UIEdgeInsetsMake</span>(<span class="number">0</span>, -<span class="number">50</span>, <span class="number">0</span>, <span class="number">0</span>)  </div><div class="line">btn2.titleEdgeInsets = <span class="type">UIEdgeInsetsMake</span>(<span class="number">0</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">5</span>)  </div><div class="line">btn2.setTitleColor(<span class="type">UIColor</span>.whiteColor(), forState: .<span class="type">Normal</span>)  </div><div class="line">btn2.adjustsImageWhenHighlighted = <span class="literal">false</span>  </div><div class="line"><span class="keyword">self</span>.view.addSubview(btn2)</div></pre></td></tr></table></figure><h2 id="添加按钮的点击事件"><a href="#添加按钮的点击事件" class="headerlink" title="添加按钮的点击事件"></a>添加按钮的点击事件</h2><blockquote><p>按钮的触摸时间有以下类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> touchDown：单点触摸按下事件，点触屏幕</div><div class="line">touchDownRepeat：多点触摸按下事件，点触计数大于<span class="number">1</span>，按下第<span class="number">2</span>、<span class="number">3</span>或第<span class="number">4</span>根手指的时候</div><div class="line">touchDragInside：触摸在控件内拖动时</div><div class="line">touchDragOutside：触摸在控件外拖动时</div><div class="line">touchDragEnter：触摸从控件之外拖动到内部时</div><div class="line">touchDragExit：触摸从控件内部拖动到外部时</div><div class="line">touchUpInside：在控件之内触摸并抬起事件</div><div class="line">touchUpOutside：在控件之外触摸抬起事件</div><div class="line">touchCancel：触摸取消事件，即一次触摸因为放上太多手指而被取消，或者电话打断</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  button1.addTarget(<span class="keyword">self</span>,action:#selector(methodName), <span class="keyword">for</span>: .touchUpInside)</div><div class="line">button1.addTarget(<span class="keyword">self</span>, action:#selector(someMethod(button:)), <span class="keyword">for</span>:.touchUpInside)</div><div class="line"><span class="comment">//上</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">methodName</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"tapped"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//下</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">(button:UIButton)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"你是谁啊，其实就是一个按钮"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="按钮文字过长时候的显示处理"><a href="#按钮文字过长时候的显示处理" class="headerlink" title="按钮文字过长时候的显示处理"></a>按钮文字过长时候的显示处理</h2><blockquote><p>修改 button 按钮中 titleLabel 的 lineBreakMode 属性，便可以调整按钮在文字超长的情况下如何显示，以及是否换行</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> button = <span class="type">UIButton</span>(frame:<span class="type">CGRect</span>(x:<span class="number">20</span>, y:<span class="number">50</span>, width:<span class="number">130</span>, height:<span class="number">50</span>))</div><div class="line">button.setTitle(<span class="string">"这个是一长长长长长长长长长长的文字"</span>, <span class="keyword">for</span>:.normal) <span class="comment">//普通状态下的文字</span></div><div class="line">button.setTitleColor(<span class="type">UIColor</span>.white, <span class="keyword">for</span>: .normal) <span class="comment">//普通状态下文字的颜色</span></div><div class="line">button.titleLabel?.lineBreakMode = .byTruncatingTail</div><div class="line">button.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line"><span class="keyword">self</span>.view.addSubview(button)</div></pre></td></tr></table></figure><blockquote><p>NSLineBreakMode样式可供选择，API的介绍也是简单明</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">NSLineBreakMode</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> byWordWrapping <span class="comment">// Wrap at word boundaries, default</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> byCharWrapping <span class="comment">// Wrap at character boundaries</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> byClipping <span class="comment">// Simply clip</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> byTruncatingHead <span class="comment">// Truncate at head of line: "...wxyz"</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> byTruncatingTail <span class="comment">// Truncate at tail of line: "abcd..."</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> byTruncatingMiddle <span class="comment">// Truncate middle of line:  "ab...yz"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> UIButton </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> UIButton </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-UIKit-AppDelegate项目入口</title>
      <link href="/2017/12/06/Swift/UIKit/AppDelegate%E9%A1%B9%E7%9B%AE%E5%85%A5%E5%8F%A3/"/>
      <content type="html"><![CDATA[<h1 id="AppDelegate-swift"><a href="#AppDelegate-swift" class="headerlink" title="AppDelegate.swift"></a>AppDelegate.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//import是导入文件的/库的关键字</span></div><div class="line"><span class="comment">//UIKit是iOS中所有的控件的所在库文件</span></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="meta">@UIApplicationMain</span> <span class="comment">//调用了OC中的UIApplicationMain函数;</span></div><div class="line"><span class="comment">//UIApplicationMain是IOS应用程序的入口</span></div><div class="line"><span class="comment">//UIApplacationMain:1.创建了一个UIApplication对象,代表当前应用程序.作用是用来检测当前应用程序状态的改变</span></div><div class="line"><span class="comment">//                  2.创建一个遵守UIApplicationDelegate的协议的子类对象作为UIApplication的代理,作用是处理应用程序状态的改变(创建AppDelegate对象并且设置为UIApplication对象的代理)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</div><div class="line">    <span class="comment">//属性:</span></div><div class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</div><div class="line"></div><div class="line">    <span class="comment">//方法:</span></div><div class="line">    <span class="comment">//一.当应用程序已经启动成功后,会自动调用这个方法</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">// Override point for customization after application launch.</span></div><div class="line">        <span class="comment">//1.在这个方法中来搭建应用程序中的所有的界面</span></div><div class="line">        <span class="comment">//2.获取应用程序需要展示的数据</span></div><div class="line">        <span class="comment">//3.使用界面展示数据</span></div><div class="line">        <span class="comment">//注意:如果不再做这个方法中去创建window,那么程序会通过Main.stroyboard去创建应用程序的界面</span></div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"程序启动成功"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//二.当应用程序将要成为非活跃状态的时候会自动调用这个方法.</span></div><div class="line">    <span class="comment">//活跃状态:程序在屏幕上可见</span></div><div class="line">    <span class="comment">//非活跃状态:程序没有显示在屏幕上(按home键进入后台,来电打断,在当前应用程序中打开其他的应用程序)</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillResignActive</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        <span class="comment">//按下home键:command + shift + h</span></div><div class="line">        <span class="comment">//在这个方法中一般去暂停视频/音频播放;游戏需要暂停;保存数据</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"将要成为非活跃状态"</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//三.应用程序已经进入后台的时候会自动调用</span></div><div class="line">    <span class="comment">//进入后台:按home键</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidEnterBackground</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"进入后台"</span>)</div><div class="line">          </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">//四.应用程序将要进入前台的时候会自动调用</span></div><div class="line">    <span class="comment">//进入前台:</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillEnterForeground</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"将要进入前台"</span>)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//五.应用程序已经变成活跃状态的时候会自动调用</span></div><div class="line">    <span class="comment">//1.程序启动成功后</span></div><div class="line">    <span class="comment">//2.程序从后台重新进入前台</span></div><div class="line">    <span class="comment">//3.来电打断结束...</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"已经变成活跃状态"</span>)</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//六.应用程序将要终止的时候会调用这个方法</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillTerminate</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"应用程序将要终止"</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="ViewController-swift"><a href="#ViewController-swift" class="headerlink" title="ViewController.swift"></a>ViewController.swift</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//UIView:是IOS中所有视图(控件)直接/间接的父类;所以UIView的属性和方法,对于其他类型的视图都有效</span></div><div class="line">        </div><div class="line">        <span class="comment">//视图:在屏幕上能看到的所有的东西都属于视图</span></div><div class="line">        </div><div class="line">        <span class="comment">//一.创建UIView的对象</span></div><div class="line">        <span class="keyword">let</span> redView = <span class="type">UIView</span>.<span class="keyword">init</span>()</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//想要将视图展示在屏幕上的两个必要条件</span></div><div class="line">            <span class="comment">//1.必须设置坐标的大小(默认坐标是(0,0),大小(0,0,))</span></div><div class="line">            <span class="comment">//2.将视图添加到已经展示在屏幕上的视图上</span></div><div class="line">        </div><div class="line">        <span class="comment">//二.设置frame属性(由坐标(x,y)和大小(width,height)两个部分组成)</span></div><div class="line">        </div><div class="line">        redView.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</div><div class="line">        <span class="comment">//IOS中所有的结构体都有一个对应的Make方法用来快速的创建一个结构体变量</span></div><div class="line">        redView.frame = <span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        <span class="comment">//三.将视图添加到界面上</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(redView)</div><div class="line">        </div><div class="line">        <span class="comment">//四.设置背景颜色</span></div><div class="line">        <span class="comment">//视图的背景颜色默认是透明色</span></div><div class="line">        <span class="comment">//颜色的创建方式:</span></div><div class="line">        <span class="comment">//1.通过类型方法创建指定颜色</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        redView.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">        <span class="comment">//通过三原色来创建颜色</span></div><div class="line">        <span class="comment">//CGFloat就是UI中的浮点型</span></div><div class="line">        <span class="comment">//参数1,2,3:红,绿,蓝的值(0~1)-(0/255~255/255)</span></div><div class="line">        <span class="comment">//参数4:透明度</span></div><div class="line">        </div><div class="line">        <span class="comment">//redView.backgroundColor = UIColor(red: 149/255.0, green: 106/255.0, blue: 55/255.0, alpha: 1)</span></div><div class="line">        <span class="comment">//设置不同程度的灰色</span></div><div class="line">        <span class="comment">//redView.backgroundColor = UIColor(white: 0.2, alpha: 1)</span></div><div class="line">        </div><div class="line">        <span class="comment">//练习:创建一个黄色的矩形,显示在红色视图的中心位置,大小(50,50)</span></div><div class="line">        <span class="comment">//方式1:</span></div><div class="line">        <span class="comment">//创建视图对象并且设置frame属性</span></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        let yellowView = UIView.init()</span></div><div class="line"><span class="comment">        yellowView.frame = CGRectMake(35, 35, 50, 50)</span></div><div class="line"><span class="comment">        //添加到界面上</span></div><div class="line"><span class="comment">        self.view.addSubview(yellowView)</span></div><div class="line"><span class="comment">        //设置背景颜色</span></div><div class="line"><span class="comment">        yellowView.backgroundColor = UIColor.yellowColor()</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        </div><div class="line">        <span class="comment">//方式2:</span></div><div class="line">        <span class="keyword">let</span> yellowView = <span class="type">UIView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">25</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">50</span>))</div><div class="line">        redView.addSubview(yellowView)</div><div class="line">        yellowView.backgroundColor = <span class="type">UIColor</span>.yellowColor()</div><div class="line">        </div><div class="line">        <span class="comment">//GET:计算视图的坐标的时候,注意相对性.当前视图被添加到那个视图上,那么当前视图的坐标就是相对于谁来算的</span></div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="视图对象的基本属性"><a href="#视图对象的基本属性" class="headerlink" title="视图对象的基本属性"></a>视图对象的基本属性</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  mport <span class="type">UIKit</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//创建一个视图对象</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> redView = <span class="type">UIView</span>.<span class="keyword">init</span>()</div><div class="line">        <span class="comment">//添加到界面上</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(redView)</div><div class="line">        <span class="comment">//设置背景颜色</span></div><div class="line">        redView.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">        </div><div class="line">        <span class="comment">//1.frame(坐标和大小)</span></div><div class="line">        redView.frame = <span class="type">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        <span class="comment">//2.center(中心点坐标)</span></div><div class="line">        <span class="comment">//通过frame和确定视图的中心点坐标</span></div><div class="line">        <span class="built_in">print</span>(redView.center)</div><div class="line">        <span class="built_in">print</span>(redView.frame)</div><div class="line">        </div><div class="line">        </div><div class="line">        redView.center = <span class="type">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>)</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(redView.frame)</div><div class="line">        <span class="comment">//3.bounds(坐标和大小)</span></div><div class="line">        <span class="comment">//默认情况下bounds的坐标(0,0),大小和视图的frame大小一样</span></div><div class="line">        <span class="built_in">print</span>(redView.bounds)</div><div class="line">        </div><div class="line">        <span class="comment">//了解:</span></div><div class="line">        <span class="comment">//如果改变bounds的大小,不改变center的坐标,改变frame的坐标和大小</span></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        redView.bounds = CGRectMake(0, 0, 200, 200)</span></div><div class="line"><span class="comment">        </span></div><div class="line"><span class="comment">        print(redView.frame)</span></div><div class="line"><span class="comment">        print("center\(redView.center)")</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        </div><div class="line">        <span class="comment">//如果改变bounds的坐标,不影响当前视图的位置.但是影响添加到当前视图上的子视图的坐标,不建议修改bounds</span></div><div class="line">        </div><div class="line">        redView.bounds = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> yellowView = <span class="type">UIView</span>.<span class="keyword">init</span>(frame:<span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">40</span>))</div><div class="line">        yellowView.backgroundColor = <span class="type">UIColor</span>.yellowColor()</div><div class="line">        redView.addSubview(yellowView)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//4.transform(形变)</span></div><div class="line">        <span class="comment">// 当前视图发生形变,那么添加到当前视图上的所有的视图会跟着一起形变</span></div><div class="line">        <span class="comment">//1). 缩放</span></div><div class="line">        <span class="comment">//参数1:x方向上的缩放比例</span></div><div class="line">        <span class="comment">//参数2:y方向上的缩放比例</span></div><div class="line">        redView.transform = <span class="type">CGAffineTransformMakeScale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>)</div><div class="line">        <span class="comment">//2).旋转</span></div><div class="line">        <span class="comment">//参数:旋转角度(圆周率对应的角度)</span></div><div class="line">        redView.transform = <span class="type">CGAffineTransformMakeRotation</span>(<span class="type">CGFloat</span>(<span class="type">M_PI_4</span>))</div><div class="line">        <span class="comment">//3).平移</span></div><div class="line">        <span class="comment">//参数1:在x方向上平移的距离</span></div><div class="line">        <span class="comment">//参数2:在y方向上平移的距离</span></div><div class="line">        redView.transform = <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>, <span class="number">300</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//4).多个形变同时进行</span></div><div class="line">        <span class="comment">//在另外一个形变的前提下旋转</span></div><div class="line">        <span class="comment">//参数1:另外一个形变</span></div><div class="line">        </div><div class="line">        <span class="comment">//在拥有缩放这个形变的前提下旋转(既可以缩放又可以旋转)</span></div><div class="line">        redView.transform = <span class="type">CGAffineTransformRotate</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>), <span class="type">CGFloat</span>(<span class="type">M_PI_4</span> / <span class="number">2</span>))</div><div class="line">        <span class="comment">//在另外一个形变的前提下平移(既可以缩放和旋转又可以平移)</span></div><div class="line">        redView.transform = <span class="type">CGAffineTransformTranslate</span>(redView.transform, <span class="number">0</span>, <span class="number">100</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//既可以平移又可以缩放</span></div><div class="line">        </div><div class="line">        redView.transform = <span class="type">CGAffineTransformScale</span>(<span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">100</span>, <span class="number">0</span>), <span class="number">0.5</span>, <span class="number">2</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//组合两个形变</span></div><div class="line">        <span class="comment">//旋转形变</span></div><div class="line">        <span class="keyword">let</span> rotate = <span class="type">CGAffineTransformMakeRotation</span>(<span class="number">0.2</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//平移形变</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> transLation = <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//将旋转形变和平移形变组合</span></div><div class="line">        redView.transform = <span class="type">CGAffineTransformConcat</span>(rotate, transLation)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> UIKit </category>
          
          <category> AppDelegate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIKit </tag>
            
            <tag> Swift </tag>
            
            <tag> AppDelegate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-基础</title>
      <link href="/2017/12/06/Swift/Grammar/%E5%9F%BA%E7%A1%80/"/>
      <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Hello,Word!"</span>)</div></pre></td></tr></table></figure><h2 id="定义变量和常量"><a href="#定义变量和常量" class="headerlink" title="定义变量和常量"></a>定义变量和常量</h2><blockquote><p>let/var<br>在同一行代码中 不用书写分号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> myCount = <span class="number">11</span> <span class="comment">//定义一个常量为myCount = 11 常量是不可改变的量</span></div><div class="line"><span class="keyword">var</span> myVariable = <span class="number">22</span></div><div class="line">myVariable = <span class="number">33</span> <span class="comment">//定义一个变量为myVariable = 22 然后改变它的值,将33赋给myVariable。现在myVariable的值为33。</span></div></pre></td></tr></table></figure><h2 id="字符串插值打印"><a href="#字符串插值打印" class="headerlink" title="字符串插值打印"></a>字符串插值打印</h2><blockquote><p>符串插值的是在print的过程中，将你定义的常量或变量插入你要输出的字符串中</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"ChenJian,\(myCount)!"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"YueKekui!\(myVariable)"</span>)</div></pre></td></tr></table></figure><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><blockquote><p>在swift中 如果可以的话 尽可能省略类型标记，让swift自己推断类型</p></blockquote><h2 id="关于Swift中类型int，float，double相关的"><a href="#关于Swift中类型int，float，double相关的" class="headerlink" title="关于Swift中类型int，float，double相关的"></a>关于Swift中类型int，float，double相关的</h2><blockquote><p>Double(three) 和C语言的强制转换有很大区别<br>Double(three) swift 中是将three这个数据的值取出来，从新定义一个Double类型的变量，并将Three的值赋这个变量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> three = <span class="number">3</span></div><div class="line"><span class="keyword">let</span> pointOneFourOneFiveNine = <span class="number">0.14159</span></div><div class="line"><span class="keyword">let</span> pi = <span class="type">Double</span>(three) + pointOneFourOneFiveNine</div></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>元组是用一个变量或常量，保存多项数据</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> http404Error = (<span class="number">404</span>, <span class="string">"Not Found"</span>)</div><div class="line"><span class="comment">// http404Error is of type (Int, String), and equals (404, "Not Found")</span></div></pre></td></tr></table></figure><blockquote><p>下划线的意思 忽略这一项</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> (justTheStatusCode, <span class="number">_</span>) = http404Error</div><div class="line"><span class="built_in">print</span>(<span class="string">"The status code is \(justTheStatusCode)"</span>)</div><div class="line"><span class="comment">// Prints "The status code is 404</span></div></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p>运算符 可以分为一元运算符，二元运算符，三元运算符</p></blockquote><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><blockquote><p>数字前面代表数字正负的正负号是唯一的一元运算符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">-<span class="number">8</span>,-<span class="number">14</span>,+<span class="number">8</span>(正数我们一般省略前面的正号写为：<span class="number">8</span>)</div></pre></td></tr></table></figure><h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h3><blockquote><p>赋值运算符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> b = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">5</span></div><div class="line">a = b</div><div class="line"><span class="comment">// a is now equal to 10</span></div></pre></td></tr></table></figure><blockquote><p>关系运算符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span> == <span class="number">1</span>  </div><div class="line"><span class="number">2</span> != <span class="number">1</span>   </div><div class="line"><span class="number">2</span> &gt; <span class="number">1</span>    </div><div class="line"><span class="number">1</span> &lt; <span class="number">2</span>    </div><div class="line"><span class="number">1</span> &gt;= <span class="number">1</span>   </div><div class="line"><span class="number">2</span> &lt;= <span class="number">1</span></div></pre></td></tr></table></figure><blockquote><p>算术运算符：加减乘除取余</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span> + <span class="number">2</span>       <span class="comment">// equals 3</span></div><div class="line"><span class="number">5</span> - <span class="number">3</span>       <span class="comment">// equals 2</span></div><div class="line"><span class="number">2</span> * <span class="number">3</span>       <span class="comment">// equals 6</span></div><div class="line"><span class="number">10.0</span> / <span class="number">2.5</span>  <span class="comment">// equals 4.0 </span></div><div class="line"><span class="number">9</span> % <span class="number">2</span>       <span class="comment">// equals 1</span></div></pre></td></tr></table></figure><blockquote><p>三元运算符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//让c 取a 和b中较小的值</span></div><div class="line"><span class="keyword">let</span> a =<span class="number">5</span> , b=<span class="number">10</span></div><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a &lt; b ? a : b</div><div class="line"></div><div class="line"><span class="comment">//问号前面是一个产生Bool类型的变量，常量或表达式</span></div></pre></td></tr></table></figure><h2 id="Parentheses-圆括号的作用"><a href="#Parentheses-圆括号的作用" class="headerlink" title="Parentheses 圆括号的作用"></a>Parentheses 圆括号的作用</h2><blockquote><p>可以使用圆括号改变运算顺序 ，如果不清楚运算的执行程序也可以直接使用圆括号来改变运算顺序</p></blockquote><h2 id="容器类型-数组"><a href="#容器类型-数组" class="headerlink" title="容器类型-数组"></a>容器类型-数组</h2><blockquote><p>数组是一个有序的集合<br>数组的第一个元素的下标是从0开始的 而不是1</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> threeDoubles = [<span class="type">Double</span>](<span class="built_in">count</span>: <span class="number">3</span>, repeatedValue: <span class="number">0.0</span>)</div><div class="line"><span class="keyword">var</span> array1 = [<span class="type">Int</span>]()</div><div class="line"><span class="keyword">var</span> array2: [<span class="type">Int</span>] = []</div><div class="line"><span class="keyword">var</span> array3 = [<span class="number">99</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">156</span>,<span class="number">7</span>]</div><div class="line"><span class="keyword">var</span> array4 = [<span class="type">Int</span>](<span class="built_in">count</span>: <span class="number">100</span>, repeatedValue: <span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> arrayString1 = [<span class="type">String</span>]()</div><div class="line"><span class="keyword">var</span> arrayString2: [<span class="type">String</span>] = []</div><div class="line"><span class="keyword">var</span> arrayString3 = [<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"apple"</span>,<span class="string">"orange"</span>]</div><div class="line"><span class="keyword">var</span> arrayString4 = [<span class="type">String</span>](<span class="built_in">count</span>: <span class="number">100</span>, repeatedValue: <span class="string">""</span>)</div></pre></td></tr></table></figure><blockquote><p>两个数组可以相加</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">var</span> anotherThreeDoubles = [<span class="type">Double</span>](<span class="built_in">count</span>: <span class="number">3</span>, repeatedValue: <span class="number">2.5</span>)</div><div class="line"><span class="comment">// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> sixDoubles = threeDoubles + anotherThreeDoubles</div><div class="line"><span class="comment">// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.</span></div></pre></td></tr></table></figure><blockquote><p>向数组中添加元素的方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  shoppingList.append(<span class="string">"Flour"</span>)</div><div class="line"><span class="comment">//可以使用append这个函数</span></div><div class="line">shoppingList += [<span class="string">"Baking Powder"</span>]</div><div class="line"><span class="comment">// shoppingList now contains 4 items</span></div><div class="line">shoppingList += [<span class="string">"Chocolate Spread"</span>, <span class="string">"Cheese"</span>, <span class="string">"Butter"</span>]</div><div class="line"><span class="comment">//也可以用+=向数组中添加一个或多个元素</span></div></pre></td></tr></table></figure><blockquote><p>对数组进行遍历（迭代）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> shoppingList = [<span class="string">"Six egg"</span>,<span class="string">"Milk"</span>,<span class="string">"Flour"</span>,<span class="string">"Baking Powder"</span>,<span class="string">"Bananas"</span>]</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoppingList &#123;</div><div class="line">    <span class="built_in">print</span>(item)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> shoppingList.<span class="built_in">enumerate</span>() &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Item \(index + 1): \(value)"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Item 1: Six eggs</span></div><div class="line"><span class="comment">// Item 2: Milk</span></div><div class="line"><span class="comment">// Item 3: Flour</span></div><div class="line"><span class="comment">// Item 4: Baking Powder</span></div><div class="line"><span class="comment">// Item 5: Bananas”</span></div><div class="line"></div><div class="line"></div><div class="line">作者：芒果微笑</div><div class="line">链接：http:<span class="comment">//www.jianshu.com/p/8e8ff60121c4</span></div><div class="line">來源：简书</div><div class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div></pre></td></tr></table></figure><h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><p>##顺序结构 ,程序按正常顺序执行。</p><p>##分支结构</p><p>##循环结构</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//循环</span></div><div class="line"> <span class="comment">//第一种循环</span></div><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">var</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>  &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(i)"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</div><div class="line">    i += <span class="number">1</span><span class="comment">//i++</span></div><div class="line">&#125;</div><div class="line"> <span class="comment">//第二种循环  这种循环和上一种循环主要的区别是  --repeat循环至少执行一次</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">repeat</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(i).Hello,Word"</span>)</div><div class="line">    i += <span class="number">1</span></div><div class="line">&#125;<span class="keyword">while</span> i &lt;= <span class="number">100</span></div><div class="line"></div><div class="line"> <span class="comment">//第三种循环</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(i).Hello,World!"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 不想用循环变量 i可以使用 _ 来省略i</span></div></pre></td></tr></table></figure><h3 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h3><blockquote><p>题目要求：书写一段Swift代码实现，随机出现一个1-100的数字，让用户猜这个数字是几，每次提示用户猜的数字是比实际数字大还是小，直到用户猜中为止</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> answer = <span class="type">Int</span>(arc4random_uniform(<span class="number">100</span>)) + <span class="number">1</span></div><div class="line"><span class="keyword">var</span> thyAnswer:<span class="type">Int</span></div><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span></div><div class="line"><span class="keyword">repeat</span>&#123;</div><div class="line">    counter += <span class="number">1</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"请输入你猜的数字："</span>,terminator:<span class="string">""</span>)</div><div class="line">    thyAnswer = inputInt()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> thyAnswer &gt; answer&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"猜小一点"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> thyAnswer &lt; answer&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"猜大一点"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"恭喜你猜对了！您一共猜了\(counter)次"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;<span class="keyword">while</span> thyAnswer != answer</div><div class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"你的智商该充值了！！！"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="得出1-100的素数"><a href="#得出1-100的素数" class="headerlink" title="得出1-100的素数"></a>得出1-100的素数</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//得出1-100的素数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Bool</span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> i &lt;= <span class="type">Int</span>(sqrt(<span class="type">Double</span>(n)))&#123;</div><div class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        i += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果上面的循环没有返回false 就说明在2到n开根号之间没有n的因子 因此返回true 表示n是素数</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">1</span>...<span class="number">100</span>&#123;</div><div class="line">    <span class="keyword">if</span> isPrime(n)&#123;</div><div class="line">        <span class="built_in">print</span>(n)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="百钱白鸡"><a href="#百钱白鸡" class="headerlink" title="百钱白鸡"></a>百钱白鸡</h3><blockquote><p>题目要求：现在有100块钱，公鸡5块一只，母鸡3块一只，小鸡1块三只，现在要用这100块买100只鸡，问公鸡，母鸡，小鸡各有多少只？</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">0</span>...<span class="number">20</span>&#123;</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="number">0</span>...<span class="number">33</span>&#123;</div><div class="line">        <span class="keyword">let</span>  z = <span class="number">100</span> - x - y</div><div class="line">        <span class="keyword">if</span>  <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span> &amp;&amp; z % <span class="number">3</span> == <span class="number">0</span> &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"公鸡：\(x),母鸡:\(y),小鸡\(z)"</span>)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// GET:穷举法（穷尽所有的可能性直到正确答案</span></div></pre></td></tr></table></figure><h3 id="摇色子游戏"><a href="#摇色子游戏" class="headerlink" title="摇色子游戏"></a>摇色子游戏</h3><blockquote><p>题目要求：现有两人，一个玩家，一个庄家。玩家摇两个色子，如果第一次摇到7，11点玩家胜，摇到2，3，12庄家胜，摇到其他点数记住这个点数并继续摇下一次；以后每次玩家摇色子的点数和第一次记住的点数相同玩家胜，摇到7点庄家胜。用swift代码实现以上要求</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">roll</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(arc4random_uniform(<span class="number">6</span>)) + <span class="number">1</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> money = <span class="number">1000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">repeat</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"玩家总资产:￥\(money)元"</span>)   </div><div class="line">    <span class="keyword">var</span> debt:<span class="type">Int</span></div><div class="line">    <span class="keyword">repeat</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"请下注:"</span>,terminator:<span class="string">""</span>)</div><div class="line">    debt = inputInt()</div><div class="line">    &#125;<span class="keyword">while</span> debt &lt;= <span class="number">0</span> || debt &gt; money</div><div class="line"></div><div class="line">    <span class="keyword">var</span> needsGoOn = <span class="literal">false</span></div><div class="line">    <span class="keyword">let</span> fristPoint = roll() + roll()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"玩家摇出了\(fristPoint)"</span>)</div><div class="line">    <span class="keyword">switch</span> fristPoint&#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">7</span>,<span class="number">11</span>:</div><div class="line">        money += debt</div><div class="line">        <span class="built_in">print</span>(<span class="string">"玩家胜!!!"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>:</div><div class="line">        money -= debt</div><div class="line">        <span class="built_in">print</span>(<span class="string">"庄家胜!!!"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        needsGoOn = <span class="literal">true</span> <span class="comment">//游戏继续</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">while</span> needsGoOn&#123;</div><div class="line">        <span class="keyword">let</span> currentPoint = roll() + roll()</div><div class="line">        <span class="built_in">print</span>(<span class="string">"玩家摇出了\(currentPoint)"</span>)</div><div class="line">        <span class="keyword">if</span> currentPoint == <span class="number">7</span> &#123;</div><div class="line">            money -= debt</div><div class="line">            <span class="built_in">print</span>(<span class="string">"庄家胜!!!"</span>)</div><div class="line">            needsGoOn = <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> currentPoint == fristPoint&#123;</div><div class="line">            money += debt</div><div class="line">            <span class="built_in">print</span>(<span class="string">"玩家胜!!!"</span>)</div><div class="line">            needsGoOn = <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">while</span> money &gt; <span class="number">0</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"你破产了！！！！"</span>)</div></pre></td></tr></table></figure><h2 id="排序选择"><a href="#排序选择" class="headerlink" title="排序选择"></a>排序选择</h2><blockquote><p>题目要求：一个数组中无序的数字，使用简单选择排序法排序。ps：简单选择排序:每次从剩下元素中找最小的元素放到对应的位置</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> array = [<span class="number">27</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">58</span>,<span class="number">44</span>,<span class="number">89</span>,<span class="number">12</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> - <span class="number">1</span>&#123;</div><div class="line">    <span class="keyword">var</span> mindex = i</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i+<span class="number">1</span>..&lt;array.<span class="built_in">count</span>&#123;</div><div class="line">        <span class="keyword">if</span> array[j] &lt; array[mindex]&#123;</div><div class="line">            mindex = j</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">(array[i],array[mindex]) = (array[mindex],array[i])</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(array)</div></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>题目要求：一个数组中无序的数字，使用冒泡排序法排序。ps:冒泡排序：两个数字排序将大的数字排在后面</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">var</span> array = [<span class="number">27</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">58</span>,<span class="number">44</span>,<span class="number">89</span>,<span class="number">12</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> - <span class="number">1</span>&#123;</div><div class="line">    <span class="keyword">var</span> swapped = <span class="literal">false</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> - <span class="number">1</span> - i&#123;</div><div class="line">        <span class="keyword">if</span> array[j] &gt; array[j+<span class="number">1</span>]&#123;</div><div class="line">            (array[j],array[j+<span class="number">1</span>]) = (array[j+<span class="number">1</span>],array[j])</div><div class="line">            swapped = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> swapped == <span class="literal">false</span> <span class="comment">// if !swapped</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(array)</div></pre></td></tr></table></figure><h1 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line">  <span class="comment">//字典(存放键值对组合的容器)</span></div><div class="line"><span class="comment">//字典中的每个元素都是由两部分构成,冒号前面的是键，冒号后面的是值</span></div><div class="line"><span class="keyword">var</span> dict:[<span class="type">String</span>:<span class="type">String</span>] = [<span class="string">"abacus"</span>:<span class="string">"算盘"</span>,<span class="string">"abnormal"</span>:<span class="string">"异常的"</span>,<span class="string">"hello"</span>:<span class="string">"你好"</span>,<span class="string">"good"</span>:<span class="string">"好的"</span>]</div><div class="line"><span class="comment">//print 前面的键 就会输出后面的值</span></div><div class="line"><span class="comment">//但是print 后面的值 不会输出前面的键</span></div><div class="line"><span class="built_in">print</span>(dict[<span class="string">"hello"</span>]!)</div><div class="line"><span class="built_in">print</span>(dict[<span class="string">"abcxyz"</span>])</div><div class="line"><span class="built_in">print</span>(dict[<span class="string">"你好"</span>])</div><div class="line"><span class="comment">// 添加元素</span></div><div class="line">dict[<span class="string">"shit"</span>] = <span class="string">"狗屎"</span></div><div class="line">dict[<span class="string">"delicious"</span>] = <span class="string">"好吃的"</span></div><div class="line"><span class="built_in">print</span>(dict)</div><div class="line"></div><div class="line"><span class="comment">// 删除元素</span></div><div class="line"> dict.removeValueForKey(<span class="string">"hello"</span>) <span class="comment">//第一种</span></div><div class="line">dict[<span class="string">"hello"</span>] = <span class="literal">nil</span> <span class="comment">//第二种</span></div><div class="line"><span class="built_in">print</span>(dict)</div><div class="line"><span class="built_in">print</span>(dict[<span class="string">"hello"</span>])</div><div class="line"></div><div class="line"><span class="comment">// 修改元素</span></div><div class="line">dict[<span class="string">"shit"</span>] = <span class="string">"牛粪"</span></div><div class="line"><span class="built_in">print</span>(dict)</div><div class="line"></div><div class="line"><span class="comment">// 遍历字典中所有的值</span></div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict.values &#123;</div><div class="line">    <span class="built_in">print</span>(value)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历字典中所有的键</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict.keys &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(key) ---&gt; \(dict[key])"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 直接通过一个元组获得字典中的键和值(原始类型)</span></div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> dict &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(key) ---&gt; \(value)"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote><p>集合中两个值相同的元素，会合并到一起</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> a: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</div><div class="line">a.insert(<span class="number">100</span>)           <span class="comment">// 添加元素</span></div><div class="line">a.remove(<span class="number">2</span>)             <span class="comment">// 删除元素</span></div><div class="line"><span class="built_in">print</span>(a)</div><div class="line"><span class="keyword">var</span> b: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</div><div class="line"><span class="built_in">print</span>(b)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(a.intersect(b))   <span class="comment">// 交集(a和b都有的元素)</span></div><div class="line"><span class="built_in">print</span>(a.union(b))       <span class="comment">// 并集(a和b的所有元素)</span></div><div class="line"><span class="built_in">print</span>(a.subtract(b))    <span class="comment">// 差集(a有b没有的元素)</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(a == b)</div><div class="line"><span class="built_in">print</span>(b.isSubsetOf(a))</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">3</span>]</div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.isSubsetOf(a))      <span class="comment">// 判断c是不是a的子集</span></div><div class="line"><span class="built_in">print</span>(a.isSupersetOf(<span class="built_in">c</span>))    <span class="comment">// 判断a是不是c的超集</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> d: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">2</span>, <span class="number">1000</span>, <span class="number">10000</span>]</div><div class="line"><span class="built_in">print</span>(a.isDisjointWith(d))  <span class="comment">// 判断两个集合是否相交</span></div></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数我认为是swift语言中最重要的章节之一。<br>定义函数的关键词为func</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 函数的参数名</span></div><div class="line"><span class="comment">// 函数名(外部参数名 内部参数名: 类型, 外部参数名 内部参数名: 类型)</span></div><div class="line"><span class="comment">// 如果不写外部参数名那么内部参数名也是外部参数名</span></div><div class="line"><span class="comment">// 可以使用_来作为外部参数名表示省略外部参数名</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myMin</span><span class="params">(a x: Int, b y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> x &lt; y ? x : y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用函数的时候要写函数的外部参数名</span></div><div class="line"><span class="built_in">print</span>(myMin(a: <span class="number">3</span>, b: <span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment">// 定义函数</span></div><div class="line"><span class="comment">// func 函数名(参数列表) -&gt; 返回类型 &#123; 函数的执行体 &#125;</span></div><div class="line"><span class="comment">// Swift中函数的参数可以设定默认值</span></div><div class="line"><span class="comment">// 如果调用函数的时候没有给该参数赋值就直接使用默认值</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(personName: String, alreadyGreeted: Bool = <span class="literal">false</span>)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="comment">// let greeting = "Hello, " + personName + "!"</span></div><div class="line">    <span class="comment">// 如果函数的返回类型不是Void 那么函数中一定有return语句</span></div><div class="line">    <span class="comment">// return greeting</span></div><div class="line">    <span class="comment">// personName = "王小锤"   // 编译错误</span></div><div class="line">    <span class="keyword">if</span> alreadyGreeted &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"怎么又是你, "</span> + personName + <span class="string">"!"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"你好, "</span> + personName + <span class="string">"!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用函数</span></div><div class="line"><span class="comment">// 函数名(参数值)</span></div><div class="line"><span class="comment">// 调用Swift的函数时, 在默认情况下从第二个参数开始需要写参数名</span></div><div class="line"><span class="built_in">print</span>(sayHello(<span class="string">"王大锤"</span>, alreadyGreeted: <span class="literal">true</span>))</div><div class="line"><span class="comment">// 如果没有给第二个参数赋值那么就直接使用默认值false</span></div><div class="line"><span class="keyword">let</span> str = sayHello(<span class="string">"Jack"</span>)</div><div class="line"><span class="built_in">print</span>(str)</div><div class="line"></div><div class="line"><span class="comment">// Swift中函数的参数列表可以是可变参数列表(参数的个数是任意多个)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums: Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        total += num</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(sum())</div><div class="line"><span class="built_in">print</span>(sum(<span class="number">999</span>))</div><div class="line"><span class="built_in">print</span>(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line"><span class="built_in">print</span>(sum(<span class="number">90</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">68</span>, <span class="number">55</span>, <span class="number">11</span>, <span class="number">99</span>))</div><div class="line"></div><div class="line"><span class="comment">// 可以使用元组(tuple)让函数一次返回多条数据</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">minMax</span><span class="params">(array: [Int])</span></span> -&gt; (<span class="built_in">min</span>: <span class="type">Int</span>, <span class="built_in">max</span>: <span class="type">Int</span>)? &#123;</div><div class="line">    <span class="keyword">if</span> array.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> currentMin = array[<span class="number">0</span>]</div><div class="line">    <span class="keyword">var</span> currentMax = array[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> array[<span class="number">1</span>..&lt;array.<span class="built_in">count</span>] &#123;</div><div class="line">        <span class="keyword">if</span> value &lt; currentMin &#123;</div><div class="line">            currentMin = value</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> value &gt; currentMax &#123;</div><div class="line">            currentMax = value</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (currentMin, currentMax)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> b = minMax([<span class="number">23</span>, <span class="number">45</span>, <span class="number">99</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">12</span>, <span class="number">55</span>]) &#123;</div><div class="line">    <span class="built_in">print</span>(b.<span class="built_in">min</span>)        <span class="comment">// print(b.0)</span></div><div class="line">    <span class="built_in">print</span>(b.<span class="built_in">max</span>)        <span class="comment">// print(b.1)</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"数组中没有元素!!!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(<span class="keyword">inout</span> a: Int, <span class="keyword">inout</span> <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">    (a, b) = (b, a)</div><div class="line"><span class="comment">//    let temp = a</span></div><div class="line"><span class="comment">//    a = b</span></div><div class="line"><span class="comment">//    b = temp</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">300</span>, b = <span class="number">500</span></div><div class="line"><span class="built_in">swap</span>(&amp;a, &amp;b)</div><div class="line"><span class="built_in">print</span>(<span class="string">"a = \(a)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"b = \(b)"</span>)</div><div class="line"></div><div class="line"><span class="comment">// inout - 输入输出参数(不仅将数据传入函数还要从函数中取出数据)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createX</span><span class="params">(<span class="keyword">inout</span> x: Int)</span></span> &#123;</div><div class="line">    x = <span class="number">1000</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"><span class="comment">// inout类型的参数前要加上&amp;符号</span></div><div class="line">createX(&amp;x)</div><div class="line"><span class="built_in">print</span>(x)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 设计一个函数根据系统时间返回不同的问候语</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> date = <span class="type">NSDate</span>()</div><div class="line">    <span class="keyword">let</span> cal = <span class="type">NSCalendar</span>.currentCalendar()</div><div class="line">    <span class="keyword">let</span> hour = cal.component(.<span class="type">Hour</span>, fromDate: date)</div><div class="line"><span class="comment">//这三句代码的意思为：第一句 获取当前系统时间 </span></div><div class="line"><span class="comment">//第二句是 当前历法</span></div><div class="line"><span class="comment">//第三句是 当前小时</span></div><div class="line">    <span class="keyword">var</span> greeting: <span class="type">String</span></div><div class="line">    <span class="keyword">switch</span> hour &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>...<span class="number">6</span>:         <span class="comment">// 不同的分支可以有重叠的部分</span></div><div class="line">        greeting = <span class="string">"滚去碎觉了"</span></div><div class="line">        <span class="comment">// fallthrough  // 继续执行下一个case</span></div><div class="line">    <span class="keyword">case</span> <span class="number">4</span>...<span class="number">10</span>:        <span class="comment">// 匹配了一个分支之后不再匹配其他的分支</span></div><div class="line">        greeting = <span class="string">"早起的鸟儿有虫吃"</span></div><div class="line">    <span class="keyword">case</span> <span class="number">11</span>...<span class="number">13</span>:</div><div class="line">        greeting = <span class="string">"中午好"</span></div><div class="line">    <span class="keyword">case</span> <span class="number">14</span>...<span class="number">18</span>:</div><div class="line">        greeting = <span class="string">"下午好"</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        greeting = <span class="string">"晚上好"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> name + <span class="string">", "</span> + greeting + <span class="string">"!"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(sayHello(<span class="string">"小刚"</span>))</div><div class="line"></div><div class="line"><span class="comment">// 设计一个函数传入两个正整数m和n, 计算从m加到n的和</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(m: Int, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> (a, b) = m &gt; n ? (n, m) : (m, n)</div><div class="line">    <span class="keyword">var</span> value = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a...b &#123;</div><div class="line">        value += i</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(sum(<span class="number">1</span>, <span class="number">100</span>))</div><div class="line"><span class="built_in">print</span>(sum(<span class="number">5</span>, -<span class="number">4</span>))</div><div class="line"><span class="built_in">print</span>(sum(-<span class="number">1</span>, -<span class="number">5</span>))</div></pre></td></tr></table></figure><h2 id="调用苹果自身的Api，进行程序应用开发"><a href="#调用苹果自身的Api，进行程序应用开发" class="headerlink" title="调用苹果自身的Api，进行程序应用开发"></a>调用苹果自身的Api，进行程序应用开发</h2><h2 id="调用苹果的指纹识别，开发一个带有指纹识别的支付功能的app"><a href="#调用苹果的指纹识别，开发一个带有指纹识别的支付功能的app" class="headerlink" title="调用苹果的指纹识别，开发一个带有指纹识别的支付功能的app"></a>调用苹果的指纹识别，开发一个带有指纹识别的支付功能的app</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> errPointer = <span class="type">NSErrorPointer</span>()</div><div class="line">        <span class="keyword">let</span> ctx = <span class="type">LAContext</span>()</div><div class="line">        <span class="comment">// 判断设备是否支持指纹识别</span></div><div class="line">        <span class="keyword">if</span> ctx.canEvaluatePolicy(.<span class="type">DeviceOwnerAuthenticationWithBiometrics</span>, error: errPointer) &#123;</div><div class="line">            <span class="comment">// z = f(x, g(y))</span></div><div class="line">            <span class="comment">// Swift中允许将一个函数作为另一个函数的参数</span></div><div class="line">            <span class="comment">// evalutePolicy方法的第三个参数是一个函数</span></div><div class="line">            <span class="comment">// 该函数有两个参数没有返回值</span></div><div class="line">            <span class="comment">// 给该参数传参时可以在花括号中写一个匿名函数传进去</span></div><div class="line">            <span class="comment">// 该匿名函数通常也称之为闭包(closure)</span></div><div class="line">            ctx.evaluatePolicy(.<span class="type">DeviceOwnerAuthenticationWithBiometrics</span>, localizedReason: <span class="string">"请输入指纹进行支付"</span>, reply: &#123; (isOK, err) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> isOK &#123;</div><div class="line">                    <span class="built_in">print</span>(<span class="string">"支付成功!!!"</span>)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">print</span>(<span class="string">"指纹验证失败, 请输入支付密码"</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"你的设备不支持指纹识别"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>闭包也称：匿名函数 意思是没有名字的函数<br>闭包由来：<br>在swift中函数也是一种类型<br>这也就意味着函数可以作为变量或常量的类型<br>同理函数也可以作为另一个函数和参数或返回值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mul</span><span class="params">(a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a * b</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(array: [Int], fn: <span class="params">(Int, Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = array[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> array[<span class="number">1</span>..&lt;array.<span class="built_in">count</span>] &#123;</div><div class="line">        sum = fn(sum, x)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>由于在swift中能省则省的原则和传统就将调用函数做了以下几步写法省略</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="comment">// 当调用foo函数时第二个参数可以传什么?</span></div><div class="line"><span class="comment">// 1. 所有自定义的(Int, Int) -&gt; Int类型的函数</span></div><div class="line"><span class="built_in">print</span>(foo(a, fn: sum))</div><div class="line"><span class="comment">// 2. 传入已有的二元运算符: +-*/%(因为运算符也是函数)</span></div><div class="line"><span class="built_in">print</span>(foo(a, fn: +))</div><div class="line"><span class="comment">// 3. 传入匿名函数(闭包)</span></div><div class="line"><span class="comment">// 3.1 完整的闭包写法</span></div><div class="line"><span class="built_in">print</span>(foo(a, fn: &#123; (a, b) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;))</div><div class="line"><span class="comment">// 3.2 省略掉类型和不必要的括号</span></div><div class="line"><span class="built_in">print</span>(foo(a, fn: &#123; a, b <span class="keyword">in</span> a + b &#125;))</div><div class="line"><span class="comment">// 3.3 省略参数名</span></div><div class="line"><span class="built_in">print</span>(foo(a, fn: &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;))</div><div class="line"><span class="comment">// 3.4 尾随闭包</span></div><div class="line"><span class="built_in">print</span>(foo(a) &#123; (a, b) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;)</div><div class="line"><span class="built_in">print</span>(foo(a) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;)</div></pre></td></tr></table></figure><blockquote><p>需要注意的是：<br>如果函数的最后一个参数是闭包可以写成尾随闭包的形式<br>也就是将闭包放到函数参数的圆括号外面写在一对花括号中<br>如果函数后面有尾随闭包且函数的圆括号中没有参数<br>那么函数的圆括号也可以省略(仅限于有尾随闭包的场景）<br>例如</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> array = [<span class="string">"game"</span>, <span class="string">"abacus"</span>, <span class="string">"hello"</span>, <span class="string">"cat"</span>, <span class="string">"good"</span>, <span class="string">"internationalization"</span>, <span class="string">"chaos"</span>, <span class="string">"dislike"</span>, <span class="string">"zealot"</span>, <span class="string">"young"</span>]</div><div class="line"></div><div class="line"><span class="comment">// array.sortInPlace(&gt;)</span></div><div class="line">array.sortInPlace(&#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;)</div><div class="line">array.sortInPlace() &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;</div><div class="line">array.sortInPlace &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125; <span class="comment">//这就是尾随闭包的最简写法</span></div></pre></td></tr></table></figure><h2 id="数组最重要的三个功能"><a href="#数组最重要的三个功能" class="headerlink" title="数组最重要的三个功能"></a>数组最重要的三个功能</h2><blockquote><p>1.过滤 2.映射 3.缩减</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> array = [<span class="number">23</span>, <span class="number">37</span>, <span class="number">96</span>, <span class="number">55</span>, <span class="number">40</span>, <span class="number">92</span>, <span class="number">68</span>, <span class="number">88</span>]</div><div class="line"></div><div class="line"><span class="comment">// 1. 过滤</span></div><div class="line"><span class="keyword">let</span> newArray1 = array.<span class="built_in">filter</span> &#123; $<span class="number">0</span> &gt; <span class="number">50</span> &#125; <span class="comment">//找到数组中比50大的数输出出来</span></div><div class="line"><span class="built_in">print</span>(newArray1)</div><div class="line"></div><div class="line"><span class="keyword">let</span> newArray2 = array.<span class="built_in">filter</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment">//找到数组中得偶数</span></div><div class="line"><span class="built_in">print</span>(newArray2)</div><div class="line"></div><div class="line"><span class="comment">// 2. 映射</span></div><div class="line"><span class="keyword">let</span> newArray3 = array.<span class="built_in">map</span> &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125; <span class="comment">//将数组中的每个数平方</span></div><div class="line"><span class="built_in">print</span>(newArray3)</div><div class="line"><span class="keyword">let</span> newArray4 = array.<span class="built_in">map</span> &#123; sqrt(<span class="type">Double</span>($<span class="number">0</span>)) &#125; <span class="comment">//将数组中得每个数开根号</span></div><div class="line"><span class="built_in">print</span>(newArray4)</div><div class="line"></div><div class="line"><span class="comment">// 3. 缩减</span></div><div class="line"><span class="keyword">let</span> result1 = array.<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)<span class="comment">// 将数组中的每个数想加</span></div><div class="line"><span class="built_in">print</span>(result1)</div><div class="line"><span class="keyword">let</span> result2 = array.<span class="built_in">reduce</span>(<span class="number">1</span>, combine: *)<span class="comment">//将数组中的每个数相乘</span></div><div class="line"><span class="built_in">print</span>(result2)</div><div class="line"><span class="keyword">let</span> result3 = array.<span class="built_in">reduce</span>(array[<span class="number">0</span>]) &#123; <span class="comment">//取数组中最大的数</span></div><div class="line">    $<span class="number">1</span> &gt; $<span class="number">0</span> ? $<span class="number">1</span> : $<span class="number">0</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(result3)</div><div class="line"></div><div class="line"><span class="keyword">let</span> strArray = [<span class="string">"I"</span>, <span class="string">"love"</span>, <span class="string">"you"</span>]</div><div class="line"><span class="keyword">let</span> result4 = strArray.<span class="built_in">reduce</span>(<span class="string">""</span>) &#123; $<span class="number">0</span> + <span class="string">" "</span> + $<span class="number">1</span> &#125;<span class="comment">//将数组中的三个元素合为一个</span></div><div class="line"><span class="built_in">print</span>(result4)</div></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>类和上文提到的函数 紧密相关<br>类是一类事物 而对象是这类事物中具体的实例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> 步骤<span class="number">1</span>: 定义类(如果你要用的类苹果已经提供了就直接进入第<span class="number">2</span>步)</div><div class="line"> 定义类就可以创建出新的类型</div><div class="line"> 学生类</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="comment">// 变量定义到类的外面就叫变量 - variable</span></div><div class="line">    <span class="comment">// 变量定义到类的里面就叫属性 - property</span></div><div class="line">    <span class="comment">// 数据抽象 - 找到和学生相关的属性(找名词)</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="comment">// 初始化方法(构造方法/构造器) - constructor</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.age = age</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数写到类的外面就叫函数 - function</span></div><div class="line">    <span class="comment">// 函数写到类的里面就叫方法 - method</span></div><div class="line">    <span class="comment">// 行为抽象 - 找到和学生相关的方法(找动词)</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(name)正在吃饭."</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">study</span><span class="params">(courseName: String)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(name)正在学习\(courseName)."</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">watchJapaneseAV</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> age &gt;= <span class="number">18</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(name)正在动作片."</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"亲爱的\(name), 我们推荐你观看《熊出没》"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 步骤2: 创建对象(调用初始化方法)</span></div><div class="line"><span class="keyword">let</span> stu1 = <span class="type">Student</span>(name: <span class="string">"小刚"</span>, age: <span class="number">35</span>)</div><div class="line"><span class="comment">// 步骤3: 给对象发消息(通过给对象发消息来解决问题)</span></div><div class="line">stu1.eat()</div><div class="line">stu1.study(<span class="string">"Swift程序设计"</span>)</div><div class="line">stu1.watchJapaneseAV()</div><div class="line"></div><div class="line"><span class="keyword">let</span> stu2 = <span class="type">Student</span>(name: <span class="string">"王大锤"</span>, age: <span class="number">15</span>)</div><div class="line">stu2.eat()</div><div class="line">stu2.study(<span class="string">"中国近代史"</span>)</div><div class="line">stu2.watchJapaneseAV()</div></pre></td></tr></table></figure><blockquote><p>下面定义一个圆的类<br>类里面有求圆的面积和周长的方法（函数）<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">// 0. 发现类</span></div><div class="line"><span class="comment">//  - 在对问题的描述中找名词和动词</span></div><div class="line"><span class="comment">//  - 名词会成为类或者类中的属性 动词会成为类中的方法</span></div><div class="line"></div><div class="line"><span class="comment">// 1. 定义类</span></div><div class="line"><span class="comment">//  - 数据抽象(属性)</span></div><div class="line"><span class="comment">//  - 行为抽象(方法)</span></div><div class="line"><span class="comment">//  - 初始化方法</span></div><div class="line"></div><div class="line"><span class="comment">// 访问修饰符</span></div><div class="line"><span class="comment">//  - public (公开)</span></div><div class="line"><span class="comment">//  - internal (内部的) - 默认</span></div><div class="line"><span class="comment">//  - private (私有)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</div><div class="line">    <span class="comment">// stored property</span></div><div class="line">    <span class="comment">// 存储属性(保存和圆相关的数据的属性)</span></div><div class="line">    <span class="keyword">var</span> center: <span class="type">Point</span></div><div class="line">    <span class="keyword">var</span> radius: <span class="type">Double</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(center: <span class="type">Point</span>, radius: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.center = center</div><div class="line">        <span class="keyword">self</span>.radius = radius</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 通常获得某个计算出的值的方法都可以设计成计算属性</span></div><div class="line">    <span class="comment">// computational property</span></div><div class="line">    <span class="comment">// 计算属性(通过对存储属性做运算得到的属性)</span></div><div class="line">    <span class="keyword">var</span> perimeter: <span class="type">Double</span> &#123;</div><div class="line">        <span class="comment">// 圆的周长是一个只读属性</span></div><div class="line">        <span class="comment">// 所以此处只有get&#123;&#125;没有set&#123;&#125;</span></div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="number">2</span> * <span class="type">M_PI</span> * radius &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> area: <span class="type">Double</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="type">M_PI</span> * radius * radius &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">注意：运算符重载</div><div class="line"></div><div class="line">```swift</div><div class="line"><span class="comment">//运算符重载（为自定义的类型定义运算符）</span></div><div class="line"><span class="function"><span class="keyword">func</span> +<span class="params">(one: Fraction, two: Fraction)</span></span> -&gt; <span class="type">Fraction</span> &#123;</div><div class="line">    <span class="keyword">return</span> one.add(two)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> -<span class="params">(one: Fraction, two: Fraction)</span></span> -&gt; <span class="type">Fraction</span> &#123;</div><div class="line">    <span class="keyword">return</span> one.sub(two)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> *<span class="params">(one: Fraction, two: Fraction)</span></span> -&gt; <span class="type">Fraction</span> &#123;</div><div class="line">    <span class="keyword">return</span> one.mul(two)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> /<span class="params">(one: Fraction, two: Fraction)</span></span> -&gt; <span class="type">Fraction</span> &#123;</div><div class="line">    <span class="keyword">return</span> one.div(two)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 继承: 从已有的类创建新类的过程</span></div><div class="line"><span class="comment">// 提供继承信息的称为父类(超类/基类)</span></div><div class="line"><span class="comment">// 得到继承信息的称为子类(派生类/衍生类)</span></div><div class="line"><span class="comment">// 通常子类除了得到父类的继承信息还会增加一些自己特有的东西</span></div><div class="line"><span class="comment">// 所以子类的能力一定比父类更强大</span></div><div class="line"><span class="comment">// 继承的意义在于子类可以复用父类的代码并且增强系统现有的功能</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>: <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> title: <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>, gender: <span class="type">Gender</span>, title: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.title = title</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name, age: age, gender: gender)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">teach</span><span class="params">(courseName: String)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(name)\(title)正在教\(courseName)."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//父类和子类关系</span></div><div class="line"><span class="keyword">let</span> p1 = <span class="type">Person</span>(name: <span class="string">"王大锤"</span>, age: <span class="number">25</span>, gender: .<span class="type">Male</span>)</div><div class="line">p1.eat()</div><div class="line"></div><div class="line"><span class="comment">// 可以将子类型的对象赋值给父类型的变量(因为子类跟父类之间是IS-A关系)</span></div><div class="line"><span class="comment">// 学生是人, 老师是人, 所以学生和老师的对象可以赋值给人类型的变量</span></div><div class="line"><span class="keyword">let</span> p2: <span class="type">Person</span> = <span class="type">Student</span>(name: <span class="string">"张尼玛"</span>, age: <span class="number">18</span>, gender: .<span class="type">Female</span>, major: <span class="string">"计算机科学与技术"</span>)</div><div class="line">p2.eat()</div><div class="line"><span class="comment">// 如果要将父类型的变量转换成子类型需要用as运算符进行类型转换</span></div><div class="line"><span class="comment">// 如果能够确认父类型的变量中就是某种子类型的对象可以用as!进行转换</span></div><div class="line"><span class="comment">// 如果不确定父类型的变量中是哪种子类型可以用as?尝试转换</span></div><div class="line">(p2 <span class="keyword">as</span>! <span class="type">Student</span>).study(<span class="string">"Swift程序设计"</span>)</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> temp = p2 <span class="keyword">as</span>? <span class="type">Teacher</span> &#123;</div><div class="line">    temp.teach(<span class="string">"Java"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(p2.name)不是老师!!!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> p3: <span class="type">Person</span> = <span class="type">Teacher</span>(name: <span class="string">"骆昊"</span>, age: <span class="number">35</span>, gender: .<span class="type">Male</span>, title: <span class="string">"叫兽"</span>)</div><div class="line"></div><div class="line">p3.eat()</div></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>同样的对象类型(pet类型)接受了相同的消息(调用了相同的方法)<br>但是做了不同的事情 这就是多态(polymorphism)<br>例如：猫(cat)继承它的父类动物(pet)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  / <span class="type">Cat</span>和<span class="type">Pet</span>之间是<span class="type">IS</span>-<span class="type">A</span>关系(继承)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Pet</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> hairColor: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="comment">// 父类有的方法子类可以重新实现 这个过程叫方法重写</span></div><div class="line">    <span class="comment">// 需要在方法前添加override关键字</span></div><div class="line">    <span class="comment">// 重写有时也被称为置换/覆盖/覆写</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.play()</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(nickname)正在玩毛线球."</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shout</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(nickname): 喵喵喵……"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">catchTheMouse</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(nickname)正在抓老鼠."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>对父类的方法可以重新实现， 这个过程叫方法重写<br>这是实现多态的重要步骤之一！<br>下面是实现多态的第二个步骤：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> petsArray = [</div><div class="line">    <span class="type">Cat</span>(nickname:<span class="string">"加菲"</span>,gender: .<span class="type">Male</span>,age:<span class="number">2</span>),</div><div class="line">    <span class="type">Dog</span>(nickname: <span class="string">"吉娃娃"</span>, gender: .<span class="type">Male</span>, age: <span class="number">3</span>, isLarge: <span class="literal">false</span>),</div><div class="line">    <span class="type">Dog</span>(nickname: <span class="string">"大黄"</span>, gender: .<span class="type">FeMale</span>, age: <span class="number">2</span>, isLarge: <span class="literal">true</span>),</div><div class="line">    <span class="type">Mistress</span>(nickname: <span class="string">"小花"</span>,gender: .<span class="type">FeMale</span>,age:<span class="number">16</span>)</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> petsArray&#123;</div><div class="line">    pet.eat()</div><div class="line">    <span class="comment">// 同样的对象类型(pet类型)接受了相同的消息(调用了相同的方法)</span></div><div class="line">    <span class="comment">// 但是做了不同的事情 这就是多态(polymorphism)</span></div><div class="line">    </div><div class="line">    <span class="comment">// 实现多态的关键步骤：</span></div><div class="line">    <span class="comment">// 1.方法的重写(子类在继承父类的过程中对父类已有的方法进行重写,而且不同的子类给出各自不同的实现版本)</span></div><div class="line">    <span class="comment">// 2.对象造型(将子类对象当成父类型来使用)</span></div><div class="line">    pet.play()</div><div class="line">    pet.shout()</div><div class="line">    <span class="comment">// 如果dog是属于pet中 如果dog是Dog类型就可以调用keepTheDoor这个特有的方法</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> dog = pet <span class="keyword">as</span>? <span class="type">Dog</span>&#123;</div><div class="line">        dog.keepTheDoor()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> cat = pet <span class="keyword">as</span>? <span class="type">Cat</span>&#123;</div><div class="line">        cat.catchTheMouse()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> mistress = pet <span class="keyword">as</span>? <span class="type">Mistress</span>&#123;</div><div class="line">        mistress.makeTrouble()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//枚举</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span></span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Male</span></div><div class="line">    <span class="keyword">case</span> <span class="type">FeMale</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Func-网速实时显示</title>
      <link href="/2017/12/06/OC/Func/iOS-Func-%E7%BD%91%E9%80%9F%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA/"/>
      <content type="html"><![CDATA[<blockquote><p>原理：通过函数getifaddrs来得到系统网络接口的信息，网络接口的信息, 包含在if_data字段中, 有很多信息, 但我现在只关心ifi_ibytes, ifi_obytes, 应该就是接收到的字节数和发送的字节数, 加起来就是流量了. 还发现, 接口的名字, 有en, pdp_ip, lo等几种形式, en应该是wifi, pdp_ip大概是3g或者gprs, lo是环回接口, 通过名字区分可以分别统计</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">long</span> <span class="keyword">long</span>) getInterfaceBytes</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> ifaddrs *ifa_list = <span class="number">0</span>, *ifa;</div><div class="line">    <span class="keyword">if</span> (getifaddrs(&amp;ifa_list) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    uint32_t iBytes = <span class="number">0</span>;</div><div class="line">    uint32_t oBytes = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (ifa = ifa_list; ifa; ifa = ifa-&gt;ifa_next)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (AF_LINK != ifa-&gt;ifa_addr-&gt;sa_family)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (!(ifa-&gt;ifa_flags &amp; IFF_UP) &amp;&amp; !(ifa-&gt;ifa_flags &amp; IFF_RUNNING))</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (ifa-&gt;ifa_data == <span class="number">0</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/* Not a loopback device. */</span></div><div class="line">        <span class="keyword">if</span> (strncmp(ifa-&gt;ifa_name, <span class="string">"lo"</span>, <span class="number">2</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">struct</span> if_data *if_data = (<span class="keyword">struct</span> if_data *)ifa-&gt;ifa_data;</div><div class="line">            </div><div class="line">            iBytes += if_data-&gt;ifi_ibytes;</div><div class="line">            oBytes += if_data-&gt;ifi_obytes;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    freeifaddrs(ifa_list);</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n[getInterfaceBytes-Total]%d,%d"</span>,iBytes,oBytes);</div><div class="line">    <span class="keyword">return</span> iBytes + oBytes;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/zzzzzdddddxxxxx/article/details/51557840" target="_blank" rel="external">资料01</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Func-内存泄漏问题</title>
      <link href="/2017/12/06/OC/Func/iOS-Func-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98/"/>
      <content type="html"><![CDATA[<h1 id="AFHTTP-内存泄漏问题"><a href="#AFHTTP-内存泄漏问题" class="headerlink" title="AFHTTP 内存泄漏问题"></a>AFHTTP 内存泄漏问题</h1><blockquote><p>AFHTTP 框架的通病。这个问题很常见，也最好解决，网上也有不少的解决方案<br>主流的解决方案就是使用单例。定义一个单例对象 SessionManager：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">@interface</span> <span class="title">SessionManager</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)AFHTTPSessionManager *manager;</div><div class="line">+(SessionManager *)share;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SessionManager</span></span></div><div class="line"></div><div class="line"></div><div class="line">+(SessionManager *)share&#123;</div><div class="line">    <span class="keyword">static</span> SessionManager *shareObj = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        shareObj = [[SessionManager alloc] init];</div><div class="line"></div><div class="line">        AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">        <span class="comment">/** 设置超时*/</span></div><div class="line">        [manager.requestSerializer willChangeValueForKey:<span class="string">@"timeoutInterval"</span>];</div><div class="line">        manager.requestSerializer.timeoutInterval = <span class="number">10</span>;</div><div class="line">        [manager.requestSerializer didChangeValueForKey:<span class="string">@"timeoutInterval"</span>];</div><div class="line">        shareObj.manager = manager;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> shareObj;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><blockquote><p>使用SessionManager</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> AFHTTPSessionManager* manager = [SessionManager share].manager;</div><div class="line">manager.requestSerializer = [AFHTTPRequestSerializer new];</div><div class="line">……</div></pre></td></tr></table></figure><h1 id="环信-UI-框架中的内存泄漏问题"><a href="#环信-UI-框架中的内存泄漏问题" class="headerlink" title="环信 UI 框架中的内存泄漏问题"></a>环信 UI 框架中的内存泄漏问题</h1><blockquote><p>环信框架中，有一个对 UIViewController 的扩展（Category） :UIViewController+HUD，它对 MBHUD 进行了二次封装，通过它可以使你的 MBHUD 的调用变得更简单，比如显示一个 HUD 你可以这样：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> showHudInView:<span class="keyword">self</span>.view hint:<span class="string">@""</span>];</div></pre></td></tr></table></figure><blockquote><p>但是这个方法中有一个严重的内存泄漏问题。当你在一个 View Controller 中多次显示 HUD 之后（比如反复下拉刷新表格），用视图调试器查看 UIView，你会发现视图树中显示了多个 HUD 对象。也就是说每次 showHudInView 之后都会重新生成一个新的 HUD，而原来的 HUD 虽然被隐藏了，但它们在内存中仍然是持续存在的。每次 showHudInView 调用大概会导致 400-500 k 的内存泄漏。如果你反复刷新表格（比如 5 分钟或更长）直到内存撑爆，app 崩溃<br>解决的方法很简单，在 showHudInView 方法中加入一句：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">HUD.removeFromSuperViewOnHide = <span class="literal">YES</span>;</div></pre></td></tr></table></figure><h1 id="O-C-块中对-self-强引用导致的内存泄漏问题"><a href="#O-C-块中对-self-强引用导致的内存泄漏问题" class="headerlink" title="O-C 块中对 self 强引用导致的内存泄漏问题"></a>O-C 块中对 self 强引用导致的内存泄漏问题</h1><blockquote><p>在 View Controller 类的 O-C 块中，如果你直接引用了 self，则会导致 View Controller 被强引用（因为块的参数都是以 copy 引用的，会导致 retained count 加 1）。这样，当 View Controller 被 pop 出导航控制器栈后不会被释放，导致内存泄漏。这个泄漏就比较严重了，少则几百 K,多则几兆</p><p>一个比较明显的例子就是 MJRefresh。在 View Controller 中，如果我们想支持下拉刷新，通常会这样使用 MJRefresh：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.tableView.mj_header=[MJRefreshNormalHeader headerWithRefreshingBlock:^&#123;</div><div class="line">       [<span class="keyword">self</span>.tableView.mj_header endRefreshing];</div><div class="line">       currentPage = <span class="number">1</span>;</div><div class="line">       [<span class="keyword">self</span> loadNoticeList:<span class="number">1</span> success:^(<span class="built_in">NSArray</span>&lt;CampusNoticeModel *&gt; *data) &#123;</div><div class="line">           [<span class="keyword">self</span>.models removeAllObjects];</div><div class="line">           [<span class="keyword">self</span>.models addObjectsFromArray:data];</div><div class="line">           [<span class="keyword">self</span>.tableView reloadData];</div><div class="line">       &#125; failure:^(<span class="built_in">NSString</span> *msg) &#123;</div><div class="line">       &#125;];        </div><div class="line">   &#125;];</div></pre></td></tr></table></figure><blockquote><p>注意，O-C 块中对 View Controller 进行了强引用，比如：self.tableView 和 self.models。<br>原则上，当我们在 O-C 块中引用 self 时，应当使用弱引用，比如上面的代码应当改为：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf=<span class="keyword">self</span>;</div><div class="line">  <span class="keyword">self</span>.tableView.mj_header=[MJRefreshNormalHeader headerWithRefreshingBlock:^&#123;</div><div class="line">      [weakSelf.tableView.mj_header endRefreshing];</div><div class="line">      currentPage = <span class="number">1</span>;</div><div class="line">      [weakSelf loadNoticeList:<span class="number">1</span> success:^(<span class="built_in">NSArray</span>&lt;CampusNoticeModel *&gt; *data) &#123;</div><div class="line">          [weakSelf.models removeAllObjects];</div><div class="line">          [weakSelf.models addObjectsFromArray:data];</div><div class="line">          [weakSelf.tableView reloadData];</div><div class="line">      &#125; failure:^(<span class="built_in">NSString</span> *msg) &#123;</div><div class="line">      &#125;];</div><div class="line">  &#125;];</div></pre></td></tr></table></figure><blockquote><p>也就是将 OC 块中所有的 self 改成 weakSelf。这里有一个例外，如果引用的是实例变量而不是属性，原则上是不需要 weakSelf 的。比如 currentPage 在 View Controller 中是以实例变量形式定义的（也就是说没有用 @property 进行声明），那么我们不需要通过 weakSelf 来进行引用<br>但是，如果你在项目中使用 MLeaksFinder 来检测内存泄漏时，MLeaksFinder 仍然会认为 O-C 块中对 currentPage 的引用存在问题。因此，为了让 MLeaksFinder 彻底“闭上嘴”，我们最好也将 currentPage 修改为属性（使用 @property 声明），然后将 O-C 块中的引用方式修改为：weakSelf.currentPage</p></blockquote><h1 id="CADisplayLink-导致的内存泄漏"><a href="#CADisplayLink-导致的内存泄漏" class="headerlink" title="CADisplayLink 导致的内存泄漏"></a>CADisplayLink 导致的内存泄漏</h1><blockquote><p>在使用 CADisplayLink 时，如果不释放 CADisplayLink，很容易出现内存泄漏。以自定义 UIView 为例，我们会使用定时器进行某些自定义的绘图和动画操作。这时我们会用到 CADisplayLink </p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">displayLink = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(animateDashboard:)];</div></pre></td></tr></table></figure><blockquote><p>当我们需要开启定时器时，可以将它添加到 runloop：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[displayLink addToRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop] forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div></pre></td></tr></table></figure><blockquote><p>但是 displayLink 会持有 UIView 对象，导致 UIView 永远不会被释放。因此我们需要在一个适当的时机释放 displayLink，比如在 CADisplayLink 的 action 方法中根据一定的条件来 invalidate 它：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> -(<span class="keyword">void</span>)animateDashboard:(<span class="built_in">CADisplayLink</span> *)sender&#123;</div><div class="line">    <span class="keyword">if</span>( endValue &lt;= <span class="keyword">self</span>.value)&#123;<span class="comment">// 到达终点值，停止动画</span></div><div class="line">        ......</div><div class="line">        [displayLink invalidate];</div><div class="line">        ......</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>另外，CADisplayLink 最好不要复用。也就是说，每次启动 CADisplayLink 时都重新初始化并将它添加到 runloop，而每次停止动画时都 invalidate：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> -(<span class="keyword">void</span>)animating&#123;</div><div class="line">    <span class="keyword">if</span>(_stopped == <span class="literal">YES</span>)&#123;</div><div class="line">        displayLink = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(blink:)];</div><div class="line">        [displayLink addToRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop] forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line"></div><div class="line">        _stopped = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span> setNeedsDisplay];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">void</span>)stopAnimating&#123;</div><div class="line">    <span class="keyword">if</span>(_stopped == <span class="literal">NO</span>)&#123;</div><div class="line">        [displayLink invalidate];</div><div class="line">        _stopped = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="reloadRowsAtIndexPaths-导致的内存泄漏"><a href="#reloadRowsAtIndexPaths-导致的内存泄漏" class="headerlink" title="reloadRowsAtIndexPaths 导致的内存泄漏"></a>reloadRowsAtIndexPaths 导致的内存泄漏</h1><blockquote><p>UITableView 的 reloadRowsAtIndexPaths 的行为非常奇怪，在刷新 cell 时，它并不会重用原有的 cell，而是重新创建新的 cell 覆盖在原来的 cell 上，这会导致额外的内存开销。当重复多次调用 reloadRowsAtIndexPaths 之后，你可以在视图调试器中看下效果：<br>无论你用不用 beginUpdates/endUpdates，结果都是一样。<br>解决的办法目前只有一个，不要用 reloadRowsAtIndexPaths，而是使用 reloadData，当然会有一点性能上的代价，但也是没有办法的事情</p></blockquote><h1 id="定时器导致的内存泄漏问题"><a href="#定时器导致的内存泄漏问题" class="headerlink" title="定时器导致的内存泄漏问题"></a>定时器导致的内存泄漏问题</h1><blockquote><p>有时候 NSTimer （尤其是 repeated 为 YES 时）会导致内存泄漏问题。因为定时器是在另外一个线程中运行的，当界面消失后，定时器仍然还在运行，如果在定时器任务中引用了 UI 元素，则这些视图都会被强引用，从而导致界面消失后 view 无法释放，导致内存泄漏。<br>因此，如果在你的 UIViewController 中使用了定时器，一定要记得在 viewWillDisappear 方法中 invalidate 它</p></blockquote><h1 id="addScriptMessageHandler-导致的内存泄漏"><a href="#addScriptMessageHandler-导致的内存泄漏" class="headerlink" title="addScriptMessageHandler 导致的内存泄漏"></a>addScriptMessageHandler 导致的内存泄漏</h1><blockquote><p>WKUserContentController 的 addScriptMessageHandler 方法会导致一个对 handler 对象的强引用，从而导致 handler （通常是 webView 所在的 ViewController）不会被释放，于是内存泄漏。<br>解决的办法是 removeScriptMessageHandlerForName。根据官方文档，当你 addScriptMessageHandler 之后，需要在不再需要 handler 时，需要调用 removeScriptMessageHandlerForName 解除 handler 的强引用。<br>问题在于，“当你不在需要它的时候”到底是什么时候？我们一般会在 viewDidLoad 中 addScriptMessageHandler，按道理应该在 dealloc 中 removeScriptMessageHandlerForName。但由于内存都已经泄漏了，ViewContoller 的 dealloc 根本不会调用，这个方法是无效的。<br>解决的办法有两个，一个是将 addScriptMessageHandler 放到 viewDidAppear 中执行，那么我们就可以在 viewDidDisappler 中 removeScriptMessageHandlerForName 了。<br>另一个方法是将 handler 弱引用。这需要新建一个类，创建一个弱引用的属性，用这个属性来包装 handler 对象：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  @interface <span class="type">WeakScriptMessageDelegate</span> : <span class="type">NSObject</span>&lt;<span class="type">WKScriptMessageHandler</span>&gt;</div><div class="line"><span class="comment">// 1</span></div><div class="line">@property (nonatomic, <span class="keyword">weak</span>) id&lt;<span class="type">WKScriptMessageHandler</span>&gt; scriptDelegate;</div><div class="line"></div><div class="line">- (instancetype)initWithDelegate:(id&lt;<span class="type">WKScriptMessageHandler</span>&gt;)scriptDelegate;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation <span class="type">WeakScriptMessageDelegate</span></div><div class="line"></div><div class="line">- (instancetype)initWithDelegate:(id&lt;<span class="type">WKScriptMessageHandler</span>&gt;)scriptDelegate</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _scriptDelegate = scriptDelegate;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 2</span></div><div class="line">- (void)userContentController:(<span class="type">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="type">WKScriptMessage</span> *)message</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.scriptDelegate userContentController:userContentController didReceiveScriptMessage:message];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><ul><li><p>这个属性就是用来弱引用 handler 的属性，它保存了一个对 handler 的弱引用。类型是 id，因为 addScriptMessageHandler 方法需要一个 WKScriptMessageHandler 对象作为参数</p></li><li><p>这个对象对 WKScriptMessageHandler 进行了封装，它同样实现了 WKScriptMessageHandler 协议，这个协议中有一个唯一的方法需要实现，即 userContentController 方法。在方法内部，我们可以直接调用 handler 的同名方法实现（因为二者的行为是一致的）</p></li></ul><blockquote><p>使用</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> / 将 handler 转换成一个若引用的 handler,从而避免内存泄漏</div><div class="line">WeakScriptMessageDelegate* weakHandler = [[WeakScriptMessageDelegate alloc] initWithDelegate:handler];</div><div class="line"></div><div class="line">[webView.configuration.userContentController addScriptMessageHandler:weakHandler name:methodName];</div></pre></td></tr></table></figure><blockquote><p>MLeaksFinder</p><p>内存泄漏问题多种多样，它们经常以出乎人意料的形式存在，我们无法以一种固定的模式来判断 app 中存在的内存泄漏问题。我们常常需要使用多个工具和手段来检查 app 中的内存问题，比如可以用 Xcode 的 Analyze 工具对代码进行静态语法分析，用 Instrument 的 Leaks/Allocations 工具进行动态内存检查分析，用视图调试器查看 UI 问题等等。</p><p>但我们还可以用许多第三方内存泄漏检测框架，比如：MLeaksFinder 和 HeapInspector-for-iOS，尤其是前者（后者目前会导致 App “冻死”的问题，作者还在解决这个问题）。</p><p>MLeaksFinder 是一个专门用于检测 UI 类内存泄漏的工具，我们可以利用它来检测 UIViewController 和 UIView 中未 dealloc 的 subview。</p><p>它的使用非常简单，直接 pod MLeaksFinder，然后找到 MLeaksFinder.h 头文件，将其中的 MEMORY_LEAKS_FINDER_ENABLED 宏和 MEMORY_LEAKS_FINDER_RETAIN_CYCLE_ENABLED 宏打开（设置为 1）就可以了。</p><p>编译运行 app，测试各种操作，切换到不同的 view controller，当 MLeaksFinder 发现内存泄漏会弹出一个 alert（同时控制台会有输出），告诉你哪个类和 UIView 中存在内存泄漏（以及循环持有）</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-NSSet</title>
      <link href="/2017/12/06/OC/Grammar/iOS-NSSet/"/>
      <content type="html"><![CDATA[<h1 id="NSSet初始化"><a href="#NSSet初始化" class="headerlink" title="NSSet初始化"></a>NSSet初始化</h1><blockquote><p>NSSet是无序的<br>注意:这个是最为重要的功能 NSSet中不能够存储重复的数据,可以用它来去除重复的值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> <span class="built_in">NSString</span> * str1 = <span class="string">@"one"</span>;</div><div class="line">   <span class="built_in">NSString</span> * str2 = <span class="string">@"two"</span>;</div><div class="line">   <span class="built_in">NSString</span> * str3 = <span class="string">@"three"</span>;</div><div class="line">   <span class="built_in">NSSet</span> * set = [[<span class="built_in">NSSet</span> alloc] initWithObjects:str1,str2,str3,str1, <span class="literal">nil</span>];</div><div class="line"> 这样其实在set中指存储了 @“one”,@“two”,@“three” set.count 值为<span class="number">3</span></div><div class="line">[set containsObject:str1];  是否包含str1</div></pre></td></tr></table></figure><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSEnumerator</span> * enumerator = [set objectEnumerator];</div><div class="line">    <span class="built_in">NSString</span> * value;</div><div class="line">    <span class="keyword">while</span> (value = [enumerator nextObject]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"value %@"</span>,value);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="可变集合NSMutableSet"><a href="#可变集合NSMutableSet" class="headerlink" title="可变集合NSMutableSet"></a>可变集合NSMutableSet</h1><blockquote><p>创建一个可变集合</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableSet</span> * muSet = [[<span class="built_in">NSMutableSet</span> alloc] init];</div></pre></td></tr></table></figure><blockquote><p>增加值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[muSet addObject:str1];</div></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[muSet removeObject:str1];</div></pre></td></tr></table></figure><blockquote><p>删除所有</p></blockquote> <figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[muSet removeAllObjects];</div></pre></td></tr></table></figure><h1 id="集合之间相互转换"><a href="#集合之间相互转换" class="headerlink" title="集合之间相互转换"></a>集合之间相互转换</h1><blockquote><p>NSArray 转换成 NSMutableArray</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> * array = @[<span class="string">@"one"</span>,<span class="string">@"two"</span>,<span class="string">@"three"</span>];</div><div class="line"><span class="built_in">NSMutableArray</span> * muArray = [<span class="built_in">NSMutableArray</span> arrayWithArray:array];</div></pre></td></tr></table></figure><blockquote><p>NSDictionary 转换成 NSMutableDictionary</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> * dic = @&#123;<span class="string">@"one"</span>:<span class="string">@"1"</span>,<span class="string">@"two"</span>:<span class="string">@"2"</span>&#125;;</div><div class="line"><span class="built_in">NSMutableDictionary</span> * muDic = [<span class="built_in">NSMutableDictionary</span>     dictionaryWithDictionary:dic];</div></pre></td></tr></table></figure><blockquote><p>NSSet 转换成 NSMutableSet</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSSet</span> * set = [[<span class="built_in">NSSet</span> alloc] initWithObjects:<span class="string">@"one"</span>,<span class="string">@"two"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSMutableSet</span> *muSet = [<span class="built_in">NSMutableSet</span> setWithSet:set];</div></pre></td></tr></table></figure><h1 id="NSArray-转换成NSSet"><a href="#NSArray-转换成NSSet" class="headerlink" title="NSArray 转换成NSSet"></a>NSArray 转换成NSSet</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableSet</span> * muSet2 = [<span class="built_in">NSMutableSet</span> setWithArray:array];</div></pre></td></tr></table></figure><h1 id="NSDictionary-转化成NSArray"><a href="#NSDictionary-转化成NSArray" class="headerlink" title="NSDictionary 转化成NSArray"></a>NSDictionary 转化成NSArray</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> * keys = [dic allKeys];</div><div class="line"><span class="built_in">NSArray</span> * values = [dic allValues];</div></pre></td></tr></table></figure><h1 id="字符串转换成数组"><a href="#字符串转换成数组" class="headerlink" title="字符串转换成数组"></a>字符串转换成数组</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * str = <span class="string">@"aa.bb.cc"</span>;</div><div class="line"><span class="built_in">NSArray</span> * strArray =[str componentsSeparatedByString:@“.<span class="string">"];</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
          <category> NSSet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
            <tag> NSSet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-NSDictionary-字典</title>
      <link href="/2017/12/06/OC/Grammar/iOS-NSDictionary-%E5%AD%97%E5%85%B8/"/>
      <content type="html"><![CDATA[<p>#初始化</p><blockquote><p>创建字段,不可变的</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> * dic = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@"s"</span>,<span class="string">@"name"</span>, <span class="literal">nil</span>];</div></pre></td></tr></table></figure><blockquote><p>快捷创建方式</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> * dic2 = @&#123; <span class="string">@"one"</span>:<span class="string">@"1"</span>,<span class="string">@"two"</span>:<span class="string">@"2"</span>&#125;;</div><div class="line">dic2.count  获得字典长度</div></pre></td></tr></table></figure><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> * keys = [dic3 allKeys];</div><div class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.count; i++)</div><div class="line"> &#123;</div><div class="line">     <span class="built_in">NSString</span> * key = [keys objectAtIndex:i];</div><div class="line">     </div><div class="line">     <span class="comment">//如果你的字典中存储的多种不同的类型,那么最好用id类型去接受它</span></div><div class="line">     <span class="keyword">id</span> obj  = [dic3 objectForKey:key];</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"obj %@"</span>,obj);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><blockquote><p>枚举器</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSEnumerator</span> * enumerator =  [dic3 objectEnumerator];</div><div class="line"><span class="keyword">id</span> value;</div><div class="line"><span class="keyword">while</span> (value = [enumerator nextObject]) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value %@"</span>,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="可变字典NSMutableDictionary"><a href="#可变字典NSMutableDictionary" class="headerlink" title="可变字典NSMutableDictionary"></a>可变字典NSMutableDictionary</h1><blockquote><p>创建一个可变长度字典</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableDictionary</span> * muDic = [[<span class="built_in">NSMutableDictionary</span> alloc] initWithCapacity:<span class="number">0</span>];</div></pre></td></tr></table></figure><blockquote><p>向字典中村如数据</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[muDic setObject:<span class="string">@"1"</span> forKey:<span class="string">@"one"</span>];</div></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[muDic removeObjectForKey:@“one<span class="string">"];</span></div></pre></td></tr></table></figure><blockquote><p>全部删除</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[muDic removeAllObjects];</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
          <category> NSDictionary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
            <tag> NSDictionary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-NSArray-数组</title>
      <link href="/2017/12/06/OC/Grammar/iOS-UIKit-NSArray-%E6%95%B0%E7%BB%84/"/>
      <content type="html"><![CDATA[<h1 id="初始化、取值等基础操作"><a href="#初始化、取值等基础操作" class="headerlink" title="初始化、取值等基础操作"></a>初始化、取值等基础操作</h1><blockquote><p>NSArray 是不可变数组,一旦创建完成就不能够对数组进行,添加,删除等操作</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">     <span class="built_in">NSArray</span> * array = [[<span class="built_in">NSArray</span> alloc] init];</div><div class="line">     <span class="built_in">NSArray</span> * array1 = [<span class="built_in">NSArray</span>                        arrayWithObjects:<span class="string">@"one"</span>,<span class="string">@"two"</span>,<span class="string">@"three"</span>, <span class="literal">nil</span>]; </div><div class="line">``` </div><div class="line"> </div><div class="line">&gt;在创建一个<span class="built_in">NSArray</span>的时候最后一个元素一定是<span class="literal">nil</span> 不要把<span class="literal">nil</span>存到数组中，会导致数据丢失</div><div class="line">&gt;数组实际上存储的时对象的地址,同样也可以存储数组的地址</div><div class="line"></div><div class="line">```objectivec</div><div class="line">     <span class="built_in">NSArray</span> * a1 = [[<span class="built_in">NSArray</span> alloc]     initWithObjects:<span class="string">@"one"</span>,<span class="string">@"two"</span>,<span class="string">@"three"</span>, <span class="literal">nil</span>];</div><div class="line">     <span class="built_in">NSArray</span> * a2 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"1"</span>,<span class="string">@"2"</span>,<span class="string">@"3"</span>, <span class="literal">nil</span>];</div><div class="line">     <span class="built_in">NSArray</span> * a3 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:a1,a2, <span class="literal">nil</span>];</div><div class="line">``` </div><div class="line"></div><div class="line">&gt;创建数组的快捷方式</div><div class="line"></div><div class="line">```objectivec</div><div class="line">     <span class="built_in">NSArray</span> * array = @[<span class="string">@"a"</span>,<span class="string">@"b"</span>,<span class="string">@"c"</span>];</div></pre></td></tr></table></figure><blockquote><p>快速获得一个数组中的元素</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * str = array[<span class="number">0</span>];</div><div class="line"> [array objectAtIndex:<span class="number">0</span>];  数组的index从<span class="number">0</span>开始</div><div class="line"> [array count] 获得元素个数</div><div class="line">[array containsObject:p1] 判断数组中是否包含某个对象</div></pre></td></tr></table></figure><h1 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h1><blockquote><p>普通的for循环</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.count; i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> * str = array[i];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"array[%d] = %@"</span>,i,str);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>使用增强for循环的方式遍历数组</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> * str <span class="keyword">in</span> array)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>,str);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>枚举器</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> * array = @[<span class="string">@"one"</span>,<span class="string">@"two"</span>,<span class="string">@"three"</span>];</div><div class="line"><span class="built_in">NSEnumerator</span> * enumerator =  [array objectEnumerator];</div><div class="line"><span class="built_in">NSString</span> * value;</div><div class="line"><span class="keyword">while</span> (value = [enumerator nextObject]) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"enum str %@"</span>,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><blockquote><p>使用sortedArrayUsingSelector</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[array sortedArrayUsingSelector:<span class="keyword">@selector</span>(compare:)]</div></pre></td></tr></table></figure><blockquote><p>使用block方式排序</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">array2 = [array2 sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span>             obj1, <span class="keyword">id</span> obj2) &#123;</div><div class="line">       </div><div class="line">       <span class="comment">/*</span></div><div class="line"><span class="comment">       NSComparisonResult result = [obj1 compare:obj2];</span></div><div class="line"><span class="comment">       </span></div><div class="line"><span class="comment">       return result;</span></div><div class="line"><span class="comment">        */</span></div><div class="line">       <span class="comment">//obj1 compare obj2 就是正序排序</span></div><div class="line">    <span class="comment">//return [obj1 compare:obj2];</span></div><div class="line">       <span class="comment">//obj2 compare obj1 就是倒序排序</span></div><div class="line">       <span class="keyword">return</span> [obj2 compare:obj1];</div><div class="line">       </div><div class="line">   &#125;];</div></pre></td></tr></table></figure><blockquote><p>如果你向给你自己定义的对象排序,必须根据某一个属性来排序,<br>如果你向给你自己定义的对象排序,必须根据某一个属性来排序,<br>sortDescriptorWithKey 参数要的就是你对象中,要依据哪个属性来排序,你就把哪个    属性的名字当成key传入<br>ascending YES表示正序 NO表示倒叙</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">        <span class="built_in">NSSortDescriptor</span> * d1 = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"age"</span> ascending:<span class="literal">NO</span>];</div><div class="line">        <span class="built_in">NSSortDescriptor</span> * d2 = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"year"</span> ascending:<span class="literal">NO</span>];</div><div class="line"> ```  </div><div class="line">      </div><div class="line">&gt;如果你要使用多个属性进行排序,默认在前面的<span class="built_in">NSSortDescriptor</span>优先级比较高</div><div class="line"></div><div class="line">```objectivec</div><div class="line">        <span class="built_in">NSArray</span> * description = @[d2,d1];</div><div class="line">        </div><div class="line">        array3 = [array3 sortedArrayUsingDescriptors:description];</div></pre></td></tr></table></figure><h1 id="可变数组NSMutableArray"><a href="#可变数组NSMutableArray" class="headerlink" title="可变数组NSMutableArray"></a>可变数组NSMutableArray</h1><blockquote><p>创建可变数组</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> * array = [[<span class="built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="number">0</span>];</div></pre></td></tr></table></figure><blockquote><p>使用addObject 动态给数组中增加元素</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[array addObject:@“one<span class="string">"];</span></div></pre></td></tr></table></figure><blockquote><p>数组中可以存储,同一个对象多次<br>指定对象插入的位置</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[array insertObject:str1 atIndex:<span class="number">2</span>];</div></pre></td></tr></table></figure><blockquote><p>删除 会通过对象,删除数组中所有的同一个地址的对象</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[array removeObject:str1];</div></pre></td></tr></table></figure><blockquote><p>通过索引的方式删除对象,超出了数组的count值,那么就会导致异常 index beyond bounds</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">[array removeObjectAtIndex:<span class="number">0</span>];</div><div class="line">[array removeAllObjects];</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-AccessControl-访问控制</title>
      <link href="/2017/12/01/Swift/Grammar/AccessControl-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
      <content type="html"><![CDATA[<h1 id="AccessControl访问控制"><a href="#AccessControl访问控制" class="headerlink" title="AccessControl访问控制"></a>AccessControl访问控制</h1><blockquote><p>Swift和C++，Java一样，也有访问控制的概念。通过访问权限的控制，我们可以对外隐藏内部的代码细节，防止修改。<br>Swift的访问控制是基于模块（modules）和源文件（source file）</p><p>Swift的模块概念是这样的：</p><ul><li>1、一个App bundle，或者一个framework都可以看成一个独立的module。 你可以使用import来引入别的module到你的module中来。<br>当你将你的代码打包成一个framework，这个framework就是一个module。里面的所有的东西都是属于这个framework，无论你将这个framework引入到别的framework或app中。</li></ul></blockquote><ul><li>2、一个源文件里面虽然可以定义多个类，但是建议一般一个源文件建立一个类。</li></ul><blockquote><p>Swift的访问权限有：<br>open，public，internal，fileprivate，private</p></blockquote><ul><li><p>1、public    这个权限允许同一个module内部的所有源代码访问，同时允许其他引入了该module的module使用。总的来说就是全开放</p></li><li><p>2、internal  这个权限允许同一个module内部的所有源代码访问，不允许其他module使用。</p></li><li><p>3、private   这个权限仅允许同一个source file的代码访问。</p></li></ul><blockquote><p>Swift的默认访问权限是internal。</p><p>public是最高访问权限，而private是最低访问权限。</p><p>Swift的权限编程原则：</p></blockquote><ul><li>一、高权限的东西不能包含在低权限的东西里面。</li></ul><blockquote><p>举例：</p></blockquote><ul><li><p>1、说就是一个public的类型不能定义在一个声明为internal的类型里面。</p></li><li><p>2、方法的权限不能高于参数和范围值的权限。否则会导致这个方法没法使用。</p></li></ul><blockquote><p>二、单一app中</p></blockquote><ul><li>一般就用默认的internal就行了。如果你想对其他源文件隐藏，可以使用private。</li></ul><blockquote><p>三、framework中</p></blockquote><ul><li><blockquote><p>对于要提供给外边使用的属性，方法。必须使用public权限。其他的可以默认使用internal。如果相对framework里面的其他源文件隐藏，可以使用private。</p></blockquote></li></ul><p>四、单元测试中</p><ul><li>单元测试和我们编写的代码属于不同的module，所以测试模块一般只能访问到public的东西。但是在引入要测试的模块的时候可以加上@testable，这样测试模块就可以访问了。然后要允许被测试的单元可以测试</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomePublicClass</span> </span>&#123;&#125;  </div><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeInternalClass</span> </span>&#123;&#125;  </div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SomePrivateClass</span> </span>&#123;&#125;  </div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="keyword">var</span> somePublicVariable = <span class="number">0</span>  </div><div class="line"><span class="keyword">internal</span> <span class="keyword">let</span> someInternalConstant = <span class="number">0</span>  </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">somePrivateFunction</span><span class="params">()</span></span> &#123;&#125;</div></pre></td></tr></table></figure><h1 id="给类型定义访问权限的时候，会影响到类型里面的成员（属性，方法，下标，构造器）"><a href="#给类型定义访问权限的时候，会影响到类型里面的成员（属性，方法，下标，构造器）" class="headerlink" title="给类型定义访问权限的时候，会影响到类型里面的成员（属性，方法，下标，构造器）"></a>给类型定义访问权限的时候，会影响到类型里面的成员（属性，方法，下标，构造器）</h1><ul><li><p>1、将一个类型定义为private后，它里面的成员都是private的。</p></li><li><p>2、将一个类型定义为public或internal后，它里面的成员还是internal的。如果要某个成员变为public，必须在该成员里面加上public。</p></li></ul><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><blockquote><p>Tuple的访问权限由tuple成员里面访问权限最小那个决定。</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>方法的访问权限由方法的参数和返回值中最小权限的那个决定。当方法的权限是private的时候，方法的前面要加上private关键字。</p></blockquote><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><blockquote><p>枚举类型的成员变量的访问权限决定于枚举类型。例如你定义了一个public的枚举类型，那么它里面的case成员都是public的，不允许单独给每个case成员定义访问权限。<br>case成员的raw vlaue的值的权限必须大于等于枚举类的访问权限。</p></blockquote><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote><p>定义在private类型里面的内部类是private权限；定义在public或internal类型里面的内部类默认是internal类型。如果想要定义在public类型里面的内部类变为public的话，需要自己显式给内部类加上public。</p></blockquote><h2 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h2><blockquote><p>子类不能比父类具有更高的访问权限。但是可以重写父类当前能访问到的父类成员，而且可以重写成更高权限的成员</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">()</span></span> &#123;&#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>: <span class="title">A</span> </span>&#123;  </div><div class="line">    <span class="keyword">override</span> <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">()</span></span> &#123;  </div><div class="line">        <span class="keyword">super</span>.someMethod()  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>里再补充一点，如果父类是public类的，继承之后不加权限修饰符的话，那么这个子类是internal的<br>属性，常量，变量和下标的访问权限不能超过它所属的类型的权限</p></blockquote><h2 id="getter和setter方法"><a href="#getter和setter方法" class="headerlink" title="getter和setter方法"></a>getter和setter方法</h2><blockquote><p>这两个方法的访问权限默认和属性的是一样的。但是可以修改setter的权限，可以将setter的权限修改得比属性的权限低，但是不能比属性的权限高</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">internal</span>(<span class="keyword">set</span>) <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><blockquote><p>构造器的权限不能大于它所属类型的权限。除了标志有require的构造器之外，这种构造器的权限必须和它所属的类的权限相同。<br>构造器参数的权限不能低于构造器。</p></blockquote><h2 id="默认构造器"><a href="#默认构造器" class="headerlink" title="默认构造器"></a>默认构造器</h2><blockquote><p>默认构造器的默认权限和类型权限一样。但是如果类型是public，那么默认构造器还是internal的，想要public的无参构造器必须自己实现。<br>对于结构体的memberwise构造器，想要public的，也要自己实现。</p></blockquote><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><blockquote><p>协议的需求的权限和协议权限是一样的，协议是public的，那么需求也是public的。<br>继承的协议的权限最多只能有父类的权限。例如：不能继承一个internal的协议为一个public协议。</p></blockquote><h2 id="协议的一致性"><a href="#协议的一致性" class="headerlink" title="协议的一致性"></a>协议的一致性</h2><blockquote><p>类型可以实现比自己访问权限低的协议。比如，可以定义一个public的类，它可以实现一个internal的类，并且只能在定义了该协议的模块中使用。<br>实现了协议的类访问权限是它本身和采用协议中的最低访问权限。也就是说如果一个类是public的级别，实现的是internal的协议，那么采用这个协议之后，该类的访问权限也是internal的。<br>如果你采用了协议，那么实现协议方法之后，该方法的访问权限遵循协议的访问级别。例如：一个public的类，采用了internal的协议之后，那么该类的实现协议的方法至少也是internal的。</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote><p>扩展的默认访问权限由所扩展类型的访问权限决定。</p><p>如果你扩展了一个public的类型，那么扩展的成员的默认访问权限就是internal。如果扩展一个private类型，那么扩展的默认访问权限就是private。<br>当然可以自己给扩展自定义访问权限。但是权限不能超过所扩展的类型。另外可以自己给扩展成员再自定义权限。<br>如果你是用扩展来实现协议，那么这个扩展不允许自定义权限，它的权限由协议的权限决定。</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型分为泛型类型和泛型方法<br>泛型类型的权限是 泛型类型和泛型参数 之间最小的那个权限。<br>泛型方法的权限是 泛型方法和泛型参数 之间最小的那个权限。</p></blockquote><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><blockquote><p>每个类型别名都可以看做是对类型的访问权限的定义。<br>但是类型别名的权限必须小于或等于要别名的类型。比如一个private的类型别名可以为private，public，internal的类型进行别名；但是一个public的类型别名不能为internal和private的类型进行别名。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> AccessControl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Swift </tag>
            
            <tag> AccessControl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Generics-泛型</title>
      <link href="/2017/12/01/Swift/Grammar/Generics-%E6%B3%9B%E5%9E%8B/"/>
      <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ul><li>接受其它函数作为参数的函数有时被称为高阶函数<h1 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h1><blockquote><p>写一个函数的时，一般都会指明参数的类型<br>一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值<br>如果想要声明一个变量参数，可以在前面加上var，这样就可以改变这个参数的值</p></blockquote></li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//此时这个id值可以在函数中改变</span></div><div class="line"> <span class="function"><span class="keyword">func</span>  <span class="title">getName</span><span class="params">(<span class="keyword">var</span> id:String)</span></span>.........</div></pre></td></tr></table></figure><blockquote><p>一般默认的参数传递都是传值调用的，而不是传引用。<strong>所以传入的参数在函数内改变，并不影响原来的那个参数</strong>。传入的只是这个参数的副本<br>下面两个实现交换变量的函数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoInts</span><span class="params">( a:<span class="keyword">inout</span> Int, b:<span class="keyword">inout</span> Int)</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> t = a   <span class="comment">//  0</span></div><div class="line">    a = b       <span class="comment">// 100</span></div><div class="line">    b = t       <span class="comment">//  0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>,y = <span class="number">100</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"x = \(x) ;y = \(y)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//打印</span></div><div class="line">x = <span class="number">0</span> ;y = <span class="number">100</span></div><div class="line"><span class="comment">//交换变量的函数</span></div><div class="line">swapTwoInts(a: &amp;x, b: &amp;y)</div><div class="line"><span class="built_in">print</span>(<span class="string">"x = \(x) ;y = \(y)"</span>)</div><div class="line">x = <span class="number">100</span> ;y = <span class="number">0</span></div></pre></td></tr></table></figure><blockquote><p>上面的只是限于交换整形。但是如果我们相对Double或Float类型，甚至是任何类型的数据实现交换的功能，我们都要分别写一个函数。这是无比麻烦的</p><p>所以有了泛型这个概念，泛型就是<strong>模糊的类型</strong><br>函数的功能实现和具体类型没关系的时候，就可以使用泛型(感觉类似OC的 id 类型)<br>将上面实现两个变量交换的功能用一个方法完成，这个方法可以用于不同的数据类型<br>swapTwoInts <t> 理解为一个函数族,类型参数 T 的每个选择都会确定一个新函数,该函数接受一个T型数组和一个 T -&gt; T类型的函数作为参数,并返回一个[T]类型的数组</t></p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoInts</span>&lt;T&gt;<span class="params">( a: <span class="keyword">inout</span> T, <span class="number">_</span> b: <span class="keyword">inout</span> T)</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> t = a</div><div class="line">    a = b</div><div class="line">    b = t</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = <span class="number">8.12</span>,y = <span class="number">100.1</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"x = \(x) ;y = \(y)"</span>)   <span class="comment">//x = 8.12 ;y = 100.1</span></div><div class="line">swapTwoInts( a: &amp;x,  &amp;y)</div><div class="line"><span class="built_in">print</span>(<span class="string">"x = \(x) ;y = \(y)"</span>)   <span class="comment">//x = 100.1 ;y = 8.12</span></div><div class="line"></div><div class="line"></div><div class="line">问题：x = <span class="number">8</span>  y = <span class="number">100.1</span> 发生错误，整数和浮点型数如何写交换方法？？？</div></pre></td></tr></table></figure><blockquote><p>主要的语法就是上面的<t>，这个T就是代表某个类型，但是没有指明具体是哪种类型。而且这个T，可以换成你希望的标示符，只要不是关键字。并且一般要求单词的首字母要大写，比如Element、Value等。而且能指定多个类型，见下面的类型约束</t></p><p>泛型的函数调用方法和普通函数是一样的<br>下面创建了两个Animal实例，然后使用刚刚定义的函数交换数据。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> life = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> cat = <span class="type">Animal</span>()</div><div class="line">cat.life = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> dog = <span class="type">Animal</span>()</div><div class="line">dog.life = <span class="number">2</span></div><div class="line"></div><div class="line">swapTwoInts(cat.life, dog.life)  <span class="comment">//报错！！ 方面交换方法不能交换。。醉了</span></div><div class="line"><span class="built_in">print</span>(cat.life)  </div><div class="line"><span class="built_in">print</span>(dog.life)</div></pre></td></tr></table></figure><blockquote><p>泛型举例分析</p></blockquote><p><a href="http://lib.csdn.net/article/swift/48384?knId=10" target="_blank" rel="external">参考</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">//  map</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;Element,T&gt;<span class="params">(xs:[Element],transfom:<span class="params">(Element)</span></span></span> -&gt;<span class="type">T</span>)-&gt;[<span class="type">T</span>]&#123;</div><div class="line">    <span class="keyword">var</span> result :[<span class="type">T</span>] = []</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xs&#123;</div><div class="line">        result.append(transfom(x))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">genericComputeArray</span>&lt;T&gt;<span class="params">(xs: [Int], transfom: <span class="params">(Int)</span></span></span> -&gt; <span class="type">T</span>) -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">map</span>(xs: xs, transfom: transfom)</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">这块 不是很理解</div></pre></td></tr></table></figure><blockquote><p>顶层函数和扩展<br>写一个函数,它接受一个给定的整型数组,通过计算得到并返回一个新数组。要求：新数组各项为原数组中对应的整型数据加一。for 循环能实现</p></blockquote><h1 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h1><blockquote><p>定义一个类型，但是它可以对不同类型的数据进行操作<br>比如Array和Dictionary这两个集合结构体，他们可以装不同类型的数据，这就是泛型类型</p><h2 id="官方文档展示一个泛型类型的栈，使用Array来实现"><a href="#官方文档展示一个泛型类型的栈，使用Array来实现" class="headerlink" title="官方文档展示一个泛型类型的栈，使用Array来实现"></a>官方文档展示一个泛型类型的栈，使用Array来实现</h2></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">struct Stack&lt;Element&gt; &#123;  </div><div class="line">    var items = [Element]()  </div><div class="line">    mutating func push(item: Element) &#123;  </div><div class="line">        items.append(item)  </div><div class="line">    &#125;  </div><div class="line">    mutating func pop() -&gt; Element &#123;  </div><div class="line">        return items.removeLast()  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>然后在创建这种泛型类型实例的时候，我们必须指定所属的类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">var</span> stackOfStrings = <span class="type">Stack</span>&lt;<span class="type">String</span>&gt;()  </div><div class="line">stackOfStrings.push(<span class="string">"uno"</span>)</div></pre></td></tr></table></figure><h1 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h1><blockquote><p>我们可以对泛型进行约束，让他们必须遵守某些协议，官方文档语法如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunction</span>&lt;T: SomeClass, U: SomeProtocol&gt;<span class="params">(someT: T, someU: U)</span></span> &#123;  </div><div class="line">    <span class="comment">// function body goes here  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>同时还可以添加where约束符再对泛型进行限制</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunction</span>&lt;T: SomeClass, U: SomeProtocol where T.someItem == U, U.someItem: SomeClass2&gt;<span class="params">(someT: T, someU: U)</span></span> &#123;  </div><div class="line">    <span class="comment">// function body goes here  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h1><blockquote><p>在定义协议的时候，我们可能需要定义一个或多个类型作为我们协议的一部分。而这些类型是不确定的，只有到具体的类实现协议的时候才能确定，这个时候我们可以使用关联类型来实现。所谓的关联类型就是一个占位符，等到具体实现协议的时候才知道它具体是什么类型。官方例子如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">protocol</span> <span class="title">Container</span> </span>&#123;  </div><div class="line">    <span class="keyword">typealias</span> <span class="type">ItemType</span>  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(item: ItemType)</span></span>  </div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">    <span class="keyword">subscript</span>(i: <span class="type">Int</span>) -&gt; <span class="type">ItemType</span> &#123; <span class="keyword">get</span> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>然后在实现协议的时候，我们可以指定ItemType具体是什么类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntStack</span>: <span class="title">Container</span> </span>&#123;  </div><div class="line">    <span class="comment">// original IntStack implementation  </span></div><div class="line">    <span class="keyword">var</span> items = [<span class="type">Int</span>]()  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(item: Int)</span></span> &#123;  </div><div class="line">        items.append(item)  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">return</span> items.removeLast()  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// conformance to the Container protocol  </span></div><div class="line">    <span class="keyword">typealias</span> <span class="type">ItemType</span> = <span class="type">Int</span>  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(item: Int)</span></span> &#123;  </div><div class="line">        <span class="keyword">self</span>.push(item)  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">return</span> items.<span class="built_in">count</span>  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">subscript</span>(i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">return</span> items[i]  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&gt;<br>同时又因为有Swift的类型判断机制，所以我们在实现了协议的其他方法之后，编译器会自动判断关联类型是什么，不需要我们显式地指定。所以上面代码指定关联类型为Int的那行可以删去。</p><blockquote><p>泛型OC是不支持的，但是java支持。使用泛型能给编程带来很大的便利</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Extension扩展</title>
      <link href="/2017/12/01/Swift/Grammar/Extension%E6%89%A9%E5%B1%95/"/>
      <content type="html"><![CDATA[<h1 id="Extension扩展"><a href="#Extension扩展" class="headerlink" title="Extension扩展"></a>Extension扩展</h1><blockquote><p>Swift中的扩展就是OC中的分类。但是这里的扩展可以对类、结构体、枚举类进行添加。使用扩展，我们可以在不接触源代码的前提下，对已有的代码进行功能上的添加。</p><p>Swift中的扩展提供的一些功能：</p></blockquote><ul><li>1、添加计算属性或类计算属性，但是不能添加存储属性。</li><li>2、添加实例方法或类别方法。但是不能覆盖已经存在的方法。</li><li>3、定义新的构造器。</li><li>4、定义和使用新的嵌套类。</li><li>5、令已经存在的类型遵守协议。</li></ul><blockquote><p>假设我们已经有了一个Animal类，但是不能得到它的源代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> life: <span class="type">Int</span> = <span class="number">0</span>  </div><div class="line">    <span class="keyword">var</span> height: <span class="type">Double</span> = <span class="number">0</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>我们利用扩展，对Animal添加一个计算属性和方法、构造器还有嵌套类。 当然也可以添加下标，但这里不演示了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="comment">//扩展计算属性  </span></div><div class="line">    <span class="keyword">var</span> lifeYear : <span class="type">Double</span> &#123; <span class="keyword">return</span> <span class="type">Double</span>(<span class="keyword">self</span>.life) / <span class="number">365</span> &#125;  </div><div class="line">    <span class="comment">//扩展构造器  </span></div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(life: <span class="type">Int</span>, height: <span class="type">Double</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()  </div><div class="line">        <span class="keyword">self</span>.life = life  </div><div class="line">        <span class="keyword">self</span>.height = height  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//扩展方法  </span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeSound</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="string">"I can live \(lifeYear) years"</span>  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 扩展嵌套类  </span></div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Size</span> </span>&#123;  </div><div class="line">        <span class="keyword">case</span> <span class="type">Big</span>, <span class="type">Small</span>, <span class="type">SuperSmall</span>  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 扩展一个使用嵌套类的计算属性  </span></div><div class="line">    <span class="keyword">var</span> size: <span class="type">Size</span> &#123;  </div><div class="line">        <span class="keyword">switch</span> height &#123;  </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> h <span class="keyword">where</span> h &gt; <span class="number">10</span>:  </div><div class="line">            <span class="keyword">return</span> .<span class="type">Big</span>  </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> h <span class="keyword">where</span> h &gt; <span class="number">0.1</span>:  </div><div class="line">            <span class="keyword">return</span> .<span class="type">Small</span>  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">return</span> .<span class="type">SuperSmall</span>  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> a = <span class="type">Animal</span>(life: <span class="number">3365</span> * <span class="number">7</span>, height: <span class="number">0.001</span>)  </div><div class="line"><span class="built_in">print</span>(a.size)   <span class="comment">// SuperSmall  </span></div><div class="line"><span class="built_in">print</span>(a.lifeYear)   <span class="comment">// 7.0  </span></div><div class="line"><span class="built_in">print</span>(a.makeSound())   <span class="comment">// I can live 7.0 years</span></div></pre></td></tr></table></figure><blockquote><p>面代码需要注意的是扩展构造器的时候，在构造器的时候讲过，在扩展中添加构造器是不会影响默认构造器的产生。不能添加原来已有的构造器。<br>另外在类扩展里面，是不给添加指定构造器或析构器，只能添加便利构造器。在便利构造器中，要先调用原来的构造器来初始化类后，才能对类进行访问。</p><p>扩展还有一个作用就是让类遵守协议。这部分留到协议里面讲<br>下面将以前将过的麻烦的String类型做一个扩展，使得方便截串和获取长度</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;  </div><div class="line">    <span class="comment">//获取字符串长度  </span></div><div class="line">    <span class="keyword">var</span> length: <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span>.characters.<span class="built_in">count</span> &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//获取部分字符串，如果不在范围内，返回nil。如果end大于字符串长度，那么截取到最后  </span></div><div class="line">    <span class="keyword">subscript</span> (start: <span class="type">Int</span>, end: <span class="type">Int</span>) -&gt; <span class="type">String</span>? &#123;  </div><div class="line">        <span class="keyword">if</span> start &gt; <span class="keyword">self</span>.length || start &lt; <span class="number">0</span> || start &gt; end &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">let</span> begin = <span class="keyword">self</span>.startIndex.advancedBy(start)  </div><div class="line">        <span class="keyword">var</span> terminal: <span class="type">Index</span>  </div><div class="line">        <span class="keyword">if</span> end &gt;= length &#123;  </div><div class="line">            terminal = <span class="keyword">self</span>.startIndex.advancedBy(length)  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            terminal = <span class="keyword">self</span>.startIndex.advancedBy(end + <span class="number">1</span>)  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">let</span> range = <span class="type">Range</span>(start: begin, end: terminal)  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.substringWithRange(range)  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//获取某个字符，如果不在范围内，返回nil  </span></div><div class="line">    <span class="keyword">subscript</span> (index: <span class="type">Int</span>) -&gt; <span class="type">Character</span>? &#123;  </div><div class="line">        <span class="keyword">if</span> index &gt; <span class="keyword">self</span>.length - <span class="number">1</span> || index &lt; <span class="number">0</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>[<span class="keyword">self</span>.startIndex.advancedBy(index)]  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>然后就可以这样截串</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> s = <span class="string">"哈0123456789"</span>  </div><div class="line"><span class="built_in">print</span>(s.length) <span class="comment">// 11  </span></div><div class="line"><span class="built_in">print</span>(s[<span class="number">0</span>,<span class="number">2</span>])    <span class="comment">// Optional("哈01")  </span></div><div class="line"><span class="built_in">print</span>(s[<span class="number">9</span>])     <span class="comment">// Optional("8")</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Error-Handling错误处理</title>
      <link href="/2017/12/01/Swift/Grammar/Error-Handling-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <content type="html"><![CDATA[<h1 id="Swift-错误"><a href="#Swift-错误" class="headerlink" title="Swift-错误"></a>Swift-错误</h1><blockquote><p>Swift提供了一套完整的错误抛出-捕获-处理机制<br>Swift采用Error协议来表示错误类型，通过do-try-catch的方式来处理可能会抛出异常的代码</p></blockquote><h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><blockquote><p>可选值表示一个值要么有值，要么是nil。在Swift中，Optional是用enum写的，</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">Wrapped</span>&gt; : <span class="title">ExpressibleByNilLiteral</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">none</span></div><div class="line">    <span class="keyword">case</span> some(<span class="type">Wrapped</span>)</div><div class="line">     <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>当发生错误的时候，返回一个可选值是常见的处理方式。但是，这种方式的有一个很明显的缺点</p></blockquote><ul><li>调用者不清楚为什么失败</li><li>不好进行相关的处理</li></ul><h1 id="Error协议与throws"><a href="#Error协议与throws" class="headerlink" title="Error协议与throws"></a>Error协议与throws</h1><ul><li>Error是一个空的协议，用来表示错误类型</li><li>NSError和CFError都遵循了这个协议</li></ul><blockquote><p>在Swfit中，枚举是一个特别适合用来处理Error的数据类型。<br>首先定义一个类Person表示人</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span>&#123;</div><div class="line"><span class="keyword">case</span> male</div><div class="line"><span class="keyword">case</span> female</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line"><span class="keyword">let</span> sex:<span class="type">Sex</span></div><div class="line"><span class="keyword">var</span> money:<span class="type">CGFloat</span></div><div class="line"><span class="keyword">init</span>(sex:<span class="type">Sex</span> ,money:<span class="type">CGFloat</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.sex = sex</div><div class="line">    <span class="keyword">self</span>.money = money</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Person可以结婚，结婚的时候会发生一些错误，比如钱不够，比如性别不对，用枚举来表示</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">MarryError</span> : <span class="title">Error</span></span>&#123;</div><div class="line">    <span class="keyword">case</span> lackMoney</div><div class="line">    <span class="keyword">case</span> wrongSex</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>方法的实现如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">marry</span><span class="params">(with another: Person)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>&#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span>.sex != another.sex <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">MarryError</span>.wrongSex</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span>.money + another.money &gt; <span class="number">100000</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">MarryError</span>.lackMoney</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>一个带有throws关键字的函数，调用的时候有两种方式选择</p><p>①❶使用 do-try-catch 代码块</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> tom = <span class="type">Person</span>(sex: .male, money: <span class="number">100000</span>)</div><div class="line"><span class="keyword">let</span> jack = <span class="type">Person</span>(sex: .male, money: <span class="number">100000</span>)</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">    <span class="keyword">try</span> tom.marry(with: jack)</div><div class="line">&#125;<span class="keyword">catch</span> <span class="type">MarryError</span>.wrongSex &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Two Person have same sex"</span>)</div><div class="line">&#125;<span class="keyword">catch</span> <span class="type">MarryError</span>.lackMoney&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Oh, they do not have enough moeny"</span>)</div><div class="line">&#125;<span class="keyword">catch</span> <span class="keyword">let</span> error&#123;</div><div class="line">    <span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>❷不需要区分每一个Error，也可以这么调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">do</span>&#123;</div><div class="line">    <span class="keyword">try</span> tom.marry(with: jack)</div><div class="line">&#125;<span class="keyword">catch</span> <span class="keyword">let</span> error&#123;</div><div class="line">    <span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>②使用 try?，对于有返回值的throws函数，使用try?会把结果转换为可选值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> tom = <span class="type">Person</span>(sex: .male, money: <span class="number">100000</span>)</div><div class="line"><span class="keyword">let</span> jack = <span class="type">Person</span>(sex: .male, money: <span class="number">100000</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = <span class="keyword">try</span>? tom.marry(with: jack)&#123;<span class="comment">//成功</span></div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Error happen"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="defer关键字"><a href="#defer关键字" class="headerlink" title="defer关键字"></a>defer关键字</h1><blockquote><p>defer关键字用来处理类似Ojective C中@try-@catch-@finally中，@finally的作用<br>比如，打开文件，如果抛出错误的话，我们总希望关闭这个文件句柄</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">contents</span><span class="params">(of filePath:String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span>&#123;</div><div class="line">    <span class="keyword">let</span> file = <span class="keyword">open</span>(filePath,<span class="type">O_RDWR</span>)</div><div class="line">    <span class="keyword">defer</span> &#123;</div><div class="line">        close(file)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">defer</span>代码块的内容在退出作用域之前会被执行</div></pre></td></tr></table></figure><blockquote><p>关于defer的注意</p></blockquote><ul><li>多个defer会按照逆序的方式执行。</li><li>当你的程序遇到严重错误，比如fatalError,或者强制解析nil，或者segfaults的时候，defer的代码块并不会执行。</li></ul><h1 id="rethrow"><a href="#rethrow" class="headerlink" title="rethrow"></a>rethrow</h1><blockquote><p>rethrow关键字在高阶函数中比较常见，所谓高阶函数，就是一个函数的参数或者返回值是函数类型<br>最常见的比如，Sequence协议map方法<br>比如：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> result = array.<span class="built_in">map</span>&#123;$<span class="number">0</span> * <span class="number">2</span>&#125;</div></pre></td></tr></table></figure><blockquote><p>由于map函数传入的是一个闭包，这个闭包可能会抛出错误<br>由参数抛出的错误最后会向上传递给map函数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">MapError</span> : <span class="title">Error</span></span>&#123;</div><div class="line">    <span class="keyword">case</span> invalid</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">customMapper</span><span class="params">(input:Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">if</span> input &lt; <span class="number">10</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">MapError</span>.invalid</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> input + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> result = array.<span class="built_in">map</span>(customMapper)</div></pre></td></tr></table></figure><blockquote><p>这样是编译不通过的<br>调用的时候需要：按照上文提到的throws关键字的路子来</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">do</span> &#123;</div><div class="line">   <span class="keyword">let</span> result = <span class="keyword">try</span> array.<span class="built_in">map</span>(customMapper)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这就是rethrows关键字的精髓所在<br>rethrows 关键字表示当参数闭包标记为throws的时候，函数本身为throws。如果参数闭包不会抛出错误，则函数也不会<br>通过这个关键字，你不必每次都进行try-catch</p></blockquote><h1 id="Result类型"><a href="#Result类型" class="headerlink" title="Result类型"></a>Result类型</h1><blockquote><p>一个函数执行要么成功，要么失败。成功的时候我们希望返回数据，失败的时候我们希望得到错误信息，这就是Result类型，一个典型的Result类型如下：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">case</span> success(<span class="type">T</span>)</div><div class="line">    <span class="keyword">case</span> failure(error:<span class="type">Error</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>通过Result类型，不再需要可选值或者do-try-catch来包裹你的代码<br>用Result类型对上述marry函数进行重写</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">marry</span><span class="params">(with another: Person)</span></span>  -&gt; <span class="type">Result</span>&lt;<span class="type">Bool</span>&gt;&#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span>.sex != another.sex <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> .failure(error: <span class="type">MarryError</span>.wrongSex)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span>.money + another.money &gt; <span class="number">100000</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> .failure(error: <span class="type">MarryError</span>.lackMoney)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> .success(<span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>然后，这么调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> tom = <span class="type">Person</span>(sex: .male, money: <span class="number">100000</span>)</div><div class="line"> <span class="keyword">let</span> jack = <span class="type">Person</span>(sex: .male, money: <span class="number">100000</span>)</div><div class="line"> <span class="keyword">let</span> result = tom.marry(with: jack)</div><div class="line">  <span class="keyword">switch</span> result &#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .success(value):</div><div class="line">        <span class="built_in">print</span>(value)</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .failure(error):</div><div class="line">        <span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Result链"><a href="#Result链" class="headerlink" title="Result链"></a>Result链</h1><blockquote><p>Swift中有可选链，来处理多个可选值的连续调用。同样的，我们也可以为Result类型来添加链式调用：</p></blockquote><ul><li>如果上一个调用结果是.success, 则继续调用下一个</li><li>如果上一个调用结果是.failure, 则传递failure给下一个<blockquote><p>用extension来实现</p></blockquote></li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Result</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;V&gt;<span class="params">(transform:<span class="params">(T)</span></span></span> <span class="keyword">throws</span> -&gt; (<span class="type">V</span>)) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span>&lt;<span class="type">V</span>&gt;&#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .failure(error):</div><div class="line">            <span class="keyword">return</span> .failure(error: error)</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .success(data):</div><div class="line">            <span class="keyword">return</span> .success(<span class="keyword">try</span> transform(data))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>于是，可以这么调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">resut.flatMap(&#123;<span class="comment">//转换1&#125;).flatMap(//转换2)...</span></div></pre></td></tr></table></figure><blockquote><p>一旦失败，中间有一次flatMap转换失败，则之后的转换逻辑都不会执行<br>进阶：Result类型在Swift版本的Promise中大行其道，可以参见PromiseKit的源码，promise让异步处理变得优雅</p></blockquote><h1 id="assert-precondition"><a href="#assert-precondition" class="headerlink" title="assert/precondition"></a>assert/precondition</h1><blockquote><p>Swift也有断言支持<br>在Swfit中，断言是一个函数<br>断言仅在Debug模式下进行检查，帮助开发者发现代码中的问题</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(<span class="number">_</span> condition: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>, </div><div class="line">             <span class="number">_</span> message: <span class="meta">@autoclosure</span> () -&gt; <span class="type">String</span> = <span class="keyword">default</span>, </div><div class="line">                  file: <span class="type">StaticString</span> = #file, </div><div class="line">                  line: <span class="type">UInt</span> = #line)</div></pre></td></tr></table></figure><blockquote><p>如果需要在Relase模式下也进行检查，则使用precondition</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">precondition</span><span class="params">(<span class="number">_</span> condition: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>, </div><div class="line">             <span class="number">_</span> message: <span class="meta">@autoclosure</span> () -&gt; <span class="type">String</span> = <span class="keyword">default</span>, </div><div class="line">                  file: <span class="type">StaticString</span> = #file, </div><div class="line">                  line: <span class="type">UInt</span> = #line)</div></pre></td></tr></table></figure><h1 id="桥接到Objective-C"><a href="#桥接到Objective-C" class="headerlink" title="桥接到Objective C"></a>桥接到Objective C</h1><blockquote><p>使用NSError来处理错误的的Objective 方法</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//NSFileManager</span></div><div class="line">- (<span class="built_in">BOOL</span>)removeItemAtURL:(<span class="built_in">NSURL</span> *)URL error:(<span class="built_in">NSError</span> * _Nullable *)error;</div></pre></td></tr></table></figure><blockquote><p>在Swift中会被自动的转换成</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeItem</span><span class="params">(at URL: URL)</span></span> <span class="keyword">throws</span></div></pre></td></tr></table></figure><blockquote><p>但是，纯Swfit的Error桥接的Objective C的时候，会有一些问题<br>因为NSError需要 domain和code等详细信息<br>可以让Swift的Error实现CustomNSError协议，来提供这些需要的信息</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">MarryError</span> : <span class="title">Error</span></span>&#123;</div><div class="line">    <span class="keyword">case</span> lackMoney</div><div class="line">    <span class="keyword">case</span> wrongSex</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MarryError</span> : <span class="title">CustomNSError</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> errorDomain = <span class="string">"com.person.marryError"</span></div><div class="line">    <span class="keyword">var</span> erroCode:<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .lackMoney:</div><div class="line">            <span class="keyword">return</span> -<span class="number">100001</span></div><div class="line">        <span class="keyword">case</span> .wrongSex:</div><div class="line">            <span class="keyword">return</span> -<span class="number">100002</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> errorUserInfo:[<span class="type">String</span>:<span class="type">Any</span>]&#123;</div><div class="line">        <span class="keyword">return</span> [:]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>相关的，还有两个协议LocalizedError和RecoverableError</p></blockquote><h1 id="Swift的错误处理是用来处理运行时错误的"><a href="#Swift的错误处理是用来处理运行时错误的" class="headerlink" title="Swift的错误处理是用来处理运行时错误的"></a>Swift的错误处理是用来处理运行时错误的</h1><blockquote><p>当错误发生时，你可以选择抓错误，或者继续往上抛出错误。当一个运行时错误最终没办法处理的时候，程序就会崩溃。</p><p>Swift中有一个空的协议用来给用户自定义错误。一般使用枚举类实现这个协议来自定义错误。如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">ComputerError</span>: <span class="title">ErrorType</span> </span>&#123;  </div><div class="line">    <span class="keyword">case</span> <span class="type">NoGameError</span>  </div><div class="line">    <span class="keyword">case</span> <span class="type">MemoryError</span>  </div><div class="line">    <span class="keyword">case</span> <span class="type">HardDiskError</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这里定义了三种error。当你要抛出一个error的时候，使用throw关键字。如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="type">ComputerError</span>.<span class="type">NoGameError</span></div></pre></td></tr></table></figure><blockquote><p>可以抛出错误的函数的定义</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">canThrowErrors</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span>  </div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cannotThrowErrors</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div></pre></td></tr></table></figure><blockquote><p>利用上面的语法，我们定义一个Computer类，这个类有一个playGame方法，它会在某些情况下抛出错误</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> memory = <span class="number">1024</span>  </div><div class="line">    <span class="keyword">var</span> hardDisk = <span class="number">4000</span>  </div><div class="line">      </div><div class="line">    <span class="keyword">var</span> games = [  </div><div class="line">        <span class="string">"War3"</span>: <span class="type">Requirement</span>(memory: <span class="number">512</span>, <span class="type">HardDisk</span>: <span class="number">1500</span>),  </div><div class="line">        <span class="string">"LOL"</span>: <span class="type">Requirement</span>(memory: <span class="number">1500</span>, <span class="type">HardDisk</span>: <span class="number">3000</span>),  </div><div class="line">        <span class="string">"My World"</span>: <span class="type">Requirement</span>(memory: <span class="number">256</span>, <span class="type">HardDisk</span>: <span class="number">500</span>)]  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playGame</span><span class="params">(gameName: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>&#123;  </div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> game = <span class="keyword">self</span>.games[gameName] <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="type">ComputerError</span>.<span class="type">NoGameError</span>  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">guard</span> game.<span class="type">HardDisk</span> &lt; <span class="keyword">self</span>.hardDisk <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="type">ComputerError</span>.<span class="type">HardDiskError</span>  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">guard</span> game.memory &lt; <span class="keyword">self</span>.memory <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="type">ComputerError</span>.<span class="type">MemoryError</span>  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>注意一点的是，如果你要调用能抛出错误的函数的时候，必须使用try、try?或者try!关键字在前面，如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">try</span> myPC.playGame(<span class="string">"War4"</span>)   <span class="comment">//这句会因为没有War4这个游戏而抛出NoGameError错误</span></div></pre></td></tr></table></figure><blockquote><p>下面是处理错误的部分。<br>当调用一个可以抛出错误的方法的时候，一般有三种处理方法。<br>第一种是调用者继续向上抛出这个错误。这种情况下，这个调用者也必须是一个可以抛出错误的函数。如果最后没处理这个错误，那么程序崩溃。<br>第二种是使用do…catch语句对错误进行处理。<br>第三种是使用try?或try!调用会抛出错误的函数</p><p>第一种方法举例，再定义一个Person类，它的play方法里面调用了Computer的playGame方法，然后继续抛出这个错误</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pc = <span class="type">Computer</span>()  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;  </div><div class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.pc.playGame(<span class="string">"SC2"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>第二种方法举例，使用do…catch语句处理。在do范围里面，我们可以调用会产生错误的方法。接着的catch语句可以接上要处理的错误类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pc = <span class="type">Computer</span>()  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> &#123;  </div><div class="line">        <span class="keyword">do</span> &#123;  </div><div class="line">            <span class="keyword">try</span> <span class="keyword">self</span>.pc.playGame(<span class="string">"LOL"</span>)  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"have fun"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">NoGameError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"NoGameError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">MemoryError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"MemoryError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">HardDiskError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"HardDiskError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"other error"</span>,error)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>值得注意的是最后一个catch。这里并没有加上要处理的错误。这的catch会捕捉所有类型的错误。<br>另外还有一个问题，如果不加上这个捕捉所有类型的catch语句。调用playGame的那句会报错说catch没有穷尽会抛出的错误。但是我只有三个错误，照理来讲应该是已经穷尽的了。不知道是Swift的问题，还是我代码哪里有问题。但如果把这个调用放到main.swift中去，也是只使用3个catch，就不会报错。搞不懂。<br>我现在的处理方式是把这个play方法继续写成一个可以抛出错误的方法。只处理自定义的三种错误。其他错误往上抛</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pc = <span class="type">Computer</span>()  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;  </div><div class="line">        <span class="keyword">do</span> &#123;  </div><div class="line">            <span class="keyword">try</span> <span class="keyword">self</span>.pc.playGame(<span class="string">"LOL"</span>)  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"have fun"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">NoGameError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"NoGameError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">MemoryError</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"MemoryError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">HardDiskError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"HardDiskError"</span>)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>第三种是使用try?或try!调用会抛出错误的函数。<br>在官方文档里面，它原意是使用try?去处理一个会抛出错误的方法的返回值，如果这个方法抛出错误，那么会得到nil。如果没有错误，那么将函数返回值包装成可选类型后返回</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">var</span> myPC = <span class="type">Computer</span>()  </div><div class="line"><span class="keyword">var</span> result = <span class="keyword">try</span>? myPC.playGame(<span class="string">"War3"</span>)   <span class="comment">//这里playGame没有抛出错误，所以返回了Bool可选类型，值为true</span></div></pre></td></tr></table></figure><p>ry!的区别是它默认调用方法是不会报错的，如果调用的方法报错，那么会得到运行时错误。即使你将这个try!写到了一个会抛出错误的方法里面，它也不会向上抛出这个错误。而是直接崩溃。</p><p>try? 、try!   和try 三者的区别：</p><p>try在一个会抛出错误的方法里面，它会把产生的错误交由catch处理或者向上抛出。</p><p>try?是出错的时候返回一个nil，屏蔽错误。没错的话，将结果包装成一个可选类型返回。</p><p>try!是在没错的情况下返回函数返回值。出错的情况下直接崩溃。错误不会再交给catch处理或者向上抛出。</p><p>所以如果在do catch里面将try改为try?或者try!，那么会有一个警告说catch永远不会执行。</p><h1 id="defer语句"><a href="#defer语句" class="headerlink" title="defer语句"></a>defer语句</h1><blockquote><p>熟悉java的朋友应该知道finally语句。这个是在try..catch里面无论是否有错误，在退出try..catch范围的时候，最后都会执行finally范围内的代码。一般是用来做一些诸如关闭文件的工作。因为无论出不出错，最后都必须关闭打开的文件。<br>Swift也弄了一个defer语句，同样也是想在最后做这样的一些事情。但是这个defer远远没有finally那么好用。<br>先来开开defer的语法。学过java的朋友知道finally只能用在try..catch里面。但是defer可以不用在do..catch里面。并且defer里面不能用return、break或者抛出错误的语句。</p><p>下面是一个没有用在do..catch中的例子</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;  </div><div class="line">    <span class="keyword">defer</span> &#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Close file"</span>)  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"Open file"</span>)  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"Deal with file"</span>)  </div><div class="line">&#125;  </div><div class="line">readFile()  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//Open file  </span></div><div class="line"><span class="comment">//Deal with file  </span></div><div class="line"><span class="comment">//Close file</span></div></pre></td></tr></table></figure><blockquote><p>留意上面的打印顺序，可以看出defer中的语句是在最后才执行的。单从这里看，和设计初衷一致：在最后面才执行。<br>但是一旦将这个defer用到do..catch里面，你就会觉得很恶心。<br>我们先来看一个和我们想象中一致的代码，首先改写上面用到的Person类。我们的原意是这样的：Person的play方法调用了Computer的会产生错误的playGame方法。我们定义了一个result的可选变量，用于接收playGame方法的返回值。在退出do..catch的时候，会调用defer语句。我们在里面判断result是否为nil。然后输出心情。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pc = <span class="type">Computer</span>()  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;  </div><div class="line">        <span class="keyword">do</span> &#123;  </div><div class="line">            <span class="keyword">var</span> result: <span class="type">Bool</span>?  </div><div class="line">            <span class="keyword">defer</span> &#123;  </div><div class="line">                <span class="keyword">if</span> result != <span class="literal">nil</span> &#123;  </div><div class="line">                    <span class="built_in">print</span>(<span class="string">"have fun"</span>)  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    <span class="built_in">print</span>(<span class="string">"sad"</span>)  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            result = <span class="keyword">try</span> <span class="keyword">self</span>.pc.playGame(<span class="string">"LOL"</span>)  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"playGame"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">NoGameError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"NoGameError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">MemoryError</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"MemoryError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">HardDiskError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"HardDiskError"</span>)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>然后我们执行下面代码，因为默认的Computer类的hardDisk不足。所以会报MemoryError错误</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="type">Person</span>()  </div><div class="line"><span class="keyword">try</span> p.play()  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//sad  </span></div><div class="line"><span class="comment">//MemoryError</span></div></pre></td></tr></table></figure><blockquote><p>注意打印顺序，可以看出defer是先与catch执行的。这个和java的finally是不一样的。finally是在catch执行完后执行。其次是playGame没有打印，说明报错之后的语句不会执行。<br>如果playGame的参数是“War3”，那么程序不会报错。输出是</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> playGame  </div><div class="line">have fun</div></pre></td></tr></table></figure><blockquote><p>从以上来看，似乎还是符合我们的原意。<br>但是当你把defer的位置改改，变为下面这样</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pc = <span class="type">Computer</span>()  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;  </div><div class="line">        <span class="keyword">do</span> &#123;  </div><div class="line">            <span class="keyword">var</span> result: <span class="type">Bool</span>?  </div><div class="line">            result = <span class="keyword">try</span> <span class="keyword">self</span>.pc.playGame(<span class="string">"LOL"</span>)  </div><div class="line">            <span class="keyword">defer</span> &#123;  </div><div class="line">                <span class="keyword">if</span> result != <span class="literal">nil</span> &#123;  </div><div class="line">                    <span class="built_in">print</span>(<span class="string">"have fun"</span>)  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    <span class="built_in">print</span>(<span class="string">"sad"</span>)  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"playGame"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">NoGameError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"NoGameError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">MemoryError</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"MemoryError"</span>)  </div><div class="line">        &#125; <span class="keyword">catch</span> <span class="type">ComputerError</span>.<span class="type">HardDiskError</span> &#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"HardDiskError"</span>)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>你会发现输出只有一个MemoryError。也就是说当定义defer前面的语句报错之后，defer得不到执行。这样就要求这个defer必须写在一个合理的位置才行。</p></blockquote><h2 id="另外如果我们再改改上面的代码，使用try"><a href="#另外如果我们再改改上面的代码，使用try" class="headerlink" title="另外如果我们再改改上面的代码，使用try!"></a>另外如果我们再改改上面的代码，使用try!</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line">你会发现输出只有一个<span class="type">MemoryError</span>。也就是说当定义<span class="keyword">defer</span>前面的语句报错之后，<span class="keyword">defer</span>得不到执行。这样就要求这个<span class="keyword">defer</span>必须写在一个合理的位置才行。</div><div class="line"></div><div class="line">另外如果我们再改改上面的代码，使用<span class="keyword">try</span>!</div></pre></td></tr></table></figure><blockquote><p>这时候什么都没有打印，程序直接崩溃掉了。这个defer的初衷完全不同。<br>Swift的错误处理也是近几个版本才出现的。估计以后会继续改进</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> Error </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Optional Chaining-可选链</title>
      <link href="/2017/12/01/Swift/Grammar/%E5%8F%AF%E9%80%89%E9%93%BE/"/>
      <content type="html"><![CDATA[<h1 id="可选链（Optional-Chaining"><a href="#可选链（Optional-Chaining" class="headerlink" title="可选链（Optional Chaining"></a>可选链（Optional Chaining</h1><blockquote><p>回顾一下可选类型，当你要使用可选类型的时候，首先必须要对其进行解包。<br>但是存在一个问题就是，如果对一个为nil的可选类型进行强制解包的话，那么会产生运行时错误。第一种解决办法就是使用if语句先判断这个可选类型是否为nil，然后在访问其属性或方法。但是十分繁琐。考虑一下这个可选类型里面访问的属性还是可选类型的情况吧，多几层的时候，if的层数惨不忍睹。<br>一个很好的解决办法就是利用可选链（Optional Chaining）<br>语法很简单，把中间需要解包的可选类型的强制解包符号!替换成？</p><p>伪代码例子  </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> 可选链返回值的解包 = 可选类型<span class="number">1</span>?.可选类型<span class="number">2</span>?.返回可选类型的方法<span class="number">1</span>?.可选类型<span class="number">3</span> &#123;  </div><div class="line">   <span class="comment">//&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;可选链返回值&lt;/span&gt;不为nil  </span></div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line">   <span class="comment">//&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;可选链返回值&lt;/span&gt;为nil  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>解释：</p><ul><li>首先检测可选类型1是否为nil，如果不会nil，那么解包。</li><li>然后检查可选类型1的属性——可选类型2是否为nil，不为nil，解包。</li><li>然后调用可选类型2的一个方法。这个方法会返回一个可选类型.成这个可选类型为可选类型A吧。</li><li>然后再对这个可选类型A进行判断，如果不为nil，解包。</li><li>最后利用if语句对可选类型A的属性——可选类型3进行判断处理</li></ul><p>意点：</p><ul><li>1、如果前面的每一次判断有一个为nil了。那么这个可选链直接返回nil，不会再对后面的可选链进行处理。</li><li>2、可选链返回的类型是可选链中最后一个类型对应的可选类型。假设上面伪代码中最后一个可选类型3改为一个非可选类型3（比如Int），那么这个链返回的是其对应的可选类型Int?</li><li>3、可选链最后不能再用?进行解包，必须用!。但是用!就会产生当可选类型为nil时报错的情况。所以为了判断是否为nil，只能用if</li></ul><p>上面的伪代码是访问可选类型的例子。对于给可选链赋值的例子的伪代码如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  可选类型<span class="number">1</span>?.可选类型<span class="number">2</span>?.返回可选类型的方法<span class="number">1</span>?.类型<span class="number">3</span> = 赋值    <span class="comment">//这句中的类型3可以是可选类型也可以是非可选类型。赋值成功与否都不会报错。  </span></div><div class="line">  </div><div class="line"><span class="comment">//借助if语句判断是否赋值成功  </span></div><div class="line"><span class="keyword">if</span> (可选类型<span class="number">1</span>?.可选类型<span class="number">2</span>?.返回可选类型的方法<span class="number">1</span>?.可选类型<span class="number">3</span> = 赋值 ) != <span class="literal">nil</span> &#123;  <span class="comment">//&lt;span style="color:#ff0000;"&gt;注意if中赋值语句的返回值是Void?&lt;/span&gt;  </span></div><div class="line">    <span class="comment">//赋值成功  </span></div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line">    <span class="comment">//赋值失败  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>例子 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getClockSpeed</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;  </div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.name != <span class="literal">nil</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="number">1.2</span>  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> cpu: <span class="type">CPU</span>?  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="type">Computer</span>()  </div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.cpu?.name = <span class="string">"fef"</span>)  <span class="comment">//这句可选链的类型是Void?，打印 nil  </span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.cpu?.name)   <span class="comment">//这句可选链的类型是String?，打印 nil  </span></div><div class="line"><span class="built_in">c</span>.cpu = <span class="type">CPU</span>()  </div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.cpu?.getClockSpeed()?.isZero)  <span class="comment">//这句可选链的类型是Bool? ,打印 nil  </span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.cpu?.name = <span class="string">"Intel"</span>)    <span class="comment">//这句可选链的类型是Void?，打印 Optional(())  </span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.cpu?.name)          <span class="comment">//这句可选链类型是String?，打印 Optional("Intel")  </span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.cpu?.getClockSpeed()?.isZero)    <span class="comment">//这句可选链的类型是Bool? ,打印 Optional(false)</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-ARC-自动引用计数</title>
      <link href="/2017/12/01/Swift/Grammar/ARC-%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/"/>
      <content type="html"><![CDATA[<h1 id="ARC-自动引用计数"><a href="#ARC-自动引用计数" class="headerlink" title="ARC 自动引用计数"></a>ARC 自动引用计数</h1><h2 id="Swift引入ARC"><a href="#Swift引入ARC" class="headerlink" title="Swift引入ARC"></a>Swift引入ARC</h2><blockquote><p>对于类实例，它可能存在被多个变量引用的情况<br>如果在还有变量引用的情况下释放了改实例的话，那么其他变量再尝试访问这个实例的方法或属性的时候，程序就会崩溃。所以必须确保在以后都没有变量使用这个实例的情况下，才能去释放这个实例<br>对于值类型（结构体等），因为不存在多个变量对应一个实例的情况，所以不会有上述问题<br>为了解决这个问题，Swift使用自动引用计数(ARC)来管理内存。它只对引用类型起作用，对于值类型不起作用</p></blockquote><h2 id="引用计数的概念"><a href="#引用计数的概念" class="headerlink" title="引用计数的概念"></a>引用计数的概念</h2><blockquote><p>当你给一个创建一个类实例，并且把这个类实例赋值给某个变量或常量的时候，那么这个变量或常量就“拥有”这个实例，我们称为有了一个“强引用”。<br>所谓的引用计数，就是这个实例被多少个常量或变量强引用了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">deinit</span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"deinit"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> a:<span class="type">Apple</span>! = <span class="type">Apple</span>()</div></pre></td></tr></table></figure><blockquote><p>上面这最后一句代码就是变量a对一个Apple类的实例有了一个强引用。这时候这个实例的引用计数为1。<br>因为类实例是引用类型，所以你可以把这个引用传递给其他的常量或变量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> b = a  </div><div class="line"><span class="keyword">let</span> v = a</div></pre></td></tr></table></figure><blockquote><p>这时候这个实例就被三个变量或常量所引用，这个时候它的引用计数为3.<br>当你把其中的b设为nil的时候，引用计数就会变为2.<br>当该实例的引用计数变为0的时候，这个实例就会被销毁，销毁的时候就会调用它的deinit方法。注：因为上面用了常量，所以不能手动把常量设为nil，只能等这个常量离开作用域后被系统自动销毁。(如果你是在main.swift的全局中定义这些变量或常量的话，因为在main执行完之后才会释放这些变量或常量，所以不会打印deinit。但是你可以把他们放到一个函数里面，然后在main.swift里面调用这个函数。当这个函数执行完之后，这些变量或常量就会被释放。)</p><p>自动引用计数的规：</p></blockquote><ul><li><p>1、赋值给不加修饰符的常量和变量的时候，实例的引用计数加1。</p></li><li><p>2、当一个变量设为nil，或者变量(常量)离开作用域的时候，这个常量或变量所引用实例的引用计数减1。</p></li><li><p>3、当一个实例的引用计数为0的时候，它就会被销毁。</p></li></ul><p>但是上面看似简单的规则也会有很多问题。比如下面的循环引用问题。</p><p>先定义两个类，一个Telephone类和一个Person类。Telephone类有一个Person类的属性，Person类里面有一个Telephone类的属性</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Telephone</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> person: <span class="type">Person</span>?  </div><div class="line">    <span class="keyword">deinit</span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Telephone deinit"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> telephone: <span class="type">Telephone</span>?  </div><div class="line">    <span class="keyword">deinit</span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Person deinit"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>定义一个Person类的实例和一个Telephone类的实例。并对他们赋值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="type">Person</span>()  </div><div class="line"><span class="keyword">var</span> telephone = <span class="type">Telephone</span>()  </div><div class="line">person.telephone = telephone  </div><div class="line">telephone.person = person</div></pre></td></tr></table></figure><blockquote><p>下面分析一下Person实例和Telephone实例的引用计数。</p><p>在定义Person实例的时候，赋值给了变量person，所以第一句代码后，Person实例的引用计数为1。同样第二句代码后，Telephone实例的引用计数也为1。</p><p>然后第三句代码把telephone赋值给了person.telephone。也就是person.telephone也对这个Telephone实例有了强引用，这时候Telephone实例的引用计数为2。</p><p>同样，第四局过后，Person实例的引用计数也为2。</p><p>现在的状态是一个Person实例强引用了一个Telephone实例，这个Telephone实例又强引用了这个Person实例。你强引用我，我强引用你。这样就成了一个循环引用。</p><p>接着执行下面代码，person变量和telephone变量释放对实例的强引用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> person = <span class="literal">nil</span>  </div><div class="line">telephone = <span class="literal">nil</span></div></pre></td></tr></table></figure><blockquote><p>但是Person实例中的telephone属性仍然强引用着Telephone实例。同样的Telephone实例的person属性也引用着Person实例。所以Person实例和Telephone实例的引用计数都为1。但此时我们已经没办法再访问Person和Telephone的实例了。同时又因为他们的引用计数都为1，系统也不会释放他们。这样就造成了内存泄露。</p><p>为了解决这种循环引用的问题，办法就是截断这个循环。<br>第一种笨笨的解决方法就是在你把person或telephone变量设为nil之前，把person.telephone或telephone.person设为nil。这样就手动切断了循环引用。<br>而通用的解决方法就是引用一个新概念——弱引用（Weak Reference）<br>弱引用和强引用最大区别就是：当你把一个实例赋值给一个弱引用变量的时候，这个变量的引用计数不会加1。<br>为了实现这一点，在定义变量的时候在最前面加上weak关键字。下面我们重新定义Person类和Telephone类</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Telephone</span> </span>&#123;  </div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> person: <span class="type">Person</span>?   <span class="comment">//把这个变量定义为了一个弱引用变量  </span></div><div class="line">    <span class="keyword">deinit</span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Telephone deinit"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> telephone: <span class="type">Telephone</span>?  </div><div class="line">    <span class="keyword">deinit</span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Person deinit"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>然后我们再次调用下面的代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> person: <span class="type">Person</span>? = <span class="type">Person</span>()  </div><div class="line"><span class="keyword">var</span> telephone: <span class="type">Telephone</span>? = <span class="type">Telephone</span>()  </div><div class="line">person!.telephone = telephone  </div><div class="line">telephone!.person = person     <span class="comment">//第4句  </span></div><div class="line">person = <span class="literal">nil</span>                 <span class="comment">// 执行完这句后打印  Person deinit  </span></div><div class="line">telephone = <span class="literal">nil</span>              <span class="comment">// 执行完这句后打印  Telephone deinit</span></div></pre></td></tr></table></figure><p>因为Telephone类里面的person属性是弱引用的，所以执行完了第4句之后，Telephone实例被telephone变量和person.telephone实例所引用，引用计数为2。而Person实例只被person变量所引用，引用计数为1.</p><p>当执行完person = nil 之后，person的引用计数就变为了0， 这个时候系统就会释放Person实例，这个过程中，person.telephone也会被释放，所以会导致Telephone实例的引用计数减1，变为1。</p><p>当执行完telephone = nil 之后，Telephone实例的引用计数变为0。系统释放Telephone实例。</p><p>关于这个弱引用再补充几点</p><p>第一、当一个弱引用变量所引用的实例被释放的时候，这个弱引用变量会被自动置为nil。</p><p>第二、因为第一条的内容，所以弱引用只能对变量使用，并且必须是可选类型。</p><p>第三、如果你在创建实例的时候就把它复制给一个弱引用变量，因为弱引用变量不会增加这个实例的引用计数，所以这个实例创建后立马就会被销毁。</p><p>第四、如果你将一个已经赋值的弱引用变量赋值给一个强引用变量(常量)，那么这个实例的引用计数会加1。</p><p>Unowned Reference</p><p>Unowned Reference和弱引用一样，不会对实例产生强引用。区别在于Unowned Reference假设它所指向的实例总是有值的。所以Unowned Reference一般不会设置为可选类型。但缺点就是当Unowned Reference所指向的实例被释放的时候，Unowned Reference变量不会自动置为nil。</p><p>语法就是将weak关键字替换为unowned。但一个变量永远不会为nil的时候，建议使用unowned修饰。</p><p>循环引用第二种情况——闭包循环引用</p><pre><code>在闭包的时候我们说过，闭包是引用类型，且会捕获值。设想，你把一个闭包声明为一个类的属性的时候，这个类的实例拥有了对这个闭包的强引用。此时如果你在这个闭包里面访问了这个类的其他属性(self.someProperty)或者方法(self.someMethod)的话。那么这个闭包就会捕获所访问的属性或方法，统称&quot;捕获了self&quot;。在访问实例的属性或方法的时候，必须使用self.的方式。Swift此意在提醒你可能会产生循环引用。</code></pre><p>那么这时候又是一个循环引用了，self引用闭包，闭包引用self。导致这个实例永远不会被释放。</p><p>下面定义一个有闭包的Person类</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> class Person &#123;  </div><div class="line">    var name: String?  </div><div class="line">    lazy var printName: Void-&gt;Void = &#123;  </div><div class="line">        print(self.name)  </div><div class="line">    &#125;  </div><div class="line">    init(name: String)&#123;  </div><div class="line">        self.name = name;  </div><div class="line">    &#125;  </div><div class="line">    deinit&#123;  </div><div class="line">        print(&quot;Person deinit&quot;)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这个闭包我们声明为了lazy类型，因为如果你想要在闭包里面访问到self的话，必须是在类初始化之后才行。而一般的属性是在类初始化的最开头阶段初始化的，所以不加lazy的闭包不能访问self关键字。上面的代码很明显闭包和类实例已经可能会产生循环引用了。为什么说可能呢？因为如果你一直没用到闭包的话，那么这个闭包就不会被初始化，所以也不会产生闭包对self的强引用，也就谈不上循环引用了。</p></blockquote><p>所以如果仅仅执行下面代码</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> p: <span class="type">Person</span>? = <span class="type">Person</span>(name: <span class="string">"Kate"</span>)  </div><div class="line">p = <span class="literal">nil</span>  </div><div class="line"><span class="comment">//打印出 Person deinit</span></div></pre></td></tr></table></figure><blockquote><p>但是如果执行下面代码 </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var p: Person? = Person(name: &quot;Kate&quot;)  </div><div class="line">p?.printName()  </div><div class="line">p = nil  </div><div class="line">//打印出 Optional(&quot;Kate&quot;)</div></pre></td></tr></table></figure><blockquote><p>这时候因为循环引用导致Person实例不会被释放。<br>解决这个循环引用同样有两种方式。</p></blockquote><ul><li><p>第一种是在不需要这个实例的时候，将这个可能会引起循环引用的闭包设为nil。</p></li><li><p>第二种是利用闭包的捕获列表。下面是第二种方法的介绍</p></li></ul><blockquote><p>下面是语法定义例子，分别是有参数和没参数的闭包。在这种情况下，闭包对捕获的self不会产生强引用。（题外话，在OC中是通过定义另外一个对self的弱引用变量，然后将这个弱引用变量传递给block来实现的。）</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">//有参数的情况  </span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> printName: ((<span class="type">String</span>)-&gt;<span class="type">Void</span>)? = &#123;  </div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>] (say: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  </div><div class="line">    <span class="built_in">print</span>(say,<span class="keyword">self</span>.name)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//没参数的情况  </span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> printName2: (<span class="type">Void</span>-&gt;<span class="type">Void</span>)? = &#123;  </div><div class="line">    [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span>  </div><div class="line">    <span class="built_in">print</span>(<span class="keyword">self</span>!.name)  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这里就是用两个关键字weak和unowned将self修饰。weak和unowned的区别和之前所讲的是一样的。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Initialization初始化&amp;Deinitialization析构</title>
      <link href="/2017/12/01/Swift/Grammar/%5D%E5%88%9D%E5%A7%8B%E5%8C%96-%E6%9E%90%E6%9E%84/"/>
      <content type="html"><![CDATA[<h1 id="Initialization-初始化"><a href="#Initialization-初始化" class="headerlink" title="Initialization 初始化"></a>Initialization 初始化</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>初始化，是当创建一个类、结构体、枚举类的时，完成存储属性的值的初始化，和其他一些初始化工作。准备好这个实例以供使用<br>反过来，当一个实例不再使用的时候，由析构过程释放这个实例所占用资源<br>完成初始化工作的一个方法一般称为初始化方法、构造器(Initializer)、构造方法等等<br>Swift中的构造器不需返回值，只是完成初始化工作。</p></blockquote><h2 id="类或结构体在创建的时候必须保证存储属性有初始化值"><a href="#类或结构体在创建的时候必须保证存储属性有初始化值" class="headerlink" title="类或结构体在创建的时候必须保证存储属性有初始化值"></a>类或结构体在创建的时候必须保证存储属性有初始化值</h2><blockquote><p>目的的实现可以通过在定义属性的时候给存储属性添加上默认值，也可以在构造器中赋值。并且在这两种情况中都不会触发属性的观察器。<br>官方文档建议我们在一个存储属性通常具有同一个初始值的时候，使用属性定义的方式添加初始值。</p><p>下面是这两种方法的代码<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> life: <span class="type">Int</span> = <span class="number">0</span>  </div><div class="line">    <span class="keyword">var</span> height: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">init</span>()&#123;  </div><div class="line">        height = <span class="number">0</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的init()方法就是构造器。注意它是不带func关键字的。而且也没有返回值。<br>以前创建一个实例的时候，都是使用“类名()”的形式，这其实就是调用了这个构造器。但是当时我们并没有写这个构造器，这是因为当一个类没有其他构造器的时候，编译器会自动生成这个默认的构造器。但是一旦有了其他的构造器，那么系统就不会再默认生成这个构造器。你也就再不能用“类名()”这种创建方法了。当然，当有其他构造器的时候，你也可以手动添加这个默认的构造器。</p></blockquote><h2 id="自定义构造器"><a href="#自定义构造器" class="headerlink" title="自定义构造器"></a>自定义构造器</h2><blockquote><p>可以定义构造器，可以传入自定义的参数列表来初始化类。自定义的构造器的外部参数名规则和方法不太一样，构造器的每一个参数都会生成和局部参数名一样的外部参数名。如果不想要外部参数名，还是可以用下划线取消</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> life: <span class="type">Int</span> = <span class="number">0</span>  </div><div class="line">    <span class="keyword">var</span> height: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">init</span>()&#123;    <span class="comment">//注意，当有其他构造器的时候，系统不会再生成这个构造器，必须手动写出来  </span></div><div class="line">        height = <span class="number">0</span>  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">init</span>(life: <span class="type">Int</span>, height: <span class="type">Double</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.life = life  </div><div class="line">        <span class="keyword">self</span>.height = height  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//可以这样使用自定义的构造器  </span></div><div class="line"><span class="keyword">var</span> a = <span class="type">Animal</span>(life: <span class="number">29</span>, height: <span class="number">1.2</span>)</div></pre></td></tr></table></figure><blockquote><p>再次提醒，当有类定义里面有自定义构造器的时候，不会再自动生成默认构造器。并且对于结构体也再不会自动生成遍历属性的构造器。<br>但是你可以将你自己的构造器写在扩展里面，这样就不会影响默认构造器的自动生成</p></blockquote><h2 id="构造器委托（Initializer-Delegation）"><a href="#构造器委托（Initializer-Delegation）" class="headerlink" title="构造器委托（Initializer Delegation）"></a>构造器委托（Initializer Delegation）</h2><blockquote><p>构造器委托，就是在一个构造器里面调用另外一个构造器，这样可以减少多余的代码。在构造器里面使用self.init语法来调用另外一个构造器，且这个语法只能在构造器里面使用。<br>构造器委托在值类型（结构体和枚举类）和类直接是不太一样的。因为类需要考虑到继承问题。<br>先来看值类型的构造器委托。这个很简单，调用另外一个构造器就行了。下面的例子虽然有点脱裤子放屁的感觉，但。。就是举个例子而已</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> totalPrice: <span class="type">Double</span>  </div><div class="line">      </div><div class="line">    <span class="keyword">init</span>(totalPrice: <span class="type">Double</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.totalPrice = totalPrice  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">init</span>(kg: <span class="type">Double</span>, pricePerKg: <span class="type">Double</span>) &#123;  </div><div class="line">        <span class="keyword">let</span> totalPrice = kg * pricePerKg  </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(totalPrice: totalPrice)   <span class="comment">//调用另外一个构造器  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="类的继承和初始化"><a href="#类的继承和初始化" class="headerlink" title="类的继承和初始化"></a>类的继承和初始化</h1><blockquote><p>因为类可以继承，所以它的初始化规则就变得比结构体要复杂多了。<br>首先，类的构造器分为指定构造器（Designated Initializer） 和  便利构造器 （Convenience Initializer）<br>一个类通常具有很少数量（一般只有1个）的指定构造器。但是必须最少具有一个。<br>便利构造器是用来调用指定构造器完成初始化工作的。一个类可以不具有遍历构造器。<br>两种构造器的语法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="comment">//指定构造器  </span></div><div class="line"><span class="keyword">init</span>(parameters) &#123;  </div><div class="line">    statements  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//便利构造器  </span></div><div class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(parameters) &#123;  </div><div class="line">    statements  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类的构造器委托规则："><a href="#类的构造器委托规则：" class="headerlink" title="类的构造器委托规则："></a>类的构造器委托规则：</h2><ul><li><p>1、一个指定构造器必须调用它的直接父类的指定构造器</p></li><li><p>2、一个便利构造器必须调用同一个类的另外的构造器</p></li><li><p>3、一个便利构造器必须最终以调用指定构造器结束。</p></li></ul><blockquote><p>规则2和3连起来就是说，一个便利构造器可能会调用了另外一个便利构造器，然后这个构造器又调用了另外一个便利构造器….但是这个链的最后的一个便利构造器必须是调用指定构造器。<br>下面附上官方的图片。在图片上可以看到，三条规则总结起来就是：指定构造器往上调用，便利构造器平行调用且终结在指定构造器。</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/Swift-Grammar-Initialization%E5%88%9D%E5%A7%8B%E5%8C%96&amp;Deinitialization%E6%9E%90%E6%9E%84-001.png" alt="001"></p><h2 id="类的初始化分为两阶段"><a href="#类的初始化分为两阶段" class="headerlink" title="类的初始化分为两阶段"></a>类的初始化分为两阶段</h2><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><ul><li>1、一个指定构造器或便利构造器被调用</li><li>2、分配类实例所需的内存，但是内存没有初始化</li><li>3、这个类的指定构造器确保该类引入的新的存储属性都初始化。（因为便利构造器最终会到指定构造器）。</li><li>4、然后这个构造器调用父类的指定构造器完成和第三步同样的工作。</li><li>5、直到继承链的最顶部分。</li><li>6、这时候有的存储属性都有初始值了。</li></ul><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><ul><li>1、从继承链的最顶部分出发。每个指定构造器具有了修改实例的权利。并且可以调用实例方法。</li><li>2、最后，这个初始化链条里面的便利构造器都具有了修改实例的权利。</li></ul><blockquote><p>遵循上面两个阶段的步骤，避免了当在初始化链后面的构造器修改了属性之后，又被前面的构造器修改属性的可能性。避免了使用没有经过初始化的属性的可能性。</p><p>为了确保两个阶段步骤的实施。编译器有4条检测规则，这四条规则决定了你在构造器里面某些代码的顺序。</p></blockquote><ul><li><p>1、在调用父类构造器之前，必须确保子类引入的新属性已经得到初始化。</p></li><li><p>2、子类必须在调用了父类的构造器之后，才能访问继承的属性。</p></li><li><p>3、便利构造器必须在调用了其他构造器之后，才能访问属性或调用实例方法。</p></li><li><p>4、在完成第一阶段之前（其实就是完成初始化本类定义的新属性，调用父类构造器），构造器不能调用实例方法，不能访问属性的值，不能把self当做值访问。但是可以用self.属性名的方式给属性赋值。</p></li></ul><blockquote><p>下面可以看看分别违反每个规则的例子</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> life: <span class="type">Int</span>  </div><div class="line">    <span class="keyword">var</span> height: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">init</span>(getLife: <span class="type">Int</span>, getHeight: <span class="type">Double</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.life = getLife  </div><div class="line">        <span class="keyword">self</span>.height = getHeight  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>  </div><div class="line">    <span class="keyword">init</span>()&#123;  </div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(getLife: <span class="number">2</span>, getHeight: <span class="number">2.0</span>)  <span class="comment">//这句报错，违反第一条，必须先将本类引入的属性初始化才能调用父类构造器  </span></div><div class="line">        <span class="keyword">self</span>.name = <span class="string">"Larry"</span>                     <span class="comment">//所以这一句必须写在前面才没错  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, getLife: <span class="type">Int</span>, getHeight: <span class="type">Double</span>)&#123;  </div><div class="line">        <span class="keyword">self</span>.name = name  </div><div class="line">        <span class="keyword">self</span>.life = <span class="number">1</span>                            <span class="comment">//这句报错，违反第二条，必须调用了父类构造器之后才能访问继承的属性。  </span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(getLife: getLife, getHeight: getHeight)    <span class="comment">//这句必须放在第二句之前才没错  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(getLife: <span class="type">Int</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.name = <span class="string">"Larry"</span>         <span class="comment">//这句报错，违反第三条，便利构造器里面必须调用了其他构造器之后才能访问属性  </span></div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()                 <span class="comment">//这句应该放在前面  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">init</span>(getName: <span class="type">String</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.name = getName  </div><div class="line">        <span class="type">Dog</span>.sayHello()  </div><div class="line">        <span class="keyword">self</span>.printName()          <span class="comment">//这句报错，违反第四条，必须完成了阶段1才能调用实例方法或访问属性  </span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(getLife: <span class="number">21</span>, getHeight: <span class="number">2.3</span>)   <span class="comment">//这句应该放在前面  </span></div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printName</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="keyword">self</span>.name)  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"hello"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="属性观察器"><a href="#属性观察器" class="headerlink" title="属性观察器"></a>属性观察器</h1><blockquote><p>以前说过，属性观察器在构造器里面给属性赋值的时候是不会被调用的。但是这个只针对于本类定义的属性。对于继承而来的属性，当已经经过父类的构造器完成初始化后，如果在子类里面修改了继承属性的值，那么就会触发父类观察器，如果你在子类里面也覆盖了这个观察器，那么子类和父类的观察器都会被调用</p><p>另外再看</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> life: <span class="type">Int</span> = <span class="number">0</span> &#123;  </div><div class="line">        <span class="keyword">willSet</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"animial life newValue \(newValue)"</span>)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">init</span>(getlife: <span class="type">Int</span>)&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"animal life init \(self.life)"</span>)  </div><div class="line">        <span class="keyword">self</span>.life = <span class="number">1</span>  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"animal life after assign \(self.life)"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果我们调用下面的语句</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> a = <span class="type">Animal</span>(getlife: <span class="number">3</span>)  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//animal life init 0  </span></div><div class="line"><span class="comment">//animal life after assign 1</span></div></pre></td></tr></table></figure><blockquote><p>注意一点，我们在init里面第一句已经用到了self。根据编译器规则第四条，不允许在属性没有初始化的前进行访问。从上面代码通过编译来看，这里编译器已经将属性初始化为定义时候的值了。如果你将定义时候的默认值删去，那么第一句就会报错<br>Swift默认是不继承父类的构造器的。<br>如果你想要和父类一样的构造器，那么必须自己写。如果你写的构造器（不管是指定还是便利）和父类的指定构造器一样，那么这个构造器前必须加上override关键字。如果你写的构造器和父类的便利构造器一样，那么不用加override，因为子类永远不能直接调用父类的便利构造器。<br>但是在某些情况下，子类可以自动继承父类构造器。<br>前提条件：子类新引入的属性都必须具有默认值</p></blockquote><ul><li>规则1：如果子类没有定义任何的指定构造器。那么子类自动继承父类所有的指定构造器。</li><li>规则2：如果子类实现了父类所有的指定构造器（可以通过规则1继承而来，也可以通过重写而来），那么子类自动继承父类所有的便利构造器。</li></ul><blockquote><p>例子</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> life: <span class="type">Int</span>  </div><div class="line">    <span class="keyword">var</span> height: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(getLife: <span class="type">Int</span>)&#123;  </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(getLife: getLife, getHeight: <span class="number">0.0</span>)  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">init</span>(getLife: <span class="type">Int</span>, getHeight: <span class="type">Double</span>) &#123;  </div><div class="line">        <span class="keyword">self</span>.life = getLife  </div><div class="line">        <span class="keyword">self</span>.height = getHeight  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Larry"</span>  </div><div class="line">    <span class="comment">//    override init(getLife: Int, getHeight: Double)&#123;  </span></div><div class="line">    <span class="comment">//        super.init(getLife: getLife, getHeight:getHeight)  </span></div><div class="line">    <span class="comment">//    &#125;  </span></div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>无论上面Dog类里面注释的代码是否打开，Dog都继承了Animal的所有构造器</p></blockquote><h1 id="Failable-Initializers可失败的构造器"><a href="#Failable-Initializers可失败的构造器" class="headerlink" title="Failable Initializers可失败的构造器"></a>Failable Initializers可失败的构造器</h1><blockquote><p>Swift中有个概念，就是创建实例的时候如果条件不符合，可以返回一个nil对象。这类可以返回nil的构造器叫做可失败的构造器。语法是在init的前面加上一个？。当条件不满足的时候，你可以用 return nil结束构造方法。那么这时候得到的实例其实是一个nil，这里也说明了，可失败构造器返回的是可选类型。其实之前也说过，Swift的构造器是不需要返回值的。所以你成功的时候不需要写return什么东东。</p><h2 id="值类型的可失败构造器"><a href="#值类型的可失败构造器" class="headerlink" title="值类型的可失败构造器"></a>值类型的可失败构造器</h2><p>下面是structure的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pricePerKg: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">init</span>?(pricePerKg: <span class="type">Double</span>)&#123;  </div><div class="line">        <span class="keyword">if</span> pricePerKg &lt; <span class="number">0</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">self</span>.pricePerKg = pricePerKg  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="built_in">print</span>(<span class="type">Apple</span>(pricePerKg: <span class="number">2</span>))  </div><div class="line"><span class="built_in">print</span>(<span class="type">Apple</span>(pricePerKg: -<span class="number">2</span>))  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//Optional(SwiftTest.Apple(pricePerKg: 2.0))  </span></div><div class="line"><span class="comment">//nil</span></div></pre></td></tr></table></figure><blockquote><p>接下来是枚举类的</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">enum FruitSet &#123;  </div><div class="line">    case apple, orange, banana  </div><div class="line">    init?(symbol: Character)&#123;  </div><div class="line">        switch symbol &#123;  </div><div class="line">        case &quot;a&quot;,&quot;A&quot; :  </div><div class="line">            self = .apple  </div><div class="line">        case &quot;o&quot;,&quot;O&quot; :  </div><div class="line">            self = .orange  </div><div class="line">        case &quot;b&quot;,&quot;B&quot; :  </div><div class="line">            self = .banana  </div><div class="line">        default :  </div><div class="line">            return nil  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">print(FruitSet(symbol: &quot;a&quot;))  </div><div class="line">print(FruitSet(symbol: &quot;e&quot;))  </div><div class="line">//打印  </div><div class="line">//Optional(SwiftTest.FruitSet.apple)  </div><div class="line">//nil</div></pre></td></tr></table></figure><blockquote><p>对应有默认值的枚举类，会自动生成一个init?(rawValue:)的构造器。如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">FruitSet</span> : <span class="title">Character</span></span>&#123;  </div><div class="line">    <span class="keyword">case</span> apple = <span class="string">"a"</span>, orange = <span class="string">"o"</span>, banana = <span class="string">"b"</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="built_in">print</span>(<span class="type">FruitSet</span>(rawValue: <span class="string">"a"</span>))  </div><div class="line"><span class="built_in">print</span>(<span class="type">FruitSet</span>(rawValue: <span class="string">"e"</span>))</div></pre></td></tr></table></figure><h2 id="类的可失败构造器"><a href="#类的可失败构造器" class="headerlink" title="类的可失败构造器"></a>类的可失败构造器</h2><blockquote><p>有一个规则，就是必须在本类所有的属性（包括继承的）都赋值之后才可以返回nil</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pricePerKg: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">init</span>?(pricePerKg: <span class="type">Double</span>)&#123;  </div><div class="line">        <span class="keyword">if</span> pricePerKg &lt; <span class="number">0</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>              <span class="comment">//这句报错，所以你必须先初始化其他属性值  </span></div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">self</span>.pricePerKg = pricePerKg  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="可失败初始化的传递过程"><a href="#可失败初始化的传递过程" class="headerlink" title="可失败初始化的传递过程"></a>可失败初始化的传递过程</h2><blockquote><p>一个可失败的构造器可以调用其他的构造器，无论是可失败的还是不会失败的。</p></blockquote><p>但是一个不可失败的构造器不能去调用一个可失败的构造器。如果去调用父类的可失败构造器，虽然用解包可以解决，但是一旦父类的可失败构造器返回了nil，那么程序直接崩溃</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>  </div><div class="line">    <span class="keyword">init</span>?(name: <span class="type">String</span>)&#123;  </div><div class="line">        <span class="keyword">self</span>.name = name  </div><div class="line">        <span class="keyword">if</span> name.isEmpty &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span>: <span class="title">Fruit</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pricePerKg: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">init</span>(pricePerKg: <span class="type">Double</span>)&#123;  </div><div class="line">        <span class="keyword">self</span>.pricePerKg = pricePerKg  </div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">""</span>)!   <span class="comment">//利用解包调用了父类的可失败构造器，但是因为这样父类会返回一个nil，所以程序在这行会崩溃  </span></div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>?()&#123;  </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(pricePerKg: <span class="number">3</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> i = <span class="type">Apple</span>(pricePerKg: <span class="number">3</span>)</div></pre></td></tr></table></figure><blockquote><p>同样的，可失败的构造器也可以被重写，你可以重写为不可失败的构造器。<br>但是不可失败的构造器不能覆盖为可失败的构造器。<br>你可以用!代替?来实现可失败构造器，那么这样得到的实例会自动解包。当然，存在nil报错的问题。记得处理。</p></blockquote><h1 id="必须构造器（Required-Initializers）"><a href="#必须构造器（Required-Initializers）" class="headerlink" title="必须构造器（Required Initializers）"></a>必须构造器（Required Initializers）</h1><blockquote><p>在构造器前面加上required关键字就行了。这样的构造器要求子类必须重写。子类重写这个构造器的时候，也必须加上required关键字。要求子类的子类也要重写这个构造器。<br>写了required后不用写override关键字。写了会有警告。</p><p>给属性默认值时使用闭包或函数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">getprice</span><span class="params">()</span></span>-&gt;<span class="type">Double</span> &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pricePerKg: <span class="type">Double</span> = getprice()  </div><div class="line">    <span class="keyword">var</span> name = &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="string">"apple"</span>  </div><div class="line">    &#125;()     <span class="comment">//留意这对小括号，没有的话那就是给属性赋值一个闭包了。  </span></div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> a = <span class="type">Apple</span>()  </div><div class="line"><span class="built_in">print</span>(a.pricePerKg,a.name)</div></pre></td></tr></table></figure><h1 id="析构器"><a href="#析构器" class="headerlink" title="析构器"></a>析构器</h1><blockquote><p>析构器，就是在一个实例再也不用到时候调用的方法。析构器里面完成一些清理工作或保存数据等等。析构器是系统自动调用的，不允许自行调用。</p><p>语法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">deinit</span> &#123;  </div><div class="line">    <span class="comment">// perform the deinitialization  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-UIButton-Img和Title位置</title>
      <link href="/2017/12/01/OC/Kit/UIButton-Img%E5%92%8CTitle%E4%BD%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h1 id="iOS-UI-UIButton-Img和Title位置"><a href="#iOS-UI-UIButton-Img和Title位置" class="headerlink" title="iOS-UI-UIButton-Img和Title位置"></a>iOS-UI-UIButton-Img和Title位置</h1><blockquote><p>UIButton 的image title 的位置都是可以调整的，具体如何调整可以按照下面的步骤</p></blockquote><h2 id="设置内容的水平垂直位置"><a href="#设置内容的水平垂直位置" class="headerlink" title="设置内容的水平垂直位置"></a>设置内容的水平垂直位置</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.contentVerticalAlignment = <span class="built_in">UIControlContentVerticalAlignmentTop</span>;</div><div class="line"><span class="keyword">self</span>.contentHorizontalAlignment = <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>;</div></pre></td></tr></table></figure><blockquote><p>self指的是UIButton对象，这是继承自UIButon的方法里面或者给UIButton添加扩展方法里面。<br>通过这样的设置可以使得imageView显示在UIButton对象的左上角，titleLabel显示在imageView的右边</p></blockquote><h2 id="调整imageView居中"><a href="#调整imageView居中" class="headerlink" title="调整imageView居中"></a>调整imageView居中</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> btn_width = <span class="keyword">self</span>.frame.size.width;</div><div class="line"><span class="keyword">self</span>.imageEdgeInsets = <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">10</span>, (btn_width - <span class="keyword">self</span>.imageView.frame.size.width)/<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure><h2 id="调整-titleLabel居中"><a href="#调整-titleLabel居中" class="headerlink" title="调整 titleLabel居中"></a>调整 titleLabel居中</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> btn_width = <span class="keyword">self</span>.frame.size.width;</div><div class="line"><span class="keyword">self</span>.titleEdgeInsets = <span class="built_in">UIEdgeInsetsMake</span>(<span class="keyword">self</span>.imageView.frame.size.height + vSpace+<span class="number">10</span>, - <span class="keyword">self</span>.imageView.frame.size.width+(btn_width/<span class="number">2</span>-<span class="keyword">self</span>.titleLabel.frame.size.width/<span class="number">2</span>), <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure><blockquote><p>通过减去 imageView的宽度使titleLabel处在左上角，让后将label移植中心。<br>经过以上三步就可以使imageView 、titleLabelLabel 居中，其它的显示形式一样可以参照以上的设置。</p></blockquote><h1 id="整理成了方法，"><a href="#整理成了方法，" class="headerlink" title="整理成了方法，"></a>整理成了方法，</h1><blockquote><p>不需要每次都写</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>) setImageAndTitleCenterWithVerticalGapSpace:(<span class="built_in">CGFloat</span>) vSpace imageTopSpace:(<span class="built_in">CGFloat</span>) iSpace &#123;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.contentVerticalAlignment = <span class="built_in">UIControlContentVerticalAlignmentTop</span>;</div><div class="line">    <span class="keyword">self</span>.contentHorizontalAlignment = <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>;</div><div class="line"></div><div class="line">    <span class="built_in">CGFloat</span> btn_width = <span class="keyword">self</span>.frame.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> iTop = iSpace;</div><div class="line">    <span class="keyword">self</span>.imageEdgeInsets = <span class="built_in">UIEdgeInsetsMake</span>(iTop, (btn_width - <span class="keyword">self</span>.imageView.frame.size.width)/<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="comment">//    self.titleEdgeInsets = UIEdgeInsetsMake(self.imageView.frame.size.height + vSpace+iTop, - self.imageView.frame.size.width+(btn_width/2-self.titleLabel.frame.size.width/2), 0, 0);</span></div><div class="line"><span class="comment">// 使用中发现对于label的width取值不准确，遂通过计算一次获取，准确</span></div><div class="line">    <span class="built_in">CGSize</span> size = [<span class="keyword">self</span>.titleLabel sizeThatFits:<span class="built_in">CGSizeMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame), <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.frame))];</div><div class="line">    <span class="keyword">self</span>.titleEdgeInsets = <span class="built_in">UIEdgeInsetsMake</span>(<span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.imageView.frame)+ vSpace + iTop, - <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.imageView.frame) + (<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) - size.width)/<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>vSpace imageView与titleLabel垂直间隔</li><li>iSpace imageView 距离 top的间隔</li></ul>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> UIKit </category>
          
          <category> UIButton </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Inheritance-类继承基本用法</title>
      <link href="/2017/12/01/Swift/Grammar/Inheritance-%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h1><p>.&gt;继承是类独有的，结构体和枚举类都不具有这个功能。<br>继承就好像子承父业一样，一个继承的类（称为子类subClass）可以获得被继承的类（称为父类superClass）的属性，方法和其他特性。</p><blockquote><p>子类可以重写父类的方法，也可以添加自己的属性，还可以为继承而来的属性添加观察器（对继承而来的存储和计算属性都可以）</p></blockquote><h1 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h1><blockquote><p>一个不继承自任何类的类称为基类。<br>在Swift中，是没有共同的终极父类的。oc和java都是有终级父类的</p><p>定义一个Animal基类</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">     <span class="keyword">var</span> life : <span class="type">Int</span> = <span class="number">0</span>  </div><div class="line">     <span class="keyword">var</span> description: <span class="type">String</span>&#123;  </div><div class="line">         <span class="keyword">return</span> <span class="string">"An animal with a life of \(life)"</span>  </div><div class="line">     &#125;  </div><div class="line">       </div><div class="line">     <span class="function"><span class="keyword">func</span> <span class="title">makeSounds</span><span class="params">()</span></span> &#123;  </div><div class="line">       </div><div class="line">     &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure><blockquote><p>继承语法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  &lt;span style=<span class="string">"color:#ff0000;"</span>&gt;<span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span>&lt;/<span class="title">span</span>&gt; </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">"larry"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上面的Dog类继承自Animal类，并且添加了自己的name属性。我们可以修改一下dog继承的属性，然后打印一下 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dog = <span class="type">Dog</span>()  </div><div class="line">dog.life = <span class="number">10</span>  </div><div class="line"><span class="built_in">print</span>(<span class="string">"dog's life is"</span>,dog.life)  <span class="comment">//dog's life is 10</span></div></pre></td></tr></table></figure><h1 id="覆盖（override）父类属性"><a href="#覆盖（override）父类属性" class="headerlink" title="覆盖（override）父类属性"></a>覆盖（override）父类属性</h1><blockquote><p>对于继承而来的存储属性或者计算属性，我们可以通过重写这个属性的getter和setter方法来实现覆盖。下面是几条规则：</p></blockquote><ul><li><p>1、当你重写了setter方法的时候，一定要重写getter方法。但是可以只重写getter方法。</p></li><li><p>2、覆盖属性的时候，属性名和类型都必须和继承的属性一致才算覆盖。并且前面要加上override关键字。</p></li><li><p>3、你可以将继承的只读属性重写为读写属性，但是不能将继承的读写属性重写为只读属性。</p></li></ul><blockquote><p>下面重写Animal的description属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">"larry"</span>  </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;  </div><div class="line">        <span class="keyword">get</span>&#123;  </div><div class="line">            <span class="keyword">return</span> <span class="string">"It's a dog with the name of \(name)"</span>  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="覆盖属性观察器"><a href="#覆盖属性观察器" class="headerlink" title="覆盖属性观察器"></a>覆盖属性观察器</h1><blockquote><p>规则：</p></blockquote><ul><li><p>1、不能对继承的常量，或者只读属性添加属性观察器</p></li><li><p>2、不能同时对一个继承属性同时添加属性观察器和setter方法。因为setter方法已经可以提供属性观察器的功能。</p></li><li><p>3、即使覆盖了之后，如果父类的该属性有观察器，那么当值修改的时候，父类的观察器也会被调用</p></li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">"larry"</span>  </div><div class="line">      </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> life: <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">didSet</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"The dog's life is \(life)"</span>)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;  </div><div class="line">        <span class="keyword">get</span>&#123;  </div><div class="line">            <span class="keyword">return</span> <span class="string">"It's a dog with the name of \(name)"</span>  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="覆盖父类方法"><a href="#覆盖父类方法" class="headerlink" title="覆盖父类方法"></a>覆盖父类方法</h1><blockquote><p>同样的，加上override后，重写父类方法就可以</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">makeSounds</span><span class="params">()</span></span> &#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"wang! wang!"</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="防止覆盖"><a href="#防止覆盖" class="headerlink" title="防止覆盖"></a>防止覆盖</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">用<span class="keyword">final</span>关键字去修饰就可以了。比如<span class="keyword">final</span> <span class="keyword">var</span>，<span class="keyword">final</span> <span class="function"><span class="keyword">func</span>， <span class="title">final</span> <span class="title">class</span> <span class="title">func</span>， <span class="title">final</span> <span class="title">subscript</span></span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> Inheritance </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Subscripts-下标</title>
      <link href="/2017/12/01/Swift/Grammar/Subscripts-%E4%B8%8B%E6%A0%87/"/>
      <content type="html"><![CDATA[<h1 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h1><blockquote><p>所谓的下标，就是[]<br>在Array和Dictionary的时候就已经接触过了。它其实算一种特殊的方法，利用下标，我们可以将属性的getter和setter写在一起。而且还可以提供另外的一些功能。<br>String截串的时候无比麻烦,利用下标和扩展（Extension）封装后变得很简单。这个在讲到扩展的时候在写出来吧。<br>下标语法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;  </div><div class="line">    <span class="keyword">get</span> &#123;  </div><div class="line">        <span class="comment">// return an appropriate subscript value here  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">set</span>(newValue) &#123;  </div><div class="line">        <span class="comment">// perform a suitable setting action here  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>当然可以和计算属性一样将setter删去，变为只读。<br>下面举一个使用例子。假设在买橙子。下标表示你要买多少斤，下标能返回总共价格。 当对下标赋值的时候，表示买那么多斤的时候总共花了多少钱。然后修改了橙子的单价.<br>下标不止一个变量，还可以有多个变量。变量也可以是不同的类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Orange</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pricePerKg: <span class="type">Double</span> = <span class="number">3</span>  </div><div class="line">    <span class="keyword">subscript</span>(kg: <span class="type">Double</span>, str: <span class="type">String</span>) -&gt; <span class="type">Double</span> &#123;  </div><div class="line">        <span class="keyword">get</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(str)  </div><div class="line">            <span class="keyword">return</span> kg * pricePerKg  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">set</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(str)  </div><div class="line">            <span class="keyword">self</span>.pricePerKg = newValue / kg  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> o = <span class="type">Orange</span>()  </div><div class="line"><span class="built_in">print</span>(<span class="string">"price of 10kg orange "</span>,o[<span class="number">10</span>,<span class="string">"buy 10 kg orange"</span>])  </div><div class="line">o[<span class="number">100</span>,<span class="string">"buy 100kg orange"</span>] =  <span class="number">250</span>  </div><div class="line"><span class="built_in">print</span>(<span class="string">"price per kg when buying 100kg orange "</span>,o.pricePerKg)  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//buy 10 kg orange  </span></div><div class="line"><span class="comment">//price of 10kg orange  30.0  </span></div><div class="line"><span class="comment">//buy 100kg orange  </span></div><div class="line"><span class="comment">//price per kg when buying 100kg orange  2.5</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Method-方法</title>
      <link href="/2017/12/01/Swift/Grammar/Method-%E6%96%B9%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><blockquote><p><strong>方法</strong> 其实就是函数，只不过方法是属于某个类、结构体、枚举类的函数<br>方法的定义和函数一样。调用通过点语法实现。注意，方法和属性不能同名。但是类型方法可以和实例方法重名</p></blockquote><h2 id="Instance-Methods实例方法"><a href="#Instance-Methods实例方法" class="headerlink" title="Instance Methods实例方法"></a>Instance Methods实例方法</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">(videoName: String)</span></span> &#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Now play"</span>,videoName)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> v = <span class="type">Video</span>()  </div><div class="line">v.play(<span class="string">"\"monkey king\""</span>)   <span class="comment">//打印 Now play "monkey king"</span></div></pre></td></tr></table></figure><blockquote><p>在实例方法里面具有 self 属性，该属性就是指这个实例本身。学习过java或OC的应该很熟悉。就是用来当参数名和属性名一样的时候，用来区分究竟是哪个变量。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> videoName: <span class="type">String</span>?  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">(videoName: String)</span></span> &#123;  </div><div class="line">        <span class="keyword">self</span>.videoName = videoName  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Now play"</span>,videoName)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> v = <span class="type">Video</span>()  </div><div class="line">v.play(<span class="string">"\"monkey king\""</span>)  </div><div class="line"><span class="built_in">print</span>(v.videoName!)  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//Now play "monkey king"  </span></div><div class="line"><span class="comment">//"monkey king"</span></div></pre></td></tr></table></figure><blockquote><p>如果是对于结构体，因为它是值传递，所以一般方法里面如果和上面一样尝试修改存储属性的值的话，是不允许的。直接报错。<br>如果需要修改，那么可以在方法前面加上mutating关键字<br>changeVideo方法将整个self都赋值了一个新实例。<br>因为枚举类是不存在存储属性的，所以没有上面修改属性的情况。但是self关键字还是有的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Video</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> videoName: <span class="type">String</span>?  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">(videoName: String)</span></span> &#123;  </div><div class="line">        <span class="keyword">self</span>.videoName = videoName  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Now play"</span>,videoName)  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeVideo</span><span class="params">(newVideo: String)</span></span>&#123;  </div><div class="line">        <span class="keyword">self</span> = <span class="type">Video</span>(videoName: newVideo)  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> v = <span class="type">Video</span>()  </div><div class="line">v.play(<span class="string">"\"monkey king\""</span>)  </div><div class="line">v.changeVideo(<span class="string">"misson impossible"</span>)  </div><div class="line"><span class="built_in">print</span>(v.videoName!)  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//Now play "monkey king"  </span></div><div class="line"><span class="comment">//misson impossible</span></div></pre></td></tr></table></figure><h2 id="Type-Methods类型方法"><a href="#Type-Methods类型方法" class="headerlink" title="Type Methods类型方法"></a>Type Methods类型方法</h2><blockquote><p>这个和类型属性一样，加上static或class就行了。class允许子类覆盖父类方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Video</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> videoName: <span class="type">String</span>?  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> playTime: <span class="type">Int</span> = <span class="number">0</span>  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">(videoName: String)</span></span> &#123;  </div><div class="line">        <span class="keyword">self</span>.videoName = videoName    <span class="comment">//这里是self指的是Video的实例  </span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Now play"</span>,videoName)  </div><div class="line">        <span class="type">Video</span>.playTime++  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeVideo</span><span class="params">(newVideo: String)</span></span>&#123;  </div><div class="line">        <span class="keyword">self</span> = <span class="type">Video</span>(videoName: newVideo)  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">showPlayTime</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="keyword">self</span>.playTime)   <span class="comment">//注意这里的self是指Video这个结构体，而不是实例  </span></div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> v = <span class="type">Video</span>()  </div><div class="line"><span class="type">Video</span>.showPlayTime()  </div><div class="line">v.play(<span class="string">"\"monkey king\""</span>)  </div><div class="line"><span class="type">Video</span>.showPlayTime()  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//0  </span></div><div class="line"><span class="comment">//Now play "monkey king"  </span></div><div class="line"><span class="comment">//1</span></div></pre></td></tr></table></figure><ul><li><p>注意，调用类型方法只能通过类名的点语法来实现，不能通过实例的点语法。这点和类型属性是一样的。</p></li><li><p>关于这个类型方法，需要注意里面的self和实例方法里面的self指向的不是用一个东西，前者是指类型本身，后者是指类型的实例。</p></li><li><p>所以在类型方法和实例方法里面访问类型变量和实例变量也有不同。在实例方法里面访问类型变量，需要加上类型前缀。 在类型方法里面访问类型变量，可以加上类型前缀，用self，或者不加前缀。在类型方法里面是不能访问实例变量的</p></li></ul>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Properties-属性</title>
      <link href="/2017/12/01/Swift/Grammar/Properties-%E5%B1%9E%E6%80%A7/"/>
      <content type="html"><![CDATA[<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><blockquote><p>Swift中，属性大致分为两种，存储属性+计算属性</p></blockquote><h2 id="Stored-Properties存储属性"><a href="#Stored-Properties存储属性" class="headerlink" title="Stored Properties存储属性"></a>Stored Properties存储属性</h2><blockquote><p>存储属性:能保存数据的属性。枚举类、结构体、类都具有存储属性<br>存储属性可以设为var 或let。分别对应常量和变量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CPU</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> clockSpeed = <span class="number">1.0</span>   <span class="comment">//变量  </span></div><div class="line">    <span class="keyword">let</span> coreNum = <span class="number">2</span>        <span class="comment">//常量  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>计算属性就是它本身不保存数据，而是通过处理其他的数据得到返回值。 结构体和类才具有计算属性<br>然后我们初始化一个CPU实例，但是这个实例我们设置为常量。这样会导致一个后果：对应值传递的结构体，当实例是常量的时候，即使存储属性是变量，也不能修改里面属性的值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> cpu = <span class="type">CPU</span>(clockSpeed: <span class="number">3.2</span>)   <span class="comment">//注意到这个初始化方法只有一个参数，因为我们设置了coreNum为常量，并且给了初始值，所以构造方法会发生变化  </span></div><div class="line">cpu.clockSpeed = <span class="number">3.3</span>      <span class="comment">//这句会报错</span></div></pre></td></tr></table></figure><blockquote><p>然而对于引用传递的类来讲，即使实例是常量，里面设置为变量的存储属性还是可以更改值的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Telephone</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> cpu = <span class="type">CPU</span>()  </div><div class="line">    <span class="keyword">var</span> screenSize: <span class="type">Int</span>?  </div><div class="line">    <span class="keyword">var</span> price: <span class="type">Int</span>?  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">let</span> myTelephont = <span class="type">Telephone</span>()  </div><div class="line">myTelephont.screenSize = <span class="number">4</span></div></pre></td></tr></table></figure><blockquote><p>懒加载存储属性<br>Swift需要保证一个类或结构体或枚举类在初始化之后，所以的存储属性都必须有初始值（除开可选类型）。所以当实例初始化完成以后，所以的存储属性都初始化了。但是有些时候某些存储属性不一定会用到，所以我们可以把这些存储属性设置为lazy存储属性。那么它在要用到的时候才会进行初始化。lazy存储属性只能是变量。而且在多线程调用的时候，如果lazy属性没有初始化，那么不能保证只会初始化一次</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">CPU</span> </span>&#123;  </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> clockSpeed = <span class="number">1.0</span>  </div><div class="line">    <span class="keyword">let</span> coreNum = <span class="number">2</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">let</span> cpu = <span class="type">CPU</span>()  <span class="comment">//这时候clockSpeed还是为nil</span></div></pre></td></tr></table></figure><h2 id="Computed-Properties-计算属性"><a href="#Computed-Properties-计算属性" class="headerlink" title="Computed Properties 计算属性"></a>Computed Properties 计算属性</h2><blockquote><p>故名思议，它本身不保存数据，只是用其他数据得到返回值，或者当设置它的时候修改其他数据。下面的例子利用存储属性得到apple的总价。或者修改总价的时候修改重量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">let</span> pricePerKg = <span class="number">6.0</span>  </div><div class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">var</span> totalPrice: <span class="type">Double</span> &#123;  </div><div class="line">        <span class="keyword">get</span> &#123;  </div><div class="line">            <span class="keyword">return</span> pricePerKg * weight  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">set</span>(newTotalPrice) &#123;  </div><div class="line">            weight = newTotalPrice / pricePerKg  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> apple = <span class="type">Apple</span>(weight: <span class="number">2.0</span>)  </div><div class="line"><span class="built_in">print</span>(apple.totalPrice)    <span class="comment">//12.0  </span></div><div class="line">apple.totalPrice = <span class="number">6.0</span>  </div><div class="line"><span class="built_in">print</span>(apple.weight)       <span class="comment">//1.0</span></div></pre></td></tr></table></figure><blockquote><p>算属性的setter方法新值自带一个默认名 newValue，所以上面的定义可以改为 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">let</span> pricePerKg = <span class="number">6.0</span>  </div><div class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">var</span> totalPrice: <span class="type">Double</span> &#123;  </div><div class="line">        <span class="keyword">get</span> &#123;  </div><div class="line">            <span class="keyword">return</span> pricePerKg * weight  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">set</span> &#123;  </div><div class="line">            weight = newValue / pricePerKg  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>可以将计算属性的setter去掉，那么这个计算数据就变成了只读的。这时候还可以省去get关键字 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">let</span> pricePerKg = <span class="number">6.0</span>  </div><div class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">var</span> totalPrice: <span class="type">Double</span> &#123;  </div><div class="line">        <span class="keyword">return</span> pricePerKg * weight  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>不要在计算属性的setter和getter里面获取该计算属性，这样会导致循环调用</li></ul><h2 id="Property-Observers属性观察器"><a href="#Property-Observers属性观察器" class="headerlink" title="Property Observers属性观察器"></a>Property Observers属性观察器</h2><blockquote><p>有了属性观察器，我们可以在属性被修改的时候做一些事情。注意的是对于非继承而来的计算属性，没有必要设置属性观察器，因为直接可以在计算属性的setter定义中完成这项功能。</p><p>属性观察器有两个方法<br>willSet 在属性将要赋值的时候调用，这时候属性的值还没改变<br>didSet在属性值被赋值完的时候就会调用。（即使是赋值和原来值一样的值）这时候属性的值已经改变。<br>willSet方法里面会传递新值过来，你可以自己定义这个新值的名称，如果不定义，会具有默认值newValue<br>didSet方法里面会传递属性的旧值过来，你可以自己定义这个旧值的名称，如果不定义，会具有默认值oldValue。如果你在didSet方法里面又对这个存储属性赋值，那么这个值会覆盖掉刚刚赋值的值。且不会导致循环调用。比如下面例子里面，当pricePerKg小于3的时候，会把它改为3</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Apple</span> </span>&#123;  </div><div class="line">    <span class="keyword">var</span> pricePerKg = <span class="number">6.0</span> &#123;  </div><div class="line">        <span class="keyword">willSet</span>(priceNewValue)&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"In willSet, priceNewValue="</span>,priceNewValue)  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"In willSet, pricePerKg="</span>,pricePerKg)  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">didSet</span>&#123;  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"In didSet, oldValue="</span>,oldValue)  </div><div class="line">            <span class="built_in">print</span>(<span class="string">"In didSet, pricePerKg="</span>,pricePerKg)  </div><div class="line">            <span class="keyword">if</span> pricePerKg &lt; <span class="number">3</span> &#123;  </div><div class="line">                pricePerKg = <span class="number">3</span>  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span>  </div><div class="line">    <span class="keyword">var</span> totalPrice: <span class="type">Double</span> &#123;  </div><div class="line">        <span class="keyword">get</span> &#123;  </div><div class="line">            <span class="keyword">return</span> pricePerKg * weight  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">set</span> &#123;  </div><div class="line">            weight = newValue / pricePerKg  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> apple = <span class="type">Apple</span>(pricePerKg: <span class="number">6.0</span>, weight: <span class="number">1.0</span>)  </div><div class="line">apple.pricePerKg = <span class="number">2.0</span>  </div><div class="line"><span class="built_in">print</span>(<span class="string">"apple.pricePerKg="</span>,apple.pricePerKg)  </div><div class="line"><span class="comment">/* 输出 </span></div><div class="line"><span class="comment">In willSet, priceNewValue= 2.0 </span></div><div class="line"><span class="comment">In willSet, pricePerKg= 6.0 </span></div><div class="line"><span class="comment">In didSet, oldValue= 6.0 </span></div><div class="line"><span class="comment">In didSet, pricePerKg= 2.0 </span></div><div class="line"><span class="comment">apple.pricePerKg= 3.0 </span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="Global-and-Local-Variables全局变量和局部变量"><a href="#Global-and-Local-Variables全局变量和局部变量" class="headerlink" title="Global and Local Variables全局变量和局部变量"></a>Global and Local Variables全局变量和局部变量</h2><blockquote><p>所谓的局部变量，就是定义在函数、方法、闭包、类型上下文里面的变量。<br>全局变量就是定义在函数、方法、闭包、类型上下文之外的变量。<br>局部变量和全局变量都称为存储变量。<br>在全局和局部范围内，都可以定义计算变量，或者为存储变量定义观察器</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">var</span> apple = <span class="type">Apple</span>(pricePerKg: <span class="number">6.0</span>, weight: <span class="number">1.0</span>) &#123;  <span class="comment">//为apple变量定义观察器  </span></div><div class="line"><span class="keyword">willSet</span> &#123;  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"newApple"</span>,newValue)  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">didSet</span>&#123;  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"oldApple"</span>,oldValue)  </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">apple = <span class="type">Apple</span>(pricePerKg: <span class="number">6.0</span>, weight: <span class="number">2.0</span>)  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span>: <span class="type">Double</span> &#123;  <span class="comment">//定义一个计算变量  </span></div><div class="line"><span class="keyword">get</span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">9</span>  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">set</span> &#123;  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"In setter,"</span>,newValue)  </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="built_in">c</span> = <span class="number">2</span>  </div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>)  </div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">newApple Apple(pricePerKg: 6.0, weight: 2.0) </span></div><div class="line"><span class="comment">oldApple Apple(pricePerKg: 6.0, weight: 1.0) </span></div><div class="line"><span class="comment">In setter, 2.0 </span></div><div class="line"><span class="comment">9.0 </span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><ul><li>官方文档说全局变量常量都是懒加载，局部变量常量都不是懒加载</li></ul><h2 id="Type-Properties类型属性"><a href="#Type-Properties类型属性" class="headerlink" title="Type Properties类型属性"></a>Type Properties类型属性</h2><blockquote><p>所谓的类型属性，就是这个属性是属于这个类型的，即使这个类型由多个实例，也只会有一个类型变量。</p></blockquote><p>类型属性是懒加载的，而且必须在定义的时候给初始值。</p><p>一般是用static来定义类型属性。特别的，对应类的计算类型属性，还可以用class关键字定义，这样可以使得子类可以覆盖它。</p><p>注意类型属性访问的时候用的是类名，不能使用实例来访问</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SomeStructure</span> </span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storedTypeProperty = <span class="string">"Some value."</span>  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> computedTypeProperty: <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeEnumeration</span> </span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storedTypeProperty = <span class="string">"Some value."</span>  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> computedTypeProperty: <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">6</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storedTypeProperty = <span class="string">"Some value."</span>  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> computedTypeProperty: <span class="type">Int</span> &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">27</span>  </div><div class="line">    &#125;  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">overrideableComputedTypeProperty</span>: <span class="title">Int</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">107</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="built_in">print</span>(<span class="type">SomeStructure</span>.storedTypeProperty)  </div><div class="line"><span class="comment">// prints "Some value."  </span></div><div class="line"><span class="type">SomeStructure</span>.storedTypeProperty = <span class="string">"Another value."</span>  </div><div class="line"><span class="built_in">print</span>(<span class="type">SomeStructure</span>.storedTypeProperty)  </div><div class="line"><span class="comment">// prints "Another value."  </span></div><div class="line"><span class="built_in">print</span>(<span class="type">SomeEnumeration</span>.computedTypeProperty)  </div><div class="line"><span class="comment">// prints "6"  </span></div><div class="line"><span class="built_in">print</span>(<span class="type">SomeClass</span>.computedTypeProperty)  </div><div class="line"><span class="comment">// prints "27"</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Func-图片的解压缩</title>
      <link href="/2017/11/30/OC/Func/iOS-Func-%E5%9B%BE%E7%89%87%E7%9A%84%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.leichunfeng.com/atom.xml" target="_blank" rel="external">http://blog.leichunfeng.com/atom.xml</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-GCD-多线程编程GCD</title>
      <link href="/2017/11/30/OC/Grammar/iOS-GCD-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8BGCD/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.mogoal.com/2016/09/12/grand-central-dispatch/" target="_blank" rel="external">http://blog.mogoal.com/2016/09/12/grand-central-dispatch/</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> GCD </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OC-Code上架配置文档</title>
      <link href="/2017/11/29/OC/Code/OC_Code_%E4%B8%8A%E6%9E%B6%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/"/>
      <content type="html"><![CDATA[<p>#第三方服务平台对接</p><ul><li>辈出设计登录，分享</li></ul><p>##阿里云(直播类一般需要，不需要跳过)</p><p>-（<a href="https://www.aliyun.com购买一年只要10个月的费用，oss和" target="_blank" rel="external">https://www.aliyun.com购买一年只要10个月的费用，oss和</a> slb 是按流量收费，请保证账户有余额）500并发  一月</p><blockquote><p>账号：xxxxx<br>密码：xxxxx</p></blockquote><p>##腾讯云(直播类一般需要，不需要跳过)</p><blockquote><p>腾讯云请使用qq或qq邮箱注册（<a href="https://www.qcloud.com账户需充值）差认证" target="_blank" rel="external">https://www.qcloud.com账户需充值）差认证</a><br>账号：xxxxxx<br>密码：xxxxxx<br>SdkAppId ：1314xxxx<br>accountType ：1314xxxx</p></blockquote><h2 id="短信平台"><a href="#短信平台" class="headerlink" title="短信平台"></a>短信平台</h2><blockquote><p>iOS 只要注意短信可用即可</p></blockquote><h2 id="QQ登录的功能（open-qq-com）"><a href="#QQ登录的功能（open-qq-com）" class="headerlink" title="QQ登录的功能（open.qq.com）"></a>QQ登录的功能（open.qq.com）</h2><blockquote><p>登录的APP ID：xxxx<br>APP KEY：xxxxx</p></blockquote><h2 id="app上的腾讯地图"><a href="#app上的腾讯地图" class="headerlink" title="app上的腾讯地图"></a>app上的腾讯地图</h2><blockquote><p>app上的腾讯地图key信息（HYPERLINK “<a href="http://lbs.qq.com/index.html&quot;http://lbs.qq.com/index.html）" target="_blank" rel="external">http://lbs.qq.com/index.html&quot;http://lbs.qq.com/index.html）</a><br>您的腾讯地图的 key：xxxxx<br>账号：xxxx<br>密码：xxx</p></blockquote><h2 id="App新浪微博登"><a href="#App新浪微博登" class="headerlink" title="App新浪微博登"></a>App新浪微博登</h2><blockquote><p>App新浪微博登录信息（ HYPERLINK “<a href="http://open.weibo.com/development/mobile" target="_blank" rel="external">http://open.weibo.com/development/mobile</a>“ <a href="http://open.weibo.com/development/mobile）" target="_blank" rel="external">http://open.weibo.com/development/mobile）</a><br>App Key：   xxxx不要微博<br>APP secret：xxxx<br>账号：       xxxx<br>密码：       xxxx</p></blockquote><h2 id="微信开放平台"><a href="#微信开放平台" class="headerlink" title="微信开放平台"></a>微信开放平台</h2><blockquote><p>HYPERLINK “<a href="https://open.weixin.qq.com/" target="_blank" rel="external">https://open.weixin.qq.com/</a>“ <a href="https://open.weixin.qq.com/" target="_blank" rel="external">https://open.weixin.qq.com/</a><br>您的微信的APP ID：xxxxx<br>APP secret：8xxxxx<br>账号：xxx<br>密码：xxxx</p></blockquote><h2 id="开通微信支付-Beichoo暂时不需要"><a href="#开通微信支付-Beichoo暂时不需要" class="headerlink" title="开通微信支付(Beichoo暂时不需要)"></a>开通微信支付(Beichoo暂时不需要)</h2><blockquote><p>开通微信支付（直播需要文网文）：用于观众支付（具体操作步骤请参考售后文档-后台需要配置的地方-微信支付文档）并留意和保留相关邮箱，等交付后台后填写到后台的资金管理-支付接口列表-微信支付。</p><p>注：最后确认分享到朋友圈、发送给朋友、微信登录和微信支付（直播需要文网文）的接口都已经获得。</p></blockquote><h2 id="企业微信公众号的服务号信息"><a href="#企业微信公众号的服务号信息" class="headerlink" title="企业微信公众号的服务号信息"></a>企业微信公众号的服务号信息</h2><blockquote><p>您的微信公众号名称：xxxxxx<br>开通微信支付：用于主播提现（具体操作步骤请参考售后文档-后台需要配置的地方-微信提现文档）并留意和保留相关邮箱，等交付后台后填写到后台的资金管理-支付接口列表-微信提现。<br>开通企业付款到用户</p></blockquote><p>##企业支付宝申请/签约及app支付申请（直播需要文网文）</p><blockquote><p>企业支付宝申请、签约及app支付申请（直播需要文网文）<br>您的支付宝账号： XXXXXX</p></blockquote><p>##友盟账户信息</p><blockquote><p>HYPERLINK “<a href="http://www.umeng.com" target="_blank" rel="external">http://www.umeng.com</a>“ <a href="http://www.umeng.com" target="_blank" rel="external">http://www.umeng.com</a><br>账号：xxxxxx<br>密码: xxxxx</p></blockquote><p>#苹果开发者账号</p><blockquote><p>苹果开发者账号：738816656@qq.com（具体找相关人要）<br>密码：xxxxxxxx<br>如有有内购<br>银行卡卡号：6236 6818 2000 3886 174<br>开户行：   中国建设银行<br>持卡人姓名：岳克奎<br>12位识别码（打电话问银行）：105391004150</p></blockquote><h1 id="app名称和BID"><a href="#app名称和BID" class="headerlink" title="app名称和BID"></a>app名称和BID</h1><blockquote><p>app名<br>国内发布APP，名字是中文</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">在项目info文件里边，把Bundle display name 填写一个中文名字，Localization native development regior 选择中国。如果刚才提到的两个都没有，自己手动添加即可</div></pre></td></tr></table></figure><blockquote><p>Bundle identifier 命名规范</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">命名规范，且具有唯一性，因为在发布时候，描述证书要匹配当前id。</div><div class="line">一般采用com/cn +公司名+项目名，例如com.jindong.jd</div><div class="line"></div><div class="line">注：在申请QQ、微信、地图、微博等第三方所需填写的包名均要与此包名统一，如果不统一就会导致各功能无法正常使用</div></pre></td></tr></table></figure><blockquote><p>Version</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">格式： 1.1.1  最好写3位</div></pre></td></tr></table></figure><blockquote><p>Build:</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">格式： 1 （写整数 1，2，3，4，5即可）</div></pre></td></tr></table></figure><p><img src="http://ot0mms4k8.bkt.clouddn.com/iOS-APP-Code%E4%B8%8A%E6%9E%B6%E5%89%8D%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E-001.png" alt="001"></p><h1 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h1><ul><li>通知全员提交代码</li><li>预先跑一边，自测，然后，clean工程，僵尸模式，断点统统清楚</li><li>Edit Scheme  必须改为 Release</li></ul><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><blockquote><p>FFConfig.h<br>服务器接口</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#define APP_ENVIRONMENT_EDITION  0</div><div class="line"></div><div class="line"> 0 上线  （不准Mac跑去测，必须打包TestFlight方式）</div><div class="line"> 1 开发  </div><div class="line"> 2 测试</div><div class="line"> 3 stage</div></pre></td></tr></table></figure><blockquote><p>服务器版本<br>目前0.1版本</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#define API_VERSION @&quot;/bc/0.1/&quot;</div></pre></td></tr></table></figure><blockquote><p>Push Notification 务必打开 平时这个不要关了！！！</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/iOS-APP-Code%E4%B8%8A%E6%9E%B6%E5%89%8D%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E-002.png" alt="002"></p><blockquote><p>Applinks 开启H5跳转App</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/iOS-APP-Code%E4%B8%8A%E6%9E%B6%E5%89%8D%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E-003.png" alt="003"></p><h1 id="App-信息"><a href="#App-信息" class="headerlink" title="App  信息"></a>App  信息</h1><blockquote><p>iTunesConnect:<a href="https://itunesconnect.apple.com/login" target="_blank" rel="external">https://itunesconnect.apple.com/login</a><br> <a href="https://itunesconnect.apple.com/login" target="_blank" rel="external">iTunesConnect点击—&gt;登录</a></p><p>根据运营会给 多套 关键字，副标题，多种语言环境<br>为了在构建版本里，多加几套关键字</p></blockquote><p><img src="http://ot0mms4k8.bkt.clouddn.com/iOS-APP-Code%E4%B8%8A%E6%9E%B6%E5%89%8D%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E-004.png" alt="004"></p><h1 id="构建版本"><a href="#构建版本" class="headerlink" title="构建版本"></a>构建版本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">截图 发布时 来传</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git-基本使用</title>
      <link href="/2017/11/29/Git/Git-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><blockquote><p>创建普通仓库</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure><blockquote><p>创建裸仓库，这里面许多git命令不能使用，切换分支都不可用，一般用来当远程仓库</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git --bare init</div></pre></td></tr></table></figure><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><blockquote><p>使用config alias.命令进行，添加–global参数后可以对全局git的config文件进行配置</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git config --global alias.st status</div></pre></td></tr></table></figure><p><a href="https://luolei.org//better-git-log/" target="_blank" rel="external">一个很吊的配置，让你的git变得更好看，摘自</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div></pre></td></tr></table></figure><h2 id="本地的一些命令"><a href="#本地的一些命令" class="headerlink" title="本地的一些命令"></a>本地的一些命令</h2><blockquote><p>配置信息</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git config user.name &quot;名字&quot; git config user.email &quot;email&quot;</div></pre></td></tr></table></figure><blockquote><p>branch<br>分支相关命令</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git branch -a //显示所有分支 git branch 分支名字 //如果该分支不存在，就会新建 git branch --delete 分支名字 //删除分支</div></pre></td></tr></table></figure><blockquote><p>add<br>将本目录下的文件都添加到暂缓区，准备提交用</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure><blockquote><p>commit 提交</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git commit -m &quot;注释&quot;</div></pre></td></tr></table></figure><blockquote><p>merge<br>这个命令会将本分支merge别处的分支。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git merge merge过来的分支</div></pre></td></tr></table></figure><h2 id="远程命令"><a href="#远程命令" class="headerlink" title="远程命令"></a>远程命令</h2><blockquote><p>添加远程仓库</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git remote add &lt;远程主机名&gt; url</div></pre></td></tr></table></figure><blockquote><p>push，命令格式：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp; git push 远程主机名 本地分支:远程分支</div></pre></td></tr></table></figure><blockquote><p>举个例子<br>下面命令将本地分支a，push到远程主机origin的a_remote上，如果远程主机里面没有a_remote分支，那么就会创建一个这名字的分支。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$  git push origin a:a_remote</div></pre></td></tr></table></figure><blockquote><p>注意：如果没有远程分支的名字，那么将会在远程仓库建立一个同名的分支。如果没有本地名字，就像 :a_remote，这就相当于传了一个空的分支给远程， 那么会删除掉远程仓库的这个分支。</p><p>pull<br>这个命令会将本地和远程分支进行merge，如果出现冲突，需要自己解决。</p><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git push 远程主机名 远程分支:本地分支</div></pre></td></tr></table></figure><p>例子在此，将远程主机的</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git pull orgin a_remote:a</div></pre></td></tr></table></figure><blockquote><p>发生冲突的时候，如果需要丢弃本地工作，那么使用</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git reset --hard</div></pre></td></tr></table></figure><blockquote><p>branch相关的远程命令<br>将远程分支和本地分支相关联</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch --track 本地分支 远程主机/远程分支 //在创建本地分支的时候指定它所关联的远程分支 git branch --set-upstream-to 远程主机/远程分支 //将当前分支关联远程分支</div></pre></td></tr></table></figure><blockquote><p>fetch<br>这个命令将远程的分支fetch下来，然后可以将这些fetch下来的分支和本地分支进行合并</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git fetch 主机名 git fetch -p 主机名 //fetch完成后，删除本地仍存在，但是远程不存在的分支关联</div></pre></td></tr></table></figure><blockquote><p>下面的命令将本地分支绑定远程分支，但好像并没什么用，push的时候如果不输入远程分支名字，那么还是会新建一个和本地分支同名的远程分支。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch --set-upstream-to origin/aa_remote</div></pre></td></tr></table></figure><blockquote><p>stash<br>在进行pull的时候，经常会遇到</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error: Your local changes to the following files would be overwritten by merge: xxx/xxx/xxx.java Please, commit your changes or stash them before you can merge. Aborting</div></pre></td></tr></table></figure><p>这里要么将你当前的工作commit一下，要么就可以使用stash命令。<br>先用stash命令缓存当前工作，然后pull，pull后再用stash pop还原之前的工作</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git pull ... file foobar not up to date, cannot merge. $ git stash $ git pull $ git stash pop</div></pre></td></tr></table></figure><blockquote><p>另外的情况就是：你在工作的时候，突然被老板要求去改别的东西，你也可以用stash把当前的工作缓存起来。改完别的东西后再回来继续工作。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$... hack hack hack ... </div><div class="line">$ git stash $ edit emergency fix </div><div class="line">$ git commit -a -m &quot;Fix in a hurry&quot; </div><div class="line">$ git stash pop # ... continue hacking ...</div></pre></td></tr></table></figure><h1 id="最后一些坑"><a href="#最后一些坑" class="headerlink" title="最后一些坑"></a>最后一些坑</h1><ul><li>1、初始化的仓库要先commit一下才能新建分支<ul><li>2、如果远程仓库在使用这个分支，那么不能提交到这个分支上去，除非建立bare仓库，但是bare仓库不能使用git命令。</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Classes/Structures类和结构体</title>
      <link href="/2017/11/29/Swift/Grammar/Classes-Structures%E7%B1%BB%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <content type="html"><![CDATA[<h1 id="类和结构体简叙述"><a href="#类和结构体简叙述" class="headerlink" title="类和结构体简叙述"></a>类和结构体简叙述</h1><blockquote><p>Swift中，类和结构体是很相近的。所有下面类和结构体的实例都统称为实例。不再单独为类的实例称为对象。<br>和C或OC，不同，swift的类只写在一个文件里面。这点和java一样。</p></blockquote><h2 id="类和结构体的共同点："><a href="#类和结构体的共同点：" class="headerlink" title="类和结构体的共同点："></a>类和结构体的共同点：</h2><ul><li>1、能定义属性用来存储值</li><li>2、能定义方法实现功能</li><li>3、能定义下标来得到值</li><li>4、具有初始化构造器初始化实例</li><li>5、能被扩展</li><li>6、能实现协议</li></ul><h2 id="类比结构体多出来的特点："><a href="#类比结构体多出来的特点：" class="headerlink" title="类比结构体多出来的特点："></a>类比结构体多出来的特点：</h2><ul><li><p>1、能被继承</p></li><li><p>2、能在运行时使用类型转换判断一个实例是否为某个类</p></li><li><p>3、具有析构器</p></li><li><p>4、引用计数可以大于1，使得可以有多个引用指向同一个类的实例（注明：结构体是值传递，所有没有引用计数）</p></li></ul><blockquote><p>下面定义一个类和结构体，这里先提一下，类的每个属性都给了默认值，除了可选类型之外。这个是swift要求的，以后文章会详细讲到。</p></blockquote><p>struct CPU {<br>       var clockSpeed = 1.0 var coreNum = 4<br>        }<br> class Telephone {<br> var cpu = CPU()<br> // CPU()是CPU结构体的默认构造器。它生成一个CPU实例，以后构造器的文章详细讲这方面内容 var screenSize = 5.0 var price: Int? }<br>然后定义他们的实例</p><p>var myTelephone = Telephone() var newCPU = CPU()<br>注意结构体是值传递，而类是引用传递。下面的代码清楚说明了这个特点。</p><p>var myTelephone = Telephone()<br>var newCPU = CPU()<br> print(myTelephone.cpu.clockSpeed) //1.0 swift使用点语法来获得属性 newCPU.clockSpeed = 2.0 myTelephone.cpu = newCPU //给myTelephone一个新的CPU print(myTelephone.cpu.clockSpeed) //2.0 newCPU.clockSpeed = 2.2 print(myTelephone.cpu.clockSpeed) //2.0 赋值后修改newCPU并不影响myTelephone里面的CPU var cpu = myTelephone.cpu //取出一份CPU，但是是值传递 cpu.clockSpeed = 3.0 print(myTelephone.cpu.clockSpeed) //2.0 所以修改取出的cpu不影响myTelephone里面的 var yourTelephone = myTelephone // 定义一个yourTelephone，它指向myTelephone的同一个实例 yourTelephone.screenSize = 6.0 print(myTelephone.screenSize) //6.0 修改yourTelephone会影响myTelephone<br>Array，String，Dictionary都是值传递。这个和OC是不一样的。值得注意。</p><p>结构体自带一个遍历所有属性的构造器，但是类没有。</p><p>var cpu2 = CPU(clockSpeed: 3.3, coreNum: 8)</p><p>操作符  === 和 !==<br>===用来判断两个变量是否指向同一个类的实例。如果是返回true。</p><p>!==反之。指向不同实例，返回true。</p><p>而 == 是判断两个实例是否“相等”，这个相等的条件可以有类的定义者自己决定。</p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Garmmar-Enumerations枚举类</title>
      <link href="/2017/11/29/520/"/>
      <content type="html"><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><blockquote><p>Swift中的枚举和C中的枚举不一样,枚举类而不是枚举类型,它是值传递<br>在C中，枚举类型中的每一项都整形<br>然而在Swift中，你不必为每一项赋值。定义的时候所用的名字就是用来枚举的。当然也可以为枚举成员赋值，这个赋值不单单是整形，可以是Charater，String，浮点数。</p><p>定义一个枚举类型<br>注意首字母已经大写<br>分行或<br>一行，用逗号分隔</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Nameset</span></span>&#123;</div><div class="line"><span class="keyword">case</span>  <span class="type">LuGaygay</span></div><div class="line"><span class="keyword">case</span>  <span class="type">Liaoliao</span></div><div class="line"><span class="type">Case</span>  <span class="type">Ykk</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">或 </div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Nameset</span></span>&#123;</div><div class="line"><span class="keyword">case</span> <span class="type">LuGaygay</span>, <span class="type">Liaoliao</span>,<span class="type">Ykk</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><h1 id="定义一个枚举变量"><a href="#定义一个枚举变量" class="headerlink" title="定义一个枚举变量"></a>定义一个枚举变量</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> myName = <span class="type">Nameset</span>.<span class="type">Ykk</span></div><div class="line">或</div><div class="line">myName  = .<span class="type">Ykk</span></div></pre></td></tr></table></figure><h1 id="Associated-Value"><a href="#Associated-Value" class="headerlink" title="Associated Value"></a>Associated Value</h1><blockquote><p>用来给每一个枚举成员再定义一个补充值</p><p>品的条形码和二维码。条形码是由一串数字组成的，这个数字分为了4个部分。而二维码其实是用一串很长的字符来编码的。如果要把二位码和条形码封装成为一个枚举类型，为了更好地区别二者，我们可以加上associated value，定义如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Barcode</span> </span>&#123;  </div><div class="line">    <span class="keyword">case</span> <span class="type">UPCA</span>(<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>) <span class="comment">//条形码  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">QRCode</span>(<span class="type">String</span>)           <span class="comment">//二维码  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>定义Barcode变量，同是添加上associated value</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">var</span> productBarcode = <span class="type">Barcode</span>.<span class="type">UPCA</span>(<span class="number">8</span>, <span class="number">85909</span>, <span class="number">51226</span>, <span class="number">3</span>)  </div><div class="line">productBarcode = .<span class="type">QRCode</span>(<span class="string">"ABCDEFGHIJKLMNOP"</span>)</div></pre></td></tr></table></figure><blockquote><p>注意的一点是，如果你定义了associated value，那么在定义变量的时候就和前面的NameSet不太一样了。看下面的两句代码<br>b1是Barcode类型<br>b2是(String) -&gt; Barcode类型，一个函数类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">var</span> b1 = <span class="type">Barcode</span>.<span class="type">UPCA</span>(<span class="number">8</span>, <span class="number">85909</span>, <span class="number">51226</span>, <span class="number">3</span>)  </div><div class="line">  <span class="keyword">var</span> b2 = <span class="type">Barcode</span>.<span class="type">QRCode</span> </div><div class="line">``` </div><div class="line">&gt;以下戴拿  错误 不能将 <span class="type">Barcode</span>类型是值赋给 (<span class="type">String</span>)-&gt;<span class="type">Barcode</span>.</div><div class="line"></div><div class="line">这里就可以看出了，其实<span class="type">Barcode</span>.<span class="type">QRCode</span>(<span class="type">String</span>:)是一个构造函数，这里再次验证了swift中的枚举是一个类</div><div class="line"></div><div class="line">```swift</div><div class="line"> b2 = <span class="type">Barcode</span>.<span class="type">QRCode</span>(<span class="string">"fef"</span>)  <span class="comment">//error</span></div></pre></td></tr></table></figure><blockquote><p>NameSet里面可以直接用.Tom之类来赋值,估计是定义associated value的时候，相当于把该枚举成员从一个值变为了构造方法。</p></blockquote><h1 id="switch语句来处理枚举类"><a href="#switch语句来处理枚举类" class="headerlink" title="switch语句来处理枚举类"></a>switch语句来处理枚举类</h1><blockquote><p>用swift强大的switch语句来处理枚举类，除了一般的枚举成员之外，对于带associated value 的成员，我们还可以得到associated value</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NameSet</span> </span>&#123;  <span class="comment">//重新定义一个简单的枚举类  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Lucy</span>  </div><div class="line">    <span class="keyword">case</span> otherName(<span class="type">String</span>)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> myName = <span class="type">NameSet</span>.<span class="type">Lucy</span>  </div><div class="line">myName = .otherName(<span class="string">"Alexs"</span>)  </div><div class="line">  </div><div class="line"><span class="keyword">switch</span> myName &#123;  </div><div class="line"><span class="keyword">case</span> .<span class="type">Lucy</span>:  </div><div class="line">    <span class="built_in">print</span>(myName)  </div><div class="line"><span class="keyword">case</span> .otherName(<span class="keyword">var</span> inputName):  <span class="comment">//使用括号解包出associated value  </span></div><div class="line">    <span class="built_in">print</span>(inputName)     <span class="comment">//只有这句会打印出  Alexs  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>修改一下上面的switch如下<br>打印的是otherName</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">switch</span> myName &#123;  </div><div class="line"><span class="keyword">case</span> .<span class="type">Lucy</span>:  </div><div class="line">    <span class="built_in">print</span>(myName)  </div><div class="line"><span class="keyword">case</span> .otherName:  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"otherName"</span>)  </div><div class="line"><span class="keyword">case</span> .otherName(<span class="keyword">var</span> inputName):  </div><div class="line">    <span class="built_in">print</span>(inputName)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//打印的是otherName</span></div></pre></td></tr></table></figure><blockquote><p>里可以看出，switch里面的.otherName和声明枚举变量时候的不同，这里已经是值NameSet的值了。而且上面的Switch也会有警告说最后一个case永远不能执行。括号只是用来解包出associated value，而不是构造方法<br>为了验证这一点，再改改上面代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> myName = <span class="type">NameSet</span>.<span class="type">Lucy</span>  </div><div class="line"><span class="keyword">switch</span> myName &#123;  </div><div class="line"><span class="keyword">case</span> .<span class="type">Lucy</span>(<span class="keyword">let</span> name):  </div><div class="line">    <span class="built_in">print</span>(name)  </div><div class="line"><span class="keyword">case</span> .otherName:  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"otherName"</span>)  </div><div class="line"><span class="keyword">case</span> .otherName(<span class="keyword">var</span> inputName):  </div><div class="line">    <span class="built_in">print</span>(inputName)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//打印</span></div><div class="line">你会发现这里打印了 ()，因为解包<span class="type">Lucy</span>没有得到值</div></pre></td></tr></table></figure><blockquote><p>switch语句，之前说过只有穷尽枚举的时候才不需要default选项。上面的例子中因为把NameSet里面所有可能都枚举了，所以不需要default选项</p></blockquote><h1 id="Raw-Value"><a href="#Raw-Value" class="headerlink" title="Raw Value"></a>Raw Value</h1><blockquote><p>这个就是对每一项枚举成员绑定一个值，好比是C里面的枚举成员都是一个整形<br>如果需要Raw Value，必须在声明枚举类的时候加上raw value 的类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">ASCIIControlCharacter</span>: <span class="title">Character</span> </span>&#123;  </div><div class="line">    <span class="keyword">case</span> <span class="type">Tab</span> = <span class="string">"\t"</span>  </div><div class="line">    <span class="keyword">case</span> <span class="type">LineFeed</span> = <span class="string">"\n"</span>  </div><div class="line">    <span class="keyword">case</span> <span class="type">CarriageReturn</span> = <span class="string">"\r"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>和C有默认的raw value一样，swift的枚举类也有默认的raw value<br>但是不是任何类型的raw value 都有默认值<br>假如你raw value的类型是Character，那么就不存在默认raw value，每个枚举成员的默认值都必须由你自己定义<br>如果类型是Int，那么默认值第一个是0，后面的一项都前一项加1.看下面例子就明白了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">NameSet</span>: <span class="title">Int</span></span>&#123;  </div><div class="line">    <span class="keyword">case</span> <span class="type">Lucy</span>      <span class="comment">//0  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Tom</span> = <span class="number">3</span>   <span class="comment">//3  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Kate</span>      <span class="comment">//4  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Angle</span> = <span class="number">66</span>  <span class="comment">//66  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Alex</span>      <span class="comment">//67  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果类型是String，那么默认值就是你的枚举成员的名字</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NameSet</span>: <span class="title">String</span></span>&#123;  </div><div class="line">    <span class="keyword">case</span> <span class="type">Lucy</span>       <span class="comment">//Lucy  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Tom</span> = <span class="string">"T"</span>  <span class="comment">//T  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Kate</span>       <span class="comment">//Kate  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果有raw value，就可以用raw value来定义枚举变量 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">    <span class="keyword">var</span> myName = <span class="type">NameSet</span>(rawValue: <span class="string">"Lucy"</span>)   <span class="comment">//注意这里返回的是一个可选类型，因为这个构造方法是一个可失败的构造方法。具体看后面的类构造的文章。  </span></div><div class="line"><span class="built_in">print</span>(myName!.rawValue)      <span class="comment">//这里我就没用if做判断了，直接强制解包</span></div></pre></td></tr></table></figure><blockquote><p>递归enum<br>就是在enum的枚举成员的associated value声明为本枚举类,然后使用递归函数。<br>在声明associated value为自己枚举类的时候，需要加上indirect关键字。这个关键字可以加在每个case的前面，也可以加在enum的前面。后一种方法对里面所有的case都起效。但是并不要求所有case都有本枚举类作为associated value<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;  <span class="comment">//使用第二种indirect。定义了一个数学表达式。  </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Number</span>(<span class="type">Int</span>)  </div><div class="line">    <span class="keyword">case</span> <span class="type">Addition</span>(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)  </div><div class="line">    <span class="keyword">case</span> <span class="type">Multiplication</span>(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">evaluate</span><span class="params">(expression: ArithmeticExpression)</span></span> -&gt; <span class="type">Int</span> &#123;   <span class="comment">//这个函数运算表达式  </span></div><div class="line">    <span class="keyword">switch</span> expression &#123;  </div><div class="line">    <span class="keyword">case</span> .<span class="type">Number</span>(<span class="keyword">let</span> value):  </div><div class="line">        <span class="keyword">return</span> value  </div><div class="line">    <span class="keyword">case</span> .<span class="type">Addition</span>(<span class="keyword">let</span> <span class="keyword">left</span>, <span class="keyword">let</span> <span class="keyword">right</span>):  </div><div class="line">        <span class="keyword">return</span> evaluate(<span class="keyword">left</span>) + evaluate(<span class="keyword">right</span>)  </div><div class="line">    <span class="keyword">case</span> .<span class="type">Multiplication</span>(<span class="keyword">let</span> <span class="keyword">left</span>, <span class="keyword">let</span> <span class="keyword">right</span>):  </div><div class="line">        <span class="keyword">return</span> evaluate(<span class="keyword">left</span>) * evaluate(<span class="keyword">right</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line"><span class="comment">// evaluate (5 + 4) * 2  </span></div><div class="line"><span class="keyword">let</span> five = <span class="type">ArithmeticExpression</span>.<span class="type">Number</span>(<span class="number">5</span>)  </div><div class="line"><span class="keyword">let</span> four = <span class="type">ArithmeticExpression</span>.<span class="type">Number</span>(<span class="number">4</span>)  </div><div class="line"><span class="keyword">let</span> sum = <span class="type">ArithmeticExpression</span>.<span class="type">Addition</span>(five, four)  </div><div class="line"><span class="keyword">let</span> product = <span class="type">ArithmeticExpression</span>.<span class="type">Multiplication</span>(sum, <span class="type">ArithmeticExpression</span>.<span class="type">Number</span>(<span class="number">2</span>))  </div><div class="line"><span class="built_in">print</span>(evaluate(product))  </div><div class="line"><span class="comment">// prints "18"</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Closures闭包</title>
      <link href="/2017/11/27/Swift/Grammar/Closures%E9%97%AD%E5%8C%85/"/>
      <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>闭包可以看做是匿名的函数</p><h2 id="回想一下函数作为参数的情况"><a href="#回想一下函数作为参数的情况" class="headerlink" title="回想一下函数作为参数的情况"></a>回想一下函数作为参数的情况</h2><p>定义一个函数，它最后的参数是一个函数类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMath</span><span class="params">(first: Int, second: Int, mathFunc: <span class="params">(Int, Int)</span></span></span> -&gt; <span class="type">Int</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"mathFunc ="</span>,mathFunc(first,second))</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>定义一个函数，它有两个整形参数，并有一个整形返回值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(first: Int, <span class="number">_</span> second: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> first + second</div></pre></td></tr></table></figure><blockquote><p>调用第一个函数，将第二个函数作为参数传入</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">doMath(<span class="number">1</span>, second: <span class="number">3</span>, mathFunc: add)</div></pre></td></tr></table></figure><blockquote><p>打印</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mathFunc = 4</div></pre></td></tr></table></figure><blockquote><p>如果我们想用doMath实现两个数相减的方法，那么必须再写定义一个sub函数，然后将其作为参数传入。这样在功能多了之后会显得很麻烦，一堆函数，而所以有了闭包这个概念</p></blockquote><h2 id="闭包的语法"><a href="#闭包的语法" class="headerlink" title="闭包的语法"></a>闭包的语法</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">&#123; (参数列表) -&gt; 返回类型 <span class="keyword">in</span> </div><div class="line"></div><div class="line">      <span class="comment">//闭包体</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>有了闭包，我们可以将上面的代码改为</p><p>定义一个函数，它最后的参数是一个函数类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMath</span><span class="params">(f:Int,s:Int,mathFunc:<span class="params">(Int,Int)</span></span></span>-&gt;)&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"mathFunc = "</span>,mathunc(first,second))</div><div class="line">    &#125;</div></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">doMath(<span class="number">1</span>, second: <span class="number">3</span>, mathFunc: &#123;(f: <span class="type">Int</span>, s: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> f + s</div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>还是很麻烦是吧？ 别忘了 <strong>Swift有类型推断功能</strong>，所以我们可以继续简化上面的闭包部分代码 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">doMath(<span class="number">1</span>, second: <span class="number">3</span>, mathFunc: &#123;f, s <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> f + s</div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>对应只有一行代码的闭包，return关键字还可以省略</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">doMath(<span class="number">1</span>, second: <span class="number">3</span>, mathFunc: &#123;f, s <span class="keyword">in</span> f + s &#125;)</div></pre></td></tr></table></figure><blockquote><p>此外，闭包对参数提供了默认名字，依次为 $0,$1,$2….所以上面的闭包仍可以简化</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">doMath(<span class="number">1</span>, second: <span class="number">3</span>, mathFunc: &#123;$<span class="number">0</span> + $<span class="number">1</span> &#125;)</div></pre></td></tr></table></figure><blockquote><p>对于闭包在参数列表最后一项的情况，可以将闭包写到小括号外部，并且可以省略掉外部参数名</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> doMath(<span class="number">1</span>, second: <span class="number">3</span>)&#123;</div><div class="line">    <span class="keyword">var</span> f = $<span class="number">0</span> + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> f + $<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Autoclosures"><a href="#Autoclosures" class="headerlink" title="Autoclosures"></a>Autoclosures</h1><blockquote><p>姑且叫自动打包吧。用大括号括起来就好，编译器自动判断这个大括号里面的是什么返回类型。但是有时候不准确，需要自己写。下面是这个概念的解释，其实也是一种定义闭包变量的方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> t = &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(t())</div></pre></td></tr></table></figure><blockquote><p>定义了一个Void-&gt;Void类型的闭包。因为没有参数，所以可以省略参数列表和in关键字。如果有参数的话，就不能省略in关键字。 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> b: <span class="type">Void</span>-&gt;<span class="type">Int</span> = &#123;  <span class="comment">//定义了一个类型为 Void-&gt;Int的闭包</span></div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span></div><div class="line">    i++</div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line">    <span class="keyword">return</span> i</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>因为闭包其实就是函数，调用这个闭包就和调用函数一样。但是有区别的就是闭包都是没有外部外部参数名，调用的时候不要把内部参数名但做外部参数名使用。</p><p>有时候函数需要传递一个闭包的时候，可以在调用的时候使用大括号将一段代码生成为闭包</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> b: <span class="type">Void</span>-&gt;<span class="type">Int</span> = &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> i</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doClosures</span><span class="params">(<span class="built_in">c</span>: Void-&gt;Void)</span></span> &#123;</div><div class="line">    <span class="built_in">c</span>()</div><div class="line">&#125;</div><div class="line">doClosures(&#123;b()&#125;)  <span class="comment">//虽然b是一个Void-&gt;Int的闭包，但是其调用再封装之后变为了Void-&gt;Void的闭包</span></div><div class="line">doClosures(&#123;    </div><div class="line">    <span class="keyword">var</span> i = <span class="number">3</span></div><div class="line">    i++</div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>此外，可以在函数参数列表里面使用@autoclosure关键字，这样就不用使用大括号封装了。但是对于多句的代码情况不行（上面的第二种），有时候自动封装也会出错，比如用上面的第一种情况，它把b()看做了Int，然后报错。需要将返回类型重新定义一下 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> b: <span class="type">Void</span>-&gt;<span class="type">Void</span> = &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span></div><div class="line">    i++</div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line"><span class="comment">//    return i</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doClosures</span><span class="params">(@autoclosure <span class="built_in">c</span>: Void-&gt;Void)</span></span> &#123;   <span class="comment">//或者不改b的类型，将这里的c的类型改为 Void-&gt;Int也可以</span></div><div class="line">    <span class="built_in">c</span>()</div><div class="line">&#125;</div><div class="line">doClosures(b())</div></pre></td></tr></table></figure><blockquote><p>如果想要自动封装的闭包可以在doClosures函数的作用域以外使用，那么加上escaping关键字。这个关键字只能用在@autoclosure后面</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> b: <span class="type">Void</span>-&gt;<span class="type">Void</span> = &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span></div><div class="line">    i++</div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> t: (<span class="type">Void</span>-&gt;<span class="type">Void</span>)?</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doClosures</span><span class="params">(@autoclosure<span class="params">(escaping)</span></span></span> <span class="built_in">c</span>: <span class="type">Void</span>-&gt;<span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">c</span>()</div><div class="line">    t = <span class="built_in">c</span>  <span class="comment">//将自动封装的c赋值给外部变量t</span></div><div class="line">&#125;</div><div class="line">doClosures(b())</div><div class="line">t!()</div></pre></td></tr></table></figure><blockquote><p>闭包的值捕获<br>在生成一个闭包的时候，闭包会将它用到的参数和变量都保存一份。提醒一下，其实闭包就是函数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">giveMeFunc2</span><span class="params">(step: Int)</span></span> -&gt; (<span class="type">Void</span> -&gt; <span class="type">Int</span>)? &#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; total += step; <span class="keyword">return</span> total &#125;</div><div class="line">    <span class="keyword">return</span> add</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上面的函数里面生成了嵌套函数，通过输入不同的符号，返回不同的函数。这里有两个变量需要注意，一个是total，一个是step。当生成嵌套函数的时候，嵌套函数会将这两个变量都copy一份，然后保存起来。下面是对上面代码的一个使用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">上面的函数里面生成了嵌套函数，通过输入不同的符号，返回不同的函数。这里有两个变量需要注意，一个是total，一个是step。当生成嵌套函数的时候，嵌套函数会将这两个变量都copy一份，然后保存起来。下面是对上面代码的一个使用</div></pre></td></tr></table></figure><blockquote><p>可以看到，f1和f2的total和step是不会相互干涉的。</p></blockquote><p>再来看看这个值捕获的时间，看下面代码。这里可以看到，值捕获是发生在返回之前。这个和OC的block是一样的</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">giveMeFunc2</span><span class="params">(step: Int)</span></span> -&gt; (<span class="type">Void</span> -&gt; <span class="type">Int</span>)? &#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; total += step; <span class="keyword">return</span> total &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"before +100"</span>,add())  <span class="comment">// total = 0</span></div><div class="line">    total += <span class="number">100</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"after +100"</span>,add())  <span class="comment">// total = 100</span></div><div class="line">    <span class="keyword">return</span> add</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = giveMeFunc2(<span class="number">1</span>)! <span class="comment">//得到一个函数，它会将传入的参数累加，并且每次调用都会加上一次step</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"f1="</span>,f1())  <span class="comment">// 103</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"f1="</span>,f1())  <span class="comment">// 104</span></div></pre></td></tr></table></figure><blockquote><p>看到这里，可能大家会以为这个值捕获和OC的block差不多，但是其实差远了。这个值捕获的时间很有区别。这里明显的一点就是我们在函数内部改变外部变量total的时候，没有加任何修饰符，OC里面必须加上__block，要么就是对全局变量进行修改。</p><p>我们先看一段OC代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">int t =<span class="number">1</span>;</div><div class="line">int(^b)() = ^() &#123; <span class="keyword">return</span> t; &#125;;</div><div class="line">t = <span class="number">3</span>;</div><div class="line"><span class="type">NSLog</span>(@<span class="string">"%d"</span>,b()); <span class="comment">//输出1，理由就不多说了。</span></div><div class="line"></div><div class="line">假如我们把t改为__block。那么将会输出<span class="number">3</span>。改为<span class="keyword">static</span>同样的效果。</div><div class="line"></div><div class="line">__block int t =<span class="number">1</span>;</div><div class="line">int(^b)() = ^() &#123;  <span class="keyword">return</span> t;   &#125;;</div><div class="line">t = <span class="number">3</span>;</div><div class="line"><span class="type">NSLog</span>(@<span class="string">"%d"</span>,b());  <span class="comment">//3</span></div></pre></td></tr></table></figure><blockquote><p>来看OC和swift中两段很类似的代码 </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//OC</div><div class="line">typedef int(^BLOCK)(void);</div><div class="line">BLOCK OCFunc (int step) &#123;</div><div class="line">    __block int total = 0;</div><div class="line">    BLOCK b = ^() &#123; total +=step; return total; &#125;;</div><div class="line">    step = 100;</div><div class="line">    NSLog(@&quot;before +100,%d&quot;,b());  //1</div><div class="line">    total +=100;</div><div class="line">    NSLog(@&quot;after +100,%d&quot;,b());   //102</div><div class="line">    return b;</div><div class="line">&#125;</div><div class="line">//在main方法里面调用</div><div class="line">BLOCK b = OCFunc(1);</div><div class="line">NSLog(@&quot;%d&quot;,b());  // 103</div><div class="line">NSLog(@&quot;%d&quot;,b());  // 104</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swiftFunc</span><span class="params">(<span class="keyword">var</span> step: Int)</span></span> -&gt; <span class="type">Void</span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> b: <span class="type">Void</span> -&gt; <span class="type">Int</span> = &#123; <span class="type">Void</span> <span class="keyword">in</span> total += step; <span class="keyword">return</span> total &#125;</div><div class="line">    step = <span class="number">100</span>;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"before +100,"</span>,b())  <span class="comment">// 100</span></div><div class="line">    total+=<span class="number">100</span>                 <span class="comment">// total = 200</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"after +100,"</span>,b())   <span class="comment">//300</span></div><div class="line">    <span class="keyword">return</span> b</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> d = swiftFunc(<span class="number">1</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"d="</span>,d())   <span class="comment">//400</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"d="</span>,d())   <span class="comment">//500</span></div></pre></td></tr></table></figure><blockquote><p>这里可以看到，OC中的step在block定义的时候就绑定了，后面在更改step的值也不影响block。但是在swift中，step仍然是可以改变的，直到step离开作用域后，闭包才将其捕获。</p></blockquote><p>如果要OC中产生同样的效果，只需定义一个<strong>block变量，如下。可以这么看，Swift中的变量默认都是</strong>block的</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">//OC</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>(^BLOCK)(<span class="keyword">void</span>);</div><div class="line">BLOCK OCFunc (<span class="keyword">int</span> step) &#123;</div><div class="line">    __block <span class="keyword">int</span> total = <span class="number">0</span>;</div><div class="line">    __block <span class="keyword">int</span> step2 = step;</div><div class="line">    BLOCK b = ^() &#123; total +=step2; <span class="keyword">return</span> total; &#125;;</div><div class="line">    step2 = <span class="number">100</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"before +100,%d"</span>,b());  <span class="comment">//100</span></div><div class="line">    total +=<span class="number">100</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"after +100,%d"</span>,b());   <span class="comment">//300</span></div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="comment">//在main方法里面调用</span></div><div class="line">BLOCK b = OCFunc(<span class="number">1</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,b());  <span class="comment">//400</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,b());  <span class="comment">//500</span></div></pre></td></tr></table></figure><blockquote><p>这个值捕获和OC的block一样，也会产生循环引用问题。OC里面是使用__weak来解决，这里差不多，它可以在参数列表前面加上捕获列表，并且对捕获类别的参数进行权限控制，附上一个官方例子，以后写ARC的时候详细讲</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="built_in">lazy</span> <span class="keyword">var</span> someClosure: (<span class="type">Int</span>, <span class="type">String</span>) -&gt; <span class="type">String</span> = &#123;</div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>, <span class="keyword">weak</span> delegate = <span class="keyword">self</span>.delegate!] (index: <span class="type">Int</span>, stringToProcess: <span class="type">String</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// closure body goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-流程控制语句</title>
      <link href="/2017/11/24/Swift/Grammar/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <content type="html"><![CDATA[<h1 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h1><blockquote><p> if语句<br>if语句和其他语言中的使用是一样的，只是语法稍有不同<br>首先,是不用括号<br>其次,是即使是if后面只有一条语句，也必须加上大括号</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</div><div class="line"><span class="keyword">if</span> array1.<span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"array1 is not empty"</span>)  <span class="comment">//这句会打印出来</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"array1 is empty"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>f语句可以用来检测可选类型是否为空</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str : <span class="type">String</span>?</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> s = str &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"str is not nil"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"str is nil"</span>) <span class="comment">//这句会打印</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h1><blockquote><p>已经移除</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">3</span>; index++ &#123; <span class="comment">//已经移除</span></div><div class="line">    <span class="built_in">print</span>(index)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h1><blockquote><p>尤其是用来遍历集合</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;</div><div class="line">    <span class="built_in">print</span>(index)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上面的只能是每次加1，但是现在可能有需求每次增加的不是1，所以现在有了这个</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> tickMark <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="number">60</span>, by: <span class="number">5</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(tickMark)</div><div class="line">    <span class="comment">// 打印 (0, 5, 10, 15 ... 45, 50, 55)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="while语句和-repeat-while语句"><a href="#while语句和-repeat-while语句" class="headerlink" title="while语句和 repeat-while语句"></a>while语句和 repeat-while语句</h1><blockquote><p>把括号去掉就行了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> index = <span class="number">3</span></div><div class="line"><span class="keyword">while</span> index &gt; <span class="number">0</span> &#123;</div><div class="line">    index--</div><div class="line">    <span class="built_in">print</span>(index)</div><div class="line">&#125;</div><div class="line"></div><div class="line">index = <span class="number">3</span></div><div class="line"><span class="keyword">repeat</span> &#123;</div><div class="line">    index--</div><div class="line">    <span class="built_in">print</span>(index)</div><div class="line">&#125; <span class="keyword">while</span> index &gt; <span class="number">0</span></div></pre></td></tr></table></figure><h1 id="Break和continue这个用法和C差不多"><a href="#Break和continue这个用法和C差不多" class="headerlink" title="Break和continue这个用法和C差不多"></a>Break和continue这个用法和C差不多</h1><h1 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h1><blockquote><p>Swift里面的Switch语句不仅可以判断整形，而且还可以判断各种类型。注意的是执行了一个case后是不会继续往下面执行的，也就是不用添加break语句。相反如果你想要继续往下执行，你必须在这个case最后加上Fallthrough。另外就是default，对于不是枚举类型的变量，defalut必须加上。枚举类型的变量在完全枚举的时候才可以省略default</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"a"</span></div><div class="line"><span class="keyword">switch</span> str &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"a"</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"a"</span>)  <span class="comment">//这句会打印</span></div><div class="line">    <span class="keyword">fallthrough</span></div><div class="line">    <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"b"</span>)  <span class="comment">//这句会打印</span></div><div class="line">    <span class="keyword">case</span> <span class="string">"c"</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"c"</span>)  <span class="comment">//不会打印</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"nil"</span>)  <span class="comment">//不会打印</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>switch里面一个case可以对应多个选项，每个选项之间用逗号分开。这个用法是用来实现c里面的某个选项里面没有执行代码的情况。Swift不允许某个选项里面没有可执行的代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"s"</span></div><div class="line"><span class="keyword">switch</span> str &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"a"</span>,<span class="string">"s"</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"a"</span>)  <span class="comment">//只打印这句</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"nil"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>case里面也可以是一个范围，在每个case之间的范围有重叠的话，只会匹配第一个</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">2</span></div><div class="line"><span class="keyword">switch</span> i &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>...<span class="number">10</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1-10"</span>)  <span class="comment">//只打印这句</span></div><div class="line"><span class="keyword">case</span> <span class="number">9</span>..&lt;<span class="number">20</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"10-20"</span>)  <span class="comment">//因为匹配了第一句，所以这句不会再匹配</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>对Tuple 的匹配<br>你可以匹配Tuple的两个值，也可以只匹配一个值，还可以匹配范围</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//下面case的条件都是可以匹配的，把前面的case注释掉的话就会匹配下一个case。</span></div><div class="line"><span class="keyword">var</span> tuple = (<span class="number">2</span>,<span class="number">1</span>)</div><div class="line"><span class="keyword">switch</span> tuple &#123;</div><div class="line"><span class="keyword">case</span> (<span class="number">2</span>,<span class="number">1</span>):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"(2,1)"</span>)  <span class="comment">//因为自动添加break的机制，所以不会往下走</span></div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x,<span class="number">1</span>): <span class="comment">//可以用变量来自由化其中一个值，只需要另外一个值匹配了，就会匹配这个。如果你不关注x的值，你也可以把x换为_</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"x = \(x)"</span>)</div><div class="line"><span class="keyword">case</span> (-<span class="number">1</span>...<span class="number">3</span>,<span class="number">0</span>...<span class="number">4</span>):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"(-1~3,0~4)"</span>)</div><div class="line"><span class="keyword">default</span> :</div><div class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Where语句在switch中"><a href="#Where语句在switch中" class="headerlink" title="Where语句在switch中"></a>Where语句在switch中</h1><blockquote><p>where可以用来进一步对case添加约束</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tuple = (<span class="number">2</span>,<span class="number">1</span>)</div><div class="line"><span class="keyword">switch</span> tuple &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">var</span> (x,y) <span class="keyword">where</span> x == y:  <span class="comment">//这里用var 和 let 区别在于能不能在case里面修改解包的x，y值。但是即使修改也不会影响原来的tuple</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"x == y"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (<span class="number">_</span>,x) <span class="keyword">where</span> x == <span class="number">4</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"x == 4"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">var</span> (x,y) <span class="keyword">where</span> x != y:  <span class="comment">//匹配了这个case</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"x != y"</span>)          <span class="comment">//打印 x != y</span></div><div class="line">    x = <span class="number">1</span></div><div class="line">    <span class="built_in">print</span>(x)                <span class="comment">//打印 1</span></div><div class="line"><span class="keyword">default</span> :</div><div class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(tuple)  <span class="comment">//打印 （2，1）</span></div></pre></td></tr></table></figure><h1 id="Labeled-Statements"><a href="#Labeled-Statements" class="headerlink" title="Labeled Statements"></a>Labeled Statements</h1><blockquote><p>这个labeled statements就像goto语句，但是跳转比较有限，只能用于循环里面。虽然switch也可以加上去，但是并没有用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tuple = (<span class="number">2</span>,<span class="number">1</span>)</div><div class="line">second:<span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...  &#123;   </div><div class="line">    frist : <span class="keyword">switch</span> tuple &#123;    <span class="comment">//这个first并没有什么用</span></div><div class="line">    <span class="keyword">case</span> <span class="keyword">var</span> (x,y) <span class="keyword">where</span> x == y:  <span class="comment">//这里用var 和 let 区别在于能不能在case里面修改解包的x，y值。但是即使修改也不会影响原来的tuple</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"x == y"</span>)</div><div class="line">        <span class="keyword">break</span> second</div><div class="line">    <span class="keyword">case</span> <span class="keyword">var</span> (x,y) <span class="keyword">where</span> x != y:  <span class="comment">//匹配了这个case</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"x != y"</span>)          <span class="comment">//打印 x != y</span></div><div class="line">        tuple = (<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">        <span class="keyword">continue</span> second</div><div class="line">    <span class="keyword">default</span> :</div><div class="line">        <span class="built_in">print</span>(<span class="string">"other"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//上面的for循环依次打印了 x != y    x == y</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//注意下面的second，虽然前面也定义了，但是不会冲突。循环内的跳转只能针对循环</span></div><div class="line">second:<span class="keyword">repeat</span> &#123;      <span class="comment">//对于while也是可以用。</span></div><div class="line">    frist : <span class="keyword">switch</span> tuple &#123;        <span class="comment">//这个first并没有什么用</span></div><div class="line">    <span class="keyword">case</span> <span class="keyword">var</span> (x,y) <span class="keyword">where</span> x == y:  <span class="comment">//这里用var 和 let 区别在于能不能在case里面修改解包的x，y值。但是即使修改也不会影响原来的tuple</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"x == y"</span>)</div><div class="line">        <span class="keyword">break</span> second</div><div class="line">    <span class="keyword">case</span> <span class="keyword">var</span> (x,y) <span class="keyword">where</span> x != y:  <span class="comment">//匹配了这个case</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"x != y"</span>)          <span class="comment">//打印 x != y</span></div><div class="line">        tuple = (<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">        <span class="keyword">continue</span> second</div><div class="line">    <span class="keyword">default</span> :</div><div class="line">        <span class="built_in">print</span>(<span class="string">"other"</span>)</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">while</span> <span class="literal">true</span></div><div class="line"><span class="comment">//while循环只打印了  x == y，因为Tuple已经被修改为(1,1)</span></div></pre></td></tr></table></figure><h1 id="Assertion和Precondition"><a href="#Assertion和Precondition" class="headerlink" title="Assertion和Precondition"></a>Assertion和Precondition</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">assert</span>(<span class="number">_</span>:<span class="number">_</span>:file:line:)</div></pre></td></tr></table></figure><blockquote><p>判断一个情况是否为true，不为true直接停止程序</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">assertionFailure</span>(<span class="number">_</span>:file:line:)</div></pre></td></tr></table></figure><blockquote><p>Swift现在多了一个Preconditions，区别文档上说的是开发时候用Assertions，生产用Preconditions。(Assertions help you find mistakes and incorrect assumptions during development, and preconditions help you detect issues in production. )</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">precondition</span>(<span class="number">_</span>:<span class="number">_</span>:file:line:) </div><div class="line"><span class="built_in">preconditionFailure</span>(<span class="number">_</span>:file:line:)</div></pre></td></tr></table></figure><blockquote><p>文档上有两段话：</p><p>If you compile in unchecked mode (-Ounchecked), preconditions are not checked. The compiler assumes that preconditions are always true, and it optimizes your code accordingly. However, the fatalError(<em>:file:line:) function always halts execution, regardless of optimization settings.<br>You can use the fatalError(</em>:file:line:) function during prototyping and early development to create stubs for functionality that hasn’t been implemented yet, by writing fatalError(“Unimplemented”) as the stub implementation. Because fatal errors are never optimized out, unlike assertions or preconditions, you can be sure that execution always halts if it encounters a stub implementation.<br>但是没找到这个-Ounchecked模式，到时有一个选项是disable_safty_checks。<br>这个选项的关闭和Swift_OPTIMIZATION_LEVEL的模式有关系。如果你选择的是 -Onone，那么不管disable_safty_checks的值，都会检测precondition和assert。但是如果开启了优化，那么assert就再不检测，而precondition就会根据是否关闭安全检测来执行</p></blockquote><h1 id="guard语句"><a href="#guard语句" class="headerlink" title="guard语句"></a>guard语句</h1><blockquote><p>这个和assertions差不多，都是用来做判断的，不过这个要自己加上处理。用来在条件不满足的情况下跳出方法或循环</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</div><div class="line">    <span class="keyword">guard</span> i &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"i &lt;= 1"</span>)</div><div class="line">        <span class="keyword">break</span>     <span class="comment">//else里面必须加上break或return</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="available"><a href="#available" class="headerlink" title="available"></a>available</h1><blockquote><p>用来判断是否可以使用某个版本API</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> #available (iOS <span class="number">8</span>, <span class="type">OSX</span> <span class="number">10.10</span>, *) &#123;  <span class="comment">//括号里面表示的是最低的版本。这个*必须有，代表其他平台</span></div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-集合类型</title>
      <link href="/2017/11/24/Swift/Grammar/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
      <content type="html"><![CDATA[<h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><blockquote><p>集合类分为array、dictionary、set<br>每个集合都有一个isEmpty属性来判断这个集合是否为空</p></blockquote><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><blockquote><p>创建array的四种方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]  <span class="comment">//包含 a b c 三个字符串</span></div><div class="line"><span class="keyword">var</span> array2 = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()  <span class="comment">//空array，这里一定要指明元素类型</span></div><div class="line"><span class="keyword">var</span> array3 = [<span class="type">String</span>]()    <span class="comment">//空array</span></div><div class="line"><span class="keyword">var</span> array4 = <span class="type">Array</span>(repeating:<span class="number">2.4</span>, <span class="built_in">count</span>:<span class="number">3</span>) <span class="comment">//包含3个double变量，值都为1.3</span></div><div class="line"><span class="keyword">var</span> array5 = [<span class="type">Double</span>](repeating:<span class="number">2.4</span>, <span class="built_in">count</span>:<span class="number">3</span>) <span class="comment">//包含3个double变量，值都为1.3</span></div></pre></td></tr></table></figure><blockquote><p>获取array的某个元素,直接用下标</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> value = array1[<span class="number">9</span>]</div></pre></td></tr></table></figure><blockquote><p>清空数组</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">array1.removeAll()</div><div class="line"></div><div class="line">array1 = [];</div></pre></td></tr></table></figure><blockquote><p>清空某个元素</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">remove(at:)</div></pre></td></tr></table></figure><blockquote><p>清空某个范围的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">array.removeSubrange(1..&lt;arr.endIndex)// 这里会移除从1开始，但是不包括end的元素，但是endIndex是指向最后一个元素的后一个元素的，所以会从index为1的元素开始，删除后面全部。</div><div class="line">array[1...2] = [] //这里将范围1-2的元素都清空了,注意一点，如果数组越界的话，会产生运行时错误</div></pre></td></tr></table></figure><blockquote><p>向array添加元素</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//使用append()方法</span></div><div class="line">array1.append(<span class="string">"A"</span>)  <span class="comment">//向array1的末尾添加一个 A，现在只有一个 A 元素</span></div><div class="line"><span class="comment">//使用运算符号</span></div><div class="line">array3 += [<span class="string">"d"</span>,<span class="string">"e"</span>]  <span class="comment">//array3从空数组变为包含 d e 两个字符串</span></div><div class="line"><span class="keyword">var</span> array5 = array1 + array3 + [<span class="string">"last"</span>]  <span class="comment">//array5包含 A d e last, 4个元素</span></div><div class="line"><span class="comment">//使用insert方法</span></div><div class="line">array5.insert(<span class="string">"first"</span>, at: <span class="number">0</span>)   <span class="comment">//array5包含 first A d e last, 5个元素</span></div></pre></td></tr></table></figure><blockquote><p>改变array元素</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">array5[<span class="number">0</span>] = <span class="string">"newBe"</span></div><div class="line">array5[<span class="number">1</span>...<span class="number">3</span>] = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</div></pre></td></tr></table></figure><blockquote><p>遍历数组<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> array5 &#123;</div><div class="line">    <span class="built_in">print</span>(item)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (index,item) <span class="keyword">in</span> array5.enumerated() &#123;</div><div class="line">    <span class="built_in">print</span>(index,item)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><blockquote><p>Set 创建<br>set里面的元素都必须实现hashable。因为区分set里面的元素的根本就是判断两个元素的hash值是否相等。swift基本类型都实现了hashable</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> emptySet = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;() <span class="comment">//建立一个空set，必须指明内容的类型</span></div><div class="line"><span class="keyword">var</span> nameSet : <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"Tom"</span>,<span class="string">"Lucy"</span>,<span class="string">"Aaron"</span>]  <span class="comment">//使用初始数据建立set</span></div></pre></td></tr></table></figure><blockquote><p>移除Set </p></blockquote><ul><li>removeAll()，这个方法还可以传一个boolean参数，表示是否保持空间，传ture的话表示保持</li><li>移除一个元素有两种办法</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> index = nameSet.index(of:<span class="string">"Tom"</span>)</div><div class="line">nameSet.remove(at:index!) <span class="comment">//因为indexOf返回的是可选类型，所以这里要解包</span></div><div class="line"></div><div class="line">nameSet.remove(<span class="string">"Tom"</span>) <span class="comment">//这种和上面的是等价的</span></div></pre></td></tr></table></figure><blockquote><p>遍历Set</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameSet.sorted() &#123; <span class="comment">//这里的sorted()可以不用，这里用来排序</span></div><div class="line">    <span class="built_in">print</span>(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>包含某个元素</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="type">Set</span>和<span class="type">Array</span>都有一个<span class="built_in">contains</span>方法来判断</div></pre></td></tr></table></figure><blockquote><p>Set操作<br>包括了求交集，并集，“减集”，“异或集”<br>官方代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> oddDigits: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line"><span class="keyword">let</span> evenDigits: <span class="type">Set</span> = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"><span class="keyword">let</span> singleDigitPrimeNumbers: <span class="type">Set</span> = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</div><div class="line"></div><div class="line">oddDigits.union(evenDigits).<span class="built_in">sort</span>()</div><div class="line"><span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">oddDigits.intersection(evenDigits).<span class="built_in">sort</span>()</div><div class="line"><span class="comment">// []</span></div><div class="line">oddDigits.subtracting(singleDigitPrimeNumbers).<span class="built_in">sort</span>()</div><div class="line"><span class="comment">// [1, 9]</span></div><div class="line">oddDigits.symmetricDifference(singleDigitPrimeNumbers).<span class="built_in">sort</span>()</div><div class="line"><span class="comment">// [1, 2, 9]</span></div></pre></td></tr></table></figure><blockquote><p>Set关系</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">isSubset(of:) 判断一个<span class="keyword">set</span>是否为另外一个<span class="keyword">set</span>的子<span class="keyword">set</span></div><div class="line">isSuperset(of:) 判断一个<span class="keyword">set</span>是否为另外一个<span class="keyword">set</span>的父<span class="keyword">set</span></div><div class="line">isStrictSubset(of:) 和 isStrictSuperset(of:) 意思和上面的一样，只是这两个方法不能存在相等的情况。</div><div class="line">isDisjoint(with:) 判断两个<span class="keyword">set</span>是否没有共同元素，没有的话返回<span class="literal">true</span></div></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><blockquote><p>创建Dictionar</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dict1 : [<span class="type">String</span>:<span class="type">Int</span>] = [<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">var</span> dict = [<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>, <span class="number">3</span>:<span class="string">"d"</span>] <span class="keyword">as</span> [<span class="type">AnyHashable</span> : <span class="type">Any</span>]  <span class="comment">//注意这个没声明类型的，因为key和value里面都有不同的类型，所以需要将二者都强转为AnyHashable，但是如果key（value）类型只有一种的话，那么就会转为那种类型。</span></div><div class="line"><span class="keyword">var</span> dict2 = [<span class="type">Int</span>:<span class="type">String</span>]()</div><div class="line"><span class="keyword">var</span> dict3 = <span class="type">Dictionary</span>&lt;<span class="type">String</span>,<span class="type">Int</span>&gt;()</div></pre></td></tr></table></figure><blockquote><p>添加/修改/删除dictionary<br>dictionary也提供了removeAll，removeAtIndex之类的方法<br>使用和Set是一样的，就不写了。下面是dictionary特有的</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">dict[<span class="number">5</span>] = <span class="string">"f"</span> <span class="comment">//添加一个键值对  5: "f"</span></div><div class="line">dict[<span class="number">5</span>] = <span class="number">5</span>   <span class="comment">//修改key为5的值为5</span></div><div class="line">dict[<span class="number">5</span>] = <span class="literal">nil</span>  <span class="comment">//删除key为5的键值对</span></div><div class="line">dict[<span class="number">6</span>] = <span class="literal">nil</span>  <span class="comment">//对不存在的键值对赋nil不会报错</span></div><div class="line">dict2 = [:]  <span class="comment">//清空所有</span></div></pre></td></tr></table></figure><blockquote><p>新增了一个更改和删除的方法，可以获得更新和删除前的旧值(可选类型)。如果这个值以前不存在，那么返回nil</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> oldValue = airports.updateValue(<span class="string">"Dublin Airport"</span>, forKey: <span class="string">"DUB"</span>) </div><div class="line"><span class="keyword">let</span> removedValue = airports.removeValue(forKey: <span class="string">"DUB"</span>)</div></pre></td></tr></table></figure><blockquote><p>遍历dictionary </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (key,name) <span class="keyword">in</span> dict &#123;</div><div class="line">    <span class="built_in">print</span>(key,name,separator:<span class="string">":"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> keys = dict1.keys.<span class="built_in">sort</span>();</div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys &#123;</div><div class="line">    <span class="built_in">print</span>(key,dict[key]!)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-String-Character</title>
      <link href="/2017/11/24/Swift/Grammar/String-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String-的定义"><a href="#String-的定义" class="headerlink" title="String 的定义"></a>String 的定义</h2><blockquote><p><strong>字符串</strong>是有序的字符集合，或者叫文本<br>String 是字符串类型。单个字，Character是字符类型<br>2个字符串可以用 + 链接<br>通过字符插值可以合成一个长字符串</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>()     <span class="comment">// An empty `String`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字符串创建和空判断"><a href="#字符串创建和空判断" class="headerlink" title="字符串创建和空判断"></a>字符串创建和空判断</h2><blockquote><p>字符串字面量，包含双引号的值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Yue ke kui"</span></div></pre></td></tr></table></figure><blockquote><p>创建空串</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> yue  = <span class="string">""</span></div><div class="line">或</div><div class="line"><span class="keyword">var</span> yue = <span class="type">String</span>()  <span class="comment">//结构体方式创建</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ke = <span class="string">"  "</span></div><div class="line"></div><div class="line"></div><div class="line">yue.isEmpty    <span class="comment">// 判断字符串是否为空</span></div><div class="line">ke.isEmpty   <span class="comment">// 不为空。有空格</span></div></pre></td></tr></table></figure><blockquote><p>使用三个引号来创建一段话的string<br>开始的三个引号的第一行后面的空格都会忽略，但是第二行的空格不会</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> quotation = <span class="string">""</span><span class="string">"</span></div><div class="line"><span class="string">The White Rabbit put on his spectacles.  "</span><span class="type">Where</span> shall <span class="type">I</span> begin,</div><div class="line">please your <span class="type">Majesty</span>?<span class="string">" he asked.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"</span><span class="type">Begin</span> at the beginning,<span class="string">" the King said gravely, "</span>and go on</div><div class="line">till you come to the end; then stop.<span class="string">"</span></div><div class="line"><span class="string">"</span><span class="string">""</span></div></pre></td></tr></table></figure><h2 id="可修改字符串"><a href="#可修改字符串" class="headerlink" title="可修改字符串"></a>可修改字符串</h2><blockquote><p>Swift 3.0 用 var 和 let 来判断字符串是否可以被修改(类似OC可变字符串)<br>let修饰 不可变字符串  不能拼接追加等<br>var修饰 可变字符串<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> variableString = <span class="string">"Hello"</span></div><div class="line">variableString += <span class="string">"Swift 3.0"</span>;</div><div class="line"><span class="built_in">print</span>(variableString);</div><div class="line"><span class="comment">//打印</span></div><div class="line"><span class="type">HelloSwift</span> <span class="number">3.0</span></div></pre></td></tr></table></figure></p></blockquote><h2 id="Character-字符"><a href="#Character-字符" class="headerlink" title="Character 字符"></a>Character 字符</h2><blockquote><p>创建一个Character，必须显式声明类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> c1:<span class="type">Character</span> = <span class="string">"c"</span>  <span class="comment">//注意是 双引号</span></div><div class="line"><span class="keyword">var</span> c2 = <span class="string">"c"</span>           <span class="comment">//c2被认为是String类型</span></div><div class="line"><span class="keyword">var</span> c3 = '<span class="built_in">c</span>'           <span class="comment">//编译错误</span></div><div class="line"></div><div class="line"><span class="comment">// Character可以赋值为Unicode</span></div><div class="line"><span class="keyword">let</span> eAcute: <span class="type">Character</span> = <span class="string">"\u&#123;E9&#125;"</span>      <span class="comment">// é</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 挨个 取 字符</span></div><div class="line"><span class="keyword">let</span> string = <span class="string">"Swift"</span>;</div><div class="line"><span class="keyword">var</span> arrays = string.characters;</div><div class="line"><span class="keyword">for</span> charactor <span class="keyword">in</span> arrays&#123;</div><div class="line">    <span class="built_in">print</span>(charactor);</div><div class="line">&#125;</div><div class="line"><span class="comment">//一次打印 </span></div><div class="line"> <span class="type">S</span>  w  i  f t</div></pre></td></tr></table></figure><h2 id="字符串是值类型"><a href="#字符串是值类型" class="headerlink" title="字符串是值类型"></a>字符串是值类型</h2><blockquote><p>改变String，这个语法和java一样的，不过内存管理层面已经是不同的对象<br>字符串是值类型: 创建了一个新的字符串，那么当其进行常量、变量赋值操作，或在函数/方法中传递时，会进行值拷贝。在实际编译时，Swift 编译器会优化字符串的使用，使实际的复制只发生在绝对必要的情况下，这意味着您将字符串作为值类型的同时可以获得极高的性能</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str:<span class="type">String</span> = <span class="string">"first"</span></div><div class="line"><span class="keyword">var</span> c1:<span class="type">Character</span> = <span class="string">"c"</span>          <span class="comment">//注意是双引号</span></div><div class="line"><span class="keyword">var</span> c2 = <span class="string">"c"</span>                    <span class="comment">//c2被认为是String类型</span></div><div class="line">str += <span class="string">"sceond"</span>                 <span class="comment">//str变为firstsceond,此时的str和之前的str内存地址不同</span></div><div class="line">str += c2                      <span class="comment">//str变为firstc,此时的str和之前的str内存地址不同</span></div><div class="line">str.appendContentsOf(<span class="string">"second"</span>) <span class="comment">// 和使用+=是一样的</span></div><div class="line">str.appendContentsOf(c2)       <span class="comment">//和使用+=是一样的</span></div><div class="line">str.append(c1);                <span class="comment">//添加Character的方法</span></div></pre></td></tr></table></figure><h2 id="遍历String字符"><a href="#遍历String字符" class="headerlink" title="遍历String字符"></a>遍历String字符</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str:<span class="type">String</span> = <span class="string">"first"</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> str.characters &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>)</div><div class="line">&#125;</div><div class="line"> ------ 或</div><div class="line"></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> str.characters.<span class="built_in">indices</span> &#123;</div><div class="line">    <span class="built_in">print</span>(str[index])</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="获取String长度"><a href="#获取String长度" class="headerlink" title="获取String长度"></a>获取String长度</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"dfe"</span></div><div class="line"><span class="built_in">print</span>(s.<span class="built_in">count</span>)  <span class="comment">//3</span></div></pre></td></tr></table></figure><ul><li>swift里面有extended grapheme clusters(An extended grapheme cluster is a sequence of one or more Unicode scalars that (when combined) produce a single human-readable character.) 也就是几个Unicode字符组合成一个人类可以识别的字符。</li><li>当string里面添加了characters后，count不一定会增加。<br>string的count不一定和NSString的length一致。<br>(The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode extended grapheme clusters within the string.)</li></ul><h2 id="运算符-其他方式，赋值"><a href="#运算符-其他方式，赋值" class="headerlink" title="运算符+其他方式，赋值"></a>运算符+其他方式，赋值</h2><p> 符附字符尾部 append</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">// 通过加法运算符（+）相加在一起（或称“连接”）创建一个新的字符串</span></div><div class="line"> <span class="keyword">let</span> string1 = <span class="string">"chen"</span>;</div><div class="line"> <span class="keyword">let</span> string2 = <span class="string">"jian"</span>;</div><div class="line"> <span class="keyword">let</span> string3 =  string1 + string2;</div><div class="line"> <span class="built_in">print</span>(<span class="string">"string3 is  \(string3)"</span>);  <span class="comment">// chen  jian</span></div><div class="line"></div><div class="line"><span class="comment">//通过加法赋值运算符 (+=) 将一个字符串添加到一个已经存在字符串变量上</span></div><div class="line"><span class="keyword">var</span> variablestring = <span class="string">"da shen chen jian"</span>;</div><div class="line">variablestring += string2;</div><div class="line"><span class="built_in">print</span>(<span class="string">"variablestring is \(variablestring)"</span>);<span class="comment">// da shen chen jianjian </span></div><div class="line"></div><div class="line">  <span class="comment">// 用append()方法将一个字符附加到一个字符串变量的尾部</span></div><div class="line">  variablestring.append(<span class="string">" !"</span>);</div><div class="line">  <span class="built_in">print</span>(<span class="string">"variablestring is \(variablestring)"</span>);</div><div class="line">  <span class="comment">// da shen chen jianjian !</span></div></pre></td></tr></table></figure><h2 id="String的Index"><a href="#String的Index" class="headerlink" title="String的Index"></a>String的Index</h2><ul><li>不像java里面的Index直接就是一个数字</li><li>String的Index是在不同的extension中定义的。 </li></ul><h2 id="获得String里面的某个字符的过程"><a href="#获得String里面的某个字符的过程" class="headerlink" title="获得String里面的某个字符的过程"></a>获得String里面的某个字符的过程</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> greeting = <span class="string">"Guten Tag!"</span></div><div class="line">greeting[greeting.startIndex]</div><div class="line"><span class="comment">// G</span></div><div class="line">greeting[greeting.index(before: greeting.endIndex)]</div><div class="line"><span class="comment">// !</span></div><div class="line">greeting[greeting.index(after: greeting.startIndex)]</div><div class="line"><span class="comment">// u</span></div><div class="line"><span class="keyword">let</span> index = greeting.index(greeting.startIndex, offsetBy: <span class="number">7</span>)</div><div class="line">greeting[index]</div><div class="line"><span class="comment">// a</span></div></pre></td></tr></table></figure><h2 id="插入和移除字符"><a href="#插入和移除字符" class="headerlink" title="插入和移除字符"></a>插入和移除字符</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> welcome = <span class="string">"hello"</span></div><div class="line">welcome.insert(<span class="string">"!"</span>, at: welcome.endIndex)</div><div class="line"><span class="comment">// welcome now equals "hello!"</span></div><div class="line"></div><div class="line">welcome.insert(contentsOf: <span class="string">" there"</span>, at: welcome.index(before: welcome.endIndex))</div><div class="line"><span class="comment">// welcome now equals "hello there!"</span></div><div class="line">welcome.remove(at: welcome.index(before: welcome.endIndex))</div><div class="line"><span class="comment">// welcome now equals "hello there"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> range = welcome.index(welcome.endIndex, offsetBy: -<span class="number">6</span>)..&lt;welcome.endIndex</div><div class="line">welcome.removeSubrange(range)</div><div class="line"><span class="comment">// welcome now equals "hello"</span></div></pre></td></tr></table></figure><h2 id="截串"><a href="#截串" class="headerlink" title="截串"></a>截串</h2><ul><li>Swift引入了一个SubString类，用来截串</li></ul> <figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">let</span> greeting = <span class="string">"Hello, world!"</span></div><div class="line"><span class="keyword">let</span> index = greeting.index(of: <span class="string">","</span>) ?? greeting.endIndex</div><div class="line"><span class="keyword">let</span> beginning = greeting[..&lt;index]</div><div class="line"><span class="comment">// beginning is "Hello"</span></div><div class="line">但是注意<span class="type">SubString</span>可能会用到原来string的内存。官方建议是短时间使用，如果想要长时间保持，需要转为<span class="type">String</span></div><div class="line"><span class="comment">// Convert the result to a String for long-term storage.</span></div><div class="line"><span class="keyword">let</span> newString = <span class="type">String</span>(beginning)</div></pre></td></tr></table></figure><blockquote><p>将String转换为NSString，然后调用NSString的截串方法</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"123456789"</span></div><div class="line"><span class="keyword">var</span> ns = (str <span class="keyword">as</span> <span class="type">NSString</span>).substringWithRange(<span class="type">NSMakeRange</span>(<span class="number">1</span>, <span class="number">4</span>))</div><div class="line"><span class="built_in">print</span>(ns) <span class="comment">//输出  2345</span></div></pre></td></tr></table></figure><h2 id="xtension来扩展String-最简单"><a href="#xtension来扩展String-最简单" class="headerlink" title="xtension来扩展String(最简单)"></a>xtension来扩展String(最简单)</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">mport <span class="type">Foundation</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="comment">//获取部分字符串，如果不在范围内，返回nil.如果end大于字符串长度，那么截取到最后</span></div><div class="line">    <span class="keyword">subscript</span> (start: <span class="type">Int</span>, end: <span class="type">Int</span>) -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">if</span> start &gt; <span class="keyword">self</span>.<span class="built_in">count</span> || start &lt; <span class="number">0</span> || start &gt; end &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> begin = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: start)</div><div class="line">        <span class="keyword">var</span> terminal: <span class="type">Index</span></div><div class="line">        <span class="keyword">if</span> end &gt;= length &#123;</div><div class="line">            terminal = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: <span class="built_in">count</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            terminal = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: end + <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> range = (begin ..&lt; terminal)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.substring(with: range)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取某个字符，如果不在范围内，返回nil</span></div><div class="line">    <span class="keyword">subscript</span> (index: <span class="type">Int</span>) -&gt; <span class="type">Character</span>? &#123;</div><div class="line">        <span class="keyword">if</span> index &gt; <span class="keyword">self</span>.<span class="built_in">count</span> - <span class="number">1</span> || index &lt; <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>[<span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: index)]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="计算字符数量"><a href="#计算字符数量" class="headerlink" title="计算字符数量"></a>计算字符数量</h2><blockquote><p>如果想要获得一个字符串中Character值的数量，可以使用字符串的characters属性的count属性</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span>  calculstring = <span class="string">"chenjian"</span>;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"calculstring has \(calculstring.characters.count) charactor"</span>);</div><div class="line"><span class="comment">//输出结果 calculstring has 8 charactor</span></div></pre></td></tr></table></figure><h2 id="访问字符串"><a href="#访问字符串" class="headerlink" title="访问字符串"></a>访问字符串</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">let</span> visitString = <span class="string">"Hello Swift"</span>;</div><div class="line"><span class="comment">//获取第一个字符</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"visitString 的第一个字符 :\(visitString[visitString.startIndex])"</span>);</div><div class="line"><span class="comment">// 这里输出 visitString 的第一个字符 :H</span></div><div class="line"></div><div class="line"><span class="comment">//获取最后一个字符</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"visitString 的最后一个字符 :\(visitString[visitString.index(before: visitString.endIndex)])"</span>);</div><div class="line"><span class="comment">// 这里输出  visitString 的最后一个字符 :t</span></div><div class="line"></div><div class="line"><span class="comment">//获取下第二个字符</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"visitString 的第二个字符 : \(visitString[visitString.index(after: visitString.startIndex)])"</span>)</div><div class="line"><span class="comment">// 这里输出 visitString 的第二个字符 : e</span></div><div class="line"></div><div class="line"><span class="comment">// 通过偏移量获取索引 第一个字符 往后偏移 4个单位(不包括起始位置) （备注： 如果你把字符串当数组来理解，你会发现 0 就在数组的自四个位置）</span></div><div class="line"><span class="keyword">let</span> index = visitString.index(visitString.startIndex, offsetBy: <span class="number">4</span>);</div><div class="line"><span class="built_in">print</span>(<span class="string">"\(visitString[index])"</span>);</div><div class="line"><span class="comment">// 这里输出  o</span></div><div class="line"></div><div class="line"><span class="comment">// 使用 characters 属性的 indices 属性会创建一个包含全部索引的范围(Range)，用来在一个字符串中访问单个字符</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> visitString.characters.<span class="built_in">indices</span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"通过下标得到每一个字符:\(visitString[index])"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这里输出</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">通过下标得到每一个字符:H</span></div><div class="line"><span class="comment">通过下标得到每一个字符:e</span></div><div class="line"><span class="comment">通过下标得到每一个字符:l</span></div><div class="line"><span class="comment">通过下标得到每一个字符:l</span></div><div class="line"><span class="comment">通过下标得到每一个字符:o</span></div><div class="line"><span class="comment">通过下标得到每一个字符: </span></div><div class="line"><span class="comment">通过下标得到每一个字符:S</span></div><div class="line"><span class="comment">通过下标得到每一个字符:w</span></div><div class="line"><span class="comment">通过下标得到每一个字符:i</span></div><div class="line"><span class="comment">通过下标得到每一个字符:f</span></div><div class="line"><span class="comment">通过下标得到每一个字符:t</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="大小写转化"><a href="#大小写转化" class="headerlink" title="大小写转化"></a>大小写转化</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> changeString = <span class="string">"hello"</span>;</div><div class="line"><span class="built_in">print</span>(<span class="string">"\(changeString.uppercased())"</span>)  <span class="comment">//转化成大写</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"\(changeString.lowercased())"</span>)  <span class="comment">// 转化成小写</span></div></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><blockquote><p>调用 insert(_:at:) 方法可以在一个字符串的指定索引插入一个字符，调用 insert(contentsOf:at:) 方法可以在一个字符串的指定索引插入一个段字符串</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//插入单个字符</span></div><div class="line"><span class="keyword">var</span> welocome = <span class="string">"hello"</span>;</div><div class="line">welocome.insert(<span class="string">"!"</span>, at: welocome.endIndex);</div><div class="line"><span class="built_in">print</span>(<span class="string">"welocome = \(welocome)"</span>);</div><div class="line"><span class="comment">//welocome = hello!</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//插入一段字符串到某个位置   contentsOf ： "字符串".characters 固定语法</span></div><div class="line">welocome.insert(contentsOf: <span class="string">"there"</span>.characters, at: welocome.index(before: welocome.endIndex));</div><div class="line"><span class="built_in">print</span>(<span class="string">"welocome = \(welocome)"</span>);</div><div class="line"><span class="comment">//welocome = hello there!</span></div></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><blockquote><p>调用 remove(at:) 方法可以在一个字符串的指定索引删除一个字符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  welocome.remove(at: welocome.index(before: welocome.endIndex));</div><div class="line"><span class="built_in">print</span>(<span class="string">"welocome = \(welocome)"</span>);</div><div class="line"><span class="comment">//welocome = hello there</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 调用 removeSubrange(_:) 方法可以在一个字符串的指定索引删除一个子字符串。</span></div><div class="line"><span class="keyword">let</span> range = welocome.index(welocome.startIndex,offsetBy:<span class="number">6</span>)..&lt;welocome.endIndex;</div><div class="line">welocome.removeSubrange(range);</div><div class="line"><span class="built_in">print</span>(<span class="string">"welocome = \(welocome)"</span>);</div><div class="line"><span class="comment">// welocome = hello</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//指定位置删除</span></div><div class="line">welocome.remove(at: welocome.index(before: welocome.endIndex));</div><div class="line"><span class="built_in">print</span>(welocome);</div><div class="line"><span class="comment">//hello</span></div></pre></td></tr></table></figure><h2 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h2><blockquote><p>字符串/字符可以用等于操作符(==)和不等于操作符(!=)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">   <span class="keyword">let</span> quotation = <span class="string">"We're a lot alike, you and I."</span></div><div class="line"><span class="keyword">let</span> sameQuotation = <span class="string">"We're a lot alike, you and I."</span></div><div class="line"><span class="keyword">if</span> quotation == sameQuotation&#123;</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"相等"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 前缀相等</span></div><div class="line"><span class="keyword">let</span> preString01 = <span class="string">"date"</span>;</div><div class="line"><span class="keyword">if</span> preString01.hasPrefix(<span class="string">"da"</span>)&#123;</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"preString01 前缀有da"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 后缀相等</span></div><div class="line"><span class="keyword">if</span> preString01.hasSuffix(<span class="string">"te"</span>)&#123;</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"preString01 后缀有te"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>不能将一个字符串或者字符添加到一个已经存在的字符变量上，因为字符变量只能包含一个字符</li></ul><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><ul><li>字符串字面量可以包含以下特殊字符：转义字符\0(空字符)、(反斜线)、\t(水平制表符)、\n(换行符)、\r(回车符)、\”(双引号)、\’(单引号)</li></ul>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
          <category> String </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-嵌套类型&amp;类型转换</title>
      <link href="/2017/11/24/Swift/Grammar/%E5%B5%8C%E5%A5%97%E7%B1%BB%E5%9E%8B&amp;%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <content type="html"><![CDATA[<h1 id="嵌套类型-Nested-Types"><a href="#嵌套类型-Nested-Types" class="headerlink" title="嵌套类型(Nested Types)"></a>嵌套类型(Nested Types)</h1><blockquote><p>这个概念就是把一个类（结构体、枚举类）的定义放到一个类类（结构体、枚举类）的里面。<br>这个嵌套可以随便嵌套。可以在结构体里面定义类，类里面定义枚举类，枚举类里面定义结构体等等。<br>随便一个没意思的例子，访问方法也给出来了。使用点语法就可以了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">A</span> </span>&#123;  </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">B</span> </span>&#123;  </div><div class="line">        <span class="keyword">var</span> num = <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Q</span> </span>&#123;  </div><div class="line">              </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;  </div><div class="line">            <span class="keyword">var</span> cc = <span class="number">2</span>  </div><div class="line">              </div><div class="line">            <span class="class"><span class="keyword">enum</span> <span class="title">AA</span>  </span>&#123;  </div><div class="line">                <span class="keyword">case</span> d,e  </div><div class="line">            &#125;  </div><div class="line">              </div><div class="line">            <span class="class"><span class="keyword">class</span> <span class="title">CCC</span> </span>&#123;  </div><div class="line">                  </div><div class="line">            &#125;  </div><div class="line">              </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="built_in">print</span>(<span class="type">A</span>.<span class="type">B</span>.<span class="type">C</span>.<span class="type">AA</span>.d)  <span class="comment">//d  </span></div><div class="line"><span class="built_in">print</span>(<span class="type">A</span>.<span class="type">B</span>.<span class="type">C</span>().cc)  <span class="comment">//2</span></div></pre></td></tr></table></figure><h1 id="类型判断符-is"><a href="#类型判断符-is" class="headerlink" title="类型判断符 is"></a>类型判断符 is</h1><blockquote><p>用is可以用来判断一个实例是否是某个类或是某个类是子类。返回一个Bool值。十分简单，看例子</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">Fruit</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eatApple</span><span class="params">()</span></span> &#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"ear apple"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pear</span>: <span class="title">Fruit</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eatPear</span><span class="params">()</span></span> &#123;  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"eat pear"</span>)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> array = [<span class="type">Fruit</span>(),<span class="type">Apple</span>(),<span class="type">Pear</span>()]  </div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> array &#123;  </div><div class="line">    <span class="built_in">print</span>(item <span class="keyword">is</span> <span class="type">Apple</span>)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//false  </span></div><div class="line"><span class="comment">//true  </span></div><div class="line"><span class="comment">//false  </span></div><div class="line">  </div><div class="line"><span class="keyword">var</span> f = <span class="type">Fruit</span>()  </div><div class="line"><span class="keyword">var</span> a = <span class="type">Apple</span>()  </div><div class="line"><span class="keyword">var</span> p = <span class="type">Pear</span>()  </div><div class="line">  </div><div class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="type">Apple</span>)   <span class="comment">//警告说 肯定返回 true  </span></div><div class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="type">Fruit</span>)   <span class="comment">//警告说 肯定返回 true  </span></div><div class="line"><span class="built_in">print</span>(p <span class="keyword">is</span> <span class="type">Apple</span>)   <span class="comment">//警告说 肯定返回 false  </span></div><div class="line"><span class="built_in">print</span>(f <span class="keyword">is</span> <span class="type">Apple</span>)   <span class="comment">//打印false</span></div></pre></td></tr></table></figure><h1 id="类型下转换符as-和-as-，下转换判断符as"><a href="#类型下转换符as-和-as-，下转换判断符as" class="headerlink" title="类型下转换符as? 和 as! ，下转换判断符as"></a>类型下转换符as? 和 as! ，下转换判断符as</h1><blockquote><p>这as? as! 两个运算符可以将一个实例尝试转换为另外一个类的实例。一般是用在将一个父类变量的转换为一个子类变量。比如下面代码</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fruit: <span class="type">Fruit</span> = <span class="type">Pear</span>()</div></pre></td></tr></table></figure><blockquote><p>先来开开这句代码，我们把一个变量声明为了Fruit类型，但是赋值的时候给的却是Fruit的子类Pear。这个时候并不会报错。这种用一个父类类型的变量指向一个子类的做法称为多态。多态在面向对象编程里面有很重要的作用。这里不展开讲。<br>因为fruit变量声明为了Fruit类型，即使它实际引用的实例是Pear类，但是现在还是不能通过它来调用Pear类引入的属性或方法。尽管这个实例确实是拥有这些属性和方法。为了去访问这些存在的属性和方法，我们就要采用类型下转换，将这个fruit的变量转换为一个pear的变量。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pear = fruit <span class="keyword">as</span>? <span class="type">Pear</span></div></pre></td></tr></table></figure><p>上面的代码使用as?，尝试将这个fruit转为一个Pear类型的变量。这里因为fruit引用的实例就是Pear，所以是可以转换成功。成功后返回了一个Pear的可选类型给变量pear。但是如果转换失败，返回的是一个nil。比如你尝试将一个Apple实例转换为一个Pear，或者将一个Fruit实例转换为它的子类都会失败。</p><p>补充一点，如果对上面的fruit变量使用is判断是否是Pear类，返回的是true。<br>as!和as?的区别就是强制解包了。学了那么多，应该可以猜到。<br>最后在介绍这个比较诡异的as之前，看看Any和AnyObject这两个类型。</p><p>Any代表任何类型的实例，包括了函数类型。</p><p>AnyObject代表任何类的实例。</p><blockquote><p>现在介绍as的用法，现在只发现as能用在switch中，用来判断变量是否是某个类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> b = &#123;<span class="keyword">var</span> i=<span class="number">0</span>; i++&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span> array: [<span class="type">Any</span>] = [f1,b,fruit,<span class="type">Fruit</span>(), <span class="type">Apple</span>(), <span class="type">Pear</span>(), <span class="type">Animal</span>(), (<span class="number">2</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">5</span>)]  </div><div class="line"><span class="keyword">for</span> (index, item) <span class="keyword">in</span> array.<span class="built_in">enumerate</span>() &#123;  </div><div class="line">    <span class="keyword">switch</span> item &#123;  </div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> item2 <span class="keyword">as</span> <span class="type">Apple</span> :  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"index\(index) is \(item2)"</span>)  </div><div class="line">    <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">Pear</span>:  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"index\(index) is pear"</span>)  </div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (<span class="number">2</span>,y) <span class="keyword">as</span> (<span class="type">Int</span>, <span class="type">Int</span>) <span class="keyword">where</span> y &gt; <span class="number">2</span>:  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"index\(index) is tuple  y ="</span>,y)  </div><div class="line">    <span class="keyword">case</span> <span class="keyword">is</span> (<span class="type">Int</span>,<span class="type">Int</span>):  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"index\(index) is (Int,Int) "</span>,item)  </div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> f <span class="keyword">as</span> <span class="type">Void</span>-&gt;<span class="type">Void</span>:  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"index\(index) is Void-&gt;Void "</span>,item)  </div><div class="line">    <span class="keyword">default</span>:  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"index\(index) is default"</span>,item)  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//打印  </span></div><div class="line"><span class="comment">//index0 is default (Function)  </span></div><div class="line"><span class="comment">//index1 is Void-&gt;Void  (Function)  </span></div><div class="line"><span class="comment">//index2 is pear  </span></div><div class="line"><span class="comment">//index3 is default SwiftTest.Fruit  </span></div><div class="line"><span class="comment">//index4 is SwiftTest.Apple  </span></div><div class="line"><span class="comment">//index5 is pear  </span></div><div class="line"><span class="comment">//index6 is default SwiftTest.Animal  </span></div><div class="line"><span class="comment">//index7 is tuple  y = 3  </span></div><div class="line"><span class="comment">//index8 is (Int,Int)  (4, 5)</span></div></pre></td></tr></table></figure><blockquote><p>你会发现其实，is 和 as 的效果是一样的。as比is多的就是将一个tuple可以再次解包出元素，并且再次匹配元素，同时还可以加上where做判断。比如上面的第三个case语句。会判断这个item是否是(Int,Inte)类型，然后解包tuple，判断第一个元素是否为2，如果是2，还会判断第二个元素是否大于2.只有这三个条件都符合才会匹配这个case</p></blockquote>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Protocol协议</title>
      <link href="/2017/11/24/Swift/Grammar/Protocol%E5%8D%8F%E8%AE%AE/"/>
      <content type="html"><![CDATA[<h1 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h1><h2 id="POP-面向协议的编程"><a href="#POP-面向协议的编程" class="headerlink" title="POP 面向协议的编程"></a>POP 面向协议的编程</h2><blockquote><p>面向协议的编程的核心是抽象（Abstraction）和简化（Simplicity）<br>协议的高级使用是协议的延展<br>协议(protocol) + 结构体(struct) &gt; 类(class)</p></blockquote><h2 id="面向对象与面向协议比较"><a href="#面向对象与面向协议比较" class="headerlink" title="面向对象与面向协议比较"></a>面向对象与面向协议比较</h2><ul><li>面向对象是一个很古老的软件开发模式，通过类来实现</li><li>面向协议是苹果在 swift 中主推的，通过协议和结构体，可以代替类</li><li>Swift 中的很多对象都改成了结构体和协议</li><li>并不是所有的类都可以被协议+结构体替代，但大多数是可以被替换的</li><li>面向协议使代码更加灵活，类似于组件化开发，符合工厂方法模式<h3 id="实例比较：给一个类添加额外的方法"><a href="#实例比较：给一个类添加额外的方法" class="headerlink" title="实例比较：给一个类添加额外的方法"></a>实例比较：给一个类添加额外的方法</h3><blockquote><p>通过继承 </p></blockquote></li></ul><ul><li>创建一个继承类的子类，在子类中添加方法，以后使用子类即可获取这个方法通过协议</li><li><p>为这个方法定义一个协议，哪个类需要实现这个方法，协议即可</p><blockquote><p>使用继承的缺点</p></blockquote></li><li><p>通过继承添加的方法，不一定每个子类都会使用，使代码冗余</p></li><li>拥有太多的子类，使类冗余</li><li>对于父类的方法太过依赖，当父类的方法更改后，影响子类的重载方法</li></ul><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><blockquote><p><strong><em>协议</em></strong> 规定了用来实现某一特定功能所必须的 <strong>方法</strong>和 <strong>属性</strong>。<br>用于统一方法和属性的名称，而不实现任何功能<br>任意能够满足协议要求的类型被称为遵循(conform)这个协议。<br><strong>类</strong>，<strong>结构体</strong>、<strong>枚举类型</strong>(协议的遵守者) 都可以遵循协议，并提供具体实现来完成协议定义的方法和功能</p></blockquote><h3 id="协议的语法格式"><a href="#协议的语法格式" class="headerlink" title="协议的语法格式"></a>协议的语法格式</h3><ul><li>协议的高级使用是协议的延展以及和结构体配合</li></ul><blockquote><p>为议添加属性, 属性为可读或可写</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line">    <span class="comment">// 协议内容</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="keyword">var</span> age:  <span class="type">Int</span> &#123; <span class="keyword">set</span> <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>定义一个接受协议的结构体</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeModel</span>: <span class="title">SomeProtocol</span></span>&#123;</div><div class="line">   <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span></div><div class="line">   <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">   <span class="keyword">var</span> isYue: <span class="type">Bool</span> =  <span class="literal">false</span></div><div class="line">   </div><div class="line">   <span class="keyword">init</span>(with dict:[<span class="type">String</span>:<span class="type">Any</span>])&#123;</div><div class="line">   <span class="keyword">self</span>.name = (dict[<span class="string">"name"</span>]<span class="keyword">as</span>?<span class="type">String</span>)??<span class="string">""</span></div><div class="line">   <span class="keyword">self</span>.age = (dict[<span class="string">"age"</span>]<span class="keyword">as</span>?<span class="type">Int</span>)??<span class="number">0</span></div><div class="line">   <span class="keyword">self</span>.isYue = (dict[<span class="string">"isYue"</span>]<span class="keyword">as</span>?<span class="type">Bool</span>)??<span class="literal">false</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><blockquote><p>对协议进行延展</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SomeProtocol</span></span>&#123;</div><div class="line"> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">test</span> <span class="params">()</span></span>&#123;</div><div class="line"> <span class="keyword">self</span>.name = <span class="string">"Hello Jianjian !"</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>协议的协议</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">protocol</span> <span class="title">oneProtocol</span>: <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> date: <span class="type">Date</span> &#123; <span class="keyword">set</span> <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="遵循某-多-个协议"><a href="#遵循某-多-个协议" class="headerlink" title="遵循某(多)个协议"></a>遵循某(多)个协议</h3><blockquote><p>要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分<br>遵循多个协议时，各协议之间用逗号,分隔</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">struct SomeStructure: FirstProtocol, AnotherProtocol &#123;</div><div class="line">    // 结构体内容</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果类在遵循协议的同时拥有父类，应该将 <strong>父类名</strong> 放在 <strong>协议名</strong> 之前，以<strong>逗号</strong>分隔</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">class OneClass: OneSuperClass, OneProtocol, TwoProtocol &#123;</div><div class="line">    // 类的内容</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对属性的规定"><a href="#对属性的规定" class="headerlink" title="对属性的规定"></a>对属性的规定</h2><blockquote><p><strong>协议</strong> 用于指定特定的实例属性或类属性 协议能够要求其遵守者必须含有一些特定名称和类型的实例属性(instance property)或类属性 (type property)，<br>也能够要求属性的(设置权限)settable 和(访问权限)gettable，还必须指明是只读的还是可读可写的<br>但它不要求属性是存储型属性(stored property)还是计算型属性(calculate property)<br>协议中的通常用<strong>var</strong>来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> age : <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line"><span class="keyword">var</span> money: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>用类来实现协议时，使用class关键字来表示该属性为类成员<br>用结构体或枚举实现协议时，则使用static关键字来表示</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">someTypeProperty</span>: <span class="title">Int</span> </span>&#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>SomeProtocol协议含有fullName属性。因此其遵循者必须含有一个名为oneName，类型为String的可读属性<br>Person结构体含有一个名为oneName的存储型属性，完整的遵循了协议。(若协议未被完整遵循，编译时则会报错)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> oneName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">SomeProtocol</span></span>&#123;</div><div class="line">      <span class="keyword">var</span> oneName: <span class="type">String</span></div><div class="line">    &#125;</div><div class="line">   <span class="keyword">let</span> john = <span class="type">Person</span>(oneName: “<span class="type">Chen</span> jianjian”)</div><div class="line">   <span class="comment">//john. oneName 为 “Chen jianjian”</span></div></pre></td></tr></table></figure><blockquote><p>Startship类遵循了SomeProtocol协议<br>Starship类将oneName实现为可读的计算型属性<br>它的每一个实例都有一个名为name的必备属性和一个名为prefix的可选属性<br>当prefix存在时，将prefix插入到name之前来为Starship构建oneName<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Starship</span>: <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> <span class="keyword">prefix</span>: <span class="type">String</span>?</div><div class="line"><span class="keyword">var</span> name: <span class="type">String</span></div><div class="line"><span class="keyword">init</span>(name: <span class="type">String</span>, <span class="keyword">prefix</span>: <span class="type">String</span>? = <span class="literal">nil</span> ) &#123;</div><div class="line"><span class="keyword">self</span>.anme = name</div><div class="line"><span class="keyword">self</span>.<span class="keyword">prefix</span> = <span class="keyword">prefix</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oneName: <span class="type">String</span> &#123;</div><div class="line">   <span class="keyword">return</span> (<span class="keyword">prefix</span> ? <span class="keyword">prefix</span> ! + ” ” : ” “) + name</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ncc1701 = <span class="type">Starship</span>(name: “<span class="type">Enterprise</span>”, <span class="keyword">prefix</span>: “<span class="type">USS</span>”)</div><div class="line"><span class="comment">// ncc1701. oneName == “USS Enterprise”</span></div></pre></td></tr></table></figure></p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">classa</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> marks: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="keyword">var</span> result: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attendance</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">markssecured</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">classb</span>: <span class="title">classa</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> present: <span class="type">Bool</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="keyword">var</span> subject: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="keyword">var</span> stname: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">classc</span>: <span class="title">classb</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> marks = <span class="number">96</span></div><div class="line">    <span class="keyword">let</span> result = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> present = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> subject = <span class="string">"Swift 协议"</span></div><div class="line">    <span class="keyword">var</span> stname = <span class="string">"Protocols"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attendance</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"The \(stname) has secured 99% attendance"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">markssecured</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(stname) has scored \(marks)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> studdet = classc()</div><div class="line">studdet.stname = <span class="string">"Swift"</span></div><div class="line">studdet.marks = <span class="number">98</span></div><div class="line">studdet.markssecured()</div><div class="line"></div><div class="line"><span class="built_in">print</span>(studdet.marks)</div><div class="line"><span class="built_in">print</span>(studdet.result)</div><div class="line"><span class="built_in">print</span>(studdet.present)</div><div class="line"><span class="built_in">print</span>(studdet.subject)</div><div class="line"><span class="built_in">print</span>(studdet.stname)</div><div class="line"></div><div class="line">以上程序执行输出结果为</div><div class="line"><span class="number">98</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div><div class="line"><span class="type">Swift</span> 协议</div><div class="line"><span class="type">Swift</span></div></pre></td></tr></table></figure><h1 id="对-Mutating-方法的规定"><a href="#对-Mutating-方法的规定" class="headerlink" title="对 Mutating 方法的规定"></a>对 Mutating 方法的规定</h1><blockquote><p>有时需要在方法中改变它的实例。<br>例如：值类型（结构体，枚举）的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">daysofaweek</span> </span>&#123;</div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">days</span>: <span class="title">daysofaweek</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> sun, mon, tue, wed, thurs, fri, sat</div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .sun:</div><div class="line">            <span class="keyword">self</span> = .sun</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Sunday"</span>)</div><div class="line">        <span class="keyword">case</span> .mon:</div><div class="line">            <span class="keyword">self</span> = .mon</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Monday"</span>)</div><div class="line">        <span class="keyword">case</span> .tue:</div><div class="line">            <span class="keyword">self</span> = .tue</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Tuesday"</span>)</div><div class="line">        <span class="keyword">case</span> .wed:</div><div class="line">            <span class="keyword">self</span> = .wed</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Wednesday"</span>)</div><div class="line">        <span class="keyword">case</span> .thurs:</div><div class="line">            <span class="keyword">self</span> = .thurs</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Wednesday"</span>)</div><div class="line">        <span class="keyword">case</span> .fri:</div><div class="line">            <span class="keyword">self</span> = .fri</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Wednesday"</span>)</div><div class="line">        <span class="keyword">case</span> .sat:</div><div class="line">            <span class="keyword">self</span> = .sat</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Saturday"</span>)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"NO Such Day"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> res = days.wed</div><div class="line">res.show()</div><div class="line"></div><div class="line">程序执行输出结果为：<span class="type">Wednesday</span></div></pre></td></tr></table></figure><h1 id="对构造器的规定"><a href="#对构造器的规定" class="headerlink" title="对构造器的规定"></a>对构造器的规定</h1><blockquote><p>协议可以要求它的遵循者实现指定的构造器。<br>像书写普通的构造器那样，在协议的定义里写下构造器的声明，但不需要写花括号和构造器的实体，语法如下：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line">   <span class="keyword">init</span>(someParameter: <span class="type">Int</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>实例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">tcpprotocol</span> </span>&#123;</div><div class="line">   <span class="keyword">init</span>(aprot: <span class="type">Int</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="协议构造器规定在类中的实现"><a href="#协议构造器规定在类中的实现" class="headerlink" title="协议构造器规定在类中的实现"></a>协议构造器规定在类中的实现</h1><blockquote><p>你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上”required”修饰符：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>: <span class="title">SomeProtocol</span> </span>&#123;</div><div class="line">   <span class="keyword">required</span> <span class="keyword">init</span>(someParameter: <span class="type">Int</span>) &#123;</div><div class="line">      <span class="comment">// 构造器实现</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">tcpprotocol</span> </span>&#123;</div><div class="line">   <span class="keyword">init</span>(aprot: <span class="type">Int</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">tcpClass</span>: <span class="title">tcpprotocol</span> </span>&#123;</div><div class="line">   <span class="keyword">required</span> <span class="keyword">init</span>(aprot: <span class="type">Int</span>) &#123;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>施用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。<br>如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">tcpprotocol</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(no1: <span class="type">Int</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mainClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> no1: <span class="type">Int</span> <span class="comment">// 局部变量</span></div><div class="line">    <span class="keyword">init</span>(no1: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.no1 = no1 <span class="comment">// 初始化</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">subClass</span>: <span class="title">mainClass</span>, <span class="title">tcpprotocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> no2: <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(no1: <span class="type">Int</span>, no2 : <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.no2 = no2</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(no1:no1)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 因为遵循协议，需要加上"required"; 因为继承自父类，需要加上"override"</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">override</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(no1: <span class="type">Int</span>)  &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(no1:no1, no2:<span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> res = mainClass(no1: <span class="number">20</span>)</div><div class="line"><span class="keyword">let</span> show = subClass(no1: <span class="number">30</span>, no2: <span class="number">50</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"res is: \(res.no1)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"res is: \(show.no1)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"res is: \(show.no2)"</span>)</div><div class="line"></div><div class="line"></div><div class="line">以上程序执行输出结果为：</div><div class="line"></div><div class="line">res <span class="keyword">is</span>: <span class="number">20</span></div><div class="line">res <span class="keyword">is</span>: <span class="number">30</span></div><div class="line">res <span class="keyword">is</span>: <span class="number">50</span></div></pre></td></tr></table></figure><h1 id="协议类型"><a href="#协议类型" class="headerlink" title="协议类型"></a>协议类型</h1><blockquote><p>尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用<br>协议可以像其他普通类型一样使用，使用场景:</p></blockquote><ul><li>作为函数、方法或构造器中的参数类型或返回值类型</li><li>作为常量、变量或属性的类型</li><li>作为数组、字典或其他容器中的元素类型</li></ul><blockquote><p>实例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Generator</span> </span>&#123;</div><div class="line">    associatedtype members</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; members?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> items = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>].makeIterator()</div><div class="line"><span class="keyword">while</span> <span class="keyword">let</span> x = items.next() &#123;</div><div class="line">    <span class="built_in">print</span>(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> lists <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>( &#123;i <span class="keyword">in</span> i*<span class="number">5</span>&#125;) &#123;</div><div class="line">    <span class="built_in">print</span>(lists)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>([<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>])</div><div class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>(&#123;i <span class="keyword">in</span> i*<span class="number">10</span>&#125;))</div><div class="line"></div><div class="line"></div><div class="line">以上程序执行输出结果为：</div><div class="line"></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">20</span></div><div class="line"><span class="number">30</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">15</span></div><div class="line">[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</div></pre></td></tr></table></figure><h1 id="在扩展中添加协议成员"><a href="#在扩展中添加协议成员" class="headerlink" title="在扩展中添加协议成员"></a>在扩展中添加协议成员</h1><blockquote><p>可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。<br>扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">AgeClasificationProtocol</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> age: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">agetype</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">   <span class="keyword">let</span> firstname: <span class="type">String</span></div><div class="line">   <span class="keyword">let</span> lastname: <span class="type">String</span></div><div class="line">   <span class="keyword">var</span> age: <span class="type">Int</span></div><div class="line">   <span class="keyword">init</span>(firstname: <span class="type">String</span>, lastname: <span class="type">String</span>) &#123;</div><div class="line">      <span class="keyword">self</span>.firstname = firstname</div><div class="line">      <span class="keyword">self</span>.lastname = lastname</div><div class="line">      <span class="keyword">self</span>.age = <span class="number">10</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> : <span class="title">AgeClasificationProtocol</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">fullname</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">      <span class="keyword">var</span> <span class="built_in">c</span>: <span class="type">String</span></div><div class="line">      <span class="built_in">c</span> = firstname + <span class="string">" "</span> + lastname</div><div class="line">      <span class="keyword">return</span> <span class="built_in">c</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">agetype</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">      <span class="keyword">switch</span> age &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>...<span class="number">2</span>:</div><div class="line">         <span class="keyword">return</span> <span class="string">"Baby"</span></div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>...<span class="number">12</span>:</div><div class="line">         <span class="keyword">return</span> <span class="string">"Child"</span></div><div class="line">      <span class="keyword">case</span> <span class="number">13</span>...<span class="number">19</span>:</div><div class="line">         <span class="keyword">return</span> <span class="string">"Teenager"</span></div><div class="line">      <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x &gt; <span class="number">65</span>:</div><div class="line">         <span class="keyword">return</span> <span class="string">"Elderly"</span></div><div class="line">      <span class="keyword">default</span>:</div><div class="line">         <span class="keyword">return</span> <span class="string">"Normal"</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="协议的继承"><a href="#协议的继承" class="headerlink" title="协议的继承"></a>协议的继承</h1><p>协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。<br>协议的继承语法与类的继承相似，多个被继承的协议间用逗号分隔：</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">InheritingProtocol</span>: <span class="title">SomeProtocol</span>, <span class="title">AnotherProtocol</span> </span>&#123;</div><div class="line">    <span class="comment">// 协议定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>实例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Classa</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> no1: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(sum: Int)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Result</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(target: Classa)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span>: <span class="title">Result</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(target: Classa)</span></span> &#123;</div><div class="line">        target.calc(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classb</span>: <span class="title">Result</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(target: Classa)</span></span> &#123;</div><div class="line">        target.calc(<span class="number">5</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Classa</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> no1: <span class="type">Int</span> = <span class="number">10</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(sum: Int)</span></span> &#123;</div><div class="line">        no1 -= sum</div><div class="line">        <span class="built_in">print</span>(<span class="string">"学生尝试 \(sum) 次通过"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> no1 &lt;= <span class="number">0</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"学生缺席考试"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> stmark: <span class="type">Result</span>!</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(stmark: <span class="type">Result</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.stmark = stmark</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(target: Classa)</span></span> &#123;</div><div class="line">        stmark.<span class="built_in">print</span>(target)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> marks = <span class="type">Player</span>(stmark: <span class="type">Student2</span>())</div><div class="line"><span class="keyword">var</span> marksec = <span class="type">Student</span>()</div><div class="line"></div><div class="line">marks.<span class="built_in">print</span>(marksec)</div><div class="line">marks.<span class="built_in">print</span>(marksec)</div><div class="line">marks.<span class="built_in">print</span>(marksec)</div><div class="line">marks.stmark = <span class="type">Classb</span>()</div><div class="line">marks.<span class="built_in">print</span>(marksec)</div><div class="line">marks.<span class="built_in">print</span>(marksec)</div><div class="line">marks.<span class="built_in">print</span>(marksec)</div><div class="line"></div><div class="line"></div><div class="line">以上程序执行输出结果为：</div><div class="line"></div><div class="line">学生尝试 <span class="number">1</span> 次通过</div><div class="line">学生尝试 <span class="number">1</span> 次通过</div><div class="line">学生尝试 <span class="number">1</span> 次通过</div><div class="line">学生尝试 <span class="number">5</span> 次通过</div><div class="line">学生尝试 <span class="number">5</span> 次通过</div><div class="line">学生缺席考试</div><div class="line">学生尝试 <span class="number">5</span> 次通过</div><div class="line">学生缺席考试</div></pre></td></tr></table></figure><h1 id="类专属协议"><a href="#类专属协议" class="headerlink" title="类专属协议"></a>类专属协议</h1><p>你可以在协议的继承列表中,通过添加class关键字,限制协议只能适配到类（class）类型。<br>该class关键字必须是第一个出现在协议的继承列表中，其后，才是其他继承协议。格式如下：</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeClassOnlyProtocol</span>: <span class="title">class</span>, <span class="title">SomeInheritedProtocol</span> </span>&#123;</div><div class="line">    <span class="comment">// 协议定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>实例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TcpProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(no1: <span class="type">Int</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> no1: <span class="type">Int</span> <span class="comment">// 局部变量</span></div><div class="line">    <span class="keyword">init</span>(no1: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.no1 = no1 <span class="comment">// 初始化</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span>: <span class="title">MainClass</span>, <span class="title">TcpProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> no2: <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(no1: <span class="type">Int</span>, no2 : <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.no2 = no2</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(no1:no1)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 因为遵循协议，需要加上"required"; 因为继承自父类，需要加上"override"</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">override</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(no1: <span class="type">Int</span>)  &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(no1:no1, no2:<span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> res = <span class="type">MainClass</span>(no1: <span class="number">20</span>)</div><div class="line"><span class="keyword">let</span> show = <span class="type">SubClass</span>(no1: <span class="number">30</span>, no2: <span class="number">50</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"res is: \(res.no1)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"res is: \(show.no1)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"res is: \(show.no2)"</span>)</div><div class="line"></div><div class="line">以上程序执行输出结果为：</div><div class="line"></div><div class="line">res <span class="keyword">is</span>: <span class="number">20</span></div><div class="line">res <span class="keyword">is</span>: <span class="number">30</span></div><div class="line">res <span class="keyword">is</span>: <span class="number">50</span></div></pre></td></tr></table></figure><h1 id="九、协议合成"><a href="#九、协议合成" class="headerlink" title="九、协议合成"></a>九、协议合成</h1><p>Swift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。<br>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">protocol Stname &#123;</div><div class="line">    var name: String &#123; get &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protocol Stage &#123;</div><div class="line">    var age: Int &#123; get &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct Person: Stname, Stage &#123;</div><div class="line">    var name: String</div><div class="line">    var age: Int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func show(celebrator: Stname &amp; Stage) &#123;</div><div class="line">    print(&quot;\(celebrator.name) is \(celebrator.age) years old&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">let studname = Person(name: &quot;Priya&quot;, age: 21)</div><div class="line">print(studname)</div><div class="line"></div><div class="line">let stud = Person(name: &quot;Rehan&quot;, age: 29)</div><div class="line">print(stud)</div><div class="line"></div><div class="line">let student = Person(name: &quot;Roshan&quot;, age: 19)</div><div class="line">print(student)</div><div class="line"></div><div class="line"></div><div class="line">以上程序执行输出结果为：</div><div class="line"></div><div class="line">Person(name: &quot;Priya&quot;, age: 21)</div><div class="line">Person(name: &quot;Rehan&quot;, age: 29)</div><div class="line">Person(name: &quot;Roshan&quot;, age: 19)</div></pre></td></tr></table></figure><h1 id="检验协议的一致性"><a href="#检验协议的一致性" class="headerlink" title="检验协议的一致性"></a>检验协议的一致性</h1><blockquote><p>使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。</p></blockquote><ul><li>is操作符用来检查实例是否遵循了某个协议。</li><li>as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。</li><li>as用以强制向下转型，如果强转失败，会引起运行时错误。</li></ul><blockquote><p>实例</p></blockquote><p>下面的例子定义了一个 HasArea 的协议，要求有一个Double类型可读的 area：</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">HasArea</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> area: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义了Circle类，都遵循了HasArea协议</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>: <span class="title">HasArea</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> pi = <span class="number">3.1415927</span></div><div class="line">    <span class="keyword">var</span> radius: <span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> area: <span class="type">Double</span> &#123; <span class="keyword">return</span> pi * radius * radius &#125;</div><div class="line">    <span class="keyword">init</span>(radius: <span class="type">Double</span>) &#123; <span class="keyword">self</span>.radius = radius &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义了Country类，都遵循了HasArea协议</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span>: <span class="title">HasArea</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> area: <span class="type">Double</span></div><div class="line">    <span class="keyword">init</span>(area: <span class="type">Double</span>) &#123; <span class="keyword">self</span>.area = area &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Animal是一个没有实现HasArea协议的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> legs: <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(legs: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.legs = legs &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> objects: [<span class="type">AnyObject</span>] = [</div><div class="line">    <span class="type">Circle</span>(radius: <span class="number">2.0</span>),</div><div class="line">    <span class="type">Country</span>(area: <span class="number">243_610</span>),</div><div class="line">    <span class="type">Animal</span>(legs: <span class="number">4</span>)</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">for</span> object <span class="keyword">in</span> objects &#123;</div><div class="line">    <span class="comment">// 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> objectWithArea = object <span class="keyword">as</span>? <span class="type">HasArea</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"面积为 \(objectWithArea.area)"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有面积"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">以上程序执行输出结果为：</div><div class="line"></div><div class="line">面积为 <span class="number">12.5663708</span></div><div class="line">面积为 <span class="number">243610.0</span></div><div class="line">没有面积</div></pre></td></tr></table></figure><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Document-Develpe文档</title>
      <link href="/2017/11/23/1/"/>
      <content type="html"><![CDATA[<p><a href="https://developer.apple.com/swift/" target="_blank" rel="external">swift4苹果开发者中心</a></p><p><a href="http://lib.csdn.net/swift/node/5?page=11#md" target="_blank" rel="external">swift 语法</a><br><a href="http://blog.csdn.net/a709314090/article/details/48752289" target="_blank" rel="external">基础</a></p><p><a href="http://swift.gg/" target="_blank" rel="external">Swift学习</a></p><p><a href="http://www.51ios.net/category/swiftblog" target="_blank" rel="external">Swift部分资料</a></p><p><a href="http://blog.csdn.net/u012647272/article/details/49660523" target="_blank" rel="external">第三方</a></p><p><a href="http://blog.csdn.net/qq_15024937/article/details/54865273" target="_blank" rel="external">第三方02</a></p><p><a href="http://blog.csdn.net/qq350116542" target="_blank" rel="external">这个人博客整理的很好</a></p><p><a href="http://blog.csdn.net/Xoxo_x/article/details/53023035#%E5%AF%BC%E8%88%AA%E6%A0%8F" target="_blank" rel="external">swift框架大全</a></p><p><a href="http://www.hangge.com/blog/cache/category_72_2.html" target="_blank" rel="external">swift开发博客很好滴</a></p><p><a href="http://blog.csdn.net/pj386960300/article/details/54015218" target="_blank" rel="external">lib</a></p><p><a href="http://blog.csdn.net/qq_15024937/article/details/54865273" target="_blank" rel="external">GitHub上Swift开源项目</a></p><p><a href="https://www.darkhandz.com/2017/02/06/%E5%AD%A6%E4%B9%A0RxSwift%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/" target="_blank" rel="external">RxSwift一篇不错的文章</a></p><p><a href="http://t.swift.gg/t/rxswift-course" target="_blank" rel="external">swif.gg里 小青那个牛逼货的一些学习RxSwift资料 </a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Document </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Lib-YYKit-YYmodel</title>
      <link href="/2017/11/23/OC/Lib/OC-Lib-YYKit-YYmodel/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> YYKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Blog-配置</title>
      <link href="/2017/11/23/Blog/Blog-%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<p><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="external">博客配置01</a><br><a href="http://blog.csdn.net/u010064074/article/details/76558729" target="_blank" rel="external">博客配置02</a></p><p><a href="http://blog.csdn.net/u012352292" target="_blank" rel="external">RxSwift</a></p>]]></content>
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Tool-FastLane自动化发布工具+上传Bugly</title>
      <link href="/2017/11/23/OC/Grammar/iOS-Tool-FastLane%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83%E5%B7%A5%E5%85%B7+%E4%B8%8A%E4%BC%A0Bugly/"/>
      <content type="html"><![CDATA[<h1 id="打包的流程"><a href="#打包的流程" class="headerlink" title="打包的流程"></a>打包的流程</h1><ul><li>修改测试版本号</li><li>修改Build版本号</li><li>执行Archive</li><li>选择Adhoc导出IPA安装包文件</li><li>上传Bugly测试平台</li><li>分享测试链接二维码<h1 id="Fastlane"><a href="#Fastlane" class="headerlink" title="Fastlane"></a>Fastlane</h1>Fastlane本身包含两大模块，内核部分+Action<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2>Action是Fastlane自动化流程中的最小执行单元，直观上来讲就是Fastfile脚本中的一个个命令，比如：git_pull，deliver，pod_install等等，而这些命令背后都对应其实是一个用Ruby编写的脚本</li></ul><blockquote><p>Fastlane 是一套用 Ruby 编写的 iOS 命令行工具集（后来也支持了 Android），主要组件包括：</p></blockquote><ul><li>match / cert / sigh 协助管理代码签名</li><li>pem 自动生成 APNs 证书</li><li>scan 自动化测试</li><li>gym 自动化编译并打包生成签名的 .ipa 文件</li><li>snapshot / frameit 协助处理 iOS 屏幕快照</li><li>pilot 上传和管理 TestFlight</li><li>deliver 将应用及其它信息上传到 App Store</li></ul><p>而正是这些颗粒度极小的Action，根据自己需求组合成一个自动化的链条</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>首先确保Xcode命令行工具是最新版本的</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ xcode-select --install</div></pre></td></tr></table></figure><blockquote><p>安装Fastlane:</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo gem install fastlane -NV</div></pre></td></tr></table></figure><blockquote><p>找到工程文件目录下执行</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ fastlane init</div></pre></td></tr></table></figure><blockquote><p>在执行“Your Apple ID” 这一步输入苹果开发者账号，fastlane 会自动获取工程文件名，目录等其他数据。这一步“Please confirm the above values”，确认信息，没问题则输入 y。然后，fastlane 会进行一系列的初始化操作，包括下载 App Store 上的元数据和截屏文件。等待初始化完成之后，工程目录下就多了一个 fastlane目录：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cd fastlane &amp;&amp; ls</div><div class="line">Appfile            Fastfile           metadata           report.xml</div><div class="line">Deliverfile        README.md          screenshots</div></pre></td></tr></table></figure><blockquote><p>文件目录</p></blockquote><ul><li>metadata目录下存放整个元数据文件，包括关键词、版本更新日志、图标等.</li><li>screenshots目录下存放应用截图</li><li>Appfile文件记录App的 bundle ID、Apple ID、Team ID三种信息.</li><li>Fastfile脚本的核心执行文件.有几个默认的选项，可直接使用.</li><li>report文件时每次执行fastlane时生成报告</li></ul><blockquote><p>安装fastlane成功后，首先拆解我们需要自动化的两个流程:</p></blockquote><ul><li>自动打包成Adhoc的安装包ipa文件</li><li>通过fastlane自动上传到bugly</li></ul><h1 id="自动化打包"><a href="#自动化打包" class="headerlink" title="自动化打包"></a>自动化打包</h1><blockquote><p>自动化打包使用最多就是Fastlane中gym这个Action, 转为打包而生, 安装gym这个组件:</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo gem install gym</div></pre></td></tr></table></figure><blockquote><p>cd项目根目录, 创建自动打包脚本:</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vim gym.sh</div></pre></td></tr></table></figure><blockquote><p>输入脚本内容:</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="meta">#计时</span></div><div class="line">SECONDS=<span class="number">0</span><span class="meta">#假设脚本放置在与项目相同的路径下project_path=$(pwd)#取当前时间字符串添加到文件结尾now=$(date +<span class="meta-string">"%Y_%m_%d_%H_%M_%S"</span>)#指定项目的scheme名称</span></div><div class="line">scheme=<span class="string">"Xitu"</span><span class="meta">#指定要打包的配置名</span></div><div class="line">configuration=<span class="string">"Adhoc"</span><span class="meta">#指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数export_method='ad-hoc'#指定项目地址</span></div><div class="line">workspace_path=<span class="string">"$project_path/Xitu.xcworkspace"</span><span class="meta">#指定输出路径</span></div><div class="line">output_path=<span class="string">"project_path/APP"</span><span class="meta">#指定输出归档文件地址</span></div><div class="line">archive_path=<span class="string">"$output_path/Xitu$&#123;now&#125;.xcarchive"</span><span class="meta">#指定输出ipa地址</span></div><div class="line">ipa_path=<span class="string">"$output_path/Xitu$&#123;now&#125;.ipa"</span><span class="meta">#指定输出ipa名称</span></div><div class="line">ipa_name=<span class="string">"Xitu$&#123;now&#125;.ipa"</span><span class="meta">#获取执行命令时的commit message</span></div><div class="line">commit_msg=<span class="string">"$1"</span><span class="meta">#输出设定的变量值</span></div><div class="line">echo <span class="string">"===workspace path: $&#123;workspace_path&#125;==="</span></div><div class="line">echo <span class="string">"===archive path: $&#123;archive_path&#125;==="</span></div><div class="line">echo <span class="string">"===ipa path: $&#123;ipa_path&#125;==="</span></div><div class="line">echo <span class="string">"===export method: $&#123;export_method&#125;==="</span></div><div class="line">echo <span class="string">"===commit msg: $1==="</span><span class="meta">#先清空前一次build</span></div><div class="line">gym --workspace $&#123;workspace_path&#125; --scheme $&#123;scheme&#125; --clean --configuration $&#123;configuration&#125; --archive_path $&#123;archive_path&#125; --export_method $&#123;export_method&#125; --output_directory $&#123;output_path&#125; --output_name $&#123;ipa_name&#125;</div><div class="line"></div><div class="line"><span class="meta">#输出总用时</span></div><div class="line">echo <span class="string">"===Finished. Total time: $&#123;SECONDS&#125;s==="</span></div></pre></td></tr></table></figure><blockquote><p>把如上脚本中Xitu改成你的项目名称即可. 为脚本执行提升权限</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ chmod +x gym.sh</div></pre></td></tr></table></figure><blockquote><p>执行一下脚本看一下打包效果:</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./gym.sh</div></pre></td></tr></table></figure><blockquote><p>经过572s，Adhoc版本的ipa文件打包成功，我们在项目根目录下找到App目录：</p></blockquote><p>===========================================</p><p>#上传Bugly</p><h1 id="fastlane中定义action"><a href="#fastlane中定义action" class="headerlink" title="fastlane中定义action"></a>fastlane中定义action</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ fastlane new_action</div></pre></td></tr></table></figure><blockquote><p>这时命令行会要求你输入自定义action名字，直接以bugly上传文件命名</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ upload_app_to_bugly</div></pre></td></tr></table></figure><h2 id="wei-wan"><a href="#wei-wan" class="headerlink" title="wei wan"></a>wei wan</h2>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Tool </category>
          
          <category> FastLane </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Code-优化项目</title>
      <link href="/2017/11/23/OC/Code/OC-Code-%E4%BC%98%E5%8C%96%E9%A1%B9%E7%9B%AE/"/>
      <content type="html"><![CDATA[<p><a href="https://juejin.im/entry/596c32255188254b772db957" target="_blank" rel="external">优化项目</a></p><ol><li>结构与架构<br>1.1 结构</li></ol><p>这里说的结构大概有两点：1.文件目录分类 2.第三方库管理<br>1.1.1 文件目录分类</p><p>为了方便管理，最好将Xcode中的项目展示目录与实际的存储目录保持一致<br>此外，一般按业务模块分类,一级目录可以按照MVC格式，也可以按照业务模块划分<br>用最普遍的Model View Controller架构举例</p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Func-Bug管理工具</title>
      <link href="/2017/11/22/OC/Func/iOS-Func-Bug%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <content type="html"><![CDATA[<p>#功能</p><blockquote><p>非Crash Bug 在App内可截图添加描述并发送</p><p>Crash Bug 在App第二次启动时提取Crash log添加描述并发送</p></blockquote><h1 id="实现解释"><a href="#实现解释" class="headerlink" title="实现解释"></a>实现解释</h1><h2 id="分析-bug"><a href="#分析-bug" class="headerlink" title="分析 bug"></a>分析 bug</h2><ul><li>非Crash的Bug：字体不对、颜色不对、数据不对、布局不对</li><li>Crash Bug：系统Crash、处理signal<h2 id="场景交互"><a href="#场景交互" class="headerlink" title="场景交互"></a>场景交互</h2></li><li>场景交互：发现非Crash Bug时候摇一摇手机，弹出邮件，图片带入邮件，点击发送即可。有Crash Bug的时候第二次启动App，弹出邮件，Crash log带入邮件，点击发送即可</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>需要用到NSSetUncaughtExceptionHandler，MFMailComposeViewController，沙盒，NSFileManager<br>实现截图的功能，考虑到并不是所有的页面都需要使用所以写在了分类里。需要用的时候直接引入头文件即可<br>这三个方法分别在摇一摇的时候回调用，开始，需要，结束。他们的父类是UIResponsder在UIKit中</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)motionBegan:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event&#123;&#125;</div><div class="line">-(<span class="keyword">void</span>)motionCancelled:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event&#123;&#125;</div><div class="line">-(<span class="keyword">void</span>)motionEnded:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> screenShot];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)screenShot</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIWindow</span> *screen = [[<span class="built_in">UIApplication</span> sharedApplication] keyWindow];</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(screen.frame.size);</div><div class="line">    [screen.layer renderInContext:<span class="built_in">UIGraphicsGetCurrentContext</span>()];</div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">NSData</span> *screenData = <span class="built_in">UIImagePNGRepresentation</span>(image);</div><div class="line">    [screenData writeToFile:[<span class="built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="string">@"Library/Caches"</span>] atomically:<span class="literal">YES</span>];   </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="发送邮件的功能"><a href="#发送邮件的功能" class="headerlink" title="发送邮件的功能"></a>发送邮件的功能</h2><blockquote><p>发送邮件的功能，也写在了分类里面，需要用的时候引入即可</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span> (<span class="title">send</span>)&lt;<span class="title">MFMailComposeViewControllerDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//发送邮件的方法，传入标题，描述信息，data, 接收人</span></div><div class="line">-(<span class="keyword">void</span>)sendMail:(MFMailComposeViewController*)mf andSubject:(<span class="built_in">NSString</span>*)subject andMessageBody:(<span class="built_in">NSString</span>*)message andData:(<span class="built_in">NSData</span>*)data  andRecipients:(<span class="built_in">NSArray</span>*)recipients</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>([MFMailComposeViewController canSendMail])&#123;</div><div class="line">        mf.mailComposeDelegate = <span class="keyword">self</span>;</div><div class="line">        [mf setSubject:subject];</div><div class="line">        [mf setToRecipients:recipients];</div><div class="line">        [mf addAttachmentData:data mimeType:<span class="string">@"image/jpeg"</span> fileName:<span class="string">@"error"</span>];</div><div class="line">        [mf setMessageBody:message isHTML:<span class="literal">YES</span>];</div><div class="line">        [<span class="keyword">self</span> presentViewController:mf animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        [<span class="keyword">self</span> alertView:<span class="string">@"不能调用邮箱"</span> andDesc:<span class="string">@"请尝试下载App原生邮箱，并配置"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="MFMailComposeViewControllerDelegate的代理方法，可以在这个方法里面写一些回调"><a href="#MFMailComposeViewControllerDelegate的代理方法，可以在这个方法里面写一些回调" class="headerlink" title="MFMailComposeViewControllerDelegate的代理方法，可以在这个方法里面写一些回调"></a>MFMailComposeViewControllerDelegate的代理方法，可以在这个方法里面写一些回调</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(<span class="built_in">NSError</span> *)error</div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (result) &#123;</div><div class="line">        <span class="keyword">case</span> MFMailComposeResultSent:</div><div class="line"></div><div class="line">            [<span class="keyword">self</span> alertView:<span class="string">@"发送成功"</span> andDesc:<span class="literal">nil</span>];</div><div class="line">            <span class="keyword">self</span>.success();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MFMailComposeResultSaved:</div><div class="line">            [<span class="keyword">self</span> alertView:<span class="string">@"保存成功"</span> andDesc:<span class="literal">nil</span>];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MFMailComposeResultFailed:</div><div class="line">            <span class="keyword">self</span>.faild();</div><div class="line">            [<span class="keyword">self</span> alertView:error.domain andDesc:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,error.userInfo]];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MFMailComposeResultCancelled:</div><div class="line">            [<span class="keyword">self</span> alertView:<span class="string">@"取消发送"</span> andDesc:<span class="literal">nil</span>];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            [<span class="keyword">self</span> alertView:<span class="string">@"为什么不发送"</span> andDesc:<span class="literal">nil</span>];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">这两个为函数方法，导入类名，直接可调用不用初始化</div><div class="line"><span class="keyword">void</span> CrashExceptionHandler(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSSetUncaughtExceptionHandler</span>(&amp;ExceptionLog);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ExceptionLog(<span class="built_in">NSException</span> *exception)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSDate</span> *date_current = [<span class="built_in">NSDate</span> date];</div><div class="line">    <span class="built_in">NSDictionary</span> *dictInfo = [[<span class="built_in">NSBundle</span> mainBundle]infoDictionary];</div><div class="line">    <span class="built_in">NSString</span> *name_App = [dictInfo objectForKey:<span class="string">@"CFBundleDisplayName"</span>];</div><div class="line">    <span class="built_in">NSString</span> *verson_App = [dictInfo objectForKey:<span class="string">@"CFBundleShortVersionString"</span>];</div><div class="line">    <span class="built_in">NSString</span> *build_App = [dictInfo objectForKey:<span class="string">@"CFBundleVersion"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *ecp = exception.callStackSymbols;</div><div class="line">    <span class="built_in">NSString</span> *reason = [exception reason];</div><div class="line">    <span class="built_in">NSString</span> *name = [exception name];</div><div class="line">    <span class="built_in">NSString</span> *exceptionInfo = [<span class="built_in">NSString</span> stringWithFormat:</div><div class="line">                               <span class="string">@"\n\n ******************************异常日志****************************** \n时间:%@\nApp名称:%@\nApp版本:%@\nBuild版本:%@\n异常名称:%@\n异常原因:%@\n堆栈信息:%@"</span>,date_current,name_App,verson_App,build_App,name,reason,ecp];</div><div class="line">    [CrashHandler saveLog:exceptionInfo andDate:date_current];</div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,exceptionInfo);</div><div class="line"><span class="meta">#else</span></div><div class="line"></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CrashHandler</span></span></div><div class="line">+(<span class="keyword">void</span>)saveLog:(<span class="built_in">NSString</span> *)crashLog andDate:(<span class="built_in">NSDate</span> *)date</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)objectAtIndex:<span class="number">0</span>] stringByAppendingString:<span class="string">@"/Crash"</span>];</div><div class="line">    <span class="keyword">if</span>(![[<span class="built_in">NSFileManager</span> defaultManager]fileExistsAtPath:path])</div><div class="line">    &#123;</div><div class="line">        [[<span class="built_in">NSFileManager</span> defaultManager]createDirectoryAtPath:path withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *logPath = [path stringByAppendingFormat:<span class="string">@"/%@.log"</span>,date];</div><div class="line">    [crashLog writeToFile:logPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><h2 id="检测Crash-log-功能在App打开的第一个页面去调用就好"><a href="#检测Crash-log-功能在App打开的第一个页面去调用就好" class="headerlink" title="检测Crash log 功能在App打开的第一个页面去调用就好"></a>检测Crash log 功能在App打开的第一个页面去调用就好</h2><pre><code class="objectivec">-(<span class="keyword">void</span>)crashLog{    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)objectAtIndex:<span class="number">0</span>] stringByAppendingString:<span class="string">@"/Crash"</span>];    <span class="built_in">NSFileManager</span> *mf = [<span class="built_in">NSFileManager</span> defaultManager];    <span class="keyword">if</span>(![mf fileExistsAtPath:path])    {        <span class="keyword">return</span>;    }    <span class="built_in">NSArray</span> *array = [mf contentsOfDirectoryAtPath:path error:<span class="literal">nil</span>];  }</code></pre><p><a href="https://juejin.im/post/59db05d5f265da065c5ebed4" target="_blank" rel="external">Bug管理工具</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Crash日志</title>
      <link href="/2017/11/22/OC/Code/OC-Code-Crash%E6%97%A5%E5%BF%97/"/>
      <content type="html"><![CDATA[<h1 id="获得crash日志"><a href="#获得crash日志" class="headerlink" title="获得crash日志"></a>获得crash日志</h1><h2 id="产生-保存"><a href="#产生-保存" class="headerlink" title="产生/保存"></a>产生/保存</h2><ul><li>程序崩溃时，系统会创建一份crash日志保存在设备上。</li><li>这份crash日志记录着应用程序崩溃时的信息，包含每个执行线程的栈调用信息（低内存闪退日志例外），对定位问题很有帮助</li></ul><h2 id="连接设备获取"><a href="#连接设备获取" class="headerlink" title="连接设备获取"></a>连接设备获取</h2><ul><li>可以连接设备，打开Xcode - Window - Organizer，</li><li>在左侧面板中选择Device Logs（可以选择具体设备的Device Logs或者Library下所有设备的Device Logs）</li><li>然后根据时间排序查看设备上的crash日志</li></ul><h2 id="已发布app通过iTunes-Connect获取"><a href="#已发布app通过iTunes-Connect获取" class="headerlink" title="已发布app通过iTunes Connect获取"></a>已发布app通过iTunes Connect获取</h2><ul><li>可以通过iTunes Connect（Manage Your Applications - View Details - Crash Reports）获取用户的crash日志</li><li>不过这并不是100%有效的，而且大多数开发者并不依赖于此，因为这需要用户设备同意上传相关信息，详情可参见iOS: Providing Apple with diagnostics and usage information摘要</li></ul><h2 id="接入现有的crash收集工具获取"><a href="#接入现有的crash收集工具获取" class="headerlink" title="接入现有的crash收集工具获取"></a>接入现有的crash收集工具获取</h2><p>通常接入现有的crash收集工具，或者自己编写一个进行自动化收集、解析和统计汇总</p><h1 id="解析crash日志"><a href="#解析crash日志" class="headerlink" title="解析crash日志"></a>解析crash日志</h1><h2 id="符号化解析"><a href="#符号化解析" class="headerlink" title="符号化解析"></a>符号化解析</h2><ul><li>当获得一份crash日志时，需要将初始展示的十六进制地址等原始信息映射为源代码级别的方法名称和代码行数，使其对开发人员可读这个过程称为符号化解析。要成功地符号化解析一份crash日志，我们需要有对应的应用程序二进制文件以及符号（.dSYM）文件</li></ul><p>-如果处于开发调试阶段，通常Xcode都能匹配到crash日志对应的二进制文件和符号文件，所以能够帮我们自动解析。</p><ul><li>如果处于测试阶段，测试人员已经安装了不同的版本（比如alpha、beta版本），那么需要保存好对应版本的二进制文件和符号文件，以便在应用程序崩溃时对crash日志进行解析。对于这种场景下产生的crash日志，只需要将.crash文件、.app文件和.dSYM文件三者放在同一个目录下，然后将.crash文件拖放到Xcode - Window - Organizer中左侧面板Library下的Device Logs中，即可进行解析。</li></ul><p>如果要提交发布，那么我们通常会先执行Clean，再Build，最后通过Product - Archive来打包。这样，Xcode会将二进制文件和符号文件归档在一起，可以通过Organizer中的Archives进行浏览</p><p><a href="http://stackoverflow.com/questions/1460892/symbolicating-iphone-app-crash-reports" target="_blank" rel="external">关于如何解析crash日志的讨论</a></p><h1 id="分析crash日志"><a href="#分析crash日志" class="headerlink" title="分析crash日志"></a>分析crash日志</h1><ul><li>在分析一份crash日志之前，如果开发人员对于常见的错误类型有所了解，那定是极好的。</li><li>crash日志的产生来源于两种问题：违反iOS策略被干掉，以及自身的代码bug</li></ul><h1 id="iOS策略"><a href="#iOS策略" class="headerlink" title="iOS策略"></a>iOS策略</h1><h2 id="低内存闪退"><a href="#低内存闪退" class="headerlink" title="低内存闪退"></a>低内存闪退</h2><blockquote><p>低内存闪退日志</p><ul><li>前面提到大多数crash日志都包含着执行线程的栈调用信息</li><li>但是低内存闪退日志除外，这里就先看看低内存闪退日志是什么样的<br>我们使用Xcode 5和iOS 7的设备模拟一次低内存闪退，然后通过Organizer查看产生的crash日志，可以发现Process和Type都为Unknown：</li></ul></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Crash%E6%97%A5%E5%BF%97-%20001.png" alt="001"></p><blockquote><p>具体的日志内容如下</p><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Crash%E6%97%A5%E5%BF%97-%20002.png" alt="002"></p></blockquote><ul><li>第一部分是崩溃信息，包括识别标识、软硬件信息和时间信息等。</li><li>第二部分是内存页分配信息，以及当前占用内存最多的进程，上图中为crashTypeDemo。</li><li><p>第三部分是具体的进程列表，描述着每个进程使用内存的情况以及当前状态。在较早的版本中可以在某些进程后面看到“jettisoned”字样，表明这些进程使用过多内存被终止了，而现在我们看到的是“vm-pageshortage”字样。</p></li><li><p>当iOS检测到内存过低时，它（的VM系统）会发出低内存警告通知，尝试回收一些内存；如果情况没有得到足够的改善，iOS会终止后台应用以回收更多内存；最后，如果内存还是不足，那么正在运行的应用可能会被终止掉。</p></li><li>所以，我们的应用应该合理地响应系统抛出来的低内存警告通知，对一些缓存数据和可重新创建的对象进行释放，同时要避免出现内存泄露等问题。</li></ul><p>低内存闪退是由iOS策略决定终止应用程序运行的，同样基于iOS策略的还有Watchdog超时和用户强制退出</p><h2 id="Watchdog超时"><a href="#Watchdog超时" class="headerlink" title="Watchdog超时"></a>Watchdog超时</h2><ul><li><p>Apple的iOS Developer Library网站上，QA1693文档中描述了Watchdog机制，包括生效场景和表现。如果我们的应用程序对一些特定的UI事件（比如启动、挂起、恢复、结束）响应不及时，Watchdog会把我们的应用程序干掉，并生成一份响应的crash报告</p></li><li><p>这份crash报告的有趣之处在于异常代码：“0x8badf00d”，即“ate bad food”</p></li><li><p>如果说特定的UI事件比较抽象，那么用代码来直接描述的话，对应的就是（创建一个工程时Xcode自动生成的）UIApplicationDelegate的几个方法：</p></li></ul><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Crash%E6%97%A5%E5%BF%97%20-%20003.png" alt="003"></p><ul><li>所以当遇到Watchdog日志时，可以检查下上图几个方法是否有比较重的阻塞UI的动作</li><li>QA1693举的例子是在主线程进行同步网络请求。如果我们是在公司的Wifi环境下使用则一切顺利，但当应用程序发布出去面向很大范围的用户，在各种网络环境下运行，则不可避免地会出现一片Watchdog超时报告。<br>另一种可能出现问题的场景就是数据量比较大的情况下进行的数据库版本迁移（同样是在主线程上），这也是促使我写这篇总结的一个直接因素。</li></ul><h2 id="用户强制退出"><a href="#用户强制退出" class="headerlink" title="用户强制退出"></a>用户强制退出</h2><ul><li><p>一看到“用户强制退出”，首先可能想到的双击Home键，然后关闭应用程序。不过这种场景是不会产生crash日志的，因为双击Home键后，所有的应用程序都处于后台状态，而iOS随时都有可能关闭后台进程，所以这种场景没有crash日志。</p></li><li><p>另一种场景是用户同时按住电源键和Home键，让iPhone重启。这种场景会产生日志（仅验证过一次），但并不针对特定应用程序。</p></li><li><p>这里指的“用户强制退出”场景，是稍微比较复杂点的操作：先按住电源键，直到出现“滑动关机”的界面时，再按住Home键，这时候当前应用程序会被终止掉，并且产生一份相应事件的crash日志</p></li></ul><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Crash%E6%97%A5%E5%BF%97-%20004.png" alt="004"></p><ul><li>通常，用户应该是遇到应用程序卡死，并且影响到了iOS响应，才会进行这样的操作——不过感觉这操作好高级，所以这样的crash日志应该比较少见</li></ul><h1 id="常见错误标识"><a href="#常见错误标识" class="headerlink" title="常见错误标识"></a>常见错误标识</h1><h2 id="Exception-codes"><a href="#Exception-codes" class="headerlink" title="Exception codes"></a>Exception codes</h2><p>上面“用户强制退出”的crash日志中的Exception Codes是“0xdeadfa11”，再上面“Watchdog超时”的crash日志中的Exception Codes是“0x8badf00d”，这些都是特有的Exception codes。<br>根据官方文档描述，至少有以下几种特定异常代码：</p><p>0x8badf00d错误码：Watchdog超时，意为“ate bad food”。</p><p>0xdeadfa11错误码：用户强制退出，意为“dead fall”。</p><p>0xbaaaaaad错误码：用户按住Home键和音量键，获取当前内存状态，不代表崩溃。<br><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Crash%E6%97%A5%E5%BF%97-%20005.png" alt="005"><br>0xbad22222错误码：VoIP应用（因为太频繁？）被iOS干掉。</p><p>0xc00010ff错误码：因为太烫了被干掉，意为“cool off”。</p><p>0xdead10cc错误码：因为在后台时仍然占据系统资源（比如通讯录）被干掉，意为“dead lock”</p><h2 id="Exception-types"><a href="#Exception-types" class="headerlink" title="Exception types"></a>Exception types</h2><p>查看我们的crash分析报告邮件，会发现最经常遇到的错误类型是SEGV（Segmentation Violation，段违例），表明内存操作不当，比如访问一个没有权限的内存地址。<br>当我们收到SIGSEGV信号时，可以往以下几个方面考虑：<br>访问无效内存地址，比如访问Zombie对象；<br>尝试往只读区域写数据；<br>解引用空指针；<br>使用未初始化的指针；<br>栈溢出；<br>此外，还有其它常见信号：<br>SIGABRT：收到Abort信号，可能自身调用abort()或者收到外部发送过来的信号；<br>SIGBUS：总线错误。与SIGSEGV不同的是，SIGSEGV访问的是无效地址（比如虚存映射不到物理内存），而SIGBUS访问的是有效地址，但总线访问异常（比如地址对齐问题）；<br>SIGILL：尝试执行非法的指令，可能不被识别或者没有权限；<br>SIGFPE：Floating Point Error，数学计算相关问题（可能不限于浮点计算），比如除零操作；<br>SIGPIPE：管道另一端没有进程接手数据</p><h2 id="代码bug"><a href="#代码bug" class="headerlink" title="代码bug"></a>代码bug</h2><p>此外，比较常见的崩溃基本都源于代码bug，比如数组越界、插空、多线程安全性、访问野指针、发送未实现的selector等。如果引入Core Data，则又有另外一些常见问题，不过这是另一个话题了。</p><p>遇到这些bug时，都有比较清楚的错误原因说明，比如“index 0 beyond bounds for empty array”等。需要稍微注意点的是多线程问题，当一时找不到解决思路时，不妨往多线程方面考虑下</p><p><a href="http://blog.csdn.net/jasonblog/article/details/19031517" target="_blank" rel="external">iOS应用的crash日志的分析基础</a></p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Code </tag>
            
            <tag> crash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Func-检测主线程卡顿的问题</title>
      <link href="/2017/11/22/OC/Func/iOS-Func-%E6%A3%80%E6%B5%8B%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <content type="html"><![CDATA[<h1 id="runloop-检测方案"><a href="#runloop-检测方案" class="headerlink" title="runloop - 检测方案"></a>runloop - 检测方案</h1><p>  <a href="https://juejin.im/post/59edb7596fb9a0450d103f34" target="_blank" rel="external">原文文档</a></p><h2 id="CFRunLoopRun"><a href="#CFRunLoopRun" class="headerlink" title="CFRunLoopRun"></a>CFRunLoopRun</h2><p><a href="http://opensource.apple.com/source/CF/CF-1151.16/CFRunLoop.c" target="_blank" rel="external">CFRunLoopRun源代码</a></p><blockquote><p>核心方法CFRunLoopRun简化后的主要逻辑大概是这样的:<br>NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">   int32_t __CFRunLoopRun()</div><div class="line">&#123;</div><div class="line">    <span class="comment">//通知即将进入runloop</span></div><div class="line">    __CFRunLoopDoObservers(KCFRunLoopEntry);</div><div class="line">    </div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 通知将要处理timer和source</span></div><div class="line">        __CFRunLoopDoObservers(kCFRunLoopBeforeTimers);</div><div class="line">        __CFRunLoopDoObservers(kCFRunLoopBeforeSources);</div><div class="line">        </div><div class="line">        __CFRunLoopDoBlocks();  <span class="comment">//处理非延迟的主线程调用</span></div><div class="line">        __CFRunLoopDoSource0(); <span class="comment">//处理UIEvent事件</span></div><div class="line">        </div><div class="line">        <span class="comment">//GCD dispatch main queue</span></div><div class="line">        CheckIfExistMessagesInMainDispatchQueue();</div><div class="line">        </div><div class="line">        <span class="comment">// 即将进入休眠</span></div><div class="line">        __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting);</div><div class="line">        </div><div class="line">        <span class="comment">// 等待内核mach_msg事件</span></div><div class="line">        mach_port_t wakeUpPort = SleepAndWaitForWakingUpPorts();</div><div class="line">        </div><div class="line">        <span class="comment">// Zzz...</span></div><div class="line">        </div><div class="line">        <span class="comment">// 从等待中醒来</span></div><div class="line">        __CFRunLoopDoObservers(kCFRunLoopAfterWaiting);</div><div class="line">        </div><div class="line">        <span class="comment">// 处理因timer的唤醒</span></div><div class="line">        <span class="keyword">if</span> (wakeUpPort == timerPort)</div><div class="line">            __CFRunLoopDoTimers();</div><div class="line">        </div><div class="line">        <span class="comment">// 处理异步方法唤醒,如dispatch_async</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wakeUpPort == mainDispatchQueuePort)</div><div class="line">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()</div><div class="line">            </div><div class="line">        <span class="comment">// UI刷新,动画显示</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            __CFRunLoopDoSource1();</div><div class="line">        </div><div class="line">        <span class="comment">// 再次确保是否有同步的方法需要调用</span></div><div class="line">        __CFRunLoopDoBlocks();</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">while</span> (!stop &amp;&amp; !timeout);</div><div class="line">    </div><div class="line">    <span class="comment">//通知即将退出runloop</span></div><div class="line">    __CFRunLoopDoObservers(<span class="built_in">CFRunLoopExit</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="runloop-的状态"><a href="#runloop-的状态" class="headerlink" title="runloop 的状态"></a>runloop 的状态</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">CF_OPTIONS</span>(<span class="built_in">CFOptionFlags</span>, <span class="built_in">CFRunLoopActivity</span>) </div><div class="line">&#123;</div><div class="line">    kCFRunLoopEntry         = (<span class="number">1</span>UL &lt;&lt; <span class="number">0</span>), <span class="comment">// 即将进入Loop</span></div><div class="line">    kCFRunLoopBeforeTimers  = (<span class="number">1</span>UL &lt;&lt; <span class="number">1</span>), <span class="comment">// 即将处理 Timer</span></div><div class="line">    kCFRunLoopBeforeSources = (<span class="number">1</span>UL &lt;&lt; <span class="number">2</span>), <span class="comment">// 即将处理 Source</span></div><div class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1</span>UL &lt;&lt; <span class="number">5</span>), <span class="comment">// 即将进入休眠</span></div><div class="line">    kCFRunLoopAfterWaiting  = (<span class="number">1</span>UL &lt;&lt; <span class="number">6</span>), <span class="comment">// 刚从休眠中唤醒</span></div><div class="line">    kCFRunLoopExit          = (<span class="number">1</span>UL &lt;&lt; <span class="number">7</span>), <span class="comment">// 即将退出Loop</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><blockquote><p>耗时进行判断</p><ul><li>利用 <strong>kCFRunLoopBeforeSources</strong> 和 <strong>*kCFRunLoopAfterWaiting</strong> 这两个状态之间的耗时</li><li>进行判断:<strong>是否有太多事件处理导致出现了卡顿</strong></li></ul><p>AppDelegate+AppService 监听runloop的状态而写的回调函数</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> runLoopObserverCallBack(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="keyword">void</span> *info)</div><div class="line">&#123;</div><div class="line">    PingConfig *object = (__bridge PingConfig*)info;</div><div class="line">    <span class="comment">// 记录状态值</span></div><div class="line">    object-&gt;activity = activity;</div><div class="line">    <span class="comment">// 发送信号</span></div><div class="line">    dispatch_semaphore_t semaphore = object-&gt;semaphore;</div><div class="line">    dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="AppDelegate-注册监听"><a href="#AppDelegate-注册监听" class="headerlink" title="AppDelegate 注册监听"></a>AppDelegate 注册监听</h2><ul><li><p>PingConfig: 一个用来存储runloop的状态和信号量的自定义类，其中的结构如下</p></li><li><p>APP启动时我可以进入 registerObserver 方法，其中首先我创建一个记录信息的类PingConfig实例，然后创建一个信号，并且保存在这个PingConfig实例中(其实只是为了方便拿到</p></li><li></li><li><p>创建了一个观察者监测主线程的runloop,它会在主线程runloop状态切换时进行回调</p></li><li><p>开启一个子线程，并且在里面进行一个 while 循环，在 循环的开始处 wait 一个信号量，并且设置超时为 50毫秒，失败后会返回一个非0数，成功将会返回0，这时候线程会阻塞住等待一个信号的发出</p></li><li><p>如果runloop状态正常切换，那么就会进入回调函数，在回调函数中我们发出一个信号，并且记录当前状态到PingConfig实例中，下面的判断语句中发现为0，timeoutCount自动置为0，一切正常</p></li><li><p>当主线程出现卡顿，while循环中的信号量再次等待，但是回调函数没有触发，从而导致等待超时，返回一个非0数，进入判断句后，我们再次判断状态是否处于 kCFRunLoopBeforeSources 或 kCFRunLoopAfterWaiting，如果成立，timeoutCount+1</p></li></ul><ul><li>持续五次runloop不切换状态，说明runloop正在处理某个棘手的事件无法休息且不更新状态，这样while循环中的信号量超时会一直发生，超过5次后我们将断定主线程的卡顿并上传堆栈信息</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)registerObserver</div><div class="line">&#123;</div><div class="line">    PingConfig *config = [PingConfig new];</div><div class="line">    <span class="comment">// 创建信号</span></div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    config-&gt;semaphore = semaphore;</div><div class="line"></div><div class="line">    <span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>,(__bridge <span class="keyword">void</span>*)config,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    <span class="built_in">CFRunLoopObserverRef</span> observer = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</div><div class="line">                                                            kCFRunLoopAllActivities,</div><div class="line">                                                            <span class="literal">YES</span>,</div><div class="line">                                                            <span class="number">0</span>,</div><div class="line">                                                            &amp;runLoopObserverCallBack,</div><div class="line">                                                            &amp;context);</div><div class="line">    <span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), observer, kCFRunLoopCommonModes);</div><div class="line"></div><div class="line">    __block uint8_t timeoutCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 在子线程监控时长</span></div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">YES</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)</span></div><div class="line">            <span class="keyword">long</span> st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, <span class="number">50</span>*<span class="built_in">NSEC_PER_MSEC</span>));</div><div class="line">            <span class="keyword">if</span> (st != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line"><span class="comment">//                NSLog(@"循环中--%ld",config-&gt;activity);</span></div><div class="line">                <span class="keyword">if</span> (config-&gt;activity==kCFRunLoopBeforeSources || config-&gt;activity==kCFRunLoopAfterWaiting)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (++timeoutCount &lt; <span class="number">5</span>)&#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">NSLog</span>(<span class="string">@"卡顿了"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            timeoutCount = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="PingConfig"><a href="#PingConfig" class="headerlink" title="PingConfig"></a>PingConfig</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PingConfig</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">@public</span></div><div class="line"> <span class="built_in">CFRunLoopActivity</span> activity;</div><div class="line"> dispatch_semaphore_t semaphore;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><h1 id="Other情况主线程卡顿"><a href="#Other情况主线程卡顿" class="headerlink" title="Other情况主线程卡顿"></a>Other情况主线程卡顿</h1><h2 id="主线程卡在界面尚未完全显示前"><a href="#主线程卡在界面尚未完全显示前" class="headerlink" title="主线程卡在界面尚未完全显示前"></a>主线程卡在界面尚未完全显示前</h2><blockquote><p>当主线程卡在界面尚未完全显示前，这个方案就检测不出来卡顿了，比如我将下面的代码放在B控制器中</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">dispatch_semaphore_t t = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"----"</span>);</div><div class="line">        dispatch_semaphore_signal(t);</div><div class="line">    &#125;);</div><div class="line">    dispatch_semaphore_wait(t, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure><ul><li>上面是一段有问题的代码，将导致主线程的持续堵塞，如果我们在这段代码放在B控制器的ViewDidLoad方法中(ViewWillAppear同样)</li><li>运行后，当你希望push到B控制器时，项目将在上一个界面完全卡住，并且无法用上面的方案检测到，而且CPU及内存都显示正常</li></ul><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><ul><li>由于runloop在处理完source0或者source1后，比如界面的跳转也是执行了方法，具体有没有用到source0这不重要，但是后面会紧接着进入准备睡眠(kCFRunLoopBeforeWaiting)的状态，然而此时线程的阻塞导致runloop的状态也被卡住无法切换，这样也就导致在那段检测代码中无法进入条件，从而检测不出来。</li><li>但是话说回来，APP在静止状态(保持休眠)和刚刚那种卡死状态都会使runloop维持在 kCFRunLoopBeforeWaiting状态，这样我们就无法在那段代码中增加判断来修复，因为无法知道到底是真的静止没有操作还是被阻塞住，我也没找到线程的阻塞状态属性，如果你发现这个属性，那么就可以使用那个属性来判断</li></ul><h2 id="检测方案"><a href="#检测方案" class="headerlink" title="检测方案"></a>检测方案</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"serial"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">    <span class="keyword">self</span>.timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, serialQueue);</div><div class="line">    dispatch_source_set_timer(<span class="keyword">self</span>.timer, DISPATCH_TIME_NOW, <span class="number">0.25</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    __block int8_t chokeCount = <span class="number">0</span>;</div><div class="line">    dispatch_semaphore_t t2 = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    dispatch_source_set_event_handler(<span class="keyword">self</span>.timer, ^&#123;</div><div class="line">        <span class="keyword">if</span> (config-&gt;activity == kCFRunLoopBeforeWaiting) &#123;</div><div class="line">            <span class="keyword">static</span> <span class="built_in">BOOL</span> ex = <span class="literal">YES</span>;</div><div class="line">            <span class="keyword">if</span> (ex == <span class="literal">NO</span>) &#123;</div><div class="line">                chokeCount ++;</div><div class="line">                <span class="keyword">if</span> (chokeCount &gt; <span class="number">40</span>) &#123;</div><div class="line">                    <span class="built_in">NSLog</span>(<span class="string">@"差不多卡死了"</span>);</div><div class="line">                    dispatch_suspend(<span class="keyword">self</span>.timer);</div><div class="line">                    <span class="keyword">return</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"卡顿了"</span>);</div><div class="line">                <span class="keyword">return</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                ex = <span class="literal">YES</span>;</div><div class="line">                dispatch_semaphore_signal(t2);</div><div class="line">            &#125;);</div><div class="line">            <span class="built_in">BOOL</span> su = dispatch_semaphore_wait(t2, dispatch_time(DISPATCH_TIME_NOW, <span class="number">50</span>*<span class="built_in">NSEC_PER_MSEC</span>));</div><div class="line">            <span class="keyword">if</span> (su != <span class="number">0</span>) &#123;</div><div class="line">                ex = <span class="literal">NO</span>;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    dispatch_resume(<span class="keyword">self</span>.timer);</div></pre></td></tr></table></figure><blockquote><p>方案解释</p></blockquote><ul><li><p>开启一个异步队列，并且创建一个定时器，时间我设置的是0.25秒，具体时间随你自己，这个时间是用来检测卡死的持续时间</p></li><li><p>在定时器外面我也同样创建了一个用来同步的信号量，这个不解释了，不会的就去看一下信号量的使用方式。进入定时器的回调后，我设置了一个静态变量来记录主队列是否执行完成。</p></li><li><p>我们判断当前runloop的状态是否为kCFRunLoopBeforeWaiting，所以这个方案是用来弥补前面那个方案，如果主线程此时没有阻塞住，我们在这里向main Queue抛一个block，看它是否能够成功执行，如果成功执行，说明主线程没有阻塞住，如果已经被阻塞住，那我抛过去的block是肯定不会被执行的。</p></li><li><p>下面的代码就是一些辅助操作，当信号量超过50毫秒，抛给主线程的block没有执行，那么说明此时就有一些阻塞了，返回一个非0数，并设置 ex为NO，从而在下一次定时器回调到来时进行上报</p></li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-Layer-Shadow阴影</title>
      <link href="/2017/11/22/OC/Kit/Shadow%E9%98%B4%E5%BD%B1/"/>
      <content type="html"><![CDATA[<ul><li>shadowColor:阴影颜色,可设置透明度等.</li><li>shadowOffset:偏移量.,xy表示view左上角,width表示阴影与x的偏移量,height表示阴影与y值的偏移量</li><li>shadowOpacity = 0.4//阴影透明度,默认为0则看不到阴影.因此要看到阴影这个值必须大于0,shadowColor的透明度也要大于0</li><li>shadowRadius:5.模糊计算的半径,取平均值的半径,设置为0的话则为一个矩形块.</li><li>模糊度的解释:每一个像素取平均值,分母的取值范围,越大越模糊.感觉这篇文章讲的比较容易懂<br>(<a href="http://www.dongcoder.com/detail-22914.html" target="_blank" rel="external">http://www.dongcoder.com/detail-22914.html</a>).</li><li>注意:如果clipsToBounds设置为YES,则阴影效果消失</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">let layer = view.layer</div><div class="line">      layer.shadowColor = UIColor.black.cgColor//阴影颜色</div><div class="line">      layer.shadowOffset = CGSize(width: 10, height: 10)//width表示阴影与x的便宜量,height表示阴影与y值的偏移量</div><div class="line">      layer.shadowOpacity = 0.4//阴影透明度,默认为0则看不到阴影</div><div class="line">      layer.shadowRadius = 5;</div></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/taishanduba/article/details/52611502" target="_blank" rel="external">Go!</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
          <category> Layer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> UIKit </tag>
            
            <tag> Layer </tag>
            
            <tag> Shadow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-RunTime-方法交换/拦截基础使用</title>
      <link href="/2017/11/22/OC/Grammar/iOS-RunTime-%E6%96%B9%E6%B3%95%E4%BA%A4%E6%8D%A2-%E6%8B%A6%E6%88%AA%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<h1 id="RunTime的消息机制"><a href="#RunTime的消息机制" class="headerlink" title="RunTime的消息机制"></a>RunTime的消息机制</h1><p><a href="https://juejin.im/post/59e006116fb9a0450a665af2" target="_blank" rel="external">参考链接</a></p><blockquote><p>Objective-C的方法调用是属于消息传送的机制<br>每个类都有一个isa的结构体指针<br>在这个结构体里, 得到指定类的所有属性, 所有方法的列表, 也可以知父类是什么…</p></blockquote><h2 id="新建RTMsgModel"><a href="#新建RTMsgModel" class="headerlink" title="新建RTMsgModel"></a>新建RTMsgModel</h2><blockquote><p>RTMsgModel.h</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">@interface RTMsgModel : NSObject</div><div class="line">- (void)ff_post;</div><div class="line">- (void)ff_getWithCount:(NSInteger)count;</div></pre></td></tr></table></figure><blockquote><p>RTMsgModel.m</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)ff_post</div><div class="line">&#123;</div><div class="line">   NSLog(@&quot;被调用了: %@, 当前对象为: %@&quot;, NSStringFromClass([self class]), self);</div><div class="line">&#125;</div><div class="line">- (void)ff_getWithCount:(NSInteger)count</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;被%ld人调用了&quot;, count);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="测试消息机制"><a href="#测试消息机制" class="headerlink" title="测试消息机制"></a>测试消息机制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//</div><div class="line">//  ViewController.m</div><div class="line">//  Runtime方法交换拦截</div><div class="line">//</div><div class="line">//  Created by RN on 17/11/22.</div><div class="line">//  Copyright © 2017年 YueKekui. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;RTMsgModel.h&quot;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    [self show_runTimeMsg];</div><div class="line">&#125;</div><div class="line">#pragma mark - RunTime的消息机制</div><div class="line">/**</div><div class="line"> * @brief:  RunTime的消息机制</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> * @attention： Xcode 会自动屏蔽通过objc_msgSend创建对象, 我们可以去到工程里设置</div><div class="line"> *               Build Setting -&gt; Enable Strict Checking of objc_msgSend Calls 改成No</div><div class="line"> */</div><div class="line">- (void)show_runTimeMsg</div><div class="line">&#123;</div><div class="line">    //1.objc_getClass</div><div class="line">    Class getClass = objc_getClass(&quot;RTMsgModel&quot;);</div><div class="line">    NSLog(@&quot;Get The Class is: %@&quot;, getClass);</div><div class="line">    </div><div class="line"></div><div class="line">    //2.objc_msgSend</div><div class="line">    RTMsgModel *messageModel = objc_msgSend(getClass, @selector(alloc));</div><div class="line">    </div><div class="line">    NSLog(@&quot;alloc Object: %@&quot;, messageModel);</div><div class="line">    </div><div class="line">    // 在不调用init方法, 可以通过发消息调用想用的方法, 这里调用没有在.h文件里声明的方法会警告该方法没有声明</div><div class="line">    objc_msgSend(messageModel, @selector(ff_post));</div><div class="line">    </div><div class="line">    messageModel = objc_msgSend(messageModel, @selector(init));</div><div class="line">    </div><div class="line">    NSLog(@&quot;init Object: %@&quot;, messageModel);</div><div class="line">    </div><div class="line">    </div><div class="line">    objc_msgSend(messageModel, @selector(ff_post));</div><div class="line">    </div><div class="line">    // 还有另外一种写法, 就是把所有东西都集合在一起, 也就是我们常用的[[NSObject alloc] init];的原型</div><div class="line">    RTMsgModel *messageModelTwo = objc_msgSend(objc_msgSend(objc_getClass(&quot;RTMsgModel&quot;), @selector(alloc)), @selector(init));</div><div class="line">    objc_msgSend(messageModelTwo, @selector(ff_getWithCount:), 5);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2017-11-22 12:36:16.232 Runtime方法交换拦截[21927:3962074] Get The Class is: RTMsgModel</div><div class="line">2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] alloc Object: &lt;RTMsgModel: 0x600000003680&gt;</div><div class="line">2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] 被调用了: RTMsgModel, 当前对象为: &lt;RTMsgModel: 0x600000003680&gt;</div><div class="line">2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] init Object: &lt;RTMsgModel: 0x600000003680&gt;</div><div class="line">2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] 被调用了: RTMsgModel, 当前对象为: &lt;RTMsgModel: 0x600000003680&gt;</div><div class="line">2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] 被5人调用了</div></pre></td></tr></table></figure><h1 id="RunTime方法交换"><a href="#RunTime方法交换" class="headerlink" title="RunTime方法交换"></a>RunTime方法交换</h1><blockquote><p>建一个类RunTimeMethodModel.h</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@interface RunTimeMethodModel : NSObject</div><div class="line">@property (nonatomic, copy) NSString *cl_height;</div><div class="line">@property (nonatomic, copy) NSString *cl_weight;</div><div class="line"></div><div class="line">- (NSString *)cl_height;</div><div class="line">- (NSString *)cl_weight;</div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>RunTimeMethodModel.m</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (NSString *)cl_height &#123;</div><div class="line">    return @&quot;我身高180&quot;;</div><div class="line">&#125;</div><div class="line">- (NSString *)cl_weight &#123;</div><div class="line">    return @&quot;我体重280&quot;;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="测试交换方法"><a href="#测试交换方法" class="headerlink" title="测试交换方法"></a>测试交换方法</h2><blockquote><p>执行方法交换</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">RunTimeMethodModel *methodModel = [[RunTimeMethodModel alloc] init];</div><div class="line"></div><div class="line"> NSLog(@&quot;身高: %@&quot;, methodModel.cl_height);</div><div class="line"> NSLog(@&quot;体重: %@&quot;, methodModel.cl_weight);</div><div class="line"></div><div class="line"> Method methodOne = class_getInstanceMethod([methodModel class], @selector(cl_height));</div><div class="line"> Method methodTwo = class_getInstanceMethod([methodModel class], @selector(cl_weight));</div><div class="line"></div><div class="line"> method_exchangeImplementations(methodOne, methodTwo);</div><div class="line"></div><div class="line"> NSLog(@&quot;打印的内容: %@&quot;, [methodModel cl_height]);</div></pre></td></tr></table></figure><h2 id="打印-1"><a href="#打印-1" class="headerlink" title="打印"></a>打印</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">身高: 我身高180</div><div class="line">体重: 我体重280 </div><div class="line">打印的内容: 我体重280</div></pre></td></tr></table></figure><h2 id="注意一点"><a href="#注意一点" class="headerlink" title="注意一点"></a>注意一点</h2><p><strong><em>注意一点, 由于这里的ViewController会销毁, 但method_exchangeImplementations会一直存在, 再次进来的时候, 就会再次根据上次交换过的顺序再次交换</em></strong></p><blockquote><p>+load交换方法</p></blockquote><h3 id="load交换方法"><a href="#load交换方法" class="headerlink" title="+load交换方法"></a>+load交换方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line"></div><div class="line">    Method methodOne = class_getInstanceMethod(self, @selector(cl_height));</div><div class="line">    Method methodTwo = class_getInstanceMethod(self, @selector(cl_weight));</div><div class="line"></div><div class="line">    method_exchangeImplementations(methodOne, methodTwo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)cl_height &#123;</div><div class="line"></div><div class="line">    return @&quot;我身高180&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)cl_weight &#123;</div><div class="line"></div><div class="line">    return @&quot;我体重280&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>打印</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">身高: 我体重280</div><div class="line"></div><div class="line">体重: 我身高180</div><div class="line"></div><div class="line">身高: 我体重280</div><div class="line"></div><div class="line">体重: 我身高180</div></pre></td></tr></table></figure><h3 id="initialize交换方法"><a href="#initialize交换方法" class="headerlink" title="+initialize交换方法"></a>+initialize交换方法</h3><blockquote><p>+load这个方法里的确是可以保证方法交换只有一次, 但这里有一个弊端, 就是当程序一运行就会执行这个方法交换了<br>+load: 程序一开始就会去执行, 只执行一次.<br>+initialize: 当类被初始化的时候会才会去执行, 该类只会执行一次.</p><p>initialize<br>class_getInstanceMethod         获取实例方法<br>method_exchangeImplementations  方法交换</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ (void)initialize </div><div class="line">+ &#123;</div><div class="line">    Method methodOne = class_getInstanceMethod(self, @selector(cl_height));</div><div class="line">    Method methodTwo = class_getInstanceMethod(self, @selector(cl_weight));</div><div class="line">    method_exchangeImplementations(methodOne, methodTwo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)cl_height &#123;</div><div class="line">    return @&quot;我身高180&quot;;</div><div class="line">&#125;</div><div class="line">- (NSString *)cl_weight &#123;</div><div class="line">    return @&quot;我体重280&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="RunTime方法拦截"><a href="#RunTime方法拦截" class="headerlink" title="RunTime方法拦截"></a>RunTime方法拦截</h1><blockquote><p>从刚刚我们就知道, 可以使用method_exchangeImplementations交换两个方法, 但只应用在本类, 现在我们来看看别的应</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">@implementation BaseModel</div><div class="line">- (void)cl_logBaseModel &#123;</div><div class="line">    NSLog(@&quot;Base Model Log&quot;);</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation InterceptModel</div><div class="line">- (void)cl_logInterceptModel &#123;</div><div class="line">    NSLog(@&quot;Intercept You Method &quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>最终的实现</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ (void)initialize &#123;</div><div class="line"></div><div class="line">    Method mehtodOne = class_getInstanceMethod([BaseModel class], @selector(cl_logBaseModel));</div><div class="line">    Method mehtodTwo = class_getInstanceMethod([InterceptModel class], @selector(cl_logInterceptModel));</div><div class="line"></div><div class="line">    method_exchangeImplementations(mehtodOne, mehtodTwo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    self.view.backgroundColor = [UIColor whiteColor];</div><div class="line"></div><div class="line">    BaseModel *baseModel = [[BaseModel alloc] init];</div><div class="line"></div><div class="line">    [baseModel cl_logBaseModel];</div><div class="line">&#125;</div><div class="line">。</div></pre></td></tr></table></figure><blockquote><p>打印结果<br>发现方法是被InterceptModel这个类拦截, 并且替换了InterceptModel的方法</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[InterceptModel cl_logInterceptModel] 第15行 Intercept You Method</div></pre></td></tr></table></figure><h1 id="类方法也可以交换和拦截"><a href="#类方法也可以交换和拦截" class="headerlink" title="类方法也可以交换和拦截"></a>类方法也可以交换和拦截</h1><blockquote><p>新增类方法</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#import &quot;BaseModel.h&quot;</div><div class="line"></div><div class="line">@implementation BaseModel</div><div class="line"></div><div class="line">- (void)cl_logBaseModel &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;Base Model Log&quot;);</div><div class="line">&#125;</div><div class="line">+ (void)cl_logBaseModelClass &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;Base Model Class Log&quot;);</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">-----------------------------------------------</div><div class="line">@implementation InterceptModel</div><div class="line"></div><div class="line">- (void)cl_logInterceptModel &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;Intercept You Method &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)cl_logInterceptModelClass &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;Intercept Class You Method &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>最终实现<br>class_getInstanceMethod 获取类方法<br>method_exchangeImplementations</p><p>initialize<br> class_getInstanceMethod         实例方法<br> class_getClassMethod            类方法<br> method_exchangeImplementations  交换方法</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ (void)initialize &#123;</div><div class="line">    // 拦截实例方法</div><div class="line">    Method mehtodOne = class_getInstanceMethod([BaseModel class], @selector(cl_logBaseModel));</div><div class="line">    Method mehtodTwo = class_getInstanceMethod([InterceptModel class], @selector(cl_logInterceptModel));</div><div class="line">    method_exchangeImplementations(mehtodOne, mehtodTwo);</div><div class="line"></div><div class="line">    // 拦截类方法</div><div class="line">    Method classMehtodOne = class_getClassMethod([BaseModel class], @selector(cl_logBaseModelClass));</div><div class="line">    Method classMehtodTwo = class_getClassMethod([InterceptModel class], @selector(cl_logInterceptModelClass));</div><div class="line"></div><div class="line">    method_exchangeImplementations(classMehtodOne, classMehtodTwo);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>执行</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">self.view.backgroundColor = [UIColor whiteColor];</div><div class="line"></div><div class="line">BaseModel *baseModel = [[BaseModel alloc] init];</div><div class="line"></div><div class="line">[baseModel cl_logBaseModel];</div><div class="line"></div><div class="line">[BaseModel cl_logBaseModelClass];</div></pre></td></tr></table></figure><blockquote><p>打印</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Intercept You Method </div><div class="line"></div><div class="line">Intercept Class You Method</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> RunTime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RunTime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-UIScrollView基础用法</title>
      <link href="/2017/11/22/OC/Kit/UIScrollView%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    _scrollView.backgroundColor = [UIColor redColor];</div><div class="line">    //设置contentSize（必须设置）</div><div class="line">    _scrollView.contentSize = CGSizeMake(400, 667);</div><div class="line">    //偏移量</div><div class="line">    _scrollView.contentOffset = CGPointMake(100, 0);</div><div class="line">    //contentInset(在原有的基础上调整内容滚动区域的大小)</div><div class="line">    //_scrollView.contentInset = UIEdgeInsetsMake(-100, 0, 0, 0);</div><div class="line">    </div><div class="line">    //锁定方向(当系统识别滚动方向的时候，会把另外一个方向锁定，如果识别不了，就不锁定方向)</div><div class="line">    _scrollView.directionalLockEnabled = YES;</div><div class="line">    //反弹效果(默认为yes)</div><div class="line">    _scrollView.bounces = YES;</div><div class="line">    //默认是no，假如是yes并且bounces是yes,甚至如果内容大小小于bounds的时候，允许垂直拖动</div><div class="line">    _scrollView.alwaysBounceVertical = YES;</div><div class="line">    //分页（默认no）</div><div class="line">    _scrollView.pagingEnabled = YES;</div><div class="line">    //滚动(默认yes允许滚动)</div><div class="line">    _scrollView.scrollEnabled = YES;</div><div class="line">    </div><div class="line">    //滚动条</div><div class="line">    //showsHorizontalScrollIndicator默认yes 显示</div><div class="line">    _scrollView.showsHorizontalScrollIndicator = NO;</div><div class="line">    //滚动条滚动的范围(垂直滚动条滚动范围上下各缩小50)</div><div class="line">    _scrollView.scrollIndicatorInsets = UIEdgeInsetsMake(50, 0, 50, 0);</div><div class="line">    //样式</div><div class="line">    _scrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    //创建并添加scrollView</div><div class="line">    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(100, 200, 200, 300)];</div><div class="line">    [self.view addSubview:scrollView];</div><div class="line">    </div><div class="line">    scrollView.backgroundColor = [UIColor redColor];</div><div class="line">    //设置内容视图的大小</div><div class="line">    scrollView.contentSize = CGSizeMake(375, 667);</div><div class="line">    //设置内容视图</div><div class="line">    UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 375, 667)];</div><div class="line">    imageView.image = [UIImage imageNamed:@&quot;new_feature_1&quot;];</div><div class="line">    [scrollView addSubview:imageView];</div><div class="line">    </div><div class="line">    _imageView = imageView;</div><div class="line">    //设置代理</div><div class="line">    scrollView.delegate = self;</div><div class="line">    </div><div class="line">    </div><div class="line">    //[self performSelector:@selector(changeScrollViewContentOffSet:) withObject:scrollView afterDelay:3];</div><div class="line">    </div><div class="line">    </div><div class="line">    //设置缩放内容视图的缩放比例范围</div><div class="line">    scrollView.minimumZoomScale = 0.5;</div><div class="line">    scrollView.maximumZoomScale = 1.5;</div><div class="line">    //当缩放比例超出范围之后，是否有反弹效果（no:不会超出范围，yes:超出范围之后反弹）</div><div class="line">    scrollView.bouncesZoom = YES;</div><div class="line">    </div><div class="line">    //属性设置滚动至顶部</div><div class="line">    //scrollView.scrollsToTop = YES;</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)changeScrollViewContentOffSet:(UIScrollView *)scrollView&#123;</div><div class="line">    [scrollView setContentOffset:CGPointMake(0, 300) animated:YES];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#if 0</div><div class="line">#pragma mark -UIScrollViewDelegate 滚动</div><div class="line">//当scrollView滚动的时候，不停调用（可以监听scrollView的contentOffset）</div><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</div><div class="line">    //NSLog(@&quot;%@&quot;,NSStringFromCGPoint(scrollView.contentOffset));</div><div class="line">    //NSLog(@&quot;decelerating：%d&quot;,scrollView.decelerating);</div><div class="line">    //NSLog(@&quot;dragging：%d&quot;,scrollView.dragging);</div><div class="line">    //NSLog(@&quot;tracking:%d&quot;,scrollView.tracking);</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//开始拖动的时候调用</div><div class="line">- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123;</div><div class="line">    //NSLog(@&quot;tracking:%d&quot;,scrollView.tracking);</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// called on finger up if the user dragged. velocity is in points/millisecond. targetContentOffset may be changed to adjust where the scroll view comes to rest</div><div class="line">//将要结束拖动</div><div class="line">- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset &#123;</div><div class="line">//    NSLog(@&quot;velocity:%@&quot;,NSStringFromCGPoint(velocity));</div><div class="line">//    NSLog(@&quot;targetContentOffset:%@&quot;,NSStringFromCGPoint(*targetContentOffset));</div><div class="line">    //强制设置scrollView的偏移量</div><div class="line">    //*targetContentOffset = CGPointMake(0, 200);</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 已经结束拖动</div><div class="line">- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate&#123;</div><div class="line">    //NSLog(@&quot;dragging：%d&quot;,scrollView.dragging);</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//将要开始减速</div><div class="line">- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView&#123;</div><div class="line">    //NSLog(@&quot;decelerating：%d&quot;,scrollView.decelerating);</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//减速完成（停止）</div><div class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView&#123;</div><div class="line">    //NSLog(@&quot;contentOffset:%@&quot;,NSStringFromCGPoint(scrollView.contentOffset));</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// called when setContentOffset/scrollRectVisible:animated: finishes. not called if not animating</div><div class="line">- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line">#pragma mark -UIScrollViewDelegate(缩放)</div><div class="line">//指定缩放视图</div><div class="line">- (nullable UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);</div><div class="line">    return _imageView;</div><div class="line">&#125;</div><div class="line">//缩放之前调用</div><div class="line">- (void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view &#123;</div><div class="line">    NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);</div><div class="line">&#125;</div><div class="line">//完成缩放</div><div class="line">- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view atScale:(CGFloat)scale&#123;</div><div class="line">    NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);</div><div class="line">&#125;</div><div class="line">//缩放时调用</div><div class="line">- (void)scrollViewDidZoom:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -UIScrollViewDelegate(滚动至顶部)</div><div class="line">//允许滚动至顶部</div><div class="line">- (BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView&#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//已经滚动至顶部</div><div class="line">- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;加载新数据，刷新界面&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
          <category> UIScrollView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> UIKit </tag>
            
            <tag> UIScrollView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS_App跳转设置</title>
      <link href="/2017/11/21/OC/Func/iOS-Func-App%E8%B7%B3%E8%BD%AC%E8%AE%BE%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h1 id="跳到更多设置界面"><a href="#跳到更多设置界面" class="headerlink" title="跳到更多设置界面"></a>跳到更多设置界面</h1><p>除了跳到WiFi设置界面，能不能跳到其他的设置界面呢？比如：定位服务、FaceTime、音乐等等。都是可以的，一起来看看如何实现的</p><p>跳到这些界面的参数配置：</p><p>##定位服务</p><blockquote><p>用户关闭了定位,APP里面提示打开定位服务<br>点击到设置界面设置，直接跳到定位服务设置界面=</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//定位服务设置界面</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;prefs:root=LOCATION_SERVICES&quot;];</div><div class="line">if ([[UIApplication sharedApplication] canOpenURL:url])</div><div class="line">&#123;</div><div class="line">    [[UIApplication sharedApplication] openURL:url];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="FaceTim"><a href="#FaceTim" class="headerlink" title="FaceTim"></a>FaceTim</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//FaceTime设置界面</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;prefs:root=FACETIME&quot;];</div><div class="line">if ([[UIApplication sharedApplication] canOpenURL:url])</div><div class="line">&#123;</div><div class="line">    [[UIApplication sharedApplication] openURL:url];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//音乐设置界面</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;prefs:root=MUSIC&quot;];</div><div class="line">if ([[UIApplication sharedApplication] canOpenURL:url])</div><div class="line">&#123;</div><div class="line">    [[UIApplication sharedApplication] openURL:url];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="蓝牙设置界面"><a href="#蓝牙设置界面" class="headerlink" title="蓝牙设置界面"></a>蓝牙设置界面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//蓝牙设置界面</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;prefs:root=Bluetooth&quot;];</div><div class="line">if ([[UIApplication sharedApplication] canOpenURL:url])</div><div class="line">&#123;</div><div class="line">   [[UIApplication sharedApplication] openURL:url];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="iCloud设置界面"><a href="#iCloud设置界面" class="headerlink" title="iCloud设置界面"></a>iCloud设置界面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//iCloud设置界面</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;prefs:root=CASTLE&quot;];</div><div class="line">if ([[UIApplication sharedApplication] canOpenURL:url]</div><div class="line">&#123;</div><div class="line">   [[UIApplication sharedApplication] openURL:url];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>设置界面只需要prefs:root=后面的值即可<br>可以跳到这些界面的参数配置：r</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">About — prefs:root=General&amp;path=About</div><div class="line"></div><div class="line">Accessibility — prefs:root=General&amp;path=ACCESSIBILITY</div><div class="line"></div><div class="line">Airplane Mode On — prefs:root=AIRPLANE_MODE</div><div class="line"></div><div class="line">Auto-Lock — prefs:root=General&amp;path=AUTOLOCK</div><div class="line"></div><div class="line">Brightness — prefs:root=Brightness</div><div class="line"></div><div class="line">Bluetooth — prefs:root=General&amp;path=Bluetooth</div><div class="line"></div><div class="line">Date &amp; Time — prefs:root=General&amp;path=DATE_AND_TIME</div><div class="line"></div><div class="line">FaceTime — prefs:root=FACETIME</div><div class="line"></div><div class="line">General — prefs:root=General</div><div class="line"></div><div class="line">Keyboard — prefs:root=General&amp;path=Keyboard</div><div class="line"></div><div class="line">iCloud — prefs:root=CASTLE</div><div class="line"></div><div class="line">iCloud Storage &amp; Backup — prefs:root=CASTLE&amp;path=STORAGE_AND_BACKUP</div><div class="line"></div><div class="line">International — prefs:root=General&amp;path=INTERNATIONAL</div><div class="line"></div><div class="line">Location Services — prefs:root=LOCATION_SERVICES</div><div class="line"></div><div class="line">Music — prefs:root=MUSIC</div><div class="line"></div><div class="line">Music Equalizer — prefs:root=MUSIC&amp;path=EQ</div><div class="line"></div><div class="line">Music Volume Limit — prefs:root=MUSIC&amp;path=VolumeLimit</div><div class="line"></div><div class="line">Network — prefs:root=General&amp;path=Network</div><div class="line"></div><div class="line">Nike + iPod — prefs:root=NIKE_PLUS_IPOD</div><div class="line"></div><div class="line">Notes — prefs:root=NOTES</div><div class="line"></div><div class="line">Notification — prefs:root=NOTIFICATIONS_ID</div><div class="line"></div><div class="line">Phone — prefs:root=Phone</div><div class="line"></div><div class="line">Photos — prefs:root=Photos</div><div class="line"></div><div class="line">Profile — prefs:root=General&amp;path=ManagedConfigurationList</div><div class="line"></div><div class="line">Reset — prefs:root=General&amp;path=Reset</div><div class="line"></div><div class="line">Safari — prefs:root=Safari</div><div class="line"></div><div class="line">Siri — prefs:root=General&amp;path=Assistant</div><div class="line"></div><div class="line">Sounds — prefs:root=Sounds</div><div class="line"></div><div class="line">Software Update — prefs:root=General&amp;path=SOFTWARE_UPDATE_LINK</div><div class="line"></div><div class="line">Store — prefs:root=STORE</div><div class="line"></div><div class="line">Twitter — prefs:root=TWITTER</div><div class="line"></div><div class="line">Usage — prefs:root=General&amp;path=USAGE</div><div class="line"></div><div class="line">VPN — prefs:root=General&amp;path=Network/VPN</div><div class="line"></div><div class="line">Wallpaper — prefs:root=Wallpaper</div><div class="line"></div><div class="line">Wi-Fi — prefs:root=WIFI</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS_Safari跳转App</title>
      <link href="/2017/11/21/OC/Grammar/iOS-Safari-%E8%B7%B3%E8%BD%ACApp/"/>
      <content type="html"><![CDATA[<h1 id="Safari跳转到App"><a href="#Safari跳转到App" class="headerlink" title="Safari跳转到App"></a>Safari跳转到App</h1><p>##App中定义一个URL协议</p><blockquote><p>TARGETS -&gt; info -&gt; URL Types -&gt; 添加一个URL协议</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS_Safari%E8%B7%B3%E8%BD%ACApp-001.png" alt="001"></p><blockquote><p>URL Schemes字段就是你这个APP的特殊标示，<br>indentifier:这个URL协议的标示。<br>一个APP可以拥有多个URL协议<br>下面的两个字段可为空。最后再运行一下你的APP。</p><h2 id="浏览里访问"><a href="#浏览里访问" class="headerlink" title="浏览里访问"></a>浏览里访问</h2><p>打开Safari浏览器，在输入在地址栏输入：myapp://<br>然后回车</p><h2 id="Safari跳回到APP时传一些参数"><a href="#Safari跳回到APP时传一些参数" class="headerlink" title="Safari跳回到APP时传一些参数"></a>Safari跳回到APP时传一些参数</h2><p>比如在Safari浏览器的地址了输入：myapp://myappTest，用下面的方法获取到该参数之后就看自己的操作了</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">在appdelegate.m文件中写下如下方法</div><div class="line">如果iOS版本低于9.0，会在下面方法接受到在地址栏输入的字符串</div><div class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation</div><div class="line">&#123;</div><div class="line">    [[[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;sourceApplication-&gt;%@&quot;, [url absoluteString]] message:nil delegate:nil cancelButtonTitle:@&quot;ok&quot; otherButtonTitles:nil] show];</div><div class="line">     return YES;</div><div class="line">&#125;</div><div class="line">如果iOS版本是9.0及以上的，会在下面方法接受到在地址栏输入的字符串</div><div class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;NSString *,id&gt; *)options</div><div class="line">&#123;</div><div class="line">     [[[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;openURL-&gt;%@&quot;, [url absoluteString]] message:nil delegate:nil cancelButtonTitle:@&quot;ok&quot; otherButtonTitles:nil] show];</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Func </tag>
            
            <tag> 跳转 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Func- Universal Links通用链接</title>
      <link href="/2017/11/21/OC/Func/iOS-Func-%20Universal%20Links%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5/"/>
      <content type="html"><![CDATA[<h1 id="Universal-Links"><a href="#Universal-Links" class="headerlink" title="Universal Links"></a>Universal Links</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>iOS9之前</p></blockquote><ul><li>iOS9之前,对于从各种从浏览器,Safari、UIWebView或者 WKWebView中唤醒APP的需求,我们通常只能使用scheme.首先是app中注册某个scheme</li></ul><blockquote><p>在iOS 9以后</p></blockquote><ul><li>通过Universal Link，将App 与网页端建立连接桥，可以从Safari 或者其他前端浏览器来识别并唤醒App，甚至是微信环境下也可以冲破障碍</li></ul><p><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2" target="_blank" rel="external">官方的说明文档–&gt;</a></p><h2 id="Universal-Link的优点"><a href="#Universal-Link的优点" class="headerlink" title="Universal Link的优点"></a>Universal Link的优点</h2><ul><li><strong>唯一性</strong>:</li><li><p>不像自定义的scheme,因为它使用标准的http/https链接到你的web站点,所以它不会被其它的app所声明.另外,Custom URL scheme 因为是自定义的协议，所以在没有安装 app 的情况下是无法直接打开的，而 universal links 本身是一个 HTTP/HTTPS 链接，所以有更好的兼容性</p></li><li><p><strong>安全</strong>:</p></li><li><p>当用户的手机上安装了你的app,那么iOS将去你的网站上去下载你上传上去的说明文件(这个说明文件声明了你的app可以打开哪些类型的http链接).因为只有你自己才能上传文件到你网站的根目录,所以你的网站和你的app之间的关联是安全的.</p></li><li><p><strong>可变</strong>:</p></li><li><p>当用户手机上没有安装你的app的时候,Universal Links也能够工作.如果你愿意,在没有安装你的app的时候,用户点击链接,会在safari中展示你网站的内容.</p></li><li><p><strong>简单</strong>:</p></li><li><p>一个URL链接,可以同时作用于网站和ap</p></li><li><p><strong>私有</strong></p></li><li>其它app可以在不需要知道你的app是否安装了的情况下和你的app相互通信</li></ul><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><blockquote><p>分享页面中，我们经常会看到在页面的顶端或者底部遇到有【打开App】或者【下载App】这样的按钮。</p><p>比较友好的产品，会做设备识别，以及检测APP是否安装，来做打开或者下载App 的需求<br>但是在微信中，这方面做的比较恶心，微信下面几乎是全面屏蔽了唤起原生App 的功能</p></blockquote><h1 id="Universal-Link-实现"><a href="#Universal-Link-实现" class="headerlink" title="Universal Link 实现"></a>Universal Link 实现</h1><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><blockquote><p>域名</p></blockquote><ul><li>有一个域名,且这个域名的网站需要支持https,然后拥有网站的上传到根目录的权限(这个权限是为了上传一个apple指定的文件)</li></ul><blockquote><p>支持Universal Links(通用链接)</p></blockquote><ul><li>创建一个json格式的命名为apple-app-site-association文件</li><li><p>注意这个文件必须没有后缀名,文件名必须为: <strong><em>apple-app-site-association</em></strong></p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"> &#123;</div><div class="line">  <span class="string">"applinks"</span>: &#123;</div><div class="line">      <span class="string">"apps"</span>: [],</div><div class="line">      <span class="string">"details"</span>: [</div><div class="line">          &#123;</div><div class="line">              <span class="string">"appID"</span>: <span class="string">"Prefix +点 +BundleID"</span>,</div><div class="line">              <span class="string">"paths"</span>: [ <span class="string">"/html/1/*"</span>, <span class="string">"/*"</span>],</div><div class="line">                        &#125;,</div><div class="line">      ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><blockquote><p>Prefix   和 BundleID</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/Universal%20Links-%20001.png" alt="001"></p><blockquote><p>paths:<br>根据 paths 键设定一个你的app支持的路径列表,只有这些指定的路径的链接,才能被app所处理,举个例子:如果你的网站是www.XXXX.com,你的path写的是”/support/“,那么当用户点击www.yohunl.com/support/myDoucument,就可以进入你的app了,相反www.yohunl.com/other 就不会.<br><em>path是大小写敏感的!</em> 号表示任意路径.</p></blockquote><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><blockquote><p>准备独立域名<br>一级域名，二级域名均可。<br>SSL 证书</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">为服务器配置HTTPS 用的SSL 证书</div><div class="line">上传签名好的JSON 配置文件</div></pre></td></tr></table></figure><h3 id="新建JSON文件"><a href="#新建JSON文件" class="headerlink" title="新建JSON文件"></a>新建JSON文件</h3><p>新建一个JSON文件，不需要后缀名，内容输入以下代码：</p><blockquote><p>appID:相关内容可以在Developer 中心找到相关的内容。如图，前半部分为Prefix 后半部分为ID，即你的App 的bundle id，两者通过.相连<br>paths:用来唤醒App 所需要指定的JSON文件在服务器中的路径。用”/* “ 是根目录，而/html 则是指html目录下的<br>注意：这里的AppID中前半部分，在App 转让主体后会改变，需重新更新<br>填好后保存为apple-app-site-association 名，上传到域名指向的服务器根目录。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"applinks"</span>: &#123;</div><div class="line">        <span class="string">"apps"</span>: [],</div><div class="line">        <span class="string">"details"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="string">"appID"</span>: <span class="string">"5B5Q4xxxx.com.xxxx.xxxx"</span>,</div><div class="line">                <span class="string">"paths"</span>: [ <span class="string">"/html/1/*"</span>, <span class="string">"/*"</span>]</div><div class="line">            &#125;,</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="上传传该文件apple-app-site-association"><a href="#上传传该文件apple-app-site-association" class="headerlink" title="上传传该文件apple-app-site-association"></a>上传传该文件apple-app-site-association</h2><ul><li>上传传该文件apple-app-site-association到你的域名所对应的网站的根目录下(其实也不一定是根目录,例如ghost博客站点,就没有根目录一说,它就需要放在相应的主题目录下)</li><li>这一步是为了苹果能从<a href="https://你的域名/apple-app-site-associationxh获取到你上传的apple-app-site-association文件" target="_blank" rel="external">https://你的域名/apple-app-site-associationxh获取到你上传的apple-app-site-association文件</a>.<br>上传完后,自己先访问一下,看看是否能够获取到,用我的做例子,<a href="https://yohunl.com/apple-app-site-association" target="_blank" rel="external">https://yohunl.com/apple-app-site-association</a> ,当你点击这个链接,应该是下载apple-app-site-association文件.<br>验证该文件是否合法,苹果为了方便开发者,提供了一个网页来验证我们编写的这个apple-app-site-association是否合法有效,验证网址,进入网站进行验证</li></ul><p><img src="http://ozr735s7e.bkt.clouddn.com/Universal%20Links-002.png" alt="002"></p><h2 id="App配置"><a href="#App配置" class="headerlink" title="App配置"></a>App配置</h2><h3 id="工程文件配置"><a href="#工程文件配置" class="headerlink" title="工程文件配置"></a>工程文件配置</h3><blockquote><p>在工程文件中，找到Targets - Capabilities - Associated Domains 将开关选为On，并添加你的域名，</p><p>格式为  </p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">applinks: + 后台给的域名.com </div><div class="line">applinks: + www.后台给的域名.com</div></pre></td></tr></table></figure><p><img src="http://ozr735s7e.bkt.clouddn.com/Universal%20Links-%20003.png" alt="003"></p><h3 id="iOS移动端的代码"><a href="#iOS移动端的代码" class="headerlink" title="iOS移动端的代码"></a>iOS移动端的代码</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span> * _Nullable))restorationHandler</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([userActivity.activityType isEqualToString:<span class="built_in">NSUserActivityTypeBrowsingWeb</span>]) &#123;</div><div class="line">        <span class="built_in">NSString</span> *url = userActivity.webpageURL.description;</div><div class="line">        <span class="comment">// 这里可以通过拆分url 来传入参数，达到跳转原生页面的功能，如跳转某商品页</span></div><div class="line">        [<span class="built_in">UIApplication</span> sharedApplication] openURL:webpageURL];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Universal%20Links-%20004.jpg" alt="004"></p><h2 id="h5网页配置"><a href="#h5网页配置" class="headerlink" title="h5网页配置"></a>h5网页配置</h2><blockquote><p>h5网页中对需要唤起App 的按钮或者控件添加点击事件，事件的函数代码如下:</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">function wakeUpApp()&#123;</div><div class="line">    if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) &#123;</div><div class="line">        var loadDateTime = new Date();</div><div class="line">        window.setTimeout(function() &#123;</div><div class="line">            var timeOutDateTime = new Date();</div><div class="line">            if (timeOutDateTime - loadDateTime <span class="tag">&lt; <span class="attr">5000</span>) &#123;</span></div><div class="line"><span class="tag">                <span class="attr">window.location.href</span> = <span class="string">"http://a.app.qq.com/o/simple.jsp?pkgname=你的应用宝BundleID"</span>;</span></div><div class="line"><span class="tag">            &#125; <span class="attr">else</span> &#123;</span></div><div class="line"><span class="tag">                <span class="attr">window.close</span>();</span></div><div class="line"><span class="tag">            &#125;</span></div><div class="line"><span class="tag">        &#125;,</span></div><div class="line"><span class="tag">            <span class="attr">25</span>);</span></div><div class="line"><span class="tag">        <span class="attr">window.location.href</span> = <span class="string">"https://yourdomainname.com/"</span>;          </span></div><div class="line"><span class="tag">    &#125; <span class="attr">else</span> <span class="attr">if</span> (<span class="attr">navigator.userAgent.match</span>(/<span class="attr">android</span>/<span class="attr">i</span>)) &#123;</span></div><div class="line"><span class="tag">        <span class="attr">var</span> <span class="attr">state</span> = <span class="string">null;</span></span></div><div class="line"><span class="tag">        <span class="attr">try</span> &#123;</span></div><div class="line"><span class="tag">            <span class="attr">state</span> = <span class="string">window.open(</span>"<span class="attr">apps</span> <span class="attr">custom</span> <span class="attr">url</span> <span class="attr">schemes</span> ", '<span class="attr">_blank</span>');</span></div><div class="line"><span class="tag">        &#125; <span class="attr">catch</span>(<span class="attr">e</span>) &#123;&#125;</span></div><div class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">state</span>) &#123;</span></div><div class="line"><span class="tag">            <span class="attr">window.close</span>();</span></div><div class="line"><span class="tag">        &#125; <span class="attr">else</span> &#123;</span></div><div class="line"><span class="tag">            <span class="attr">window.location.href</span> = <span class="string">"要跳转的页面URL"</span>;</span></div><div class="line"><span class="tag">        &#125;</span></div><div class="line"><span class="tag">    &#125;</span></div><div class="line"><span class="tag">&#125;</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MarkDomn语法</title>
      <link href="/2017/11/21/MarkDown/MarkDown-%E8%AF%AD%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="目录效果"><a href="#目录效果" class="headerlink" title="目录效果"></a>目录效果</h1><h2 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">* [1.语法示例](#1)</div><div class="line">* [1.1图片](#1.1) </div><div class="line">* [1.2换行](#1.2)</div><div class="line">* [1.3强调](#1.3) </div><div class="line">* </div><div class="line">字体h1&gt;h2&gt;h3....</div><div class="line"> &lt;h2 id=&quot;1&quot;&gt;目录标题&lt;/h2&gt;</div></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2> <h2 id="1">1.h2比h1字体小</h2> <ul><li><a href="#1.1">1.1图片</a></li><li><a href="#1.2">1.2换行</a> </li><li><a href="#1.3">1.3强调</a></li></ul><h2 id="页面内跳转"><a href="#页面内跳转" class="headerlink" title="页面内跳转"></a>页面内跳转</h2><h3 id="锚"><a href="#锚" class="headerlink" title="锚"></a>锚</h3><blockquote><p>放在 目的地<br>定义一个锚(id)： <span id="index"></span></p><h1 id="跳转markdown语法"><a href="#跳转markdown语法" class="headerlink" title="跳转markdown语法"></a>跳转markdown语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[点击跳转--&gt;](#index)</div></pre></td></tr></table></figure></blockquote>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDomn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS_App_代码规范</title>
      <link href="/2017/11/20/OC/Code/OC-Code-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <content type="html"><![CDATA[<h1 id="iOS编码规范"><a href="#iOS编码规范" class="headerlink" title="iOS编码规范"></a>iOS编码规范</h1><p><a href="http://blog.csdn.net/qq350116542/article/details/51195386#import%E8%A7%84%E8%8C%83" target="_blank" rel="external">http://blog.csdn.net/qq350116542/article/details/51195386#import%E8%A7%84%E8%8C%83</a></p><p>#命名</p><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><blockquote><p>首字母小写，驼峰法则<br>UI控件（描述+控件类型）  <code>priceLabel或priceLab</code><br> 注释也要写  最好对齐</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIButton</span>    *collectsImgView;          <span class="comment">//合集 - 图标</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span>     *collectsThemeLab;         <span class="comment">//合集 - 主题</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span>     *collectsAuthorLab;        <span class="comment">//合集 - 作者</span></div></pre></td></tr></table></figure><h2 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h2><blockquote><p>首字母小写，驼峰法则</p></blockquote><h3 id="public-method"><a href="#public-method" class="headerlink" title="public method"></a>public method</h3><blockquote><p>规则：     方法用途单词_方法</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">一般的方法  - (<span class="keyword">void</span>)show_editBtnOnOneViewC:(OneViewC *)oneViewC  editBtn:(<span class="built_in">UIButton</span> *)editBtn.....</div><div class="line">跳转       push_</div><div class="line">更新数据    update_collectList</div><div class="line">删除数据    delete_collectList</div></pre></td></tr></table></figure><h3 id="private-method"><a href="#private-method" class="headerlink" title="private method"></a>private method</h3><blockquote><p>规则：不加下划线  不需要and： nameStr:(NSstring)nameStr</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)pushOnewViewC:(OnewViewC *)onewViewC   </div><div class="line">-             nameStr:(<span class="built_in">NSstring</span>)nameStr &#123;&#125;</div></pre></td></tr></table></figure><h3 id="扩展或封装方法"><a href="#扩展或封装方法" class="headerlink" title="扩展或封装方法"></a>扩展或封装方法</h3><blockquote><p>规则：以FF或ff开头   FanFan简写</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)ff_editOnOneViewC:(oneViewC)oneViewC</div><div class="line">                   isOpen:(<span class="built_in">BOOL</span>) isOpen</div></pre></td></tr></table></figure><h3 id="少用-define预处理指令，多用类型常量"><a href="#少用-define预处理指令，多用类型常量" class="headerlink" title="少用#define预处理指令，多用类型常量"></a>少用<code>#define</code>预处理指令，多用类型常量</h3><blockquote><p>预处理指令命名 （字母全大写，以”_”分割）</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="meta">#define NSString * APP_ROOT_DIR @<span class="meta-string">"xxx"</span></span></div></pre></td></tr></table></figure><blockquote><p>常量命名 （字母全大写，”k”开头）</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAPPROOTDIR = <span class="string">@"xxx"</span>;</div></pre></td></tr></table></figure><h2 id="资源文件中变量命名"><a href="#资源文件中变量命名" class="headerlink" title="资源文件中变量命名"></a>资源文件中变量命名</h2><blockquote><p>全小写，”<em>“分割<br>模块： 开发功能模块外  nav tab  login refresh  share  hud common(公有)<br>格式：“模块</em>类别<em>状态</em>描述”  状态可不要<br>目前版本我们以模块作为文件夹 ，后面的按照这个4个</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">personal_btn_un_select.png</div><div class="line">personal_btn_name_png</div><div class="line">nav_btn_left.png</div><div class="line">nav_imgView_lright.png</div><div class="line">tab_item_un_select.png</div><div class="line">tab_item_select.png</div></pre></td></tr></table></figure><h2 id="能用糖衣语法的尽量用糖衣语法，使用时注意nil报错。"><a href="#能用糖衣语法的尽量用糖衣语法，使用时注意nil报错。" class="headerlink" title="能用糖衣语法的尽量用糖衣语法，使用时注意nil报错。"></a>能用糖衣语法的尽量用糖衣语法，使用时注意<code>nil</code>报错。</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> = @[].mutableCopy;</div><div class="line"><span class="built_in">NSString</span> *name = dic[<span class="string">@"name"</span>];</div><div class="line"><span class="built_in">NSArray</span> *array= @[item1, item2];</div></pre></td></tr></table></figure><h2 id="用前缀避免命名空间冲突。大多数的自定制，都需要用前缀"><a href="#用前缀避免命名空间冲突。大多数的自定制，都需要用前缀" class="headerlink" title="用前缀避免命名空间冲突。大多数的自定制，都需要用前缀"></a>用前缀避免命名空间冲突。大多数的自定制，都需要用前缀</h2><p>比如创建有读界面</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">Have (文件夹)</div><div class="line">   ViewC(文件夹)</div><div class="line">      HaveReadViewC.h</div><div class="line">   View</div><div class="line">      HaveReadView.h</div><div class="line">   Model</div><div class="line">      HaveReadModel.h</div><div class="line">   Cell</div><div class="line">      HaveReadCell.h</div></pre></td></tr></table></figure><h2 id="委托Delegate的定义和使用"><a href="#委托Delegate的定义和使用" class="headerlink" title="委托Delegate的定义和使用"></a>委托Delegate的定义和使用</h2><p>放在对应类的<code>.h</code>文件中，<br>命名为该类名+Delegate，<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//定义代理</div><div class="line">HaveReadViewCDelegate ==&gt;HaveReadViewC + Delegate</div><div class="line">HaveReadCellDelegate  ==&gt; HaveReadCell + Delegate</div><div class="line"></div><div class="line">//声明</div><div class="line">@property (nonatomic, weak) id &lt;ArticleHeadTableUrlDelegate&gt; delegate;</div><div class="line"></div><div class="line">//必须加判断！！！</div><div class="line">if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(push_safariWithUrl:)])  &#123;</div><div class="line">     [_delegate pushSafariWithUrl:XXXXX];</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="使用清晰而协调的命名方式-适当注释"><a href="#使用清晰而协调的命名方式-适当注释" class="headerlink" title="使用清晰而协调的命名方式+适当注释"></a>使用清晰而协调的命名方式+适当注释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**</div><div class="line"> * @beif: 执行push操作 （ 简单明了就可以）</div><div class="line"> *</div><div class="line"> * @prama:  namestr   名称</div><div class="line"> * @prama:  isOpen    是否打开  0 = 关闭  1= 打开</div><div class="line"> *</div><div class="line"> * @discussion:  注意这个方法子啊使用时候XXXXXXXX 等等</div><div class="line"> *</div><div class="line"> *</div><div class="line">*/</div></pre></td></tr></table></figure><h3 id="viewC里区块划分"><a href="#viewC里区块划分" class="headerlink" title="viewC里区块划分"></a>viewC里区块划分</h3><blockquote><p>h文件顶部:类的作用 类的注意一些内容</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**</div><div class="line">  订阅合集 分2种  </div><div class="line">         我的订阅  xxxx</div><div class="line">         他的订阅  xxx</div><div class="line"> */</div></pre></td></tr></table></figure><blockquote><p>代理</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">XXXXXDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@required</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line">- (<span class="keyword">void</span>)delete_nameOnOne:(类 *)one  nameStr:(<span class="built_in">NSString</span> *) nameStr ....</div></pre></td></tr></table></figure><blockquote><p>代码结构</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//#pragma ------------------ LifeCycle生命周期 -----------------</span></div><div class="line"><span class="comment">//#pragma ------------------ Setter</span></div><div class="line">- (<span class="keyword">void</span>)setNameLab:(<span class="built_in">UILable</span> *)nameLab</div><div class="line"> &#123;</div><div class="line">   _nameLab = nameLab;</div><div class="line"> &#125;</div><div class="line"><span class="comment">//#pragma ------------------ Getter</span></div><div class="line">- (<span class="built_in">UIButton</span> *)nameBtn:(<span class="built_in">UIButton</span> *) nameBtn</div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(!_ nameBtn)&#123;</div><div class="line">   nameBtn = ...</div><div class="line">     [<span class="keyword">self</span> addSubView: nameBtn];</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span>  nameBtn;</div><div class="line">&#125;</div><div class="line"><span class="comment">//#pragma ------------------     Layout     ------------------</span></div><div class="line"><span class="comment">//#pragma - nameBtn</span></div><div class="line"><span class="comment">//#pragma - nameBtn - action </span></div><div class="line"><span class="comment">//布局</span></div><div class="line">- (<span class="keyword">void</span>)layoutSubviews;</div><div class="line"><span class="comment">//#pragma ------------------ Plubic Method   ------------------</span></div><div class="line">- (<span class="keyword">void</span>)update_newViewC....</div><div class="line">- (<span class="built_in">BOOL</span>)delete_editBtn.....</div><div class="line"><span class="comment">//#pragma ------------------ private Method  ------------------</span></div><div class="line">- (<span class="keyword">void</span>)updateNewViewC....</div><div class="line">- (<span class="built_in">BOOL</span>)deleteEditBtn.....</div><div class="line"><span class="comment">//#pragma mark ------------- API             ------------------</span></div><div class="line"><span class="comment">//#pragma mark ------------- 代理</span></div><div class="line"><span class="comment">//#pragma ------------------ Cell            ------------------</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @brief: 设置cell</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @prama: tableView</span></div><div class="line"><span class="comment"> * @prama: model</span></div><div class="line"><span class="comment"> * @prama: indexPath</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+( PersonalSubscribeCell *)show_cellOfTableView:(<span class="built_in">UITableView</span> *)tableView</div><div class="line">                                          model:(PersonalSubscribeModel *)model</div><div class="line">                                      indexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div></pre></td></tr></table></figure><h1 id="编程习惯"><a href="#编程习惯" class="headerlink" title="编程习惯"></a>编程习惯</h1><blockquote><p>一个原则：能不做的事情，尽量不做，尽量少唤醒CPU，绝不能在UI线程中做耗时操作（如网络请求，数据库读写，文件读写等）</p></blockquote><h2 id="Copy、mutableCopy要注意其关联的元素是否支持"><a href="#Copy、mutableCopy要注意其关联的元素是否支持" class="headerlink" title="Copy、mutableCopy要注意其关联的元素是否支持"></a><code>Copy</code>、<code>mutableCopy</code>要注意其关联的元素是否支持</h2><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><blockquote><p>不要在循环中创建引用类型变量<br>for循环中，用局部变量替代“array.count”</p></blockquote><h2 id="autoreleasepool"><a href="#autoreleasepool" class="headerlink" title="@autoreleasepool"></a>@autoreleasepool</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@autoreleasepool</span>&#123;</div><div class="line">  <span class="keyword">for</span>（）&#123;</div><div class="line">       <span class="keyword">@autoreleasepool</span>&#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="引用变量声明放在循环外面，可以避免在栈内存中创建过多引用变量"><a href="#引用变量声明放在循环外面，可以避免在栈内存中创建过多引用变量" class="headerlink" title="引用变量声明放在循环外面，可以避免在栈内存中创建过多引用变量"></a>引用变量声明放在循环外面，可以避免在栈内存中创建过多引用变量</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">UserInfo userInfo;</div><div class="line"><span class="comment">// 避免循环中每次都要调用userList.count取值</span></div><div class="line"><span class="keyword">int</span> size = userList.count;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">    userInfo = userList[i];</div><div class="line">    <span class="comment">// do something...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 推荐</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, max = userList.count; i &lt; max; i++) &#123;</div><div class="line">    userInfo = userList[i];</div><div class="line">    <span class="comment">// do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h2><blockquote><p>在不需要外部任意修改的情况下，全部用<code>Copy</code></p></blockquote><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><blockquote><p><code>Block</code>内部需要使用外部类变量的时候,防止循环引用<br>切忌在block体中使用<code>_name</code>这样的变量，请使用<code>self.name</code></p></blockquote><h1 id="otehr"><a href="#otehr" class="headerlink" title="otehr"></a>otehr</h1><blockquote><p>由于Objective-C是类型不安全的，注意加强<code>类型判断</code>、<code>数据越界判断</code>等等<br>原则上不建议拷贝代码，同一段代码拷贝3次，必须抽离出一个方法，统一调用<br>所有的系统的宏，都不得在任意地方乱定义，统一在<code>FFConfig</code>文件夹下的头文件中定义，并写好注释<br>ViewController中的代码要分结构，多用<code>#pragma mark - Life Circle</code>对代码进行分区，ViewController中的代码分区可分为<code>Life Circle</code>、<code>Request</code>、<code>Private</code>、<code>Delegate</code>、<code>Lazy</code>等等<br>ViewController中的代码尽量不要超过<code>500</code>行，注意优化</p></blockquote><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><blockquote><p>一级界面，API考虑离线缓存<br>如果你用一句话无法将一个方法的内容表述清楚的话，这往往就意味着<code>API</code>的名字需要改进了；例如：<code>removeAtPoint:</code>就会比<code>remove</code>要清晰很多</p></blockquote><h1 id="提交代码规范"><a href="#提交代码规范" class="headerlink" title="提交代码规范"></a>提交代码规范</h1><p>提交代码时的描述必须写，且简明扼要就可以</p><h2 id="我们的目标是让每一位小伙伴都能欣赏我们的代码"><a href="#我们的目标是让每一位小伙伴都能欣赏我们的代码" class="headerlink" title="我们的目标是让每一位小伙伴都能欣赏我们的代码"></a>我们的目标是让每一位小伙伴都能欣赏我们的代码</h2>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-Lib-SDWebImag加载高分辨率图问题</title>
      <link href="/2017/11/20/OC/Lib/SDWebImag/OC-Lib-SDWebImag%E5%8A%A0%E8%BD%BD%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87%E5%9B%BE%E9%97%AE%E9%A2%98/"/>
      <content type="html"><![CDATA[<h1 id="SDWebImage-图片分辨率过高内存过高问题"><a href="#SDWebImage-图片分辨率过高内存过高问题" class="headerlink" title="SDWebImage_图片分辨率过高内存过高问题"></a>SDWebImage_图片分辨率过高内存过高问题</h1><p>#高分辨率多图问题：</p><blockquote><p>高分辨率图，导致内存飙升，卡顿，设置闪退,提示：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Restore the connection to &quot;“XXX”的 iPod&quot; and run &quot;XXX&quot; again, or if &quot;XXX&quot; is still running, you can attach to it by selecting Debug &gt; Attach to Process &gt; XXX.</div></pre></td></tr></table></figure><p>由于应用程序突然消耗了大量内存，然后再分配调度内存的时候，出现错误，致使系统将APP进程关闭。<br>能够去查看一下是不是载入了大量的图片等等，或者哪里有消耗内存的地方改动一下。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="SDWebimage，"><a href="#SDWebimage，" class="headerlink" title="SDWebimage，"></a>SDWebimage，</h2><blockquote><p>1.判断本地是否有这张图<br>2.二有的时候直接从本地取图片<br>3.没有的时候去网络下载</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">if(imgStr.length&gt;0)&#123;  </div><div class="line">[[SDImageCache sharedImageCache] queryDiskCacheForKey:imgStr </div><div class="line">                                                 done:^(UIImage *image, </div><div class="line">                                                       SDImageCacheType cacheType) &#123;  </div><div class="line">    if (image) </div><div class="line">    &#123;  </div><div class="line">        [_oneImage setImage:image];  </div><div class="line">    &#125;else&#123;  </div><div class="line">        [_oneImage sd_setImageWithURL:kNSUrl(imgStr)  </div><div class="line">                      placeholderImage:IMGNAMED(@&quot;defaultAvatar2&quot;)  </div><div class="line">                               options:SDWebImageRefreshCached  </div><div class="line">                             completed:^(UIImage *image, </div><div class="line">                                         NSError *error,</div><div class="line">                                         SDImageCacheType cacheType,</div><div class="line">                                          NSURL *imageURL) &#123;  </div><div class="line">                                 if (image) &#123;  </div><div class="line">                                     [[SDImageCache sharedImageCache] storeImage:image</div><div class="line">                                                                          forKey:imgStr </div><div class="line">                                                                          toDisk:YES];  </div><div class="line">                                 &#125;  </div><div class="line">                             &#125;];  </div><div class="line">    &#125;  </div><div class="line">    &#125;];&#125;</div></pre></td></tr></table></figure><h2 id="内部会调用下面这个方法"><a href="#内部会调用下面这个方法" class="headerlink" title="内部会调用下面这个方法"></a>内部会调用下面这个方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (UIImage *)diskImageForKey:(NSString *)key &#123;  </div><div class="line">    NSData *data = [self diskImageDataBySearchingAllPathsForKey:key];  </div><div class="line">    if (data) &#123;  </div><div class="line">        UIImage *image = [UIImage sd_imageWithData:data];  </div><div class="line">        image = [self scaledImageForKey:key image:image];  </div><div class="line">        image = [UIImage decodedImageWithImage:image];  </div><div class="line">        return image;  </div><div class="line">    &#125;  </div><div class="line">    else &#123;  </div><div class="line">        return nil;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  UIImage *image = [UIImage sd_imageWithData:data];<br>图片取出来的时候就已经巨大无比，占用了很大的内存，导致内存来不及释放就崩溃</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="UIImage-MultiFormat这个类里面添加如下压缩方法，"><a href="#UIImage-MultiFormat这个类里面添加如下压缩方法，" class="headerlink" title="UIImage+MultiFormat这个类里面添加如下压缩方法，"></a>UIImage+MultiFormat这个类里面添加如下压缩方法，</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+(UIImage *)compressImageWith:(UIImage *)image  </div><div class="line">&#123;  </div><div class="line">    float imageWidth = image.size.width;  </div><div class="line">    float imageHeight = image.size.height;  </div><div class="line">    float width = 640;  </div><div class="line">    float height = image.size.height/(image.size.width/width);  </div><div class="line">      </div><div class="line">    float widthScale = imageWidth /width;  </div><div class="line">    float heightScale = imageHeight /height;  </div><div class="line">      </div><div class="line">    // 创建一个bitmap的context  </div><div class="line">    // 并把它设置成为当前正在使用的context  </div><div class="line">    UIGraphicsBeginImageContext(CGSizeMake(width, height));  </div><div class="line">      </div><div class="line">    if (widthScale &gt; heightScale) &#123;  </div><div class="line">        [image drawInRect:CGRectMake(0, 0, imageWidth /heightScale , height)];  </div><div class="line">    &#125;  </div><div class="line">    else &#123;  </div><div class="line">        [image drawInRect:CGRectMake(0, 0, width , imageHeight /widthScale)];  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    // 从当前context中创建一个改变大小后的图片  </div><div class="line">    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();  </div><div class="line">    // 使当前的context出堆栈  </div><div class="line">    UIGraphicsEndImageContext();  </div><div class="line">      </div><div class="line">    return newImage;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="修改第三方方法"><a href="#修改第三方方法" class="headerlink" title="修改第三方方法"></a>修改第三方方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#ifdef SD_WEBP  </div><div class="line">    else if ([imageContentType isEqualToString:@&quot;image/webp&quot;])  </div><div class="line">    &#123;  </div><div class="line">        image = [UIImage sd_imageWithWebPData:data];  </div><div class="line">    &#125;  </div><div class="line">#endif  </div><div class="line">    else &#123;  </div><div class="line">        image = [[UIImage alloc] initWithData:data];  </div><div class="line">        if (data.length/1024 &gt; 128) &#123;  </div><div class="line">            image = [self compressImageWith:image];  </div><div class="line">        &#125;  </div><div class="line">        UIImageOrientation orientation = [self sd_imageOrientationFromImageData:data];  </div><div class="line">        if (orientation != UIImageOrientationUp) &#123;  </div><div class="line">            image = [UIImage imageWithCGImage:image.CGImage  </div><div class="line">                                        scale:image.scale  </div><div class="line">                                  orientation:orientation];  </div><div class="line">        &#125;</div></pre></td></tr></table></figure><h2 id="设置加载"><a href="#设置加载" class="headerlink" title="设置加载"></a>设置加载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">在SDWebImageDownloaderOperation的connectionDidFinishLoading方法里面的</div><div class="line"></div><div class="line">    UIImage *image = [UIImage sd_imageWithData:self.imageData];</div><div class="line"></div><div class="line">    //将等比压缩过的image在赋在转成data赋给self.imageData</div><div class="line">    NSData *data = UIImageJPEGRepresentation(image, 1);</div><div class="line">    self.imageData = [NSMutableData dataWithData:data];</div><div class="line"></div><div class="line">   再配合    [[SDImageCache sharedImageCache] setValue:nil forKey:@&quot;memCache&quot;];（图片加载后使用）大功告成，亲测内存基本变化不大，自动释放也来得及</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> SDWebImage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDWebImage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-Func-检查项目是否使用IDFA</title>
      <link href="/2017/11/20/OC/Func/%E6%A3%80%E6%9F%A5%E9%A1%B9%E7%9B%AE%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8IDFA/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/chelongfei/article/details/51495862" target="_blank" rel="external">http://blog.csdn.net/chelongfei/article/details/51495862</a></p>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Func </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC-Func-配置启动图/图标</title>
      <link href="/2017/11/20/OC/Func/OC-Func-%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E5%9B%BE-%E5%9B%BE%E6%A0%87/"/>
      <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xiu619544553/p/5348678.html" target="_blank" rel="external">https://www.cnblogs.com/xiu619544553/p/5348678.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>OC -Lib-JSBadgeView数字角标</title>
      <link href="/2017/11/14/OC/Lib/JSBadgeView/OC-Lib-JSBadgeView%E6%95%B0%E5%AD%97%E8%A7%92%E6%A0%87/"/>
      <content type="html"><![CDATA[<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//在父控件上显示，</div><div class="line">//显示的位置TopRight  </div><div class="line">self.badgeView = [[JSBadgeView alloc]initWithParentView:parentView alignment:JSBadgeViewAlignmentTopRight];  </div><div class="line">//位置  </div><div class="line">self.badgeView.badgePositionAdjustment = CGPointMake(-15, 10);</div><div class="line">//设置tag要辨别    </div><div class="line">self.badgeView.tag = 10086;</div><div class="line"></div><div class="line">//背景色</div><div class="line">self.badgeView.badgeBackgroundColor = [UIColor redColor];  </div><div class="line">//没有反光面</div><div class="line">self.badgeView.badgeOverlayColor = [UIColor clearColor];  </div><div class="line">//外圈的颜色，默认是白色    </div><div class="line">self.badgeView.badgeStrokeColor = [UIColor redColor];</div></pre></td></tr></table></figure><h1 id="设置数字"><a href="#设置数字" class="headerlink" title="设置数字"></a>设置数字</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//1、用字符</div><div class="line">self.badgeView.badgeText = @&quot;1&quot;;  </div><div class="line">//2、如果不显示就设置为空</div><div class="line">self.badgeView.badgeText = nil; </div><div class="line"></div><div class="line">//当更新数字时，最好刷新，不然由于frame固定的，数字为2位时，红圈变形  </div><div class="line">[self.badgeView setNeedsLayout];</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> JSBadgeView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> Lib </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-UILaebl_Shadow文字阴影</title>
      <link href="/2017/11/14/OC/Kit/UILabel-Shadow%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1/"/>
      <content type="html"><![CDATA[<p>#方法1</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">设置UILabel中的shadowColor和shadowOffset属性</div></pre></td></tr></table></figure><p>问题:阴影没有模糊效果，并且无法设置阴影的宽度等等，比较具有局限性</p><p>#方法2</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">NSShadow *shadow = [[NSShadow alloc]init];</div><div class="line">  shadow.shadowBlurRadius = 1;</div><div class="line">  shadow.shadowOffset = CGSizeMake(0,1);</div><div class="line">  shadow.shadowColor = [UIColor colorWithWhite:0 alpha:0.6];</div><div class="line">  NSAttributedString *attText =  [[NSAttributedString alloc]initWithString:[NSString stringWithFormat:@&quot;%@浏览过&quot;,!model.read_num?@&quot;0&quot;:model.read_num] attributes:@&#123;NSShadowAttributeName:shadow&#125;];</div><div class="line">  cell.skimLab.attributedText = attText;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> UIKit </category>
          
          <category> UILabel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Runtime实践:占位图</title>
      <link href="/2017/11/13/OC/Grammar/iOS-RunTime-%E5%8D%A0%E4%BD%8D%E5%9B%BE/"/>
      <content type="html"><![CDATA[<p> 辈出有读 里代码</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> RunTime </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-Func-内存检测工具Analyze</title>
      <link href="/2017/11/13/OC/Func/iOS-Func-%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7Analyze/"/>
      <content type="html"><![CDATA[<h1 id="内存检测工具Analyze"><a href="#内存检测工具Analyze" class="headerlink" title="内存检测工具Analyze"></a>内存检测工具Analyze</h1><h2 id="开启Analyze"><a href="#开启Analyze" class="headerlink" title="开启Analyze"></a>开启Analyze</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">xcode----product-----Analyze</div><div class="line">(快捷键:Shift + Cmd + B)</div></pre></td></tr></table></figure><blockquote><p>iOS的分析工具可以发现编译中的warning，内存泄漏隐患，甚至还可以检查出logic上的问题<br>在自测阶段一定要解决Analyze发现的问题，可以避免出现严重的bug</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><blockquote><p>内存泄漏隐患提示</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Potential Leak of an object allocated on line ……</div></pre></td></tr></table></figure><blockquote><p>数据赋值隐患提示</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">The left operand of …… is a garbage value</div></pre></td></tr></table></figure><blockquote><p>对象引用隐患提示</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Reference-Counted object is used after it is released</div></pre></td></tr></table></figure><h2 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h2><h3 id="重写UIViewController的生命周期方法没有调用父类的方法"><a href="#重写UIViewController的生命周期方法没有调用父类的方法" class="headerlink" title="重写UIViewController的生命周期方法没有调用父类的方法"></a>重写UIViewController的生命周期方法没有调用父类的方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eg:</div><div class="line">  The ‘viewWillAppear:’ instance method in UIViewController subclass ‘YourViewController’ is missing a [super viewWillAppear:] call</div></pre></td></tr></table></figure><p>&gt;</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"></div><div class="line"> -(<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line">[superviewWillAppear:<span class="literal">YES</span>];</div><div class="line"><span class="comment">//your code...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="初始化的变量并没有被使用"><a href="#初始化的变量并没有被使用" class="headerlink" title="初始化的变量并没有被使用"></a>初始化的变量并没有被使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eg:</div><div class="line"> value stored to ‘YourVariable’ is never read</div></pre></td></tr></table></figure><h3 id="变量多次初始化，其中的某些初始化的变量并没有使用过"><a href="#变量多次初始化，其中的某些初始化的变量并没有使用过" class="headerlink" title="变量多次初始化，其中的某些初始化的变量并没有使用过"></a>变量多次初始化，其中的某些初始化的变量并没有使用过</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eg:</div><div class="line"> value stored to ‘YourVariable’during its initialization is never read</div></pre></td></tr></table></figure><h2 id="重新父类的初始化方法时没有调用父类的初始化方法"><a href="#重新父类的初始化方法时没有调用父类的初始化方法" class="headerlink" title="重新父类的初始化方法时没有调用父类的初始化方法"></a>重新父类的初始化方法时没有调用父类的初始化方法</h2><blockquote><p>错误代码示例：</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> -(<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame&#123;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">self</span>== [superinitWithFrame:frame])&#123;</div><div class="line">    &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>先调用父类的初始化方法，再自定义处理</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"> -(<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame&#123;</div><div class="line"><span class="keyword">self</span> = [superinitWithFrame:frame];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">&#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="属性标明错误-strong-retain-assign"><a href="#属性标明错误-strong-retain-assign" class="headerlink" title="属性标明错误(strong,retain,assign)"></a>属性标明错误(strong,retain,assign)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">potential leak of an object</div></pre></td></tr></table></figure><h2 id="变量未初始化就使用"><a href="#变量未初始化就使用" class="headerlink" title="变量未初始化就使用"></a>变量未初始化就使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">The left operand of ‘+’ is a garbage value</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Func </tag>
            
            <tag> Analyze </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Func-异常捕获-堆栈信息的解析</title>
      <link href="/2017/11/11/OC/Func/iOS-Func-%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7-%E5%A0%86%E6%A0%88%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
      <content type="html"><![CDATA[<h1 id="堆栈信息的解析"><a href="#堆栈信息的解析" class="headerlink" title="堆栈信息的解析"></a>堆栈信息的解析</h1><blockquote><p>最使用NSSetUncaughtExceptionHandler和signal方法捕获异常，并传到服务器，用来追踪线上app的异常信息<br>捕获到的都是堆栈信息：</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7-%E5%A0%86%E6%A0%88%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A7%A3%E6%9E%90-001.png" alt="001"></p><ul><li>如何利用这些堆栈信息查看报错方法名和行数？</li></ul><h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><blockquote><p>异常信息有三种类型</p><p>①已标记错误位置的:信息已经很明确了，不用解析<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">test 0x000000010bfddd8c -[ViewController viewDidLoad] + 8588</div></pre></td></tr></table></figure></p><p>②有模块地址的情况<br>二进制库名（test）<br>调用方法的地址（0x00000001018157dc）<br>模块地址（0x100064000）<br>+偏移地址（24844252）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">test 0x00000001018157dc 0x100064000 + 24844252</div></pre></td></tr></table></figure><blockquote><p>③无模块地址的情况：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">test 0x00000001018157dc test + 24844252</div></pre></td></tr></table></figure><h2 id="dSYM符号表获取"><a href="#dSYM符号表获取" class="headerlink" title="dSYM符号表获取"></a>dSYM符号表获取</h2><blockquote><p>xcode-&gt;window-&gt;organizer-&gt;右键你的应用 show finder-&gt;右键.xcarchive 显示包内容-&gt;dSYMs-&gt;test.app.dYSM</p></blockquote><h2 id="atos命令"><a href="#atos命令" class="headerlink" title="atos命令"></a>atos命令</h2><blockquote><p>atos命令来符号化某个特定模块加载地址</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ atos [-arch 架构名] [-o 符号表] [-l 模块地址] [方法地址]</div></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li>使用终端，进到test.app.dYSM所在目录</li></ul><blockquote><p>①如果是有模块地址的情况，运行：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$  atos -arch arm64 -o test.app.dSYM/Contents/Resources/DWARF/test -l 0x100064000 0x00000001018157dc</div></pre></td></tr></table></figure><blockquote><p>②.如果是无模块地址的情况</p></blockquote><ul><li>❶先将偏移地址转为16进制：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">24844252 = 0x17B17DC</div></pre></td></tr></table></figure><ul><li>❷然后用方法的地址-偏移地址，得到的就是模块地址</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">0x00000001018157dc - 0x17B17DC = 0x100064000</div></pre></td></tr></table></figure><ul><li>❸最后运行</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ atos -arch arm64 -o test.app.dSYM/Contents/Resources/DWARF/test -l 0x100064000 0x00000001018157dc</div></pre></td></tr></table></figure><h1 id="iOS崩溃堆栈符号化"><a href="#iOS崩溃堆栈符号化" class="headerlink" title="iOS崩溃堆栈符号化"></a>iOS崩溃堆栈符号化</h1><p><a href="http://blog.csdn.net/tencent_bugly/article/details/46275773" target="_blank" rel="external">http://blog.csdn.net/tencent_bugly/article/details/46275773</a></p><p><a href="http://blog.csdn.net/reylen/article/details/50568440" target="_blank" rel="external">http://blog.csdn.net/reylen/article/details/50568440</a></p><p><a href="https://www.cnblogs.com/1oo1/p/4462649.html" target="_blank" rel="external">https://www.cnblogs.com/1oo1/p/4462649.html</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Func </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git-项目仓库配置</title>
      <link href="/2017/11/09/Git/Git-%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/15f68b7cee9f" target="_blank" rel="external">https://www.jianshu.com/p/15f68b7cee9f</a></p><p><a href="http://blog.csdn.net/lqq200912408/article/details/50422184" target="_blank" rel="external">http://blog.csdn.net/lqq200912408/article/details/50422184</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-Function函数</title>
      <link href="/2017/02/05/Swift/Grammar/Function%E5%87%BD%E6%95%B0/"/>
      <content type="html"><![CDATA[<h1 id="①-函数定义-amp-amp-形式"><a href="#①-函数定义-amp-amp-形式" class="headerlink" title="① 函数定义&amp;&amp;形式"></a>① 函数定义&amp;&amp;形式</h1><blockquote><p>Swift的函数和C的函数定义方式有区别，<br>Swift将返回类型写在函数的最后</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span>函数名 <span class="params">(参数列表)</span></span> -&gt; 返回值 &#123;</div><div class="line">       <span class="comment">//函数体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>函数输入一个字符串，然后打印出这个字符串，并且返回一个字符串</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//函数定义</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printYourName</span> <span class="params">(name: String)</span></span>-&gt;<span class="type">String</span> &#123;</div><div class="line">    <span class="built_in">print</span>(name)</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = printYourName(name: <span class="string">"Tom"</span>)   <span class="comment">//函数调用</span></div><div class="line"><span class="built_in">print</span>(s)    <span class="comment">//打印 Hello, Tom</span></div></pre></td></tr></table></figure><blockquote><p>函数返回值：函数返回值用-&gt;后跟类型说明符号<br>函数的多返回值。可以用元组返回复合多值。当然也可以没有返回值<br>复制代码<br>一个函数没有返回值，那么从 -&gt; 返回值 这个部分可以省略</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//函数定义</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printYourName</span> <span class="params">(name: String)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>有多个参数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTwoString</span><span class="params">(firstString: String, secondString: String)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(firstString,secondString)</div><div class="line">&#125;</div><div class="line">printTwoString(firstString: <span class="string">"hello"</span>, secondString: <span class="string">"Kate"</span>)</div></pre></td></tr></table></figure><blockquote><p>函数参数默认为let类型的<br>如果你想更改参数副本，那么你要显示使用var修饰<br>当然也可以不需要参数的函数<br>如果你像更改参数作为输入输出用inout,调用时候要用取地址符号&amp;</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">GetName</span><span class="params">(<span class="keyword">inout</span> strName:String)</span></span></div><div class="line">&#123;</div><div class="line">    strName += <span class="string">" hello"</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> strTest = <span class="string">"oo"</span></div><div class="line"><span class="type">GetName</span>(&amp;strTest)</div><div class="line"><span class="built_in">println</span>(<span class="string">"\(strTest)"</span>)</div></pre></td></tr></table></figure><h1 id="Function-Argument-Labels-and-Parameter-Names"><a href="#Function-Argument-Labels-and-Parameter-Names" class="headerlink" title="Function Argument Labels and Parameter Names"></a>Function Argument Labels and Parameter Names</h1><blockquote><p>在函数定义时候，参数列表中使用的fristString和secondString称为参数(Parameter).但是参数包含了两个东西</p><p>1是Argument Label，它是在方法调用的时候写在参数值前面的参数标记，比如下面调用中的firstString和secondString</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">printTwoString(firstString: <span class="string">"hello"</span>, </div><div class="line">               secondString: <span class="string">"Kate"</span>)</div></pre></td></tr></table></figure><blockquote><p>2是Parameter Names，它只的是在方法体里面使用到的参数标志<br> printTwoString方法体里面print种使用到的firstString,secondString</p><p>默认情况下，Argument Label和Parameter Names是一样的。但是你也可以自定义Argument Label，方法是在Parameter Names前面加上另外一个字符串，并用空格相隔，如下，begin是自定义的Argument Label，然后调用的时候就需要使用begin来指定参数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTwoString</span><span class="params">(begin firstString: String, secondString: String)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(firstString,secondString)</div><div class="line">&#125;</div><div class="line">printTwoString(begin: <span class="string">"hello"</span>, secondString: <span class="string">"Kate"</span>)</div></pre></td></tr></table></figure><blockquote><p>使用print的时候没有加上任何的Argument Label。如果你不想要Argument Label，那么在定义方法的时候，将Argument Label的字符串写为下划线 _ </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTwoString</span><span class="params">(firstString: String, <span class="number">_</span> secondString: String)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(firstString,secondString)</div><div class="line">&#125;</div><div class="line">printTwoString(firstString: <span class="string">"hello"</span>,  <span class="string">"Kate"</span>)  <span class="comment">//忽略了第二参数的外部参数名之后，这里就不能加上外部参数名了</span></div></pre></td></tr></table></figure><h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><blockquote><p>可以给参数赋值默认值。具有默认值的参数，在调用的时候，可以不用给它赋值。好比print方法，它的原型是</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="number">_</span>:separator:terminator:)</div></pre></td></tr></table></figure><blockquote><p>但是一般使用的时候都只传了一个字符串，原因就在于它后面的两个参数都是具有默认值的。<br>给参数设置默认值的方法是在方法定义的时候，在参数的后面用 = 加上默认值。<br>如下代码。官方文档建议我们把带默认值的参数放在参数列表的末尾，这样在调用的时候不至于混淆。但是其实可以对每个参数都赋值默认值。比如下面的例子</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTwoString</span><span class="params">(firstString: String = <span class="string">"hello"</span>, secondString: String = <span class="string">"Lucy"</span>, thirdString: String = <span class="string">"end"</span>)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(firstString,secondString,thirdString)</div><div class="line">&#125;</div><div class="line"></div><div class="line">printTwoString( secondString:<span class="string">"two"</span>) </div><div class="line"> <span class="comment">//使用外部参数名指定要赋值的参数，其他参数使用默认值，输出 hello two end</span></div></pre></td></tr></table></figure><blockquote><p>值得注意的是，如果没有默认值的参数在调用的时候也没有给其赋值，那么会在编译的时候报错。<br>如果你又把参数列表的Argument Label都去掉的话，那么在调用的时候，你给的参数将会从头开始匹配。如果参数类型不匹配的话，就会报错。当然，不建议大家这样做，因为会导致程序的可读性变差</p></blockquote><h1 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printStrings</span><span class="params">(strings: String...)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(strings)</div><div class="line">&#125;</div><div class="line"></div><div class="line">printStrings(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>)  <span class="comment">//输出 ["1", "2", "3"]</span></div></pre></td></tr></table></figure><blockquote><p>通过输出我们可以看到，可变参数在函数体内是以数组的类型存在的。这点在官方文档上有说明</p></blockquote><h1 id="In-Out-参数"><a href="#In-Out-参数" class="headerlink" title="In-Out 参数"></a>In-Out 参数</h1><blockquote><p>在默认的情况下，参数传递给方法后都是常量，也就是说不能在函数体里面对参数进行修改。这个常量是个形参，不是之前的实参</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(first: Int, <span class="number">_</span> second: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    first = <span class="number">2</span>  <span class="comment">//这句报错</span></div><div class="line">    <span class="keyword">return</span> first + second</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>有一种情况，我们希望在方法里面改变实参的值，所以有了inout关键字，这个关键字不能对可变参数添加，同时加上了这个keyword之后，不能再添加 var let，也不能有默认值。<br>然后调用的时候，这个参数必须传递一个变量，而不能是常量，并且在变量前加&amp;</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(first: <span class="keyword">inout</span> Int, <span class="number">_</span> second: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    first = <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> first + second</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"result = \(add(first: &amp;a, 3)), a = \(a) "</span> )<span class="comment">//输出 result = 5, a = 2</span></div></pre></td></tr></table></figure><blockquote><p>关于In-Out，这个实现原理是先将实参copy，然后在方法体内处理，方法结束的时候，再把copy覆盖回原来的实参。所以如果你在方法体里面去改变实参（通过某些方法获得），那么在方法结束的时候，你对实参的改变会被形参覆盖。建议不要在方法体里面操作InOut参数的实参。</p></blockquote><p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545" target="_blank" rel="external">关于InOut参数的捕获问题请参见官方文档</a></p><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><blockquote><p>函数也是一种类型。函数类型由函数定义决定</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(first: <span class="keyword">inout</span> Int, <span class="number">_</span> second: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    first = <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> first + second</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>它的函数类型为 (inout Int, Int) -&gt; Int<br>如果没有参数也没有返回值的函数，函数类型为 () -&gt; void，也可以写为 () -&gt; ()<br>函数类型可以和基本类型一样，用来定义变量。继续利用上面定义的add函数</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mathFunc : (<span class="keyword">inout</span> <span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> = add</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> s = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> result = mathFunc(&amp;f,s)  <span class="comment">//使用函数类型</span></div></pre></td></tr></table></figure><blockquote><p>函数类型可以用做参数或返回值，利用上面定义的mathFunc变量，可以有</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(first: <span class="keyword">inout</span> Int, <span class="number">_</span> second: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    first = <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> first + second</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> mathFunc : (<span class="keyword">inout</span> <span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> = add</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMath</span><span class="params">(mathFunc: <span class="params">(<span class="keyword">inout</span> Int, Int)</span></span></span> -&gt; <span class="type">Int</span>, first: <span class="keyword">inout</span> <span class="type">Int</span>, second: <span class="type">Int</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"mathFunc = \(mathFunc(&amp;first,second))"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"first = \(first)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> s = <span class="number">2</span>;</div><div class="line">doMath(mathFunc: mathFunc, first: &amp;f, second: <span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"f = \(f)"</span>)</div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="comment">//mathFunc = 4</span></div><div class="line"><span class="comment">//first=2</span></div><div class="line"><span class="comment">//f=2</span></div></pre></td></tr></table></figure><h1 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h1><blockquote><p>在函数里面再定义函数。这个嵌套函数可以在函数内部调用，也可以作为返回值返回，使得它可以在其他范围内进行使用。例子如下<br>//定义了add 和 sub 两个嵌套函数，然后用于返回。如果输入的不是”+“或”-“，那么返回一个nil。注意giveMeFunc返回的是一个函数类型的可选类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">giveMeFunc</span><span class="params">(opt: Character)</span></span> -&gt; ((<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)? &#123;</div><div class="line">    <span class="keyword">var</span> method : ((<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)?</div><div class="line">    <span class="keyword">switch</span> opt &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"+"</span> :</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(one: Int, <span class="number">_</span> two: Int)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> one + two &#125;</div><div class="line">        method = add</div><div class="line">    <span class="keyword">case</span> <span class="string">"-"</span> :</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(one: Int, <span class="number">_</span> two: Int)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> one - two &#125;</div><div class="line">        method = sub</div><div class="line">    <span class="keyword">default</span> :</div><div class="line">        method = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> method</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> m = giveMeFunc(opt:<span class="string">"-"</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(m(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment">// 打印  -1, 留意一下，这里没有Argument Label。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="操作符方法（Operator-Methods）"><a href="#操作符方法（Operator-Methods）" class="headerlink" title="操作符方法（Operator Methods）"></a>操作符方法（Operator Methods）</h1><blockquote><p>swift和C++一样，可以定义操作符函数。操作符指的是+，-，/，%，+=等等。一般我们这些操作符是给数字类型使用的。但是有了操作符函数之后，我们可以自定义这类符号的运算规则。下面是官方的示例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector2D</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> + <span class="params">(<span class="keyword">left</span>: Vector2D, <span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>(x: <span class="keyword">left</span>.x + <span class="keyword">right</span>.x, y: <span class="keyword">left</span>.y + <span class="keyword">right</span>.y)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上面的例子定义了一个操作符函数 + ，这个操作符函数的参数列表里面有两个参数left和right。分别代表着+号左右两边的两个参数。通过这个函数，我们可以直接将两个Vector示例进行相加。如下：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> vector = <span class="type">Vector2D</span>(x: <span class="number">3.0</span>, y: <span class="number">1.0</span>)</div><div class="line"><span class="keyword">let</span> anotherVector = <span class="type">Vector2D</span>(x: <span class="number">2.0</span>, y: <span class="number">4.0</span>)</div><div class="line"><span class="keyword">let</span> combinedVector = vector + anotherVector</div><div class="line"><span class="comment">// combinedVector is a Vector2D instance with values of (5.0, 5.0)</span></div></pre></td></tr></table></figure><blockquote><p>除了这种要接受两个参数的操作符之外，还要一些只有一个参数的操作符，比如 -，++，–等等。但是这类操作符有两类：前缀（Prefix）和后缀（Postfix），比如–a，i++；<br>这类操作符的定义要加上prefix或postfix关键字。语法如下</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> - <span class="params">(vector: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>(x: -vector.x, y: -vector.y)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上面定义了一个前缀的 - 操作符函数。用来将一个向量取反。后置操作符的关键字是postfix，中间操作符的关键字是infix</p><p>另外还有一种计算并赋值的操作符，比如++，+=等等。这类的操作符会对其中的一个操作对象进行操作后的赋值。所以必须将参数设置为inout</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> += <span class="params">(<span class="keyword">left</span>: <span class="keyword">inout</span> Vector2D, <span class="keyword">right</span>: Vector2D)</span></span> &#123;</div><div class="line">        <span class="keyword">left</span> = <span class="keyword">left</span> + <span class="keyword">right</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>除了Swift已经定义的操作符之外，还可以自己定义操作符。比如下面定义了一个+++操作符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">prefix</span> <span class="keyword">operator</span> +++ </div><div class="line"> </div><div class="line"> 上面的只是定义，我们还需要实现这个操作符所做的</div><div class="line"> </div><div class="line"> <span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: <span class="keyword">inout</span> Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</div><div class="line">        vector += vector</div><div class="line">        <span class="keyword">return</span> vector</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>但是这个自定义的操作符有一些规定。<br>自定义的操作符可以由/, =, -, +, !, *, %, &lt;, &gt;, &amp;, |, ^, ?,~，和某些Unicode 字符开始，至于是哪些字符可以参考官网。点击网页，在网页最下面<br>在这些字符之后，可以接上unicode字符。<br>另外有一些禁止的规定：<br>1.不能重写一个单单的 ? 号。（可以在字符里面加入?号）<br>2.不能重写这些操作符 =, -&gt;, //, /, /, ., 但是可以重写两个或更多个点的操作符。</p><ol><li>不能以这些字符开头 ?, &lt;， &amp;<br>4.不能以这些字符结尾 ?， &gt;， !</li></ol></blockquote><p>在定义的操作符的时候末尾的那对大括号是有用的。在数学上，加减乘除是有优先级和结合规则的。同样的，这里的操作符也是。我们可以在定义操作符的大括号里面定义这个操作符的优先级和结合规律</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> +-: <span class="type">AdditionPrecedence</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> +- <span class="params">(<span class="keyword">left</span>: Vector2D, <span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>(x: <span class="keyword">left</span>.x + <span class="keyword">right</span>.x, y: <span class="keyword">left</span>.y - <span class="keyword">right</span>.y)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面例子定义的是一个中间的操作符，它的结合规则是向左结合。优先级是AdditionPrecedence组，这个参考下面的Precedence Group Declaration链接。<br>前置操作符和后置操作符不能指定优先级，它们作用在同一个操作数，那么先执行后置操作符。</p><p><a href="http://blog.csdn.net/a709314090/article/details/74007109" target="_blank" rel="external">wen</a></p><p><a href="http://www.cnblogs.com/zhidao-chen/p/3868411.html" target="_blank" rel="external"></a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar-类和结构体</title>
      <link href="/2017/02/02/Swift/Grammar/Struct%20&amp;&amp;%20Class%20%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%B1%BB/"/>
      <content type="html"><![CDATA[<h1 id="①定义"><a href="#①定义" class="headerlink" title="①定义"></a>①定义</h1><blockquote><p>结构体struct</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SForm</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> iXX:<span class="type">Int</span> = <span class="number">99</span></div><div class="line">    <span class="keyword">var</span> strHello:<span class="type">String</span> = <span class="string">"dsf"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testFunc</span><span class="params">(iXX:Int)</span></span>-&gt;<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">return</span> iXX+<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>类class</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTset</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> iAge:<span class="type">Int</span> = <span class="number">9</span></div><div class="line">    <span class="keyword">var</span> strName:<span class="type">String</span> = <span class="string">"xx"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testFunction</span><span class="params">(iAge:Int)</span></span>-&gt;<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">return</span> iAge+<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testFunctionName</span><span class="params">(strName:String)</span></span>-&gt;<span class="type">String</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"oo"</span>+strName</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="②实例"><a href="#②实例" class="headerlink" title="②实例"></a>②实例</h1><blockquote><p>结构体struct</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> structObj = <span class="type">SForm</span>()</div><div class="line">structObj.iXX = <span class="number">988</span></div><div class="line"><span class="keyword">let</span> iRes = structObj.testFunc(<span class="number">4</span>)</div></pre></td></tr></table></figure><blockquote><p>类class</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> clsObj = <span class="type">CTset</span>()</div><div class="line">clsObj.iAge = <span class="number">987</span></div><div class="line"><span class="keyword">let</span> iRe:<span class="type">Int</span> = clsObj.testFunction(<span class="number">32</span>)</div><div class="line"><span class="keyword">let</span> iStr:<span class="type">String</span> = clsObj.testFunctionName(<span class="string">"sdf"</span>)</div></pre></td></tr></table></figure><h1 id="③初始化"><a href="#③初始化" class="headerlink" title="③初始化"></a>③初始化</h1><blockquote><p>结构体有一个自动生成的初始化器<br>新实例中各个属性的初始值可以通过属性的名称传递到成员逐一初始化器之中</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">var objFirst = SForm(iXX:983, strHello:&quot;hel&quot;)</div><div class="line">objFirst.iXX = 87</div><div class="line"></div><div class="line">let objSecond = SForm(iXX:94, strHello:&quot;hwxel&quot;)</div><div class="line">//objSecond.iXX = 876 error</div></pre></td></tr></table></figure><h1 id="④类型"><a href="#④类型" class="headerlink" title="④类型"></a>④类型</h1><blockquote><p>结构体是值类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> objFirst = <span class="type">SForm</span>(iXX:<span class="number">983</span>, strHello:<span class="string">"hel"</span>)</div><div class="line"><span class="keyword">var</span> objSecond = objFirst</div><div class="line">objSecond.iXX = <span class="number">5775</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"objFirst: \(objFirst.iXX)  objSecond:\(objSecond.iXX)"</span>)</div><div class="line"></div><div class="line">输出：objFirst: <span class="number">983</span>  objSecond:<span class="number">5775</span></div></pre></td></tr></table></figure><blockquote><p>类是引用类型</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> clsObj = <span class="type">CTset</span>()</div><div class="line">clsObj.iAge = <span class="number">987</span></div><div class="line"><span class="keyword">var</span> clsObjEx:<span class="type">CTset</span> = clsObj</div><div class="line">clsObjEx.iAge = <span class="number">874</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"\(clsObj.iAge)  \(clsObjEx.iAge)"</span>)</div><div class="line">输出：clsObj: <span class="number">874</span> clsObjEx: <span class="number">874</span></div></pre></td></tr></table></figure><h1 id="⑤运算"><a href="#⑤运算" class="headerlink" title="⑤运算"></a>⑤运算</h1><blockquote><p>类的等价于运算  === 与 不等价于 !== 运算<br>表示是否是引用到同一个类对象</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> clsObj = <span class="type">CTset</span>()</div><div class="line">clsObj.iAge = <span class="number">987</span></div><div class="line"><span class="keyword">var</span> clsObjEx:<span class="type">CTset</span> = clsObj</div><div class="line">clsObjEx.iAge = <span class="number">874</span></div><div class="line"><span class="keyword">if</span> clsObj === clsObjEx &#123;</div><div class="line">    <span class="built_in">println</span>(<span class="string">"obj same"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="类和结构体区别"><a href="#类和结构体区别" class="headerlink" title="类和结构体区别"></a>类和结构体区别</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">结构体是值类型，结构体的赋值意味着拷贝行为的发生</div><div class="line">而类是引用类型</div></pre></td></tr></table></figure><h1 id="集合类型的赋值和拷贝行为"><a href="#集合类型的赋值和拷贝行为" class="headerlink" title="集合类型的赋值和拷贝行为"></a>集合类型的赋值和拷贝行为</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">swift的 数组 和 字典 都是以 值类型 传递的</div></pre></td></tr></table></figure><blockquote><p>字典的拷贝</p></blockquote><ul><li>当有字典实例的赋值或者是字典做参数的函数调用时候，字典即发生拷贝行为</li><li>字典的key和value的拷贝行为是依赖于她自身到底是引用属性还是值类型</li></ul><blockquote><p>dicSecond的值被更新，而dicFirst的值依然保持不变<br>dicFirst和dicSecond是两个独立的字典<br>它的key和value在赋值时候发生了拷贝，因为都是String类型。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> dicFirst:<span class="type">Dictionary</span> = [<span class="string">"key1"</span>:<span class="string">"value1"</span>, <span class="string">"key2"</span>:<span class="string">"value2"</span>]</div><div class="line"><span class="keyword">var</span> dicSecond:<span class="type">Dictionary</span> = dicFirst</div><div class="line">dicSecond[<span class="string">"key1"</span>] = <span class="string">"value1Update"</span></div></pre></td></tr></table></figure><blockquote><p>两个字典dicFirst 和 dicSecond分别为不同的字典，但它的值 clsObjFirst的地址却是同一个<br>因为它是类类型，是引用传递</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line">lass <span class="type">CTset</span>&#123;</div><div class="line">    <span class="keyword">var</span> iAge:<span class="type">Int</span> = <span class="number">9</span></div><div class="line">    <span class="keyword">var</span> strName:<span class="type">String</span> = <span class="string">"xx"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testFunction</span><span class="params">(iAge:Int)</span></span>-&gt;<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">return</span> iAge+<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testFunctionName</span><span class="params">(strName:String)</span></span>-&gt;<span class="type">String</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"oo"</span>+strName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> clsObjFirst = <span class="type">CTset</span>()</div><div class="line">clsObjFirst.iAge = <span class="number">443</span></div><div class="line"><span class="keyword">var</span> dicFirst:<span class="type">Dictionary</span> = [<span class="string">"key1"</span>:clsObjFirst]</div><div class="line"><span class="keyword">var</span> dicSecond:<span class="type">Dictionary</span> = dicFirst</div></pre></td></tr></table></figure><h2 id="数组的赋值与拷贝"><a href="#数组的赋值与拷贝" class="headerlink" title="数组的赋值与拷贝"></a>数组的赋值与拷贝</h2><ul><li>数组的拷贝行为只有在数组的长度发生变化的时候才会拷贝</li><li>当然数组里面的内容，是要遵循引用类型还是值类型的。</li></ul><blockquote><p>arrayFirst[0]和arraySecond[0] 都会被修改成 89<br>因为数组长度没变化，所以没发生拷贝</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayFirst = [<span class="number">1</span>, <span class="number">33</span>]</div><div class="line"><span class="keyword">var</span> arraySecond = arrayFirst</div><div class="line">arraySecond[<span class="number">0</span>] = <span class="number">89</span></div></pre></td></tr></table></figure><blockquote><p>长度变化，arrayFirst拷贝，独立另外一个数组</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayFirst = [<span class="number">1</span>, <span class="number">33</span>]</div><div class="line"><span class="keyword">var</span> arraySecond = arrayFirst</div><div class="line">arrayFirst.append(<span class="number">222</span>)<span class="comment">//长度变化，arrayFirst拷贝，独立另外一个数组</span></div><div class="line">arrayFirst[<span class="number">0</span>] = <span class="number">99</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"first:\(arrayFirst)\nsecond:\(arraySecond)"</span>)</div><div class="line">输出：</div><div class="line">first:[<span class="number">99</span>, <span class="number">33</span>, <span class="number">222</span>]</div><div class="line">second:[<span class="number">1</span>, <span class="number">33</span>]</div></pre></td></tr></table></figure><blockquote><p>在用多个变量(var)引用一个数组时候，可以用unshare()方法，强制拷贝数组</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> arrayFirst = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="keyword">var</span> arraySecond = arrayFirst</div><div class="line"><span class="keyword">var</span> arrayThird = arrayFirst</div><div class="line">arraySecond.unshare()<span class="comment">//拷贝独立成另外个数组</span></div><div class="line">arrayThird.unshare()<span class="comment">//拷贝独立成另外个数组</span></div><div class="line">arrayFirst[<span class="number">0</span>] = <span class="number">3</span></div><div class="line">arraySecond[<span class="number">0</span>] = <span class="number">4</span></div><div class="line">arrayThird[<span class="number">0</span>]=<span class="number">5</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"first:\(arrayFirst)\nsecond:\(arraySecond) \nthird:\(arrayThird)"</span>)</div><div class="line">输出：</div><div class="line">first:[<span class="number">3</span>, <span class="number">2</span>]</div><div class="line">second:[<span class="number">4</span>, <span class="number">2</span>] </div><div class="line">third:[<span class="number">5</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure><h2 id="数组等价于-和不等价于"><a href="#数组等价于-和不等价于" class="headerlink" title="数组等价于(===)和不等价于(!==)"></a>数组等价于(===)和不等价于(!==)</h2><h2 id="强制复制数组"><a href="#强制复制数组" class="headerlink" title="强制复制数组"></a>强制复制数组</h2><blockquote><p>通过copy强制复制数组，进行的是数组类容浅拷贝，并返回个新的数组引用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> arraySource = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">var</span> arrayCopy = arraySource.copy()</div><div class="line">arraySource[<span class="number">0</span>] = <span class="number">4</span></div><div class="line">arrayCopy[<span class="number">1</span>] = <span class="number">5</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"source:\(arraySource)\n copy:\(arrayCopy)"</span>)</div><div class="line">输出：</div><div class="line">source:[<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>] </div><div class="line">copy:[<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhidao-chen/p/3881410.html" target="_blank" rel="external">more</a></p><p>===========================================</p><h1 id="类和结构体对比"><a href="#类和结构体对比" class="headerlink" title="类和结构体对比"></a>类和结构体对比</h1><h2 id="类和结构体的共同点在于"><a href="#类和结构体的共同点在于" class="headerlink" title="类和结构体的共同点在于"></a>类和结构体的共同点在于</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">定义属性用于存储值</div><div class="line">定义方法用于提供功能</div><div class="line">定义附属脚本用于访问值</div><div class="line">定义构造器用于生成初始化值</div><div class="line">通过扩展以增加默认实现的功能</div><div class="line">实现协议以提供某种标准功能</div></pre></td></tr></table></figure><h2 id="与结构体相比，类有如下的附加功能"><a href="#与结构体相比，类有如下的附加功能" class="headerlink" title="与结构体相比，类有如下的附加功能"></a>与结构体相比，类有如下的附加功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">继承允许一个类继承另一个类的特征</div><div class="line">类型转换允许在运行时检查和解释一个类实例的类型</div><div class="line">析构器允许一个类实例释放任何其所被分配的资源</div><div class="line">引用计数允许对一个类的多次引用</div></pre></td></tr></table></figure><blockquote><p>结构体总是通过被复制的方式在代码中传递，不使用引用计数</p></blockquote><h1 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h1><h2 id="使用关键字class和struct表示类和结构体"><a href="#使用关键字class和struct表示类和结构体" class="headerlink" title="使用关键字class和struct表示类和结构体"></a>使用关键字class和struct表示类和结构体</h2><blockquote><p>每次定义一个新类或者结构体的时候，实际上你是定义了一个新的Swift类型<br>因此使用UpperCamelCase这种方式来命名（如SomeClass和SomeStructure等），以便符合标准Swift类型的大写命名风格（如String，Int和Bool）<br>相反的，请使用lowerCamelCase这种方式为属性和方法命名（如framerate和incrementCount），以便和类型名区分</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Resolution</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoMode</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> resolution = <span class="type">Resolution</span>()</div><div class="line">    <span class="keyword">var</span> interlaced = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> frameRate = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?       <span class="comment">// 可选类型，自动赋值为nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="类和结构实例"><a href="#类和结构实例" class="headerlink" title="类和结构实例"></a>类和结构实例</h1><blockquote><p>结构体和类都使用构造器语法来生成新的实例<br>构造器语法的最简单形式是在结构体或者类的类型名称后跟随一对空括号，如Resolution()或VideoMode()<br>通过这种方式所创建的类或者结构体实例，其属性均会被初始化为默认值<br>属性都必须赋初值！否则编译报错，可选类型可不赋值，实际上默认赋值为nil</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Resolution</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoMode</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> resolution = <span class="type">Resolution</span>()</div><div class="line">    <span class="keyword">var</span> interlaced = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> frameRate = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?       <span class="comment">// 可选类型，自动赋值为nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> r = <span class="type">Resolution</span>()</div><div class="line"><span class="keyword">let</span> v = <span class="type">VideoMode</span>()</div><div class="line"><span class="built_in">print</span>(r)    <span class="comment">// Resolution(width: 0, height: 0)</span></div><div class="line"><span class="built_in">print</span>(v)    <span class="comment">// VideoMode</span></div><div class="line"><span class="built_in">print</span>(v.resolution)     <span class="comment">// Resolution(width: 0, height: 0)</span></div><div class="line"><span class="built_in">print</span>(v.interlaced)     <span class="comment">// false</span></div><div class="line"><span class="built_in">print</span>(v.frameRate)      <span class="comment">// 0.0</span></div><div class="line"><span class="built_in">print</span>(v.name)           <span class="comment">// nil</span></div></pre></td></tr></table></figure><h1 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h1><blockquote><p>通过使用点语法（dot syntax），你可以访问实例的属性<br>其语法规则是，实例名后面紧跟属性名，两者通过点号(.)连接<br>也可以使用点语法访问子属性。也可以使用点语法为变量属性赋值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">```</div><div class="line">&gt;与<span class="type">Objective</span>-<span class="type">C</span>语言不同的是，<span class="type">Swift</span>允许直接设置结构体属性的子属性，并不需要重新为整个resolution属性设置新值</div></pre></td></tr></table></figure><p>struct Resolution {<br>    var width = 0<br>    var height = 0<br>}</p><p>class VideoMode {<br>    var resolution = Resolution()<br>    var interlaced = false<br>    var frameRate = 0.0<br>    var name: String?       // 可选类型，自动赋值为nil<br>}</p><p>let v = VideoMode()<br>print(v.resolution)    // Resolution(width: 0, height: 0)<br>v.resolution.width = 1920<br>v.resolution.height = 1080<br>print(v.resolution.width)   // 1920<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 结构体类型的成员逐一构造器</div><div class="line">&gt; 所有结构体都有一个自动生成的成员逐一构造器，用于初始化新结构体实例中成员的属性</div><div class="line">&gt; 新实例中各个属性的初始值可以通过属性的名称传递到成员逐一构造器之中</div><div class="line">&gt; 与结构体不同，类实例没有默认的成员逐一构造器</div><div class="line"></div><div class="line">```swift</div><div class="line">struct Resolution &#123;</div><div class="line">    var width = 0</div><div class="line">    var height = 0</div><div class="line">&#125;</div><div class="line"></div><div class="line">var r = Resolution(width: 1920, height: 1080)</div><div class="line">print(r)    // Resolution(width: 1920, height: 1080)</div></pre></td></tr></table></figure></p><h1 id="结构体和枚举是值类型"><a href="#结构体和枚举是值类型" class="headerlink" title="结构体和枚举是值类型"></a>结构体和枚举是值类型</h1><blockquote><p>值类型被赋予给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝<br>面我们已经大量使用了值类型。实际上，在 Swift中，所有的基本类型：整数（Integer）、浮点数（floating-point）、布尔值（Boolean）、字符串（string)、数组（array）和字典（dictionary），都是值类型，并且在底层都是以结构体的形式所实现。<br>在Swift中，所有的结构体和枚举类型都是值类型。这意味着它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Resolution</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="type">Resolution</span>(width: <span class="number">1920</span>, height: <span class="number">1080</span>)</div><div class="line"><span class="built_in">print</span>(r)    <span class="comment">// Resolution(width: 1920, height: 1080)</span></div><div class="line"><span class="keyword">var</span> rr = r</div><div class="line"><span class="built_in">print</span>(rr)   <span class="comment">// Resolution(width: 1920, height: 1080)，两个完全独立的实例碰巧包含有相同的数值</span></div><div class="line">rr.width = <span class="number">2048</span></div><div class="line"><span class="built_in">print</span>(r)    <span class="comment">// Resolution(width: 1920, height: 1080)，由于r和rr相互独立，所以值不改变</span></div><div class="line"><span class="built_in">print</span>(rr)   <span class="comment">// Resolution(width: 2048, height: 1080)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">North</span>, <span class="type">South</span>, <span class="type">East</span>, <span class="type">West</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="type">CompassPoint</span>.<span class="type">North</span></div><div class="line"><span class="keyword">var</span> b = a</div><div class="line"><span class="built_in">print</span>(b)    <span class="comment">// South</span></div><div class="line">b = <span class="type">CompassPoint</span>.<span class="type">South</span></div><div class="line"><span class="built_in">print</span>(a)    <span class="comment">// North</span></div><div class="line"><span class="built_in">print</span>(b)    <span class="comment">// South</span></div></pre></td></tr></table></figure><h1 id="类是引用类型"><a href="#类是引用类型" class="headerlink" title="类是引用类型"></a>类是引用类型</h1><blockquote><p>与值类型不同，引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，引用的是已存在的实例本身而不是其拷贝</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Resolution</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoMode</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> resolution = <span class="type">Resolution</span>()</div><div class="line">    <span class="keyword">var</span> interlaced = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> frameRate = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?       <span class="comment">// 可选类型，自动赋值为nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="type">VideoMode</span>()</div><div class="line">a.frameRate = <span class="number">25</span>    <span class="comment">// a是常量，但是可以修改属性，因为a本身没有改变</span></div><div class="line"><span class="keyword">let</span> b = a</div><div class="line">b.frameRate = <span class="number">30</span></div><div class="line"><span class="built_in">print</span>(a.frameRate)  <span class="comment">// 30.0</span></div><div class="line"><span class="comment">// a = VideoMode()     // error: cannot assign to value: 'a' is a 'let' constant</span></div></pre></td></tr></table></figure><blockquote><p>注意，a和b被声明为常量而不是变量。然而你依然可以改变a.frameRate和b.frameRate，因为a和b这两个常量的值并未改变。它们并不“存储”这个VideoMode实例，而仅仅是对VideoMode实例的引用。所以，改变的是被引用的VideoMode的frameRate属性，而不是引用VideoMode的常量的值</p></blockquote><h1 id="恒等运算符"><a href="#恒等运算符" class="headerlink" title="恒等运算符"></a>恒等运算符</h1><blockquote><p>因为类是引用类型，有可能有多个常量和变量在幕后同时引用同一个类实例。（对于结构体和枚举来说，这并不成立。因为它们作为值类型，在被赋予到常量、变量或者传递到函数时，其值总是会被拷贝。）<br>如果能够判定两个常量或者变量是否引用同一个类实例将会很有帮助。为了达到这个目的，Swift内建了两个恒等运算符运用这两个运算符检测两个常量或者变量是否引用同一个实例</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line">等价于（===）</div><div class="line">不等价于（!==）</div></pre></td></tr></table></figure><h2 id="等价于”（用三个等号表示，-）与“等于”（用两个等号表示，-）的不同"><a href="#等价于”（用三个等号表示，-）与“等于”（用两个等号表示，-）的不同" class="headerlink" title="等价于”（用三个等号表示，===）与“等于”（用两个等号表示，==）的不同"></a>等价于”（用三个等号表示，===）与“等于”（用两个等号表示，==）的不同</h2><blockquote><p>等价于”表示两个类类型（class type）的常量或者变量引用同一个类实例。<br>“等于”表示两个实例的值“相等”或“相同”，判定时要遵照设计者定义的评判标准，因此相对于“相等”来说，这是一种更加合适的叫法<br>当你在定义你的自定义类和结构体的时候，你有义务来决定判定两个实例“相等”的标准</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Resolution</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoMode</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> resolution = <span class="type">Resolution</span>()</div><div class="line">    <span class="keyword">var</span> interlaced = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> frameRate = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?       <span class="comment">// 可选类型，自动赋值为nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="type">VideoMode</span>()</div><div class="line">a.frameRate = <span class="number">25</span>    <span class="comment">// a是常量，但是可以修改属性，因为a本身没有改变</span></div><div class="line"><span class="keyword">let</span> b = a</div><div class="line">b.frameRate = <span class="number">30</span></div><div class="line"></div><div class="line"><span class="comment">// if a == b &#123;     // 两个引用类型之间使用“==”运算符，会出现编译错误：error: binary operator '==' cannot be applied to two 'VideoMode' operands</span></div><div class="line"><span class="keyword">if</span> a === b &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"a === b"</span>)    <span class="comment">// a === b</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"a !== b"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">如果你有<span class="type">C</span>、<span class="type">C</span>++或者<span class="type">Objective</span>-<span class="type">C</span>语言的经验，那么你也许会知道这些语言使用指针来引用内存中的地址。一个引用某个引用类型实例的<span class="type">Swift</span>常量或者变量，与<span class="type">C</span>语言中的指针类似，但是并不直接指向某个内存地址，也不要求你使用星号（*）来表明你在创建一个引用。<span class="type">Swift</span>中的这些引用与其它的常量或变量的定义方式相同</div></pre></td></tr></table></figure><h1 id="类和结构体的选择"><a href="#类和结构体的选择" class="headerlink" title="类和结构体的选择"></a>类和结构体的选择</h1><p>可以使用类和结构体来定义你的自定义数据类型。然而，结构体实例总是通过值传递，类实例总是通过引用传递。这意味两者适用不同的任务。当你在考虑一个工程项目的数据结构和功能的时候，你需要决定每个数据结构是定义成类还是结构体。按照通用的准则，当符合一条或多条以下条件时，请考虑构建结构体：</p><pre><code>该数据结构的主要目的是用来封装少量相关简单数据值。有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用。该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用。该数据结构不需要去继承另一个既有类型的属性或者行为。</code></pre><p>举例来说，以下情境中适合使用结构体：</p><pre><code>几何形状的大小，封装一个width属性和height属性，两者均为Double类型。一定范围内的路径，封装一个start属性和length属性，两者均为Int类型。三维坐标系内一点，封装x，y和z属性，三者均为Double类型。</code></pre><p>在所有其它案例中，定义一个类，生成一个它的实例，并通过引用来管理和传递。实际中，这意味着绝大部分的自定义数据构造都应该是类，而非结构体</p><h1 id="字符串、数组和字典类型的赋值与赋值行为"><a href="#字符串、数组和字典类型的赋值与赋值行为" class="headerlink" title="字符串、数组和字典类型的赋值与赋值行为"></a>字符串、数组和字典类型的赋值与赋值行为</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Swift中，许多基本类型，诸如String，Array和Dictionary类型均以结构体的形式实现。这意味着被赋值给新的常量或变量，或者被传入函数或方法中时，它们的值会被拷贝。</div><div class="line"></div><div class="line">Objective-C中NSString，NSArray和NSDictionary类型均以类的形式实现，而并非结构体。它们在被赋值或者被传入函数或方法时，不会发生值拷贝，而是传递现有实例的引用。</div><div class="line"></div><div class="line">注意，以上是对字符串、数组、字典的“拷贝”行为的描述。在你的代码中，拷贝行为看起来似乎总会发生。然而，Swift在幕后只在绝对必要时才执行实际的拷贝。Swift管理所有的值拷贝以确保性能最优化，所以你没必要去回避赋值来保证性能最优化</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OC-UIKit-UImage-加载本地高清大图</title>
      <link href="/2017/01/16/OC/Kit/UIImage/OC-UIKit-UImage-%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%AB%98%E6%B8%85%E5%A4%A7%E5%9B%BE/"/>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/pzhtpf/article/details/51027047" target="_blank" rel="external">http://blog.csdn.net/pzhtpf/article/details/51027047</a></p>]]></content>
      
      <categories>
          
          <category> UIKit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swift-Grammar--基本类型与运算</title>
      <link href="/2016/11/24/Swift/Grammar/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97/"/>
      <content type="html"><![CDATA[<p>1.<a href="#基本类型">基本类型</a><br>  1.1<a href="#数字类型">数字类型</a><br>  1.2<a href="#Double">Double</a><br>  1.3<a href="#布尔">布尔</a><br>2.<a href="#不同进制的前缀">不同进制的前缀</a><br>3.<a href="#元组（Tuple）">元组（Tuple）</a><br>4.<a href="#可选类型(Optionals">可选类型(Optionals)</a>)<br>5.<a href="#基本运算">基本运算</a><br>6.<a href="#类型安全">类型安全</a><br>7.<a href="#断言">断言</a></p><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><p><span id="基本类型"></span></p><blockquote><p>多出来的是 <strong>Tuple*8 和 </strong>可选类型**<br>常量定义</p><ul><li>let 常量名</li><li>常量名可以死任意文字，文字长度</li><li>给常量一个值，叫赋值</li><li>形式： let 常量名 = 值</li></ul><p>变量</p></blockquote><ul><li>可主动变更或可预期时间内自耦东有规律或无规律的量</li></ul><blockquote><p>常量和变量的关系</p><ul><li>变化才是永恒不变的，无论如何，总有规律可循</li><li>变量与常量在一定条件下可以相互转换</li><li>常量局势变量的一种</li></ul></blockquote><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p><span id="数字类型"></span></p><blockquote><p><strong>Int 整型</strong></p><blockquote><p>类型可以不写，swift有类型推算功能</p></blockquote></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a:<span class="type">Int</span> = <span class="number">101</span>    <span class="comment">//定义一个整型 初始化为101</span></div><div class="line"><span class="keyword">var</span> aa:<span class="type">UInt</span> = <span class="number">201</span>  <span class="comment">//无符号的整型 （不能为负数）</span></div></pre></td></tr></table></figure><ul><li>在32位机器上是Int32 </li><li>在64位机器上是Int64</li><li>除了Int之外，还有Int，Int8，Int16，Int32，Int64.</li></ul><blockquote><p>各个取值范围</p><blockquote><p>其实取值范围就是 负2的n-1次方 ~ 2的n-1次方-1</p></blockquote></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="type">UInt8</span>.<span class="built_in">max</span>)  <span class="comment">//255</span></div><div class="line"><span class="built_in">print</span>(<span class="type">UInt8</span>.<span class="built_in">min</span>)  <span class="comment">//0</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="type">Int8</span>.<span class="built_in">max</span>) <span class="comment">//127</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Int8</span>.<span class="built_in">min</span>) <span class="comment">//-128</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="type">Int16</span>.<span class="built_in">max</span>)    <span class="comment">//32767</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Int16</span>.<span class="built_in">min</span>)    <span class="comment">//-32768</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="type">Int32</span>.<span class="built_in">max</span>)    <span class="comment">//2147483647</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Int32</span>.<span class="built_in">min</span>)    <span class="comment">//-2147483648</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="type">Int64</span>.<span class="built_in">max</span>)    <span class="comment">//9223372036854775807</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Int64</span>.<span class="built_in">min</span>)    <span class="comment">//-9223372036854775808</span></div></pre></td></tr></table></figure><h2 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h2><p><span id="Double"></span></p><ul><li>swift 默认 浮点型是 Double（双精度）</li><li>64位浮点数</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span>  yue = <span class="number">3.5</span></div><div class="line">或</div><div class="line"><span class="keyword">var</span>  yue : <span class="type">Double</span> = <span class="number">3.5</span></div></pre></td></tr></table></figure><blockquote><p>Float </p></blockquote><ul><li>32位浮点数</li></ul><blockquote><p>Swift不支持数字类型之间的自动转换。必须显式手动转换<br>数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> i: <span class="type">Int</span> = <span class="number">2_000</span>   <span class="comment">//这个表示2000  </span></div><div class="line"><span class="keyword">var</span> d: <span class="type">Double</span> = <span class="number">5.3</span>  </div><div class="line"><span class="keyword">var</span> e = d * <span class="type">Double</span>(i)</div></pre></td></tr></table></figure><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p><span id="布尔"></span></p><blockquote><p>Bool 表示逻辑上的真假： true、false<br>Swift和java一样，对boolean类型是强要求的，不能在if里面传一个整形用于判断</p></blockquote><h1 id="不同进制的前缀"><a href="#不同进制的前缀" class="headerlink" title="不同进制的前缀"></a>不同进制的前缀</h1><p><span id="不同进制的前缀"></span><br>|||<br>|—|—|<br>|十进制|没有|<br>|二进制   |     0b|<br>|八进制  |      0o|<br>|十六进制 |     0x|<br>|科学计数|<br>|1.25e2 |代表   1.25乘上10的2次方|<br>|0xFp2  |代表   15乘上2的2次方|<br>|typealias|    关键字，用来个类型起别名|</p><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">  <span class="keyword">typealias</span> ii = <span class="type">Int8</span>  </div><div class="line">  <span class="keyword">var</span> mm = ii.<span class="built_in">min</span> <span class="comment">//这里的ii代表了Int8 </span></div><div class="line">  <span class="keyword">var</span> data1 = <span class="number">17</span>     <span class="comment">//17</span></div><div class="line"><span class="keyword">var</span> data2 = <span class="number">0b1010111</span>   <span class="comment">//87</span></div><div class="line"><span class="keyword">var</span> data3 = <span class="number">0o713</span>   <span class="comment">//459</span></div><div class="line"><span class="keyword">var</span> data4 = <span class="number">0xaf7</span>   <span class="comment">//2807</span></div></pre></td></tr></table></figure><h1 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h1><p><span id="元组(Tuple)"></span></p><blockquote><p>Tuple:定义变量组合<br>其实就是一群数据组合，可以将其解出来输出<br>注意的是tuple不只是两个元素，你可以自己扩展成多个元素</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> var x= 1</div><div class="line"> var y = 2</div><div class="line"> var z = 3</div><div class="line"> </div><div class="line">var 向量 = （1，2，3）</div><div class="line">print (向量.0 ,向量.1 ,向量.2)</div><div class="line"></div><div class="line">var (x,y,z) = (1,2,3)</div><div class="line">print (x,y,z)</div><div class="line"></div><div class="line">// 值前加前缀</div><div class="line">var 课程 = (day:100,unit:&quot;天&quot;,lanage:&quot;swift&quot;,version:&quot;3.0&quot;);</div><div class="line">print课程. day)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> menu = (<span class="string">"apple"</span>, <span class="number">20</span>)  <span class="comment">//定义一个Tuple  </span></div><div class="line"><span class="keyword">var</span> menu2 = (name: <span class="string">"banana"</span>, price:<span class="number">10</span>)  <span class="comment">//可以在定义的时候指定元素名字  </span></div><div class="line"><span class="keyword">let</span> (name,price) = menu   <span class="comment">//解Tuple，如果某个元素不想要的话，用 _ 代替  </span></div><div class="line"><span class="built_in">print</span>(name, price)   <span class="comment">//输出  apple 20  </span></div><div class="line"><span class="built_in">print</span>(menu.<span class="number">0</span>,menu.<span class="number">1</span>)  <span class="comment">//不解Tuple直接输出  </span></div><div class="line"><span class="built_in">print</span>(menu2.name,menu2.price)  <span class="comment">//利用元素名字解Tuple</span></div></pre></td></tr></table></figure><h2 id="可选类型-Optionals"><a href="#可选类型-Optionals" class="headerlink" title="可选类型(Optionals)"></a>可选类型(Optionals)</h2><p><span id="可选类型(Optionals)"></span></p><blockquote><p>当一个方法可以返回一个对象的时候，它有可能返回一个空值<br>比如将字符串转换为数字的方法。为了处理这种情况，有了可选类型。<br>可选类型表示一个数据，它可能有值，也可能为空。基本语法是在类型的后面加上问号 ？</p><p>定义形式</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">形式: var 变量：类型?,默认无值（nil）</div><div class="line"> </div><div class="line">var addressStr:String  </div><div class="line">print(addressStr)  //这里报错说str没初始化  </div><div class="line"></div><div class="line">var addressStr:String?</div><div class="line">addressStr = &quot;杭州&quot;</div></pre></td></tr></table></figure><blockquote><p>但是如果将str改为可选类型，那么这就可以输出</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str:<span class="type">String</span>?  </div><div class="line"><span class="built_in">print</span>(str)  <span class="comment">//输出 nil</span></div></pre></td></tr></table></figure><blockquote><p>可选类型转换为对应的类型 –&gt;对可选类型解包<br>强制解包有个注意点，就是如果这个可选类型是nil的话，那么强制解包的语句会在运行时报错</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str:<span class="type">String</span>? = <span class="string">"fe"</span>  </div><div class="line"><span class="keyword">var</span> s = str! <span class="comment">//将str解包为s，但是如果str没有赋值的话，那么这句会在运行时报错  </span></div><div class="line"><span class="built_in">print</span>(s)</div></pre></td></tr></table></figure><blockquote><p>解决强制解包的时候，可选类型可能为nil的问题。if语句里面多了一个 Optional Binding 的概念。就是将可选类型解包后判断是否为nil，然后执行不同的分支代码 </p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//因为没给str赋值，所以输出  str为空  </span></div><div class="line"><span class="keyword">var</span> str:<span class="type">String</span>?  </div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> s = str &#123;  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"str有值"</span>)  </div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line">    <span class="built_in">print</span>(<span class="string">"str为空"</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>在编程中，我们可以确保可选类型一定不为nil的，那么每次要将可选类型解包都要加个 !，很麻烦。所以有了隐式可选类型，它是用 ! 代替了 ? 号。然后在需要将可选类型转换为对应类型的时候就不用加 ! 了</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str:<span class="type">String</span>! = <span class="string">"string"</span>  </div><div class="line"><span class="keyword">var</span> s = str</div></pre></td></tr></table></figure><h1 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h1><p><span id="基本运算"></span></p><h2 id="一些和C完全一样的基本运算"><a href="#一些和C完全一样的基本运算" class="headerlink" title="一些和C完全一样的基本运算"></a>一些和C完全一样的基本运算</h2><blockquote><p>加减乘除，负号，自增（++）自减（–），+=等， 判断大小之类（==，!=，&gt;=…），三元运算符，逻辑运算（!，&amp;&amp;，||）</p></blockquote><h2 id="不一样的运算符"><a href="#不一样的运算符" class="headerlink" title="不一样的运算符"></a>不一样的运算符</h2><p><span id="不一样的运算符"></span></p><h3 id="取模"><a href="#取模" class="headerlink" title="取模%"></a>取模%</h3><blockquote><p>在C中，只能对整形进行运算<br>Swift中可以对浮点数进行运算。结果就是多出来的那部分</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">比如 <span class="number">7.1</span>%<span class="number">2.5</span>  得到<span class="number">2.1</span>，因为<span class="number">7.1</span>可以最多减去<span class="number">2</span>个<span class="number">2.5</span>，然后剩下<span class="number">2.1</span></div></pre></td></tr></table></figure><h3 id="范围运算符"><a href="#范围运算符" class="headerlink" title="范围运算符"></a>范围运算符</h3><blockquote><p> … 和 ..&lt;两个运算符可以用在for里面</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">//输出 1 2 3    包含最后一个元素3  </span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;  </div><div class="line">    <span class="built_in">print</span>(i)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//输出 1 2  不包含最后一个元素3  </span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">3</span> &#123;  </div><div class="line">    <span class="built_in">print</span>(i)  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="单范围运算符"><a href="#单范围运算符" class="headerlink" title="单范围运算符"></a>单范围运算符</h3><blockquote><p>对于下标运算可以这样用</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> names = [<span class="string">"Anna"</span>, <span class="string">"Alex"</span>, <span class="string">"Brian"</span>, <span class="string">"Jack"</span>]  </div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[<span class="number">2</span>...] &#123;  </div><div class="line">    <span class="built_in">print</span>(name)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// Brian  </span></div><div class="line"><span class="comment">// Jack  </span></div><div class="line">   </div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[...<span class="number">2</span>] &#123;  </div><div class="line">    <span class="built_in">print</span>(name)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// Anna  </span></div><div class="line"><span class="comment">// Alex  </span></div><div class="line"><span class="comment">// Brian  </span></div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[..&lt;<span class="number">2</span>] &#123;  </div><div class="line">    <span class="built_in">print</span>(name)  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// Anna  </span></div><div class="line"><span class="comment">// Alex</span></div></pre></td></tr></table></figure><h3 id="几元操作符"><a href="#几元操作符" class="headerlink" title="几元操作符"></a>几元操作符</h3><ul><li><p>操作几个对象 ，被称之为几元操作符</p><blockquote><p>一元运算符</p><ul><li>操作一个目标，是一元操作符 </li></ul></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-6    // 符号 紧跟 6，是一元运算符</div><div class="line">let b = -a</div></pre></td></tr></table></figure></li></ul><blockquote><p> 二元运算符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="number">3</span> + <span class="number">4</span> <span class="comment">//两个目标之间，操作2个对象，习惯左右留空格</span></div><div class="line"></div><div class="line"></div><div class="line">a ?? b</div><div class="line"></div><div class="line">它的意思是：如果可选类型a不是<span class="literal">nil</span>，那么解包a并返回解包值，如果a为<span class="literal">nil</span>，那么返回b</div><div class="line"></div><div class="line">相当于 a != <span class="literal">nil</span> ? a! : b</div></pre></td></tr></table></figure><blockquote><p>赋值操作符</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> yue = <span class="number">3</span>  <span class="comment">// 用等号右边的值来更新左边变量的值</span></div><div class="line">yue = <span class="number">5</span></div></pre></td></tr></table></figure><blockquote><p>数学操作符(+ - * /)</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure><h1 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h1><p><span id="类型安全"></span></p><blockquote><p>变量（包含let）一旦定义，其类型不可改变，不能给一个变量一个类型不同的值</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span>  电费 = <span class="number">3.5</span></div><div class="line">点费 = <span class="number">5</span> </div><div class="line"><span class="built_in">print</span> (电费)     打印：<span class="number">5.0</span></div><div class="line">电费 = “五”       <span class="type">Error</span></div></pre></td></tr></table></figure><p>#断言<br><span id="断言"></span></p><blockquote><p>在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能并不需要继续执行。这时，你可以在你的代码中触发一个断言(assertion)来结束代码运行并通过调试来找到值缺失的原因。<br>如果条件判断为true，代码运行会继续进行；如果条件判断为false，代码运行停止，你的应用被终止</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> age = -<span class="number">10</span></div><div class="line"> <span class="comment">//你可以在断言加一个信息</span></div><div class="line"> <span class="built_in">assert</span>(age&gt;<span class="number">0</span> , <span class="string">"age can not be less than zero"</span>)</div><div class="line"> <span class="comment">//程序运行到这里会crash掉 后面的程序不会再执行</span></div><div class="line"> <span class="built_in">print</span>(<span class="string">"hello"</span>)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS</title>
      <link href="/2016/11/23/OC/Grammar/iOS/"/>
      <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5a0a92996fb9a0451f307479" target="_blank" rel="external">iOS多线程的锁</a></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> Refer </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS-UIKit-Autoreleasepool</title>
      <link href="/2015/11/22/OC/Kit/Autoreleasepool/"/>
      <content type="html"><![CDATA[<h1 id="Autoreleasepool释放时机"><a href="#Autoreleasepool释放时机" class="headerlink" title="Autoreleasepool释放时机"></a>Autoreleasepool释放时机</h1><ul><li>每个个Runloop已经默认会创建一个Autoreleasepool</li><li>新增对Runloop的Observer, 及时获取Runloop的状态变化确认释放时机</li></ul><h2 id="添加一个监听者"><a href="#添加一个监听者" class="headerlink" title="添加一个监听者"></a>添加一个监听者</h2><blockquote><p>创建监听者</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)addRunLoopObserver &#123;</div><div class="line">    CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) &#123;</div><div class="line"></div><div class="line">        switch (activity) &#123;</div><div class="line">            case kCFRunLoopEntry:</div><div class="line">                NSLog(@&quot;进入RunLoop&quot;);</div><div class="line">                break;</div><div class="line">            case kCFRunLoopBeforeTimers:</div><div class="line">                NSLog(@&quot;即将处理Timer事件&quot;);</div><div class="line">                break;</div><div class="line">            case kCFRunLoopBeforeSources:</div><div class="line">                NSLog(@&quot;即将处理Source事件&quot;);</div><div class="line">                break;</div><div class="line">            case kCFRunLoopBeforeWaiting:</div><div class="line">                NSLog(@&quot;即将休眠&quot;);</div><div class="line">                break;</div><div class="line">            case kCFRunLoopAfterWaiting:</div><div class="line">                NSLog(@&quot;被唤醒&quot;);</div><div class="line">                break;</div><div class="line">            case kCFRunLoopExit:</div><div class="line">                NSLog(@&quot;退出RunLoop&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><blockquote><p>添加监听者</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>不手动添加autoreleasepool</p></blockquote><ul><li>方法运行连续运行两次, 不手动添加autoreleasepool</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)test1 &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;test1 begin!&quot;);</div><div class="line">    for (int i = 0; i &lt; 10e5 * 2; i++) &#123;</div><div class="line">        //@autoreleasepool &#123;</div><div class="line">            NSString *str = [NSString stringWithFormat:@&quot;hi + %d&quot;, i];</div><div class="line">        //&#125;</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;test1 finished!&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)test2 &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;test2 begin!&quot;);</div><div class="line">    for (int i = 0; i &lt; 10e5 * 2; i++) &#123;</div><div class="line">        //@autoreleasepool &#123;</div><div class="line">            NSString *str = [NSString stringWithFormat:@&quot;hi + %d&quot;, i];</div><div class="line">        //&#125;</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;test2 finished!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Autoreleasepool-001.png" alt="001"></p><ul><li>Runloop没有完成一次循环之前所有内存都未释放, </li><li>即使局部变量出了作用域也必须等待Runloop循环完成</li></ul><blockquote><p>手动添加autoreleasepool观察释放时机</p></blockquote><p><img src="http://ozr735s7e.bkt.clouddn.com/iOS-Func-Autoreleasepool-002.png" alt="002"></p><ul><li>for{@autoreleasepool{}} 效果好于  @autoreleasepool{for…}<h1 id="autoreleasepool"><a href="#autoreleasepool" class="headerlink" title="@autoreleasepool{}"></a>@autoreleasepool{}</h1></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">@autoreleasepool&#123;&#125;</div></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">void *context = objc_autoreleasePoolPush();</div><div class="line">// &#123;&#125;中的代码</div><div class="line">objc_autoreleasePoolPop(context);</div></pre></td></tr></table></figure><ul><li>每次出了{}时objc_autoreleasePoolPop()就被调用, 所以直接释放掉了. </li><li>当然, 系统自动创建的autoreleasepool也是一样, 只是调用的时机不同:  线程与Runloop是一一对应, Runloop与系统创建的autoreleasepool也是一一对应, 所以不论是Runloop完成了一次循环还是线程被关闭时,  autoreleasepool都会释放, 当然手动添加的也会被管理</li><li>主要就是一个类:AutoreleasePoolPage</li><li>两个函数: objc_autoreleasePoolPush()、objc_autoreleasePoolPop()</li><li>运作方式: autoreleasepool由若干个autoreleasePoolPage类以双向链表的形式组合而成</li><li>当程序运行到@autoreleasepool{时, objc_autoreleasePoolPush()将被调用, runtime会向当前的AutoreleasePoolPage中添加一个nil对象作为哨兵,在{}中创建的对象会被依次记录到AutoreleasePoolPage的栈顶指针,当运行完@autoreleasepool{}时, objc_autoreleasePoolPop(哨兵)将被调用, runtime就会向AutoreleasePoolPage中记录的对象发送release消息直到哨兵的位置, 即完成了一次完整的运作. </li><li>主线程中的自动释放池是自动创建的, 文档中说子线程中的自动释放池是需要手动创建的, 但实测, 其实我们常用的多线程管理方式(GCD, NSOprationQueue, NSThread)都已经帮我们处理好了, 其中NSThread在iOS7之后才自动创建线程中的AutoreleasePool</li><li>我们常用的for循环, 以及enumerate其实跟autoreleasepool也有关, for循环是不自动创建autoreleasepool的, 而enumerate中已经自动创建了autoreleasepool, 值得注意的是高并发enumerate常常会出一些意外的问题, 例如对象被提前释放, 所以建议高并发情况下使用for循环(性能高于enumerate), 再手动添加autoreleasepool.</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
          <category> UIKit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> UIKit </tag>
            
            <tag> Autoreleasepool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS-Lib-UM-UMAnalytics友盟统计</title>
      <link href="/2015/11/20/OC/Lib/OC-Lib-UM-UMAnalytics%E5%8F%8B%E7%9B%9F%E7%BB%9F%E8%AE%A1/"/>
      <content type="html"><![CDATA[<h1 id="UMAnalytics友盟统计埋点"><a href="#UMAnalytics友盟统计埋点" class="headerlink" title="UMAnalytics友盟统计埋点"></a>UMAnalytics友盟统计埋点</h1><p><a href="http://dev.umeng.com/analytics/ios-doc/integration#7" target="_blank" rel="external"><strong>官方 配置 文档</strong>—&gt; Go!</a></p><h1 id="配置集成"><a href="#配置集成" class="headerlink" title="配置集成"></a>配置集成</h1><h2 id="Appkey"><a href="#Appkey" class="headerlink" title="Appkey"></a>Appkey</h2><p>不同平台的应用禁止使用相同的Appkey，需要分开注册<br>友盟后台的应用名与实际应用名和包名无关，建议命名为“应用名+平台（IOS/Android)”</p><h2 id="使用-Cocoapods-安装-SDK"><a href="#使用-Cocoapods-安装-SDK" class="headerlink" title="使用 Cocoapods 安装 SDK"></a>使用 Cocoapods 安装 SDK</h2><blockquote><p>//标准SDK，含IDFA</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod &apos;UMengAnalytics&apos;</div></pre></td></tr></table></figure><blockquote><p>无IDFA版SDK（请根据需要选择其中一个）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod &apos;UMengAnalytics-NO-IDFA&apos;</div></pre></td></tr></table></figure><h1 id="基本功能集成"><a href="#基本功能集成" class="headerlink" title="基本功能集成"></a>基本功能集成</h1><h2 id="配置-AppDelegate-m"><a href="#配置-AppDelegate-m" class="headerlink" title="配置 AppDelegate.m"></a>配置 AppDelegate.m</h2><blockquote><p>主要包括填写Appkey，设置发送策略和填写渠道id三部分<br>UMConfigInstance为SDK参数配置的实例类，只需要将其成员中标注为required的参数赋值，optional的为可选项。<br>appKey:    统计分析-&gt;设置-&gt;应用信息<br>ChannelId: 应用的渠道标识。默认为 @”App Store”</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">头文件：&quot;UMMobClick/MobClick.h&quot;</div><div class="line">- (BOOL])application:(UIApplication] *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">    UMConfigInstance.appKey = @&quot;xxxxxxxxxxxxxx...&quot;;</div><div class="line">    UMConfigInstance.ChannelId = @&quot;App Store&quot;;</div><div class="line">    //仅适用于游戏场景，应用统计不用设置   </div><div class="line">    UMConfigInstance.eSType = E_UM_GAME;</div><div class="line">    //配置以上参数后调用此方法初始化SDK！    </div><div class="line">    [MobClick startWithConfigure:UMConfigInstance];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="页面的统计"><a href="#页面的统计" class="headerlink" title="页面的统计"></a>页面的统计</h1><blockquote><p>runtime写交换方法不太好<br>基础类可增加</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line"> - (void)viewWillAppear:(BOOL)animated</div><div class="line">    &#123;</div><div class="line">        [super viewWillAppear:animated];</div><div class="line">        [MobClick beginLogPageView:@&quot;PageOne&quot;];//(&quot;PageOne&quot;为页面名称，可自定义)</div><div class="line">    &#125;</div><div class="line">- (void)viewWillDisappear:(BOOL)animated </div><div class="line">    &#123;</div><div class="line">        [super viewWillDisappear:animated];</div><div class="line">        [MobClick endLogPageView:@&quot;PageOne&quot;];</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="自定义事件的统计"><a href="#自定义事件的统计" class="headerlink" title="自定义事件的统计"></a>自定义事件的统计</h1><blockquote><p>计数事件+计算事件</p></blockquote><h2 id="计数事件"><a href="#计数事件" class="headerlink" title="计数事件"></a>计数事件</h2><h3 id="统计发生次数"><a href="#统计发生次数" class="headerlink" title="统计发生次数"></a>统计发生次数</h3><blockquote><p>某个事件发生的次数</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[MobClick event:(NSString *)eventId];</div></pre></td></tr></table></figure><h3 id="统计点击行为各属性被触发的次数"><a href="#统计点击行为各属性被触发的次数" class="headerlink" title="统计点击行为各属性被触发的次数"></a>统计点击行为各属性被触发的次数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[MobClick event:(NSString *)eventId attributes:(NSDictionary *)attributes];</div><div class="line"></div><div class="line">NSDictionary *dict = @&#123;@&quot;type&quot; : @&quot;book&quot;, @&quot;quantity&quot; : @&quot;3&quot;&#125;;</div><div class="line">[MobClick event:@&quot;purchase&quot; attributes:dict];</div></pre></td></tr></table></figure><h2 id="计算事件"><a href="#计算事件" class="headerlink" title="计算事件"></a>计算事件</h2><blockquote><p>使用计算事件需要在后台添加事件时选择“计算事件”</p></blockquote><h3 id="统计数值型变量的值的分布"><a href="#统计数值型变量的值的分布" class="headerlink" title="统计数值型变量的值的分布"></a>统计数值型变量的值的分布</h3><blockquote><p>统计一个数值类型的连续变量（该变量必须为整数），用户每次触发的数值的分布情况，如事件持续时间、每次付款金额等，可以调用如下方法:</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+[MobClick event:(NSString *)eventId attributes:(NSDictionary *)attributes counter:(int)number];</div></pre></td></tr></table></figure><blockquote><p>示例：购买《Swift Fundamentals》这本书，花了110元</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[MobClick event:@&quot;pay&quot; attributes:@&#123;@&quot;book&quot; : @&quot;Swift Fundamentals&quot;&#125; counter:110];</div></pre></td></tr></table></figure><blockquote><p>如果您使用的是V3.1.2以下版本的SDK，请使用下面的方法：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-(void)umengEvent:(NSString *)eventId attributes:(NSDictionary *)attributes number:(NSNumber *)number&#123;</div><div class="line">    NSString *numberKey = @&quot;__ct__&quot;;</div><div class="line">    NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:attributes];</div><div class="line">    [mutableDictionary setObject:[number stringValue] forKey:numberKey];</div><div class="line">    [MobClick event:eventId attributes:mutableDictionary];</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>示例：购买《Swift Fundamentals》这本书，花了110元</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[self umengEvent:@&quot;pay&quot; attributes:@&#123;@&quot;book&quot; : @&quot;Swift Fundamentals&quot;&#125; number:@(110)];</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Lib </category>
          
          <category> UM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OC-Network-AFN-4种请求</title>
      <link href="/2015/01/10/OC/Kit/Network/OC-Network-AFN-%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B/"/>
      <content type="html"><![CDATA[<blockquote><p>Put<br>Delete<br>Get<br>Post<br>获取用户权限以及登录请求的封装方法</p></blockquote><h1 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  + (void)requestGETWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic Api_key:(NSString *)api_key finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123;</div><div class="line">   </div><div class="line">   AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line"></div><div class="line">   manager.responseSerializer.acceptableContentTypes =  [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil];</div><div class="line">   </div><div class="line">   // 设置请求头</div><div class="line">   [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line"> </div><div class="line">   [manager.requestSerializer setValue:api_key forHTTPHeaderField:@&quot;api_key&quot;];</div><div class="line">  </div><div class="line">   [manager GET:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">       </div><div class="line">       NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]];</div><div class="line">       </div><div class="line">       if ([errcode isEqualToString:@&quot;0&quot;]) &#123;</div><div class="line">           finish(responseObject);  </div><div class="line">       &#125;else  &#123;</div><div class="line">           NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;];</div><div class="line">       &#125;</div><div class="line">   &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">       enError(error);</div><div class="line">   &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  + (void)requestPOSTWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic Api_key:(NSString *)api_key finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123;</div><div class="line">    </div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer.acceptableContentTypes =  [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil];</div><div class="line">    </div><div class="line">    // 设置请求头</div><div class="line">    [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">    [manager.requestSerializer setValue:api_key forHTTPHeaderField:@&quot;api_key&quot;];</div><div class="line">    </div><div class="line">    [manager POST:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">        NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]];</div><div class="line">        if ([errcode isEqualToString:@&quot;0&quot;]) &#123;</div><div class="line">            </div><div class="line">            finish(responseObject);</div><div class="line">        &#125;else if ([errcode isEqualToString:@&quot;100000&quot;]) &#123;</div><div class="line">            NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;];</div><div class="line">            // 弹出提示信息</div><div class="line">            [[NetworkManager shareNetworkManager].mdelegate showMessage:errmsg];</div><div class="line">        &#125;else&#123;</div><div class="line">            NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;]；</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        enError(error);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  + (void)requestPUTWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic Api_key:(NSString *)api_key finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123;</div><div class="line"></div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;, nil];</div><div class="line">    </div><div class="line">    // 设置请求头</div><div class="line">    [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">    [manager.requestSerializer setValue:api_key forHTTPHeaderField:@&quot;api_key&quot;];</div><div class="line">    [manager PUT:urlStr parameters:paramDic success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">        NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]];</div><div class="line">        </div><div class="line">        if ([errcode isEqualToString:@&quot;0&quot;]) &#123;</div><div class="line">            </div><div class="line">            finish(responseObject);</div><div class="line">            </div><div class="line">        &#125;else&#123;</div><div class="line">            NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;];</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        enError(error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  + (void)requestAddImgPOSTWithURLStr:(NSString *)url paramDic:(NSDictionary *)paramDic image:(UIImage *)image name:(NSString *)name success:(void (^)(id responseObject))success failure:(void (^)(NSError *error))failure&#123;</div><div class="line">    </div><div class="line">    // 1.创建网络管理者</div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer.acceptableContentTypes =  [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;, nil];</div><div class="line">    //请求图片,请求网页时需要加入这句,因为AFN默认的请求的是json</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    manager.requestSerializer = [AFHTTPRequestSerializer serializer];</div><div class="line">    // 2.发送请求(字典只能放非文件参数)</div><div class="line">    [manager POST:url parameters:paramDic constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</div><div class="line">        NSData *imageData = UIImageJPEGRepresentation(image, 0.5);//进行图片压缩</div><div class="line">        // 使用日期生成图片名称</div><div class="line">        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</div><div class="line">        formatter.dateFormat = @&quot;yyyyMMddHHmmss&quot;;</div><div class="line">        NSString *fileName = [NSString stringWithFormat:@&quot;%@.png&quot;,[formatter stringFromDate:[NSDate date]]];</div><div class="line">        </div><div class="line">        // 上传图片，以文件流的格式</div><div class="line">        // 任意的二进制数据MIMEType application/octet-stream</div><div class="line">        // 特别注意，这里的图片的名字不要写错，必须是接口的图片的参数名字如我这里是file</div><div class="line">        if (imageData!=nil) &#123; // 图片数据不为空才传递</div><div class="line">            [formData appendPartWithFileData:imageData name:name fileName:fileName mimeType:@&quot;image/png&quot;];</div><div class="line">        &#125; </div><div class="line">    &#125; progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">        NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:responseObject options:(NSJSONReadingMutableContainers) error:nil];</div><div class="line">        if ([[dic objectForKey:@&quot;status&quot;]isEqualToString:@&quot;success&quot;]) &#123;</div><div class="line">             success(responseObject);  </div><div class="line">        &#125;else&#123;</div><div class="line">            NSString *message = [responseObject objectForKey:@&quot;message&quot;];</div><div class="line">            NSLog(@&quot;messageImg == %@&quot;,message);</div><div class="line">             [[NetworkManager shareNetworkManager].mdelegate showMessage:message];</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        failure(error);</div><div class="line">    &#125;]; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="GET超级api"><a href="#GET超级api" class="headerlink" title="GET超级api"></a>GET超级api</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> + (void)requestGETSuperAPIWithURLStr:(NSString *)urlStr WithAuthorization:(NSString *)authorization paramDic:(NSDictionary *)paramDic finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123;</div><div class="line"></div><div class="line">   AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">   manager.responseSerializer.acceptableContentTypes =  [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil];</div><div class="line">   </div><div class="line">   // 设置请求头</div><div class="line">   [manager.requestSerializer setValue:authorization forHTTPHeaderField:@&quot;Authorization&quot;];</div><div class="line">    [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">   </div><div class="line">   [manager GET:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">       // 成功回调</div><div class="line">       finish(responseObject);</div><div class="line">       // 如果superapikey过期，重新保存加密获取新的</div><div class="line">       // 如果用户apikey过期，则重新登录</div><div class="line">   &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">       // 失败回调</div><div class="line">       enError(error);</div><div class="line">       </div><div class="line">   &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="POST请求-立即登录"><a href="#POST请求-立即登录" class="headerlink" title="POST请求 立即登录"></a>POST请求 立即登录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  + (void)requestLoginPOSTWithURLStr:(NSString *)urlStr WithAuthorization:(NSString *)authorization paramDic:(NSDictionary *)paramDic finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123;</div><div class="line">   </div><div class="line">   AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">   </div><div class="line">   manager.responseSerializer.acceptableContentTypes =  [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil];</div><div class="line"></div><div class="line">   // 设置请求头</div><div class="line">   [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">   [manager.requestSerializer setValue:authorization forHTTPHeaderField:@&quot;Authorization&quot;];</div><div class="line">   [manager POST:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">       </div><div class="line">       NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]];</div><div class="line">       if ([errcode isEqualToString:@&quot;0&quot;]) &#123;</div><div class="line">           finish(responseObject);</div><div class="line">       &#125;else &#123;</div><div class="line">           NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;];</div><div class="line">       &#125;</div><div class="line">   &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">       // 失败回调</div><div class="line">       enError(error);</div><div class="line">   &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OC </category>
          
          <category> Network </category>
          
          <category> AFN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OC </tag>
            
            <tag> AFN </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
