<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[YoBook]]></title>
    <url>%2F2019%2F02%2F18%2FYoBook%E4%BA%A7%E5%93%81%2F</url>
    <content type="text"><![CDATA[1.商业价值从一枚小小的iOS程序员角度，通过对①商业模式+②价值体现+③价值表达，这3个方面，表达一个程序员自我价值，创造价值，传递价值的一个平凡的生活。 1.1 商业模式对于商业模式描述可以分3个层面: ①用户-创造价值②通道-传递价值③盈利-获取价值 ①用户-创造价值 用户定位+价值主张 = 帮什么样用户群，有效解决他们遇到共同问题YoBook的用户是谁？用户范围：iOS程序员为主+学习iOS两门语言的伙伴 ，创造价值的用户就是 文章作者。YoBook用户范围为什么这么小？1.身处iOS行业，比一般的人稍微了解这个行业人面临什么样问题，需要什么样方式学习，用户定位小，针对性强，找到这个产品的伯乐。2.《简书》走向面对广泛的写作，《掘金》很火，相比掘金最大进步就是比简书定位更小，走向纯IT技术。YoBook创造价值是什么？一个优秀的产品，必定有其核心的产品功能，YoBook到核心产品功能就是，提供一个平台:让作者将技术文章以及开发问题总结等 整理归纳成付费小册子 ②通道-传递价值 通道-传递价值 = 用户如何打交道，提供什么样解决方案正向价值传递：发布者提供有一定细化分类书籍，满足用户有效找到解决开发问题，有效解决循环渐进的学习途径反向价值传递:开发文章放到平台，提供解决方案，提供讨论交流，比如文章出错，文章改进建议等等 ③盈利-获取价值 核心业务+数据建设（如何实现盈利）核心业务是什么？作者，提供章/节分类文章用户，根据章/节快速找到所需要文章如何实现盈利？仿照&lt;掘金App&gt;的小册子，知识付费。 1.2价值体现产品价值体现在对产品追求，差异化价值求生存。如果你想安静平凡作为一个开发者，写博客是提升能力，价值体现最有效的途径。如果你想写一篇文章，简书平台是不错的，因为简书注重写作，而不是你要写什么。如果你想写一个专栏类文章，知乎是不错的选择,知乎更加注重问题解决类。如果你想写一个技术类专栏或小册子，掘金是不错的选择，掘金注重整个IT行业，但是没细分。如果你想写一本关于iOS的技术类书籍或成册总结，YoBook是你未来最好的选择！提供iOS学习者/使用者表达技术需求的平台。 1.3价值表达Mac电脑端：暂时不开发)+网页端：(暂时不开发) 1.展示文章，来自推荐+好友动态 2.展示文章目录，展示文章内容，提供购买途径 3.本地搜索(核心) 4.创建，编辑文章(比app端操作起来舒服) App端 1.分类成册，展示文章目录，展示文章，可简单文章 2.文章 发布，购买(等同于收藏) 3.首页推荐+好友动态 4.改造xcode4app这个网站，像刷抖音一样，刷各种app的Gif图 2.用户群定位1.iOS开发者2.想学习或了解iOS用户3.前期我认识的iOS 和 某个产品等IT人员4.后期，设置好友，仅同行业好友之间交流，看到动态（推荐不算在内） 3.解决的用户问题1.发布者：文章如何分类+如何归纳问题+存储问题(对比各大博客网站，都未很完美解决整个分类和归纳问题，掘金稍微好点，但是不给我发布文章权限)2.发布者： 创造文章，为自己圈子或更多同行，解决问题，提供讨论平台，方便相同趣味的人一起沟通3.发布者： 文章产生价值，写文章才更有动力4.发布者： 解决手机端Macdown显示，编辑问题5.用户：提供一整套iOS进阶学习，问题解决资料6.用户：解决Xcode4app网站访问慢，无手机浏览模式问题(像抖音一样刷Gif效果图)7.用户： 发现真正的有水平的开发者，看文章，更加清楚开发者是否适合公司岗位，利于招聘 4.主要用户场景①发布者发布文章，产生价值案例1： 我要学习swift，yoBook提供一套swift学习笔记案例2： 我仿写抖音，分析抖音产品结构，抖音开发步骤，开发后台接口数据，形成文档，供参考②用户获取成套学习资料获取开发问题解决方式案例1：开发3D，必须花钱购买《3D开发笔记》，要不然项目没法开发③平台前期自用，不需要审核后期增加审核 5.运营 前期运营 前期免费，要产生iOS开发相关数据只限制内部不到20个iOS程序员使用，提供OC一些学习，工作解决方案人员小，内容门槛高，与我们开发相关，再不用把文章发布到各大网站上 后期运营 开始付费做聊天+好友系统，收紧圈子，只有好友之间看到各自数据扩展到整个IT学习，以及普通人学习 6.愿景认真的做一件事 .]]></content>
      <categories>
        <category>A-YoBook</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[App-分类]]></title>
    <url>%2F2018%2F12%2F30%2Fapp-%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[1.登录 微信+ QQ + 手机验证码(苹果审核时候提供 手机号 和写死的验证码) 2.引导语言: OC Swift 预留其他语言至少选择一门语言 在app内部，语言能切换 3.开发分类(以OC语言为例)①控件类 ②功能类③文档类④项目类 ①控件类 UI控件类型 具体 UIButton按钮 A-Button(文章标题) B-Button C-Button D-Button …等等 UILabel文本标签 A-Label B-Label … UIAlertView(HUD)透明指示层 UIScrollView滚动视图 UITableView表视图类型1 UICollectionView 表视图类型2 UIProgressView进度视图 UIActivityIndicatorView 指示器 ②功能类 Chart 图表绘制 仿支付宝图表绘制 仿网易图表绘制 仿杭州XXApp图表绘制 CoreMotion 重力感应 重力感应1 重力感应2 重力感应3 重力感应4 GuideView 引导页 Video 视频 Share 分享 Database 数据库 Drawing 绘图 ③文档类文章顺序问题 UIKit方法属性 UIButton 按钮UILabel 文本标签 UIImage 图像展示….. 第三方Lib AFNYYModelPPNetworkingMJExtionMJRefreshFMDBPopTTextBBRefreshBBTableView ④项目类 直播 仿斗鱼直播1 项目名称项目效果图（录像）（gif格式）项目链接显示项目文档​点击 运行跳转 项目项目信息 发送到（微信/QQ）项目收藏按钮 仿斗鱼直播2 项目名称项目效果图（录像）（gif格式）项目链接显示项目文档​点击 运行跳转 项目项目信息 发送到（微信/QQ）项目收藏按钮 仿斗鱼直播3 仿 虎牙直播 仿映客直播 视频 仿 抖音小视频 以下具体页面展示内容 项目名称项目效果图（录像）（gif格式）项目链接显示项目文档​点击 运行跳转 项目项目信息 发送到（微信/QQ）项目收藏按钮仿火山小视频 电台 仿喜马拉雅山 项目名称项目效果图（录像）（gif格式）项目链接显示项目文档​点击 运行跳转 项目项目信息 发送到（微信/QQ）项目收藏按钮 4.搜索功能列表展示时候，需要search 5.小册子问题 小册子付费的 1.为什么做小册子小册子是对某一方面系统总结16年我被迫买个一个app叫Scenekit,这个App就是把简单把自己几十篇文章搬迁到app里。然后收费。因为解决公司项目问题，只能买后来接触到掘金，发现小册子，就是系统学习归纳，比如，公司要去开发小程序，掘金里有一套 从前到后 学习体系，几十块钱，还好。2.小册子数据建立纵观我自己学习过程，对于某一方面也是有大把总结文章3.如果把小册子做的更优秀优秀的UI排版+优秀结构我只能说&lt;+优秀结构&gt;相关程序猿基本大致看下题目，文章很初略看，然后下载，更注重跑起来效果，然后边看代码，边看代码讲解。。这样效率高，也是我们习惯。掘金小册子里文章，有签到后，由浅入深，每一篇文章，缺少案例，小册子应该更加直观展示： 作者在讲什么，是否很快满足需求。。再好的东西，太复杂理论讲解，效果也是一般。具体如何分结构，我只能说，我还没想好。看得类型多，需要时间归纳 通性，共同结构。小册子算是好的想法，我还要继续思考，如何完美表达出来。 6.发布问题权限划分 普通用户 发布权限 审核权限 删除权限分类已经显示好了。。填写 发布文章名称 发布 7. 收藏展示按照以上分类结构展示]]></content>
      <categories>
        <category>299</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[App]]></title>
    <url>%2F2018%2F10%2F11%2Fapp-%E4%BA%A7%E5%93%81%2F</url>
    <content type="text"><![CDATA[需求 设计 功能 计划 需求 iOS开发过程遇到问题 对于 iOS语法只是记大概，需要时候，基本是百度谷歌 功能开发 –&gt;百度谷歌 查找 Demo-开发网站 1-找到解决问题文章，然后放到浏览器收藏夹，基本不再看了2-如果在这篇文章基础上，我改进了，也是发布到其他平台，与这篇文章作者不能关联。应该把改进文章归纳一起 优秀案例推广 需要下载，用电脑跑起来，麻烦！这个仿写抖音，很优秀的案例 https://sshiqiao.github.io/document/douyin-objectc.html#2.2 开发学习 1.写过的文章，因为没分类，懒得看，而且遇到不好查找2.收藏文章，全部放在浏览器标签里，也分类，收藏多了，遇到问题，也不会想起，而且我的mac重装2次，容易丢3.学习苹果新语言，网上找资料，没有一个系统归类的，导致一年多了，苹果新语言我还是半径八两水平 总结下： 1.乱 2.不全 - 苹果学习，开发，其实东西不多，很多东西每个开发人员做过一遍，市场上缺乏对 一门技术细化处理3.丢失- 丢失文章，丢失Demo，发现越来越不喜欢iOS开发了4.平台- 提供一个真正意义上IT学习平台，不管iOS 安卓 UI 产品 后台，各大网站那种到处偷文章，操作简单，对于开发影响很小 设计 ①差异化 1.CSDN 网站 文章质量很高 问题：分类以语言分类，时间先后排序，无逻辑性，特别乱2.网站简书 以某个方面开专栏，都可以参与 问题：现在不以技术为主，变为写作平台，不适合开发3，网站掘金 推送的质量不错文章，也很杂乱，付费小册子设计的很不错！ 问题：推荐针对性太差，小册子根本没我需要的 4.网站Hexo 需要自己搭建，分类展示十分优秀，页面简洁令人欢喜 问题：配置太麻烦，发布太麻烦，维护麻烦，如果能被百度检索 也很麻烦 5.网站Xcode4app 分类展示挺好 问题： 搜索短板，居然没App版本，我只是平时去逛逛淘金 ②解决收纳分类处理问题 网站只解决有水喝问题，浏览网页，遇到好的，就放入标签里，越放越多。无法快速找出 1.放弃网站上时间排序，以 一门语言特有分类细化2.小册子 按照语言划分，小册子增加分类标签3.收藏 浏览器也许收藏很多按照时间排序的，但是基本没法看的，太多了4.内容方面分为： 发布者发布 +我们自己发布 一门语言的语法或者说学习笔记，一定都是按照一定顺序的，都是简单到容易，一定要举例子的。我要做的是苹果OC专门语言，系统的归纳总结。这只是基础东西，也是最重要的东西，常用的东西 对于比较负责东西，交给发布者 ③定位 1.0版本，苹果ObjectC语言开发工程作用: 提供一整套 苹果开发文档，开发案例，一些列常用的App 提供发布，收藏，按照OC语言的分类处理文章1.1版本 解决内嵌代码问题，以及快速浏览demo等问题 功能 #1级 语言名称 OC/Swift/UI/Androlid/Java?Php+类型 控件类:/功能类 /文档类: /项目类: 2级 1.目录 2.参考 Xcode4app网站 控件类: 键盘/日历/相机 功能类: 动画/图标/视频 文档类: 基础篇/进阶篇/ 项目类: 地址链接/文档/运行效果/ 3级 1.同一个类下不同类型2. 控件类: Swift语言-控件-菜单 仿新浪菜单/仿淘宝菜单/自定义菜单 功能类: OC语言-功能-视频 火山视频/系统视频/抖音视频 文档类: OC语言语法 -基础语法+进阶语法 -基础语法1 基础语法2 项目类: 发布开发相关 目录 目录 1级目录 (选择) 语言OC/Swift/Java 控件类:/功能类 /文档类: /项目类: 2级 (选择) 控件类: 控件+按钮/文本/第三/自定义分类 功能类: 功能+日历/电子书/分享/自定义分类 文档类: 文档+基础/进阶/高阶/自定义分类 项目类: 项目+直播/小视频/电台/自定义分类 3级 控件类: 控件类型名称+自定义 功能类: 功能类型名称+自定义 文档类: 文档类型名称+自定义 项目类: 项目类型名称+自定义 格式 语言 1级 2级 3级 OC 控件类: UIbutton(按钮) 仿写一个btn Swift 功能类: Lib第三方 网络/MyAFN Java 文档类: 基础 基础-01 基础-02 Androlid 项目类: 直播 仿斗鱼举例 OC - 控件类 - UIbutton - 仿写一个btn ====&gt; 苹果OC语言，UI类下 按钮分类 某个按钮 Swift - 功能类 - Lib - MyAFN ====&gt; 苹果swift语言，功能下第三方 某个功能封装 Java - 文档类 - 基础 -文章3 ====&gt; java的文档类，基础语法里 第三篇文章 Androlid - 项目类 - 直播 - 仿斗鱼 ====&gt; 安卓，完整项目，直播类型项目，仿照斗鱼直播 2.文章链接 文章发布一篇篇发布复制粘贴自己博客地址 3.Demo链接 开发展示 顶部：语言1区 控件类 1-0 UIButton 1-1 UILabel 1-2 UItableView2区 功能类 2-0 日历 2-1 相机3区 文档类 3-0 苹果系统语法 3-1 runtime拓展4区 项目类 4-0 直播 4-1 视频 4-2 电商 4-3 金融 4-4 电台 合集发布 一样 计划 第1期 1.只实现苹果OC语言的App: 登录：微信登录为主，手机号码登录(给苹果审核用)2.发布 实现多门语言分类 实现具体分类(核心) 实现发布(文章复制链接进来)3.按照分类展示开发相关 部分属于我们自己管理文章， 内嵌代码 暂时链接，搭建起来后，小的项目内嵌，大的项目 苹果二维码安装4.展示合集 类似掘金小册子 解决文章分类处理5.个人中心 实现收藏，然后分类 退出登录6.考虑通用性质 产品核心思想之一，就是成为一种收纳工具，目前做2个级别的分类，学习，写文章，强调分类 第2期 1.完善常用功能：搜索，推送，聊天，评论，打赏，推荐等2.增肌积分制度(掘金小册子是付费的) 第3期 安卓版本苹果第二门语言 Swift版本app 第4期 H5端 解决发布问题]]></content>
      <categories>
        <category>299</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[UITableView-Refresh-刷新简单用法]]></title>
    <url>%2F2018%2F10%2F02%2FRxSwift%2FUIKit%2FUITableView-Refresh%2F</url>
    <content type="text"><![CDATA[课件参考 防止表格多次刷新的说明 1.flatMapLatest 的作用是当在短时间内（上一个请求还没回来）连续点击多次“刷新”按钮，虽然仍会发起多次请求，但表格只会接收并显示最后一次请求。避免表格出现连续刷新的现象 //随机的表格数据let randomResult = refreshButton.rx.tap.asObservable() .startWith(()) //加这个为了让一开始就能自动请求一次数据 .flatMapLatest(getRandomResult) //连续请求时只取最后一次数据 .share(replay: 1) 2.也可以改用 flatMapFirst 来防止表格多次刷新，它与 flatMapLatest 刚好相反，如果连续发起多次请求，表格只会接收并显示第一次请求 //随机的表格数据let randomResult = refreshButton.rx.tap.asObservable() .startWith(()) //加这个为了让一开始就能自动请求一次数据 .flatMapFirst(getRandomResult) //连续请求时只取第一次数据 .share(replay: 1) 3.还可以在源头进行限制下。即通过 throttle 设置个阀值（比如 1 秒），如果在1秒内有多次点击则只取最后一次，那么自然也就只发送一次数据请求 //随机的表格数据let randomResult = refreshButton.rx.tap.asObservable() .throttle(1, scheduler: MainScheduler.instance) //在主线程中操作，1秒内值若多次改变，取最后一次 .startWith(()) //加这个为了让一开始就能自动请求一次数据 .flatMapLatest(getRandomResult) .share(replay: 1) #开始刷新与暂停刷新 import UIKitimport RxSwiftimport RxCocoaclass ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; super.viewDidLoad() initUI() initData()//数据延迟1s加载 &#125; //MARK:UI func initUI()&#123; view.addSubview(refreshBtn) view.addSubview(stopRefreshBtn) view.addSubview(tableView) &#125; //UI-刷新按钮 fileprivate lazy var refreshBtn: UIButton = &#123; let refreshBtn = UIButton() refreshBtn.frame = CGRect(x:0, y:0, width:view.frame.width/2.0, height:100) refreshBtn.backgroundColor = UIColor.red return refreshBtn &#125;() //停止刷新 fileprivate lazy var stopRefreshBtn: UIButton = &#123; let stopRefreshBtn = UIButton() stopRefreshBtn.frame = CGRect(x:view.frame.width/2.0, y:0, width:view.frame.width/2.0, height:100) stopRefreshBtn.backgroundColor = UIColor.green return stopRefreshBtn &#125;() //UI-表 fileprivate lazy var tableView:UITableView = &#123; let tableView = UITableView() //frme tableView.frame = CGRect(x:0, y:100, width:view.frame.width, height:view.frame.height-100) //Cell tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;Cell&quot;) return tableView &#125;() //MARK:Data func initData()&#123; //随机的表格数据 let randomResult = refreshBtn.rx .tap .asObservable() .startWith(()) //加这个为了让一开始就能自动请求一次数据 // .flatMapLatest(getRandomResult) .flatMapLatest&#123; self.getRandomResult().takeUntil(self.stopRefreshBtn.rx.tap) &#125; .share(replay: 1) //创建数据源 let dataSource = RxTableViewSectionedReloadDataSource &lt;SectionModel&lt;String, Int&gt;&gt;(configureCell: &#123; (dataSource, tv, indexPath, element) in let cell = tv.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)! cell.textLabel?.text = &quot;条目\(indexPath.row)：\(element)&quot; return cell &#125;) //绑定单元格数据 randomResult .bind(to: tableView.rx.items(dataSource: dataSource)) .disposed(by: disposeBag) &#125; //获取随机数据 func getRandomResult() -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt; &#123; print(&quot;正在请求数据......&quot;) let items = (0 ..&lt; 5).map &#123;_ in Int(arc4random()) &#125; let observable = Observable.just([SectionModel(model: &quot;S&quot;, items: items)]) return observable.delay(2, scheduler: MainScheduler.instance) &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UITableView-Base基本用法]]></title>
    <url>%2F2018%2F09%2F22%2FRxSwift%2FUIKit%2FUITableView-Base%2F</url>
    <content type="text"><![CDATA[课件参考 import UIKitimport RxSwiftimport RxCocoaclass ViewController: UIViewController &#123; var tableView:UITableView! let disposeBag = DisposeBag() override func viewDidLoad() &#123; super.viewDidLoad() //表 init self.tableView = UITableView(frame: self.view.frame, style: .plain) self.tableView!.register(UITableViewCell.self, forCellReuseIdentifier: &quot;Cell&quot;) self.view.addSubview(self.tableView) //数据 init let items = Observable.just([ &quot;数据01&quot;, &quot;数据02&quot;, &quot;数据03&quot;, &quot;数据04&quot;, ]) //设置单元格数据（其实就是对 cellForRowAt 的封装 items.bind(to: tableView.rx.items)&#123;(tableView,row,element) in let cell = tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)! cell.textLabel?.text = &quot;\(row)：\(element)&quot; return cell &#125;.disposed(by: disposeBag) /// 点击cell,打印 =索引位置+标题 //1.业务代码直接放在响应方法内部 //索引// tableView.rx.itemSelected.subscribe(onNext: &#123; indexPath in// print(&quot;选中项的indexPath为：\(indexPath)&quot;)// &#125;).disposed(by: disposeBag)// //内容// tableView.rx.modelSelected(String.self).subscribe(onNext: &#123; item in// print(&quot;选中项的标题为：\(item)&quot;)// &#125;).disposed(by: disposeBag)// //2.在响应中调用外部的方法 //索引 tableView.rx.itemSelected.subscribe(onNext: &#123; [weak self] indexPath in // self?.showMessage(&quot;选中项的indexPath为：\(indexPath)&quot;) &#125;).disposed(by: disposeBag) //获取选中项的内容 tableView.rx.modelSelected(String.self).subscribe(onNext: &#123;[weak self] item in //self?.showMessage(&quot;选中项的标题为：\(item)&quot;) &#125;).disposed(by: disposeBag) //插入事件响应 //插入项的索引 tableView.rx.itemAccessoryButtonTapped.subscribe(onNext: &#123; [weak self] indexPath in // self?.showMessage(&quot;尾部项的indexPath为：\(indexPath)&quot;) &#125;).disposed(by: disposeBag) //cell将要显示出来的事件响应 tableView.rx.willDisplayCell.subscribe(onNext: &#123; cell, indexPath in print(&quot;将要显示单元格indexPath为：\(indexPath)&quot;) print(&quot;将要显示单元格cell为：\(cell)\n&quot;) &#125;).disposed(by: disposeBag) &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00-RxSwift-Grammar-目录]]></title>
    <url>%2F2018%2F09%2F12%2FRxSwift%2FGrammar%2F00-RxSwift-Grammar-%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UIDatePicker-日期选择器]]></title>
    <url>%2F2018%2F05%2F24%2FRxSwift%2FUIKit%2FUIDatePicker%2F</url>
    <content type="text"><![CDATA[UIDatePicker disposeBag let disposeBag = DisposeBag() myDatePicker日期选择器 fileprivate lazy var myDatePicker:UIDatePicker = &#123; let myDatePicker = UIDatePicker() myDatePicker.frame = CGRect(x: 10, y: 100, width: 300, height: 200) return myDatePicker&#125;() myLab fileprivate lazy var myLab:UILabel = &#123; let myDatePicker = UILabel() return myDatePicker&#125;() 日期格式化器 fileprivate lazy var dateFormatter: DateFormatter = &#123; let formatter = DateFormatter() formatter.dateFormat = "yyyy年MM月dd日 HH:mm" return formatter &#125;() 倒计时时间选择器 fileprivate lazy var timeDatePicker: UIDatePicker = &#123; let timeDatePicker = UIDatePicker() timeDatePicker.frame = CGRect(x: 10, y: 100+200+20, width: 300, height: 200) timeDatePicker.datePickerMode = UIDatePickerMode.countDownTimer return timeDatePicker &#125;() 开始倒计时按钮 fileprivate lazy var timeStartBtn: UIButton = &#123; let timeStartBtn = UIButton() timeStartBtn.frame = CGRect(x: 10, y: 320+200+10, width:300, height:40) timeStartBtn.backgroundColor = UIColor.green timeStartBtn.setTitleColor(UIColor.red, for: .normal) timeStartBtn.setTitleColor(UIColor.yellow, for: .selected) return timeStartBtn&#125;() 剩余时间（必须为 60 的整数倍，比如设置为100，值自动变为 60） let leftTimeVariable = Variable(TimeInterval(180)) 当前倒计时是否结束 let countDownStoppedVariable = Variable(true) add UI self.view.addSubview(self.myDatePicker)self.view.addSubview(self.myLab)self.view.addSubview(self.timeDatePicker)self.view.addSubview(self.timeStartBtn) 选择日期 &amp;打印 myDatePicker.rx.date.map&#123; [weak self] in "当前选择时间: " + self!.dateFormatter.string(from: $0) &#125; .bind(to: self.myLab.rx.text) .disposed(by: disposeBag) 剩余时间与datepicker做双向绑定 DispatchQueue.main.async &#123; _ = self.timeDatePicker.rx.countDownDuration &lt;-&gt; self.leftTimeVariable&#125; 绑定button标题 Observable.combineLatest(leftTimeVariable.asObservable(),countDownStoppedVariable.asObservable())&#123; leftTimeValue, countDownStoppedValue in if countDownStoppedValue &#123; return "开始" &#125;else&#123; return "倒计时开始，还有 \(Int(leftTimeValue)) 秒..." &#125; &#125;.bind(to: timeStartBtn.rx.title()) .disposed(by: disposeBag) 绑定button和datepicker状态（在倒计过程中，按钮和时间选择组件不可用） countDownStoppedVariable.asDriver() .drive(timeDatePicker.rx.isEnabled) .disposed(by: disposeBag) countDownStoppedVariable.asDriver() .drive(timeStartBtn.rx.isEnabled) .disposed(by: disposeBag) 按钮点击响应 timeStartBtn.rx .tap.bind&#123; [weak self] in self?.startClicked() &#125; .disposed(by: disposeBag) 开始倒计时 func startClicked() &#123; //开始倒计时 self.countDownStoppedVariable.value = false //创建一个计时器 Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) .takeUntil(countDownStoppedVariable.asObservable().filter&#123; $0 &#125;) //倒计时结束时停止计时器 .subscribe &#123; event in //每次剩余时间减1 self.leftTimeVariable.value -= 1 // 如果剩余时间小于等于0 if(self.leftTimeVariable.value == 0) &#123; print("倒计时结束！") //结束倒计时 self.countDownStoppedVariable.value = true //重制时间 self.leftTimeVariable.value = 180 &#125; &#125;.disposed(by: disposeBag)&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UIGestureRecognizer-01]]></title>
    <url>%2F2018%2F05%2F23%2FRxSwift%2FUIKit%2FUIGestureRecognizer-01%2F</url>
    <content type="text"><![CDATA[UISlider disposeBag let disposeBag = DisposeBag() 清扫手势mySwipeGes fileprivate lazy var mySwipeGes:UISwipeGestureRecognizer = &#123; let mySwipeGes = UISwipeGestureRecognizer () mySwipeGes.direction = .up return mySwipeGes&#125;() Tap手势mySwipeGes fileprivate lazy var myTapGes: UITapGestureRecognizer = &#123; let myTapGes = UITapGestureRecognizer () return myTapGes&#125;() add UI //swipeself.view.addGestureRecognizer(self.mySwipeGes)//tap self.view.addGestureRecognizer(self.myTapGes) 清扫手势响应- 写法1 mySwipeGes.rx .event .subscribe(onNext: &#123; [weak self] ges in //这个点是滑动的起点 let point = ges.location(in: ges.view) self?.showMyAlertCtl(title: "向上划动1",msg: "\(point.x) \(point.y)") &#125;) .disposed(by: disposeBag) 清扫手势响应- 写法2 mySwipeGes.rx .event .bind(onNext: &#123; [weak self] ges in let point = ges.location(in: ges.view) self?.showMyAlertCtl(title: "向上划动2",msg: "\(point.x) \(point.y)") &#125; ) .disposed(by: disposeBag) 实现点击页面任意位置 myTapGes.rx .event .subscribe(onNext:&#123; [weak self] ges in let point = ges.location(in: ges.view) self?.showMyAlertCtl(title: "点击",msg: "\(point.x) \(point.y)") &#125; ) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Two-Way-Binding-双向绑定]]></title>
    <url>%2F2018%2F05%2F23%2FRxSwift%2FGrammar%2F10-Two-Way-Binding-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%2F</url>
    <content type="text"><![CDATA[UserViewModel.swiftimport RxSwiftstruct UserViewModel&#123; //用户名 let myUserName = Variable("guest") //用户信息 lazy var myUserInfo = &#123; return self.myUserName .asObservable() .map&#123; $0 == "520" ? "你爱我❤️" : "你不爱我❤️" &#125; .share(replay: 1) &#125;()&#125; ViewController.swift disposeBag let disposeBag = DisposeBag() myUserViewModel var myUserViewModel = UserViewModel() myTF fileprivate lazy var myTF: UITextField = &#123; let myTF = UITextField() myTF.frame = CGRect(x: 60, y: 64, width: 300, height: 40) myTF.borderStyle = UITextBorderStyle.roundedRect return myTF&#125;() myLab fileprivate lazy var myLab: UILabel = &#123; let myLab = UILabel() myLab.frame = CGRect(x: 60, y: 64+64, width: 300, height: 40) return myLab&#125;() 将用户名与textField做双向绑定 //1myUserViewModel.myUserName .asObservable() .bind(to: myTF.rx.text) .disposed(by: disposeBag)//2myTF.rx .text .orEmpty .bind(to: myUserViewModel.myUserName) .disposed(by: disposeBag) 如果经常进行双向绑定的话，最好还是自定义一个 operator 方便使用在 RxSwift 项目文件夹中已经有个现成的（Operators.swift），我们将它复制到我们项目中即可使用。当然如我们想自己写一些其它的双向绑定 operator 也可以参考它双向绑定操作符是：&lt;-&gt;将用户名与textField做双向绑定(简写法) _ = self.myTF.rx.textInput &lt;-&gt; self.myUserViewModel.myUserName 将用户信息绑定到label上 myUserViewModel.myUserInfo .bind(to: myLab.rx.text) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UIApplication-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUIApplication-01%2F</url>
    <content type="text"><![CDATA[isNetworkActivityIndicatorVisible 状态栏显示菊花 dispaseBag let dispaseBag = DisposeBag() 开关 fileprivate lazy var mySwitch: UISwitch = &#123; let mySwitch = UISwitch() mySwitch.frame = CGRect(x: 20, y: 60, width: 40, height: 30) return mySwitch&#125;() add UI self.view.addSubview(mySwitch) 状态栏里显示 菊花 mySwitch.rx .isOn .bind(to: UIApplication.shared.rx.isNetworkActivityIndicatorVisible) .disposed(by: dispaseBag) &#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-NotificationCenter-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FNotificationCenter-01%2F</url>
    <content type="text"><![CDATA[系统通知的注册与响应 disposeBag let disposeBag = DisposeBag() 监听应用进入后台通知_ = NotificationCenter.default .rx .notification(NSNotification.Name.UIApplicationDidEnterBackground) .takeUntil(self.rx.deallocated) //页面销毁自动移除通知监听 .subscribe(onNext:&#123; _ in print("程序进入到后台了") &#125;) .disposed(by: disposeBag) 监听键盘的通知 ```## 监听键盘的通知 &gt;myTF```swiftmyTF.rx.controlEvent(UIControlEvents.editingDidEndOnExit) .subscribe(onNext:&#123; _ in self.myTF.resignFirstResponder() &#125;) .disposed(by: disposeBag) 监听虚拟键盘的打开和关闭通知，并在控制台中输出相关信息add myTF myTF.rx.controlEvent(UIControlEvents.editingDidEndOnExit).subscribe(onNext:&#123; _ in self.myTF.resignFirstResponder()&#125;).disposed(by: disposeBag) 监听键盘弹出通知 _ = NotificationCenter.default .rx .notification(NSNotification.Name.UIKeyboardWillHide) .takeUntil(self.rx.deallocated) //页面销毁自动移除通知监听 .subscribe(onNext: &#123; _ in print("键盘消失了") &#125;) .disposed(by: disposeBag) 自定义通知的发送与接收 _ = [MyObserver(nameStr: "观察器1"),MyObserver(nameStr: "观察器2")]let notificationName = Notification.Name(rawValue: "DownloadImageNotification")NotificationCenter.default .post(name: notificationName, object: self, userInfo: ["value1":"QQ Num", "value2" : 12345]) print("通知完毕")&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UISegmentedControl-响应式扩展-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUISegmentedControl-01%2F</url>
    <content type="text"><![CDATA[UISegmentedControl disposeBag let disposeBag = DisposeBag() 分段选择控件 fileprivate lazy var segmentedCtl: UISegmentedControl = &#123; let segmentedCtl = UISegmentedControl(items: ["1","22"]) segmentedCtl.frame = CGRect(x: 20, y: 20, width: 200, height: 30) //当前选中下标 segmentedCtl.selectedSegmentIndex = 0 //segmentedCtl.backgroundColor = UIColor.red return segmentedCtl&#125;() 显示图片 fileprivate lazy var showImgView: UIImageView = &#123; let showImgView = UIImageView() showImgView.frame = CGRect(x: 30, y: 60, width: 180, height: 180) return showImgView&#125;() add UI self.view.addSubview(self.segmentedCtl) self.view.addSubview(self.showImgView) 实现当 UISegmentedControl 选中项改变时，输出当前选中项索引值 segmentedCtl.rx.selectedSegmentIndex.asObservable().subscribe(onNext:&#123; print("当前项：\($0)") &#125;).disposed(by: disposeBag) 创建一个当前需要显示的图片的可观察序列 let segmentedsquence: Observable&lt;UIImage&gt; = segmentedCtl.rx .selectedSegmentIndex .asObservable() .map&#123; let imgDatas = ["1","2"] return UIImage(named: imgDatas[$0])! &#125; 把需要显示的图片绑定到 imageView 上 segmentedsquence.bind(to: showImgView.rx.image) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UIActivityIndicatorView状态指示器-响应式扩展-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUIActivityIndicatorView-01%2F</url>
    <content type="text"><![CDATA[UIActivityIndicatorView UIActivityIndicatorView 状态/活动指示器，它会通过一个旋转的“菊花”来表示当前的活动状态 disposeBag let disposeBag = DisposeBag() UI:开关 fileprivate lazy var mySwitch: UISwitch = &#123; let mySwitch = UISwitch() mySwitch.frame = CGRect(x: 10, y: 64, width: 40, height: 20) return mySwitch&#125;() 活动指示器 fileprivate lazy var myActivityIndicatorView: UIActivityIndicatorView = &#123; let myActivityIndicatorView = UIActivityIndicatorView() myActivityIndicatorView.frame = CGRect(x: 80, y: 64, width: 40, height: 20) myActivityIndicatorView.color = UIColor.red return myActivityIndicatorView&#125;() add UI self.view.addSubview(self.mySwitch) self.view.addSubview(self.myActivityIndicatorView) 开关控制 菊花开启 mySwitch.rx .isOn .bind(to: myActivityIndicatorView.rx.isAnimating) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UIStepper步进器-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUIStepper-01%2F</url>
    <content type="text"><![CDATA[UISlider disposeBag let disposeBag = DisposeBag() 步进器 fileprivate lazy var stepper: UIStepper = &#123; let stepper = UIStepper() stepper.frame = CGRect(x: 20, y: 62, width:100, height: 30) return stepper&#125;() add UI self.view.addSubview(self.stepper) 增减输出 stepper.rx.value.asObservable() .subscribe(onNext: &#123; print("当前值为：\($0)") &#125;) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UISwitch-响应式扩展-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUISwitch-01%2F</url>
    <content type="text"><![CDATA[btn响应 disposeBag let disposeBag = DisposeBag() UI fileprivate lazy var mySwitch: UISwitch = &#123; let mySwitch = UISwitch() mySwitch.frame = CGRect(x: 20, y: 80, width: 80, height: 30) return mySwitch&#125;() fileprivate lazy var switchshowBtn: UIButton = &#123; let switchshowBtn = UIButton() switchshowBtn.frame = CGRect(x: 120, y: 80, width: 200, height: 30) switchshowBtn.setTitleColor(UIColor.gray, for: UIControlState.normal) switchshowBtn.setTitleColor(UIColor.red, for: UIControlState.selected) switchshowBtn.setTitle("show switch select", for: UIControlState.normal) return switchshowBtn &#125;() 当 switch 开关状态改变时，输出当前值 mySwitch.rx .isOn.asObservable() .subscribe(onNext: &#123; print("当前开关状态：\($0)") &#125;) .disposed(by: disposeBag) 切换 switch 开关时，button 会在可用和不可用的状态间切换 mySwitch.rx .isOn .bind(to: switchshowBtn.rx.isSelected) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UIButton-响应式扩展-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUIButton-01%2F</url>
    <content type="text"><![CDATA[btn响应 创建btn let disposeBag = DisposeBag()fileprivate lazy var myBtn: UIButton = &#123; let myBtn = UIButton(frame: CGRect(x: 100, y: 100, width: 200, height: 60)) myBtn.backgroundColor = UIColor.red return myBtn&#125;() 添加btn self.view.addSubview(self.myBtn) 写法1 myBtn.rx .tap .subscribe(onNext:&#123; [weak self] in self?.showMsg("click one btn") &#125;) .disposed(by: disposeBag) 写法2 myBtn.rx .tap .bind&#123; [weak self] in self?.showMsg("click one btn") &#125; .disposed(by: disposeBag) 点击btn后的提示 alertCtl func showMsg(_ titleStr: String)&#123; let alertCtl = UIAlertController(title: titleStr, message: nil, preferredStyle: UIAlertControllerStyle.alert) let cancelAction = UIAlertAction(title: "YES", style: UIAlertActionStyle.cancel, handler: nil) alertCtl.addAction(cancelAction) self.present(alertCtl, animated: true, completion: nil)&#125; 按钮标题（title）的绑定 创建一个计时器（每1秒发送一个索引数） let timerSquence = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) 根据索引数拼接最新的标题，并绑定到button上 timerSquence.map&#123; "count:\($0)" &#125; .bind(to: myBtn.rx.title(for: UIControlState.normal)) .disposed(by: disposeBag) 按钮富文本标题（attributedTitle）的绑定 创建btn fileprivate lazy var attributedBtn: UIButton = &#123; let attributedBtn = UIButton(frame: CGRect(x: 100, y: 200, width: 200, height: 60)) attributedBtn.backgroundColor = UIColor.gray return attributedBtn&#125;() 添加btn self.view.addSubview(self.attributedBtn) 按钮富文本标题（attributedTitle）的绑定 timerSquence.map(formatTimeInterval) .bind(to: attributedBtn.rx.attributedTitle()) .disposed(by: disposeBag) 将数字转成对应的富文本 func formatTimeInterval(ms: NSInteger) -&gt; NSMutableAttributedString &#123; let str = String(format: "%0.2d:%0.2d:%0.2d", arguments:[(ms / 600) % 600, (ms % 600 ) / 10, ms % 10] ) //富文本设置 let attributeStr = NSMutableAttributedString(string: str) ////从文本0开始6个字符字体HelveticaNeue-Bold,16号 attributeStr.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "HelveticaNeue-Bold", size: 16)!, range: NSMakeRange(0, 5)) //设置字体颜色 attributeStr.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSMakeRange(0, 5)) //设置文字背景颜色 attributeStr.addAttribute(NSAttributedStringKey.backgroundColor, value: UIColor.orange, range: NSMakeRange(0, 5)) return attributeStr&#125;override func didReceiveMemoryWarning() &#123; super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated.&#125; 图标（image）的绑定按钮图标（image）的绑定 rx.image 为 setImage(_:for:) 的封装根据索引数选择对应的按钮图标，并绑定到button上 timerSquence.map(&#123; let nameStr = $0%2 == 0 ? "back" : "forward" return UIImage(named: nameStr)! &#125;) .bind(to: myBtn.rx.image()) .disposed(by: disposeBag) 按钮背景图片（backgroundImage）的绑定 当程序启动时就开始计数，根据奇偶数选择相应的图片作为 button 的背景其中 rx.backgroundImage 为 setBackgroundImage(_:for:) 的封装根据索引数选择对应的按钮背景图，并绑定到button上 timerSquence.map&#123; UIImage(named: "\($0%2)")! &#125; .bind(to: myBtn.rx.backgroundImage()) .disposed(by: disposeBag) 按钮是否可用（isEnabled）的绑定 创建 switch fileprivate lazy var mySwitch: UISwitch = &#123; let mySwitch = UISwitch(frame: CGRect(x: 100, y: 300, width: 60, height: 60)) return mySwitch&#125;() switch控制btn交互性 mySwitch.rx .isOn .bind(to: myBtn.rx.isEnabled) .disposed(by: disposeBag) 按钮是否选中（isSelected）的绑定 创建btn fileprivate lazy var selectOneBtn: UIButton = &#123; let selectOneBtn = UIButton(frame: CGRect(x: 100, y: 400, width: 200, height: 60)) selectOneBtn.setTitle("one", for: UIControlState.normal) selectOneBtn.setTitleColor(UIColor.gray, for: UIControlState.normal) selectOneBtn.setTitleColor(UIColor.green, for: UIControlState.selected) return selectOneBtn&#125;()fileprivate lazy var selectSecondBtn: UIButton = &#123; let selectSecondBtn = UIButton(frame: CGRect(x: 100, y: 500, width: 200, height: 60)) selectSecondBtn.setTitle("second", for: UIControlState.normal) selectSecondBtn.setTitleColor(UIColor.gray, for: UIControlState.normal) selectSecondBtn.setTitleColor(UIColor.green, for: UIControlState.selected) return selectSecondBtn&#125;() add self.view.addSubview(selectOneBtn)self.view.addSubview(selectSecondBtn) 默认选择第一个按钮 selectOneBtn.isSelected = true 强制解包，避免后面还需要处理可选类型 let btnArray = [selectOneBtn,selectSecondBtn].map&#123;$0&#125; 创建一个可观察序列，它可以发送最后一次点击的按钮（也就是我们需要选中的按钮） let selectSquence = Observable.from(btnArray.map&#123; btn in btn.rx.tap.map &#123;btn&#125; &#125;) .merge() 对于每一个按钮都对selectedButton进行订阅，根据它是否是当前选中的按钮绑定isSelected属性 for oneBtn in btnArray&#123; selectSquence.map &#123; $0 == oneBtn &#125; .bind(to: oneBtn.rx.isSelected) .disposed(by: disposeBag)&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UISlider-01]]></title>
    <url>%2F2018%2F05%2F22%2FRxSwift%2FUIKit%2FUISlider-01%2F</url>
    <content type="text"><![CDATA[UISlider disposeBag let disposeBag = DisposeBag() 滑块mySlider fileprivate lazy var mySlider: UISlider = &#123; let mySlider = UISlider() mySlider.frame = CGRect(x: 60, y: 100, width: 300, height: 30) return mySlider&#125;() add UI self.view.addSubview(self.mySlider) 输出滑动值 mySlider.rx .value .asObservable() .subscribe(&#123; print("当前值为：\($0)") &#125;) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-特征序列Traits-ControlEvent]]></title>
    <url>%2F2018%2F05%2F20%2FRxSwift%2FGrammar%2FTraits-ControlEvent%2F</url>
    <content type="text"><![CDATA[ControlEvent基本介绍 ControlEvent 是专门用于描述 UI 所产生的事件，拥有该类型的属性都是被观察者（Observable）ControlEvent 和 ControlProperty 一样，都具有以下特征 不会产生 error 事件 一定在 MainScheduler 订阅（主线程订阅） 一定在 MainScheduler 监听（主线程监听） 共享状态变化 使用样例 同样地，在 RxCocoa 下许多 UI 控件的事件方法都是被观察者（可观察序列）。比如我们查看源码（UIButton+Rx.swift），可以发现 UIButton 的 rx.tap 方法类型便是 ControlEvent： import RxSwiftimport UIKit extension Reactive where Base: UIButton &#123; public var tap: ControlEvent&lt;Void&gt; &#123; return controlEvent(.touchUpInside) &#125;&#125; 那么我们如果想实现当一个 button 被点击时，在控制台输出一段文字。即前者作为被观察者，后者作为观察者。可以这么写： import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() @IBOutlet weak var button: UIButton! override func viewDidLoad() &#123; //订阅按钮点击事件 button.rx.tap .subscribe(onNext: &#123; print("欢迎访问hangge.com") &#125;).disposed(by: disposeBag) &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Traits-ControlProperty]]></title>
    <url>%2F2018%2F05%2F20%2FRxSwift%2FGrammar%2FTraits-ControlProperty%2F</url>
    <content type="text"><![CDATA[Schedulers调度器基本介绍 ControlProperty 是专门用来描述 UI 控件属性，拥有该类型的属性都是被观察者（Observable）ControlProperty 具有以下特征 不会产生 error 事件 一定在 MainScheduler 订阅（主线程订阅） 一定在 MainScheduler 监听（主线程监听） 共享状态变化 使用样例 其实在 RxCocoa 下许多 UI 控件属性都是被观察者（可观察序列）比如我们查看源码（UITextField+Rx.swift），可以发现 UITextField 的 rx.text 属性类型便是 ControlProperty： import RxSwiftimport UIKit extension Reactive where Base: UITextField &#123; public var text: ControlProperty&lt;String?&gt; &#123; return value &#125; public var value: ControlProperty&lt;String?&gt; &#123; return base.rx.controlPropertyWithDefaultEvents( getter: &#123; textField in textField.text &#125;, setter: &#123; textField, value in if textField.text != value &#123; textField.text = value &#125; &#125; ) &#125; //......&#125; 那么我们如果想让一个 textField 里输入内容实时地显示在另一个 label 上，即前者作为被观察者，后者作为观察者。可以这么写：import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var textField: UITextField! @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //将textField输入的文字绑定到label上 textField.rx.text .bind(to: label.rx.text) .disposed(by: disposeBag) &#125;&#125; extension UILabel &#123; public var fontSize: Binder&lt;CGFloat&gt; &#123; return Binder(self) &#123; label, fontSize in label.font = UIFont.systemFont(ofSize: fontSize) &#125; &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Schedulers调度器]]></title>
    <url>%2F2018%2F05%2F20%2FRxSwift%2FGrammar%2F09-Schedulers%E8%B0%83%E5%BA%A6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Schedulers调度器 调度器（Schedulers）是 RxSwift 实现多线程的核心模块，它主要用于控制任务在哪个线程或队列运行 RxSwift 内置了如下几种 SchedulerCurrentThreadScheduler 表示当前线程 Scheduler。（默认使用这个） MainScheduler 表示主线程。如果我们需要执行一些和 UI 相关的任务，就需要切换到该 Scheduler 运行 SerialDispatchQueueScheduler 封装了 GCD 的串行队列。如果我们需要执行一些串行任务，可以切换到这个 Scheduler 运行 ConcurrentDispatchQueueScheduler 封装了 GCD 的并行队列。如果我们需要执行一些并发任务，可以切换到这个 Scheduler 运行 OperationQueueScheduler 封装了 NSOperationQueue 使用样例 以请求网络数据并显示为例。我们在后台发起网络请求，然后解析数据，最后在主线程刷新页面 subscribeon ---&gt;Data---&gt; observeon---&gt; 主 Scheduler ---&gt; 后台 Scheduler 过去我们使用 GCD 来实现，代码大概是这样的 //现在后台获取数据DispatchQueue.global(qos: .userInitiated).async &#123; let data = try? Data(contentsOf: url) //再到主线程显示结果 DispatchQueue.main.async &#123; self.data = data &#125;&#125; 如果使用 RxSwift 来实现，代码大概是这样的 let rxData: Observable&lt;Data&gt; = ... rxData.subscribeOn(ConcurrentDispatchQueueScheduler(qos: .userInitiated)) //后台构建序列 .observeOn(MainScheduler.instance) //主线程监听并处理序列结果 .subscribe(onNext: &#123; [weak self] data in self?.data = data &#125;) .disposed(by: disposeBag) subscribeOn() 该方法决定数据序列的构建函数在哪个 Scheduler 上运行。比如上面样例，由于获取数据、解析数据需要花费一段时间的时间，所以通过 subscribeOn 将其切换到后台 Scheduler 来执行。这样可以避免主线程被阻塞。 observeOn() 该方法决定在哪个 Scheduler 上监听这个数据序列。比如上面样例，我们获取并解析完毕数据后又通过 observeOn 方法切换到主线程来监听并且处理结果]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UITableViewCell-Event订阅UITableViewCell里的按钮点击事件]]></title>
    <url>%2F2018%2F05%2F20%2FRxSwift%2FUIKit%2FUITableViewCell-Event%2F</url>
    <content type="text"><![CDATA[订阅UITableViewCell里的按钮点击事件 通过订阅 tableView 的 itemSelected 或 modelSelected 这两个 Rx 扩展方法，可以对单元格的点击事件进行响应，并执行相关的业务代码。但有时并不需要整个 cell 都能进行点击响应，可能是点击单元格内的按钮时才触发相关的操作，下面通过样例演示这个功能的实现 效果图 MyTableCell.swift（自定义单元格类） 注意 prepareForReuse() 方法里的 disposeBag = DisposeBag() 每次 prepareForReuse() 方法执行时都会初始化一个新的 disposeBag。 这是因为 cell 是可以复用的，这样当 cell 每次重用的时候，便会自动释放之前的 disposeBag，从而保证 cell 被重用的时候不会被多次订阅，避免错误发生。 单元格类 class MyTableCell: UITableViewCell &#123; var button : UIButton! var disposeBag = DisposeBag() //单元格重用时调用 override func prepareForReuse() &#123; super.prepareForReuse() disposeBag = DisposeBag() &#125; //初始化 override init(style: UITableViewCellStyle, reuseIdentifier: String?) &#123; super.init(style: style, reuseIdentifier: reuseIdentifier) //添加按钮 button = UIButton(frame: CGRect(x: 0, y: 0, width: 40, height: 25)) button.setTitle("click", for: .normal)//普通状态下的文字 button.backgroundColor = UIColor.red button.layer.cornerRadius = 5 button.titleLabel?.font = UIFont.systemFont(ofSize: 12) self.addSubview(button) &#125; // 布局 override func layoutSubviews() &#123; super.layoutSubviews() button.center = CGPoint(x: bounds.width - 35, y: bounds.midY) &#125; required init?(coder aDecoder: NSCoder) &#123; fatalError("init(coder:) has not been implemented") &#125;&#125; ViewController.swift（主视图控制器）import UIKitimport RxSwiftimport RxCocoaclass ViewController: UIViewController &#123; //disposeBag let disposeBag = DisposeBag() //tableView fileprivate lazy var tableView: UITableView = &#123; let tableView = UITableView(frame: self.view.frame,style: .plain) //创建表格视图 //创建一个重用的单元格 tableView.register(MyTableCell.self, forCellReuseIdentifier: "Cell") //单元格无法选中 tableView.allowsSelection = false return tableView &#125;() override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. //加载tableView self.view.addSubview(self.tableView) //初始化数据 .just 只创建包含一个元素的序列 let items = Observable.just(["01","02","03","04"]) //设置单元格数据（其实就是对 cellForRowAt 的封装） items.bind(to: tableView.rx.items)&#123; (tableView, row , element) in //初始化cell let cell = tableView.dequeueReusableCell(withIdentifier: "Cell") as! MyTableCell cell.textLabel?.text = "\(element)" //cell中按钮点击事件订阅 cell.button .rx .tap .asDriver() //转换成一个Driver序列 .drive(onNext: &#123; [weak self] in self?.showAlert(title: "\(row)", msg: element) &#125; ) .disposed(by: cell.disposeBag) return cell &#125; .disposed(by: disposeBag) &#125; //显示弹出框信息 func showAlert(title: String, msg: String) &#123; let alert = UIAlertController(title: title, message: msg, preferredStyle: .alert) alert.addAction(UIAlertAction(title: "sure", style: .cancel)) self.present(alert,animated: true) &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Lib-ObjectMapper-数据转模型]]></title>
    <url>%2F2018%2F04%2F25%2FSwift%2FLib%2FObjectMapper-%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[原文参考 ObjectMapper ObjectMapper 是一个使用 Swift 语言编写的数据模型转换框架。使用它，我们可以很方便地将模型对象（类和结构体）转换为 JSON，或者根据 JSON 生成对应的模型对象原文出自：www.hangge.com 转载请保留原文链接：https://www.hangge.com/blog/cache/detail_1673.html Github主页 功能特点 可以将 JSON 映射到对象 可以将对象映射到 JSON 支持嵌套对象（在数组或字典中单独使用） 支持映射过程中的自定义转换 支持结构体 支持 Immutable(目前处于测试阶段) 添加 (若是拖入SDK)工程 -&gt; General -&gt; Embedded Binaries 项，把 iOS 版的 framework 添加进来 import ObjectMapper 集成CocoaPods库导入pod 'ObjectMapper' 头文件import ObjectMapper ObjectMapper 的协议 Mappableclass YKModel:Mappable Model &amp; Dic相互转换模型定义 要实现映射，我们的模型需要实现 ObjectMapper 的 Mappable 协议，并实现该协议里的如下两个方法 init?(map: Map)mutating func mapping(map: Map) eg:定义一个用户类（UserObjectMapper 定义了一个 &lt;- 操作符来表示成员对象与 JSON 中属性的相互映射关系 class User: Mappable &#123; var username: String? var age: Int? var weight: Double! var bestFriend: User? // User对象 var friends: [User]? // Users数组 var birthday: Date? var array: [AnyObject]? var dictionary: [String : AnyObject] = [:] init () &#123; &#125; required init?(map: Map)&#123; &#125; func mapping(map: Map) &#123; username &lt;- map["username"] age &lt;- map["age"] weight &lt;- map["weight"] bestFriend &lt;- map["best_friend"] friends &lt;- map["friends"] birthday &lt;- (map["birthday"], DateTransform()) array &lt;- map["arr"] dictionary &lt;- map["dict"] &#125; &#125; 型转为字典 定义了两个 User 对象，其中一个引用另一个。最后将该对象转为字典，并打印出来 let lilei = User()lilei.username = "李雷"lilei.age = 18 let meimei = User()meimei.username = "梅梅"meimei.age = 17meimei.bestFriend = lilei let meimeiDic:[String: Any] = meimei.toJSON()print(meimeiDic) 模型数组转为字典数组 包含两个 User 对象的数组转换成字典数组 let lilei = User()lilei.username = "李雷"lilei.age = 18 let meimei = User()meimei.username = "梅梅"meimei.age = 17 let users = [lilei, meimei]let usersArray:[[String: Any]] = users.toJSON()print(usersArray) 字典转为模型let meimeiDic = ["age": 17, "username": "梅梅", "best_friend": ["age": 18, "username": "李雷"]] let meimei = User(JSON: meimeiDic) 字典数组转为模型数组let usersArray = [["age": 17, "username": "梅梅"], ["age": 18, "username": "李雷"]] let users:[User] = Mapper&lt;User&gt;().mapArray(JSONArray: usersArray) Model &amp; JSON字符串de相互转换模型转为JSON字符串 两个 User 对象，其中一个引用另一个。最后将该对象转为 json 串，并打印出来 let lilei = User()lilei.username = "李雷"lilei.age = 18 let meimei = User()meimei.username = "梅梅"meimei.age = 17meimei.bestFriend = lilei let meimeiJSON:String = meimei.toJSONString()!print(meimeiJSON) 模型数组转为JSON字符串 将一个包含两个 User 对象的数组转换成字典数组 let lilei = User()lilei.username = "李雷"lilei.age = 18 let meimei = User()meimei.username = "梅梅"meimei.age = 17 let users = [lilei, meimei]let json:String = users.toJSONString()!print(json) 将JSON字符串转为模型let meimeiJSON:String = "&#123;\"age\":17,\"username\":\"梅梅\",\"best_friend\":&#123;\"age\":18,\"username\":\"李雷\"&#125;&#125;" let meimei = User(JSONString: meimeiJSON) JSON字符串转为模型数组let json = "[&#123;\"age\":18,\"username\":\"李雷\"&#125;,&#123;\"age\":17,\"username\":\"梅梅\"&#125;]" let users:[User] = Mapper&lt;User&gt;().mapArray(JSONString: json)! init?(map: Map)使用介绍 ObjectMapper 通过 Mappable 协议中的 init?(map: Map) 方法来初始化创建对象。我们可以利用这个方法，在对象序列化之前验证 JSON 合法性。在不符合的条件时，返回 nil 阻止映射发生。 检测 JSON 数据中是否包含 username 属性 class User: Mappable &#123; var username: String? var age: Int? var weight: Double! init()&#123; &#125; required init?(map: Map)&#123; // 检查JSON中是否有"username"属性 if map.JSON["username"] == nil &#123; return nil &#125; &#125; // Mappable func mapping(map: Map) &#123; username &lt;- map["username"] age &lt;- map["age"] weight &lt;- map["weight"] &#125;&#125; 将 JSON 字符串转为模型数组，并打印出对象个数 let json = "[&#123;\"age\":18,\"username\":\"李雷\"&#125;,&#123;\"age\":17&#125;]"let users:[User] = Mapper&lt;User&gt;().mapArray(JSONString: json)!print(users.count) 运行结果如下，可以看到生成的数组中只有 1 个对象，这是由于另一个对象的 username 为空，因此被过滤掉了]]></content>
      <categories>
        <category>Swift</category>
        <category>Lib</category>
        <category>ObjectMapper</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RxSwift+Moya+HandyJSON]]></title>
    <url>%2F2018%2F04%2F22%2FRxSwift%2FFunc%2FRxSwift%2BMoya%2BHandyJSON%20%2F</url>
    <content type="text"><![CDATA[资料alibaba/HandyJSON原文参考 集成Podfilepod 'Moya', '~&gt; 10.0'# or pod 'Moya/RxSwift', '~&gt; 10.0' 导入import Moya 简单使用定义枚举，存储网络请求 定义一个枚举，存放我们的网络请求 enum ApiManager &#123; case login(username:String, password:String, token:String)&#125; moya的TargetType协议extension ApiManager:TargetType&#123; var baseURL: URL &#123; return URL.init(string: BaseURL)! &#125; //请求路径 var path:String&#123; switch self &#123; case .login(username: _, password:_ , token:_): return "login/accountLogin" &#125; &#125; var headers: [String: String]? &#123; return nil; &#125; //请求的参数 var parameters: [String: Any]? &#123; switch self &#123; case .login(username: let userName, password: let pwd, token: let token): return ["account":userName,"pwd":pwd,"deviceToken":token]; &#125; &#125; ///请求方式 var method: Moya.Method &#123; switch self &#123; case .login(username: _, password: _, token: _): return .post; &#125; &#125; /// The method used for parameter encoding. var parameterEncoding: ParameterEncoding &#123; return URLEncoding.default &#125; /// Provides stub data for use in testing. var sampleData: Data &#123; return "".data(using: String.Encoding.utf8)! &#125; //MARK:task type var task: Task &#123; return .requestPlain &#125; var validate: Bool &#123; return false &#125;&#125; 发起网络请求let provider = MoyaProvider&lt;ApiManager&gt;(); provider.request(.login(username: "haha", password: "123456", token: "qwe")) &#123; (result) in if result.error == nil&#123; LLog(result.value); &#125; &#125; 处理网络请求 使用HanyJSON处理接口返回数据，因为我们使用RxSwift,在处理网络请求，所有我们是对ObservableType 数据类型 扩展mapModel extension ObservableType where E == Response &#123; public func mapModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; Observable&lt;T&gt; &#123; return flatMap &#123; response -&gt; Observable&lt;T&gt; in return Observable.just(response.mapModel(T.self)) &#125; &#125;&#125;extension Response &#123; func mapModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123; let jsonString = String.init(data: data, encoding: .utf8) return JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString)! &#125;&#125; 调用示例使用provider异步请求，并处理返回数据 接口请求完成后， subscribe 会收到next和complete两个事件 当event.element不为空时即为next事件 provider.rx.request(.login(username: "151xxxxxxxxxx", password: "123456", token: "")).asObservable().mapModel(LoginResponseModel .self).subscribe &#123; (event) in //当event.element 不为空时，返回的就是我们之前mapModel的类 if let model = event.element&#123; LLog(model.data.accessToken); LLog(model.data.crowdToken); &#125;else&#123; LLog("当前事件:\(event)") &#125; &#125;.disposed(by: disposeBag); 直接处理next事件，error和completed分开处理 provider.rx.request(.login(username: "15136176473", password: "123456", token: "")).asObservable().mapModel(LoginResponseModel .self).subscribe(onNext: &#123; (model) in LLog(model.data.crowdToken) &#125;, onError: &#123; (error) in LLog("请求出错") &#125;, onCompleted: nil, onDisposed: nil).disposed(by: disposeBag); 扩展public init(endpointClosure: @escaping EndpointClosure = MoyaProvider.defaultEndpointMapping, requestClosure: @escaping RequestClosure = MoyaProvider.defaultRequestMapping, stubClosure: @escaping StubClosure = MoyaProvider.neverStub, callbackQueue: DispatchQueue? = nil, manager: Manager = MoyaProvider&lt;Target&gt;.defaultAlamofireManager(), plugins: [PluginType] = [], trackInflights: Bool = false) &#123;&#125; Moya Moya是一个比较全面的好用的网络管理工具,在上面我们只是使用了部分功能。通过provider的初始化，我们可以发现在开发中我们还可以处理很多。比如： 插件机制 Moya 的插件机制也很好用，提供了以下接口: /// Called to modify a request before sending func prepare(_ request: URLRequest, target: TargetType) -&gt; URLRequest /// Called immediately before a request is sent over the network (or stubbed). func willSend(_ request: RequestType, target: TargetType) /// Called after a response has been received, but before the MoyaProvider has invoked its completion handler. func didReceive(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) /// Called to modify a result before completion func process(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) -&gt; Result&lt;Moya.Response, MoyaError&gt; 与主功能接口脱离，降低了耦合度我们可以再这里处理请求的权限、token、loading等。 例如： public final class RequestLoadingPlugin:PluginType&#123; public func willSend(_ request: RequestType, target: TargetType) &#123; LLog("接口开始请求") self.showHUD() &#125; public func didReceive(_ result: Result&lt;Response, MoyaError&gt;, target: TargetType) &#123; LLog("接口请求完成") self.dismissHUD(); &#125; //MARK:-是否显示请求加载框 fileprivate func showHUD(_ isShow:Bool = true)&#123; if(isShow)&#123; SVProgressHUD.show(); &#125; &#125; //MARK:-隐藏请求加载框 fileprivate func dismissHUD()&#123; SVProgressHUD.dismiss(); &#125;&#125; 在provider的初始化注册我们初始化的插件即可 let provider = MoyaProvider&lt;ApiManager&gt;(plugins:[RequestLoadingPlugin()]); 请求处理机制public typealias EndpointClosure = (Target) -&gt; Endpoint&lt;Target&gt;public typealias RequestClosure = (Endpoint&lt;Target&gt;, @escaping RequestResultClosure) -&gt; Voidpublic typealias StubClosure = (Target) -&gt; Moya.StubBehavior public typealias RequestResultClosure = (Result&lt;URLRequest, MoyaError&gt;) -&gt; Void 从上面的三个闭包中，我们可以看出 EndpointClosure 是输入一个Target 返回一个Endpoint 也就是完成Target-&gt;Endpoint Endpoint的数据结构 open class Endpoint&lt;Target&gt; &#123; public typealias SampleResponseClosure = () -&gt; EndpointSampleResponse open let url: String open let sampleResponseClosure: SampleResponseClosure open let method: Moya.Method open let task: Task open let httpHeaderFields: [String: String]? &#125; 初始化的默认值是 public final class func defaultEndpointMapping(for target: Target) -&gt; Endpoint&lt;Target&gt; &#123; return Endpoint( url: URL(target: target).absoluteString, sampleResponseClosure: &#123; .networkResponse(200, target.sampleData) &#125;, method: target.method, task: target.task, httpHeaderFields: target.headers ) &#125; 上面的代码只是创建并返回Endpoint实例。很多时候，我们可以自定义这个闭包来做更多额外的事情。比如我们处理一些网络状态码、或者结合stub 模拟网络数据等 RequestClosure 是输入一个Endpoint和RequestResultClosure闭包 返回VoidRequestClosure主要是实现Endpoint-&gt;NSURLRequest 用于发起真正的网络请求 public typealias RequestResultClosure = (Result&lt;URLRequest, MoyaError&gt;) -&gt; Void 在输入中RequestResultClosure就是对接口请求完成后的返回初始化的默认值是： public final class func defaultRequestMapping(for endpoint: Endpoint&lt;Target&gt;, closure: RequestResultClosure) &#123; do &#123; let urlRequest = try endpoint.urlRequest() closure(.success(urlRequest)) &#125; catch MoyaError.requestMapping(let url) &#123; closure(.failure(MoyaError.requestMapping(url))) &#125; catch MoyaError.parameterEncoding(let error) &#123; closure(.failure(MoyaError.parameterEncoding(error))) &#125; catch &#123; closure(.failure(MoyaError.underlying(error, nil))) &#125; &#125; 这里就是处理最后的urlRequest。如果你想设置全局的urlRequest，这里也是最后的机会了。我们可以再这里修改请求的超时时间、缓存策略、cookie等。示例： let requestClosure = &#123; (endpoint: Endpoint&lt;ApiManager&gt;, closure: (Result&lt;URLRequest, MoyaError&gt;) -&gt; Void) -&gt; Void in do &#123; var urlRequest = try endpoint.urlRequest() urlRequest.timeoutInterval = 30.0 urlRequest.cachePolicy = .reloadIgnoringLocalAndRemoteCacheData urlRequest.httpShouldHandleCookies = false closure(.success(urlRequest)) &#125; catch MoyaError.requestMapping(let url) &#123; closure(.failure(MoyaError.requestMapping(url))) &#125; catch MoyaError.parameterEncoding(let error) &#123; closure(.failure(MoyaError.parameterEncoding(error))) &#125; catch &#123; closure(.failure(MoyaError.underlying(error, nil))) &#125; &#125; 示例let provider = MoyaProvider&lt;ApiManager&gt;(requestClosure:requestClosure,plugins:[RequestLoadingPlugin()]); StubClosure 是输入一个Target 返回一个StubBehavior的闭包。 默认是：neverStub public typealias StubClosure = (Target) -&gt; Moya.StubBehavior public enum StubBehavior &#123; /// 不使用Stub来返回模拟的网络数据 case never /// 立刻返回Stub的数据 case immediate /// 在几秒后返回stub的数据 case delayed(seconds: TimeInterval)&#125; 示例： 编写测试数据 extension ApiManager:TargetType&#123; ... /// Provides stub data for use in testing. var sampleData: Data &#123; switch self &#123; case .login(username: _, password: _, token: _): return "&#123;'code': 200,'Token':'123455'&#125;".data(using: String.Encoding.utf8)! default: return "".data(using: String.Encoding.utf8)! &#125; &#125;&#125; 初始化EndpointClosure let endPointAction = &#123; (target: ApiManager) -&gt; Endpoint&lt;ApiManager&gt; in let url = target.baseURL.appendingPathComponent(target.path).absoluteString switch target &#123; case .login(username: _, password:_ , token:_): return Endpoint( url: url, sampleResponseClosure: &#123; .networkResponse(200, target.sampleData) &#125;, method: target.method, task: target.task, httpHeaderFields: target.headers )&#125;&#125; 初始化StubClosure let stubAction: (_ type:ApiManager) -&gt; Moya.StubBehavior = &#123; type in switch type &#123; case .login(username: _, password:_ , token:_): return Moya.StubBehavior.delayed(seconds: 3.0) &#125;&#125; 初始化provider let provider = MoyaProvider&lt;ApiManager&gt;(endpointClosure:endPointAction,requestClosure:_requestClosure,stubClosure:stubAction,plugins:[RequestLoadingPlugin()]); Manager Moya本身并不是直接处理网络请求的第三方库。它只是一个抽象的网络层，对真正发起网络请求的Manager进行管理：例如Alamofire默认参数: public final class func defaultAlamofireManager() -&gt; Manager &#123; let configuration = URLSessionConfiguration.default configuration.httpAdditionalHeaders = Manager.defaultHTTPHeaders let manager = Manager(configuration: configuration) manager.startRequestsImmediately = false return manager &#125; 封装Alamofire,使Moya.Manager == Alamofire.SessionManager public typealias Manager = Alamofire.SessionManagerinternal typealias Request = Alamofire.Requestinternal typealias DownloadRequest = Alamofire.DownloadRequestinternal typealias UploadRequest = Alamofire.UploadRequestinternal typealias DataRequest = Alamofire.DataRequest 所以，当我们想要定义自己的Manager，我们也可以传入自己的Manager到Moya的provider中。示例 let policies: [String: ServerTrustPolicy] = [ "example.com": .PinPublicKeys( publicKeys: ServerTrustPolicy.publicKeysInBundle(), validateCertificateChain: true, validateHost: true )] let policies: [String: ServerTrustPolicy] = [ "example.com": .pinPublicKeys( publicKeys: ServerTrustPolicy.publicKeys(), validateCertificateChain: true, validateHost: true )]let manager:Manager = Manager(configuration: URLSessionConfiguration.default, delegate: SessionDelegate(), serverTrustPolicyManager: ServerTrustPolicyManager(policies: policies)) let provider = MoyaProvider&lt;ApiManager&gt;(manager: manager)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-ControlFlow控制流]]></title>
    <url>%2F2018%2F04%2F14%2FSwift%2FGrammar%2FControlFlow%E6%8E%A7%E5%88%B6%E6%B5%81%2F</url>
    <content type="text"><![CDATA[For-In 循环 For-In 循环 ❶for-in -&gt;数组中的元素 let names = ["A","B","C"]for name in names &#123; print ("-------- \(name)")&#125; ❷or-in -&gt;字典遍历字典时，字典的每项元素会以 (key, value) 元组的形式返回for-in 循环中使用显式的常量名称来解读 (key, value) 元组 let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4] for (animalName, legCount) in numberOfLegs &#123; print("\(animalName)s have \(legCount) legs") &#125;//字典的内容理论上是无序的 ❸ for-in 循环还可以使用数字范围 for index in 1...5 &#123; print("\(index) times 5 is \(index * 5)")&#125;// 1 times 5 is 5// 2 times 5 is 10// 3 times 5 is 15// 4 times 5 is 20// 5 times 5 is 25 用来进行遍历的元素是使用闭区间操作符（…）表示的从 1 到 5 的数字区间 index 是一个每次循环遍历开始时被自动赋值的常量 ❹]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-目录]]></title>
    <url>%2F2018%2F04%2F11%2FSwift%2FGrammar%2F0%E7%9B%AE%E5%BD%95%2FSwift-Grammar-%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[基本类型与运算]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>Swift4.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxDataSources-UITableView]]></title>
    <url>%2F2018%2F04%2F07%2FRxSwift%2FLib%2FRxDataSources-UITableView%2F</url>
    <content type="text"><![CDATA[自带的Section let items = Observable.just([ SectionModel(model:&quot;&quot;, items: [&quot;UILable的用法&quot;,&quot;UIText的用法&quot;, &quot;UIButton的用法&quot;])])创建数据源 let dataSource = RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String,String&gt;&gt;( configureCell: &#123; (dataSource,tv,indexPath,element) in let cell = tv.dequeueReusableCell(withIdentifier:&quot;Cell&quot;)! cell.textLabel?.text = &quot;\(indexPath.row):\(element)&quot; return cell &#125; ) //绑定单元格数据 items.bind(to: tableView.rx.items(dataSource: dataSource)).disposed(by: disposeBag) 方式2：自定义Section自定义Sectionstruct MySecion &#123; var header:String var items:[Item]&#125;extension MySecion:AnimatableSectionModelType&#123; typealias Item = String var identity : String&#123; return header &#125; init(original: MySecion,items:[Item]) &#123; self = original self.items = items &#125;&#125; 使用自定义Sectionlet sections = Observable.just([ MySecion(header: &quot;&quot;, items: [ &quot;AAAAA&quot;, &quot;BBBB&quot;, &quot;CCCCCC&quot;, ]) ])let datasource = RxTableViewSectionedAnimatedDataSource&lt;MySecion&gt;( //设置cell configureCell: &#123; ds,tv,ip,im in let cell = tv.dequeueReusableCell(withIdentifier: &quot;Cell&quot;) ?? UITableViewCell(style: .default, reuseIdentifier: &quot;Cell&quot;) cell.textLabel?.text = &quot;\(ip.row):\(im)&quot; return cell&#125; )//绑定cell的数据sections.bind(to: tableView.rx.items(dataSource: datasource)).disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Lib</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Lib</tag>
        <tag>RxDataSources</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Lib-目录]]></title>
    <url>%2F2018%2F04%2F07%2FRxSwift%2FLib%2FRxSwift-Lib-%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Moya-网络封装RxSwift/) Moya]]></content>
      <categories>
        <category>RxSwift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-MVVM-Login 登录注册]]></title>
    <url>%2F2018%2F04%2F06%2FRxSwift%2FDemo%2FRxSwift-MVVM-Login%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%2F</url>
    <content type="text"><![CDATA[需求 需求 需求注册界面需求 输入用户名必须大于等于6个字符，不然密码不能输入； 密码必须大于等于6个字符，不然重复密码不能输入； 重复密码和密码必须一样， 不能注册按钮不能点击； 点击注册按钮，提示注册成功或者注册失败； 注册成功会写进本地的plist文件，然后输入用户名会检测该用户名是否已注册 登录界面需求 点击输入用户名，检测是否已存在，如果存在，户名可用，否则提示用户名不存在； 输入密码，点击登录，如果密码错则提示密码错误，否则进入列表界面，提示登录成功 UI①UI-ViewController.swift 懒加载+封装初始化UI ❶用户名 - 标题-Title - lab fileprivate lazy var userNameLab: UILabel = &#123; let userNameLab = UILabel() userNameLab.frame = CGRect(x:40,y:100,width:80,height:30) userNameLab.font = UIFont.systemFont(ofSize: 14) userNameLab.text = "用户名" return userNameLab &#125;() ❷用户名 -输入框-TF fileprivate lazy var userNameTextField: UITextField = &#123; let userNameTextField = UITextField() userNameTextField.frame = CGRect(x:40+80+10,y:100,width:160,height:30) userNameTextField.placeholder = "输入不少于6位用户名" userNameTextField.font = UIFont.systemFont(ofSize: 14) return userNameTextField &#125;() ❸用户名 - 输入提示-lab fileprivate lazy var userNameInputLab: UILabel = &#123; let userNameInputLab = UILabel() userNameInputLab.frame = CGRect(x:40+80+10,y:100+30+10,width:100,height:20) userNameInputLab.text = "用户名至少6位" userNameInputLab.textColor = UIColor.red userNameInputLab.font = UIFont.systemFont(ofSize: 12) return userNameInputLab &#125;() 密码-标题-Lab fileprivate lazy var passWordLab: UILabel = &#123; let passWordLab = UILabel() passWordLab.frame = CGRect(x:40,y:200,width:80,height:30) passWordLab.font = UIFont.systemFont(ofSize: 14) passWordLab.text = "密码" return passWordLab &#125;() 密码- 输入- TF fileprivate lazy var passWordTextField:UITextField = &#123; let passWordTextField = UITextField() passWordTextField.frame = CGRect(x:40+80+10,y:200,width:100,height:30) passWordTextField.placeholder = "请填输入密码" passWordTextField.font = UIFont.systemFont(ofSize: 14) return passWordTextField&#125;() 密码 - 输入提示-lab fileprivate lazy var passWordInputLab: UILabel = &#123; let passWordInputLab = UILabel() passWordInputLab.frame = CGRect(x:40+80+10,y:200+30+10,width:100,height:20) passWordInputLab.text = "用户名至少6位" passWordInputLab.textColor = UIColor.red passWordInputLab.font = UIFont.systemFont(ofSize: 12) return passWordInputLab &#125;() 密码检验 - 标题 - Lab fileprivate lazy var checkPassWordLab: UILabel = &#123; let checkPassWordLab = UILabel() checkPassWordLab.frame = CGRect(x:40,y:300,width:80,height:30) checkPassWordLab.font = UIFont.systemFont(ofSize: 14) checkPassWordLab.text = "密码检查" return checkPassWordLab &#125;() 密码检验 - 输入- TF fileprivate lazy var checkPassWordTextField:UITextField = &#123; let checkPassWordTextField = UITextField() checkPassWordTextField.frame = CGRect(x:40+80+10,y:300,width:100,height:30) checkPassWordTextField.placeholder = "请再一次输入密码" checkPassWordTextField.font = UIFont.systemFont(ofSize: 14) return checkPassWordTextField&#125;() 密码检验 - 输入警告提示-lab fileprivate lazy var checkPassWordInputLab: UILabel = &#123; let checkPassWordInputLab = UILabel() checkPassWordInputLab.frame = CGRect(x:40+80+10,y:300+30+10,width:100,height:20) checkPassWordInputLab.text = "用户名至少6位" checkPassWordInputLab.textColor = UIColor.red checkPassWordInputLab.font = UIFont.systemFont(ofSize: 12) self.view.addSubview(checkPassWordInputLab) return checkPassWordInputLab&#125;() 注册 按钮 -Btn fileprivate lazy var registerBtn:UIButton = &#123; let registerBtn = UIButton() registerBtn.frame = CGRect(x:40+80+10,y:400,width:100,height:30) registerBtn.setTitle("注册", for: .normal) registerBtn.setTitleColor(UIColor.green, for: .normal) registerBtn.backgroundColor = UIColor.red return registerBtn&#125;() 登录 - 按钮 -Btn fileprivate lazy var loginBtn:UIButton = &#123; let loginBtn = UIButton() loginBtn.frame = CGRect(x:40+80+10,y:500,width:100,height:30) loginBtn.setTitle("登录", for: .normal) loginBtn.setTitleColor(UIColor.green, for: .normal) loginBtn.backgroundColor = UIColor.red loginBtn.addTarget(self, action: #selector(showNextCtl), for: UIControlEvents.touchUpInside) return loginBtn&#125;() 私有方法 注册完毕–&gt;去登录界面 func showNextCtl()&#123; let viewCtl = LoginViewCtl() print("21312312312") navigationController?.pushViewController(viewCtl, animated: true) &#125; DisposeBaglet disposeBag = DisposeBag() ViewModel 声明 RegisterViewModel let viewModel = RegisterViewModel() viewDidLoadUI加载 UI加载 func initUI()&#123; view.backgroundColor = UIColor.white view.addSubview(userNameLab) view.addSubview(userNameTextField) view.addSubview(userNameInputLab) view.addSubview(passWordLab) view.addSubview(passWordTextField) view.addSubview(passWordInputLab) view.addSubview(checkPassWordLab) view.addSubview(checkPassWordTextField) view.addSubview(checkPassWordLab) view.addSubview(registerBtn) view.addSubview(loginBtn)&#125; UI控件 绑定 ①usernameTextField.rx.text.orEmpty,usernameTextField.rx.text.orEmpty是Rx中的东西，他把TextFiled的text变成了一个Observable， 后面的orEmpty我们可以Command点进去看下，他会把String?过滤nil帮我们变为String类型 ②bind:bind里面里面的就是监听者也就是Observer,username既是一个observable也是一个observer,此时把他当成一个Observer绑定到usernameTextFiled上，监听我们的usernameTextField流 ③因为有监听，就要有监听资源的回收，so,创建一个disposeBag来盛放这些监听资源 绑定 用户名 userNameTextField.rx .text .orEmpty // ① .bind(to: viewModel.userNameVariable) // ② .disposed(by: disposeBag) // ③ 绑定 密码 passWordTextField.rx .text .orEmpty .bind(to: viewModel.passWordVariable) .disposed(by: disposeBag) 绑定 检测 密码 checkPassWordTextField.rx .text .orEmpty .bind(to: viewModel.checkPassWordVariable) .disposed(by: disposeBag) 绑定 注册 按钮 registerBtn.rx .tap .bind(to: viewModel.registerTaps)//registerTaps来判断 如果满足注册条件 .disposed(by: disposeBag) mdoel相关Variable ① 被观察者 ② userNameInputLab.rx.validationResult作为一个observer(观察者)观察userNameUsable上的内容变化将ViewModel中username处理结果usernameUseable绑定到nameLabel显示文案上，根据不同的结果显示不同的文案 用户名 监听 用户名输入 viewModel.userNameUsable // ① 被观察者 .bind(to: userNameInputLab.rx.validationResult) // ② .disposed(by: disposeBag) // ③ 监听 用户名是否可输入 viewModel.userNameUsable .bind(to: passWordTextField.rx.inputEnabled) .disposed(by: disposeBag) 密码 监听 密码 输入提示 viewModel.passWordUsable .bind(to: passWordInputLab.rx.validationResult) .disposed(by: disposeBag) 监听 密码 是否可输入 viewModel.passWordUsable .bind(to: checkPassWordTextField.rx.inputEnabled) .disposed(by: disposeBag) 检测密码 监听 检测密码 输入 viewModel.checkPassWordUsable .bind(to: checkPassWordInputLab.rx.validationResult) .disposed(by: disposeBag) 注册 监听 注册 enable队列信号 –&gt;执行具体变化 viewModel.registerBtnEnabled .subscribe(onNext:&#123;[unowned self] valid in self.registerBtn.isEnabled = valid self.registerBtn.alpha = valid ? 1.0 : 0.5 &#125;) .disposed(by: disposeBag) 注册结果处理 viewModel.registerResult .subscribe(onNext:&#123; [weak self](result) in switch result &#123; case let .ok(msgStr): self?.showAlert(msgStr: msgStr) case .empty: self?.showAlert(msgStr: "") case let .failed(msgStr): self?.showAlert(msgStr: msgStr) &#125; &#125;) .disposed(by: disposeBag) alet提示 注册结果 func showAlert(msgStr:String)&#123; let acton = UIAlertAction(title:"确定", style: .default, handler:nil) let alertViewCtl = UIAlertController(title:nil, message:msgStr, preferredStyle: .alert) alertViewCtl.addAction(acton) present(alertViewCtl, animated: true, completion: nil) &#125; Service网络请求 Service文件主要负责一些网络请求，和一些数据访问的操作然后供 ViewModel使用，模拟从本地plist文件中读取用户数据 ValidationService类中，检测username的方法变量private init ()&#123;&#125; //初始化？？static let instance = ValidationService() // 单例类let minCharacterCount = 6 // 设置输入最小位数 方法 ① Method:对输入用户名 判断返回一个Observable对象，因为这个请求过程需要被监听 func validateUsername(_ userNameStr: String) -&gt; Observable&lt;Result&gt; &#123; /*just是创建一个sequence只能发出一种特定的事件，能正常结束 next(🔴) completed */ //❶判断-是否为空 当字符等于0的时候什么都不做 if userNameStr.count == 0 &#123; return .just(.empty) &#125; //❷判断-长度 if userNameStr.count &lt; minCharacterCount &#123; return .just(.failed(message: "大哥至少6位啊")) &#125; //❸判断- 检查plist文件中是否有该用户名 if userNameValid(userNameStr) &#123; return .just(.failed(message: "账户已存在")) &#125; //❹判断- 返回可用 return .just(.ok(message: "用户名可用"))&#125; ②Method: 从本地数据库中检测 用户名 是否已经存在 func userNameValid(_ userNameStr: String) -&gt;Bool&#123; let filePath = NSHomeDirectory()+"/Documents/users.plist" let userDic = NSDictionary(contentsOfFile:filePath) let userNameArray = userDic?.allKeys guard userNameArray != nil else&#123; return false &#125; if (userNameArray! as NSArray).contains(userNameStr) &#123; return true &#125;else&#123; return false &#125; &#125; ③Method: 检测 密码长度 -&gt; Result func validatePassWord(_ passWordStr: String)-&gt; Result &#123; if passWordStr.count == 0 &#123; return .empty &#125; if passWordStr.count &lt; minCharacterCount &#123; return .failed(message: "密码长度至少6个字符") &#125; return .ok(message: "密码可用") &#125; ④ 检测 2次密码是否一致 -&gt; Result func validateCheckPassWord(_ passWordStr: String,checkPassWordStr:String) -&gt; Result &#123; if checkPassWordStr.count == 0&#123; return .empty &#125; if checkPassWordStr == passWordStr &#123; return .ok(message:"密码可用") &#125; return .failed(message: "两次密码不一样") &#125; ⑤注册函数 - -&gt; Observable func register(_ userNameStr:String,passWordStr:String) -&gt; Observable&lt;Result&gt; &#123; let userDic = [userNameStr:passWordStr] let filePath = NSHomeDirectory() + "/Documents/users.plist" if (userDic as NSDictionary).write(toFile: filePath, atomically: true) &#123; return .just(.ok(message: "注册成功")) &#125; return .just(.failed(message: "注册失败")) &#125; ⑥登录用户名是否存在 -&gt; Observable func loginUsernameValid(_ useNameStr: String) -&gt; Observable&lt;Result&gt; &#123; if useNameStr.count == 0 &#123; return .just(.empty) &#125; if userNameValid(useNameStr) &#123; return .just(.ok(message: "用户名 可用")) &#125; return .just(.failed(message: "用户名 不存在"))&#125; ⑦登录 Observable func login(_ userNameStr: String, passWordStr: String)-&gt; Observable&lt;Result&gt; &#123; let filePath = NSHomeDirectory()+"/Documents/users.plist" let userDic = NSDictionary(contentsOfFile:filePath) if let usePass = userDic?.object(forKey: userNameStr) as? String &#123; if usePass == passWordStr &#123; return .just(.ok(message: "登录成功")) &#125; &#125; return .just(.failed(message: "密码错误"))&#125; Protocol.swift 创建一个Protocol.swift文件，创建一个enum用于表示我们处理结果 枚举表示一些请求的结果enum Result &#123; case ok(message: String) case empty case failed(message: String)&#125; 先对Result进行了扩展 添加了一个isValid属性状态是ok，这个属性就返回true，否则就返回false extension Result&#123; var isValid: Bool&#123; switch self &#123; case .ok: return true default: return false &#125; &#125;&#125; 添加了一个textColor属性，如果Result属性为ok的时候颜色就是绿色，否则即使红色 extension Result&#123; var textColor:UIColor&#123; switch self &#123; case .ok: return UIColor(red: 138.0 / 255.0, green: 221.0 / 255.0, blue: 109.0 / 255.0, alpha: 1.0) case .empty: return UIColor.black default: return UIColor.red &#125; &#125;&#125; 自定义了一个Observer对UIlabel进行了扩展，根据result结果，进行他的text和textColor的显示UIBindingObserver这个东西很有用的，创建我们自己的监听者，有时候RxCocoa(RxSwift中对UIKit的一个扩展库)给的扩展不够我们使用，比如一个UITextField有个isEnabled属性，我想把这个isEnabled变为一个observer，我们可以这样做 extension Result &#123; var description: String &#123; switch self &#123; case let .ok(message): return message case .empty: return "" case let .failed(message): return message &#125; &#125;&#125; UILabel进行了UIBingObserver，根据result结果，进行它的text和textColor显示 extension Reactive where Base: UILabel &#123; var validationResult: UIBindingObserver&lt;Base, Result&gt; &#123; return UIBindingObserver(UIElement: base) &#123; label, result in label.textColor = result.textColor label.text = result.description &#125; &#125;&#125; 对UITextField进行扩展，根据result结果，进行他的isEnabled进行设置 extension Reactive where Base: UITextField &#123; var inputEnabled: UIBindingObserver&lt;Base, Result&gt; &#123; return UIBindingObserver(UIElement: base) &#123; textFiled, result in textFiled.isEnabled = result.isValid &#125; &#125;&#125; 对 button.isEnabled进行扩展 extension Reactive where Base: UIBarButtonItem &#123; var tapEnabled: UIBindingObserver&lt;Base, Result&gt; &#123; return UIBindingObserver(UIElement: base) &#123; button, result in button.isEnabled = result.isValid &#125; &#125;&#125; RegisterViewModel.swift input: username既是一个observable也是一个observer，所以声明为他为一个Variable(被观察者)对象 对username进行处理的应该有一个结果，结果应该是需要界面去监听来改变界面，因为处理的结果不需要是一个observer，所以我们把它声明为一个Observable类型 初始值为”” let userNameVariable = Variable&lt;String&gt;("")//usernameUseable表示对username处理的一个结果，后面userNameVariable作为 被观察的对象let passWordVariable = Variable&lt;String&gt;("")let checkPassWordVariable = Variable&lt;String&gt;("")let registerTaps = PublishSubject&lt;Void&gt;()//使用了PublishSubject，因为不需要有初始元素，其实前面的Variable都可以换成PublishSubject output let userNameUsable: Observable&lt;Result&gt;let passWordUsable: Observable&lt;Result&gt;let checkPassWordUsable: Observable&lt;Result&gt;let registerBtnEnabled: Observable&lt;Bool&gt; //注册按钮是否可用的输出，这个其实关系到username和passwordlet registerResult: Observable&lt;Result&gt; 初始化处理- 网络层 let service = ValidationService.instance 观察 –&gt; userNameVariable（input）（事件源） userNameUsable 被观察者（事件源）（就是要观察 userNameVariable）处理结果 ,然后对里面的元素进行处理之后发射对应的事件,要通过 高阶函数发出一个处理后的 队列, flatMapLatest 只会接收最新的value事件 validateUsername 监听username 返回一个Observable对象 service.validateUsername （），处理一个队列信号，再返回一个新队列信号 shareReplay(1)是因为我们要保证无论多少个Observer来监听我们这个序列，username的处理代码我们只执行一次，这一次请求结果供多有的observer去使用 userNameUsable = userNameVariable.asObservable() .flatMapLatest&#123; userNameVariable in return service.validateUsername(userNameVariable) .observeOn(MainScheduler.instance) .catchErrorJustReturn(.failed(message: "username检测出错")) &#125; .share(replay:1) 密码passWordStr作为观察者，密码文本变化，判断，返回不同的队列信号 passWordUsable = passWordVariable.asObservable() .map&#123; passWordVariable in return service.validatePassWord(passWordVariable) &#125; .share(replay:1) 密码+检测密码 2个队列信号combineLatest邻近事件一起处理 checkPassWordUsable = Observable.combineLatest(passWordVariable.asObservable(),checkPassWordVariable.asObservable())&#123; return service.validateCheckPassWord($0, checkPassWordStr: $1) &#125; .share(replay: 1) 用户名+密码+检车密码 3次队列合并–&gt;发出 是否注册成功的队列 registerBtnEnabled = Observable.combineLatest(userNameUsable, passWordUsable, checkPassWordUsable)&#123; (username,passWord,checkPassWord) in username.isValid &amp;&amp; passWord.isValid &amp;&amp; checkPassWord.isValid // 要求3个信号量均不为nil &#125; .distinctUntilChanged() //如果队列中出现相同Element，将被过滤掉 .share(replay: 1) 注册结果队列 combineLatest 合并 userNameStr 和 passWordStr 的处理结果绑定到一起—&gt;形成总的结果流 registerTaps来判断 如果满足注册条件， withLatestFrom 应该意思是 获取最新的队列信号 registerResult = registerTaps.asObserver() .withLatestFrom( Observable.combineLatest(userNameVariable.asObservable(), passWordVariable.asObservable()) &#123; ($0, $1) &#125;) .flatMapLatest&#123; // flatMapLatest 只会接收最新的value事件 (username,password) in return service.register(username, passWordStr: password) .observeOn(MainScheduler.instance) .catchErrorJustReturn(.failed(message: "注册出错")) &#125; .share(replay: 1) refer]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-特征序列Traits-Drive]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FTraits-Driver%2F</url>
    <content type="text"><![CDATA[Single基本介绍 Driver 可以说是最复杂的 trait，它的目标是提供一种简便的方式在 UI 层编写响应式代码如果我们的序列满足如下特征，就可以使用它 不会产生 error 事件 一定在主线程监听（MainScheduler） 共享状态变化（shareReplayLatestWhileConnected） 为什么要使用 Driver? Driver 最常使用的场景应该就是需要用序列来驱动应用程序的情况了 通过 CoreData 模型驱动 UI 使用一个 UI 元素值（绑定）来驱动另一个 UI 元素值 与普通的操作系统驱动程序一样，如果出现序列错误，应用程序将停止响应用户输入在主线程上观察到这些元素也是极其重要的，因为 UI 元素和应用程序逻辑通常不是线程安全的此外，使用构建 Driver 的可观察的序列，它是共享状态变化 使用样例 这个是官方提供的样例，大致的意思是根据一个输入框的关键字，来请求数据，然后将获取到的结果绑定到另一个 Label 和 TableView 中。 初学者使用 Observable 序列加 bindTo 绑定来实现这个功能的话可能会这么写： let results = query.rx.text .throttle(0.3, scheduler: MainScheduler.instance) //在主线程中操作，0.3秒内值若多次改变，取最后一次 .flatMapLatest &#123; query in //筛选出空值, 拍平序列 fetchAutoCompleteItems(query) //向服务器请求一组结果&#125; //将返回的结果绑定到用于显示结果数量的label上results .map &#123; "\($0.count)" &#125; .bind(to: resultCount.rx.text) .disposed(by: disposeBag) //将返回的结果绑定到tableView上results .bind(to: resultsTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .disposed(by: disposeBag) 但这个代码存在如下 3 个问题： 如果 fetchAutoCompleteItems 的序列产生了一个错误（网络请求失败），这个错误将取消所有绑定。此后用户再输入一个新的关键字时，是无法发起新的网络请求。 如果 fetchAutoCompleteItems 在后台返回序列，那么刷新页面也会在后台进行，这样就会出现异常崩溃。 返回的结果被绑定到两个 UI 元素上。那就意味着，每次用户输入一个新的关键字时，就会分别为两个 UI 元素发起 HTTP 请求，这并不是我们想要的结果 把上面几个问题修改后的代码是这样的： let results = query.rx.text .throttle(0.3, scheduler: MainScheduler.instance)//在主线程中操作，0.3秒内值若多次改变，取最后一次 .flatMapLatest &#123; query in //筛选出空值, 拍平序列 fetchAutoCompleteItems(query) //向服务器请求一组结果 .observeOn(MainScheduler.instance) //将返回结果切换到到主线程上 .catchErrorJustReturn([]) //错误被处理了，这样至少不会终止整个序列 &#125; .shareReplay(1) //HTTP 请求是被共享的 //将返回的结果绑定到显示结果数量的label上results .map &#123; "\($0.count)" &#125; .bind(to: resultCount.rx.text) .disposed(by: disposeBag) //将返回的结果绑定到tableView上results .bind(to: resultsTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .disposed(by: disposeBag) 虽然我们通过增加一些额外的处理，让程序可以正确运行。到对于一个大型的项目来说，如果都这么干也太麻烦了，而且容易遗漏出错 而如果我们使用 Driver 来实现的话就简单了，代码如下： 代码讲解：（1）首先我们使用 asDriver 方法将 ControlProperty 转换为 Driver。（2）接着我们可以用 .asDriver(onErrorJustReturn: []) 方法将任何 Observable 序列都转成 Driver，因为我们知道序列转换为 Driver 要他满足 3 个条件： 不会产生 error 事件 一定在主线程监听（MainScheduler） 共享状态变化（shareReplayLatestWhileConnected）而 asDriver(onErrorJustReturn: []) 相当于以下代码： let safeSequence = xs .observeOn(MainScheduler.instance) // 主线程监听 .catchErrorJustReturn(onErrorJustReturn) // 无法产生错误 .share(replay: 1, scope: .whileConnected)// 共享状态变化 return Driver(raw: safeSequence) // 封装（3）同时在 Driver 中，框架已经默认帮我们加上了 shareReplayLatestWhileConnected，所以我们也没必要再加上"replay"相关的语句了。（4）最后记得使用 drive 而不是 bindTo let results = query.rx.text.asDriver() // 将普通序列转换为 Driver .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query) .asDriver(onErrorJustReturn: []) // 仅仅提供发生错误时的备选返回值 &#125; //将返回的结果绑定到显示结果数量的label上results .map &#123; "\($0.count)" &#125; .drive(resultCount.rx.text) // 这里使用 drive 而不是 bindTo .disposed(by: disposeBag) //将返回的结果绑定到tableView上results .drive(resultsTableView.rx.items(cellIdentifier: "Cell")) &#123; // 同样使用 drive 而不是 bindTo (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .disposed(by: disposeBag) 由于 drive 方法只能被 Driver 调用。这意味着，如果代码存在 drive，那么这个序列不会产生错误事件并且一定在主线程监听。这样我们就可以安全的绑定 UI 元素]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-特征序列Traits-Maybe]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FTraits-Maybe%2F</url>
    <content type="text"><![CDATA[Maybe基本介绍 Single 是 Observable 的另外一个版本它介于 Single 和 Completable 之间，它要么只能发出一个元素，要么产生一个 completed 事件，要么产生一个 error 事件 发出一个元素、或者一个 completed 事件、或者一个 error 事件 不会共享状态变化 应用场景 Maybe 适合那种可能需要发出一个元素，又可能不需要发出的情况。 MaybeEvent 为方便使用，RxSwift 为 Maybe 订阅提供了一个枚举（MaybeEvent）： .success：里包含该 Maybe 的一个元素值 .completed：用于产生完成事件 .error：用于产生一个错误 public enum MaybeEvent&lt;Element&gt; &#123; case success(Element) case error(Swift.Error) case completed&#125; 使用样例 创建 Maybe 和创建 Observable 同样非常相似： func generateString() -&gt; Maybe&lt;String&gt; &#123; return Maybe&lt;String&gt;.create &#123; maybe in //成功并发出一个元素 maybe(.success("hangge.com")) //成功但不发出任何元素 maybe(.completed) //失败 //maybe(.error(StringError.failedGenerate)) return Disposables.create &#123;&#125; &#125;&#125; //与缓存相关的错误类型enum StringError: Error &#123; case failedGenerate&#125; 接着我们可以使用如下方式使用这个 Maybe： generateString() .subscribe &#123; maybe in switch maybe &#123; case .success(let element): print("执行完毕，并获得元素：\(element)") case .completed: print("执行完毕，且没有任何元素。") case .error(let error): print("执行失败: \(error.localizedDescription)") &#125; &#125; .disposed(by: disposeBag) 也可以使用 subscribe(onSuccess:onCompleted:onError:) 这种方式： generateString() .subscribe(onSuccess: &#123; element in print("执行完毕，并获得元素：\(element)") &#125;, onError: &#123; error in print("执行失败: \(error.localizedDescription)") &#125;, onCompleted: &#123; print("执行完毕，且没有任何元素。") &#125;) .disposed(by: disposeBag) asMaybe() 可以通过调用 Observable 序列的 .asMaybe() 方法，将它转换为 Maybe let disposeBag = DisposeBag() Observable.of("1") .asMaybe() .subscribe(&#123; print($0) &#125;) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-shareReplay]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FshareReplay%2F</url>
    <content type="text"><![CDATA[⑤shareReplaylet disposeBag = DisposeBag()let observable = Observable.just("🤣") .map&#123; print($0) &#125;observable.subscribe&#123; print("Even:\($0)") &#125; .disposed(by: disposeBag)observable.subscribe&#123; print("Even:\($0)") &#125; .disposed(by: disposeBag)//打印结果：🤣Even:next(())Even:completed🤣Even:next(())Even:completed map()函数执行了两次，但是有些时候，我们并不想让map()函数里面的东西执行两次，比如map()函数里面执行的是网络请求，我只需要执行一次请求，然后把结果提供给大家使用就行了，多余的请求会增加负担。所以这时候就需要使用shareReplay(1)了。这里面的数字一般是1，只执行一次。(ps:我改成 2，3 也只打印一次) let disposeBag = DisposeBag() let observable = Observable.just("🤣").map&#123;print($0)&#125;.shareReplay(1) observable.subscribe&#123;print("Even:\($0)")&#125;.disposed(by: disposeBag)observable.subscribe&#123;print("Even:\($0)")&#125;.disposed(by: disposeBag)//打印结果：🤣Even:next(())Even:completedEven:next(())Even:completed]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-特征序列Traits-Completable]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FTraits-Completable%2F</url>
    <content type="text"><![CDATA[Completable基本介绍 Completable 是 Observable 的另外一个版本不像 Observable 可以发出多个元素，它要么只能产生一个 completed 事件，要么产生一个 error 事件 不会发出任何元素 只会发出一个 completed 事件或者一个 error 事件 不会共享状态变化 应用场景 Completable 和 Observable 有点类似适用于那些只关心任务是否完成，而不需要在意任务返回值的情况比如：在程序退出时将一些数据缓存到本地文件，供下次启动时加载。像这种情况我们只关心缓存是否成功 CompletableEvent 为方便使用，RxSwift 为 Completable 订阅提供了一个枚举（CompletableEvent）： .completed：用于产生完成事件 .error：用于产生一个错误 public enum CompletableEvent &#123; case error(Swift.Error) case completed&#125; 使用样例 创建 Completable 和创建 Observable 非常相似下面代码我们使用 Completable 来模拟一个数据缓存本地的操作 //将数据缓存到本地func cacheLocally() -&gt; Completable &#123; return Completable.create &#123; completable in //将数据缓存到本地（这里掠过具体的业务代码，随机成功或失败） let success = (arc4random() % 2 == 0) guard success else &#123; completable(.error(CacheError.failedCaching)) return Disposables.create &#123;&#125; &#125; completable(.completed) return Disposables.create &#123;&#125; &#125;&#125; //与缓存相关的错误类型enum CacheError: Error &#123; case failedCaching&#125; 接着我们可以使用如下方式使用这个 Completable： cacheLocally() .subscribe &#123; completable in switch completable &#123; case .completed: print("保存成功!") case .error(let error): print("保存失败: \(error.localizedDescription)") &#125; &#125; .disposed(by: disposeBag) 也可以使用 subscribe(onCompleted:onError:) 这种方式： cacheLocally() .subscribe(onCompleted: &#123; print("保存成功!") &#125;, onError: &#123; error in print("保存失败: \(error.localizedDescription)") &#125;) .disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Observable可观察序列&Observer观察者]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FObservable%26Observer%2F</url>
    <content type="text"><![CDATA[Observable可观察序列 和 Observer观察者实质 Observer (观察者)订阅一个可观察序列 Observable(事件源)每一个Observable的实例都是一个序列观察者 对 Observable 发射的数据或数据序列作出响应 举例 Button 的点击这个情景 把用户一次又一次的点击 Button 看做是序列(sequence) 通过调用 subscribe 来订阅这个点击事件 每次点击都会发射一个数据 作为订阅者的 subscribe 收到这个这个数据进行某些响应 Rx 的基本概念，有Observer观察者观察一个序列sequence，每当序列发射值的时候，观察者根据序列做一些事情Observable序列相比于Swift序列的关键优势点在于它能够异步地接收元素 Observable(ObservableType)等效于Sequence observableType.subscribe(_:)方法等效于Sequence.makeIterator() ObservableType.subscribe(_:)接收一个观察者ObserverType参数,它将被订阅自动接收由可观察到的序列事件和元素，而不是在返回的生成器上手动调用next() 如果一个Observable发出一个next事件(Event.next(Element)),它还能够继续发出更多的事件但是，如果一个Observable发出一个error事件(Event.error(ErrorType))或者一个completed事件(Event.completed)，那么这个Observable序列就不能给订阅者发送其他的事件 可观察序列 (Observables aka Sequences) 可观察序列 存在三种情况:①发射数据(Next)②遇到问题(Error)③发射完成(Completed) 有限序列 比如，有这样一个序列 --1--2--3--4--5--6--| ，它发送了按顺序发送了 1 2 3 4 5 6 这些值后，就终止了，就是发射完成。这是一个有限序列也有可能因为某些特殊的情况，遇到某些错误（比如数据解析错误），--1--2--3--4--X ，因为解析错误意外终止 无限序列 比如用户点击 Button ，这个就属于无限序列 ---tap-tap-------tap---&gt; 当然这里的无限不是真的无限，是不确定用户什么时候会点击，不确定是否会继续点击。所以这是一个无限序列，每当用户点击，序列就发射一个值 将以上的三种情况统概括为事件 enum Event&lt;Element&gt; &#123; case Next(Element) // 序列的下一个元素 case Error(ErrorType) // 序列因为某些错误终止 case Completed // 正常的序列技术&#125; 观察者 (Observer) 观察者需要一个订阅序列的功能 class Observable&lt;Element&gt; &#123;func subscribe(observer: Observer&lt;Element&gt;) -&gt; Disposable&#125;protocol ObserverType &#123; func on(event: Event&lt;Element&gt;)&#125; 通过序列的这个 subscribe 来订阅序列这里就应该提到序列的“冷”“热”问题 冷：只有当有观察者订阅这个序列时，序列才发射值 热：序列创建时就开始发射值 整体上就是这样的一个关系，序列发射值，观察者订阅序列，收到值，进行处理 Obserable 创建被观察者其实就是创建一个Obserable的sequence，就是创建一个流，然后就可以被订阅subscribe，这样被观察者发出时间消失，就能做相应的处理]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-自定义operator]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2F07-09-Operator-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[自定义operator 自定义操作符很简单，官方推荐尽量使用标准的操作符，但是你也可以定义自己的操作符，文档上说有两种方法，这里介绍一下常用的一种方法吧自定义一个map操作符 extension ObserverType &#123; func myMap&lt;R&gt;(transform: E -&gt; R) -&gt; Observable&lt;R&gt; &#123; return Observable.create&#123; observer in let subscription = self.subscribe &#123;e in switch e&#123; case .next(let value): let result = transform(value) observer.on(.next(result)) case .error(let error): observer.on(.error(error)) case .completed: observer.on(.completed) &#125; &#125; return subscription &#125; &#125;&#125; 参数是一个闭包，其中闭包参数是E类型返回值是R类型，map函数的返回值是一个Observable类型。]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-UIBindingObserver]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FUIBindingObserver%2F</url>
    <content type="text"><![CDATA[UIBindingObserver UIBindingObserver这个东西很有用的，创建我们自己的监听者，有时候RxCocoa(RxSwift中对UIKit的一个扩展库)给的扩展不够我们使用，比如一个UITextField有个isEnabled属性，我想把这个isEnabled变为一个observer，我们可以这样做 extension Reactive where Base: UITextField &#123; var inputEnabled: UIBindingObserver&lt;Base, Result&gt; &#123; return UIBindingObserver(UIElement: base) &#123; textFiled, result in textFiled.isEnabled = result.isValid &#125; &#125;&#125; UIBindingObserver是一个类，他的初始化方法中，有两个参数，第一个参数是一个元素本身，第一个参数是一个闭包，闭包参数是元素本身，还有他的一个属性 public init(UIElement: UIElementType, binding: @escaping (UIElementType, Value) -&gt; Swift.Void) 自定义了一个inputEnabled关联了UITextField的isEnabled属性]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-特征序列Traits-Single]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FTraits-Single%2F</url>
    <content type="text"><![CDATA[Single基本介绍 Single 是 Observable 的另外一个版本但它不像 Observable 可以发出多个元素，它要么只能发出一个元素，要么产生一个 error 事件 发出一个元素，或一个 error 事件 不会共享状态变化 应用场景 Single 比较常见的例子就是执行 HTTP 请求，然后返回一个应答或错误不过我们也可以用 Single 来描述任何只有一个元素的序列 SingleEvent 为方便使用，RxSwift 还为 Single 订阅提供了一个枚举（SingleEvent）： .success：里面包含该 Single 的一个元素值 .error：用于包含错误 public enum SingleEvent&lt;Element&gt; &#123; case success(Element) case error(Swift.Error)&#125; 使用样例 创建 Single 和创建 Observable 非常相似下面代码我们定义一个用于生成网络请求 Single 的函数 //获取豆瓣某频道下的歌曲信息func getPlaylist(_ channel: String) -&gt; Single&lt;[String: Any]&gt; &#123; return Single&lt;[String: Any]&gt;.create &#123; single in let url = "https://douban.fm/j/mine/playlist?" + "type=n&amp;channel=\(channel)&amp;from=mainsite" let task = URLSession.shared.dataTask(with: URL(string: url)!) &#123; data, _, error in if let error = error &#123; single(.error(error)) return &#125; guard let data = data, let json = try? JSONSerialization.jsonObject(with: data, options: .mutableLeaves), let result = json as? [String: Any] else &#123; single(.error(DataError.cantParseJSON)) return &#125; single(.success(result)) &#125; task.resume() return Disposables.create &#123; task.cancel() &#125; &#125;&#125; //与数据相关的错误类型enum DataError: Error &#123; case cantParseJSON&#125; 接着我们可以使用如下方式使用这个 Single： mport UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; //获取第0个频道的歌曲信息 getPlaylist("0") .subscribe &#123; event in switch event &#123; case .success(let json): print("JSON结果: ", json) case .error(let error): print("发生错误: ", error) &#125; &#125; .disposed(by: disposeBag) &#125;&#125; 也可以使用 subscribe(onSuccess:onError:) 这种方式： import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; //获取第0个频道的歌曲信息 getPlaylist("0") .subscribe(onSuccess: &#123; json in print("JSON结果: ", json) &#125;, onError: &#123; error in print("发生错误: ", error) &#125;) .disposed(by: disposeBag) &#125;&#125; asSingle() 我们可以通过调用 Observable 序列的 .asSingle() 方法，将它转换为 Single let disposeBag = DisposeBag() Observable.of("1") .asSingle() .subscribe(&#123; print($0) &#125;) .disposed(by: disposeBag) //print success("1")]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-map和flatMap]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2Fmap%E5%92%8CflatMap%2F</url>
    <content type="text"><![CDATA[map和flatMap map函数，接收一个R类型的序列，返回一个R类型的序列，还是原来的序列。 public func map&lt;R&gt;(_ transform: @escaping (Self.E) throws -&gt; R) -&gt; RxSwift.Observable&lt;R&gt; flatMap函数，接收一个O类型的序列，返回一个O.E类型的序列，也就是有原来序列里元素组成的新序列。 public func flatMap&lt;O: ObservableConvertibleType&gt;(_ selector: @escaping (E) throws -&gt; O) -&gt; Observable&lt;O.E&gt; 实这里的map和flatMap在swift中的作用是一样的。map函数可以对原有序列里面的事件元素进行改造，返回的还是原来的序列。而flatMap对原有序列中的元素进行改造和处理，每一个元素返回一个新的sequence，然后把每一个元素对应的sequence合并为一个新的sequence序列 let disposeBag = DisposeBag() let observable = Observable.of("1","2","3","4","5").map&#123;$0 + "scott"&#125; observable.subscribe(onNext: &#123;print($0)&#125;).disposed(by: disposeBag)//打印结果：1scott2scott3scott4scott5scott 使用map对序列中每一个元素进行了处理，返回的是一个元素，而使用flatMap需要返回的序列。那么使用map也返回一个序列看看 let test = Observable.of("1", "2", "3", "4", "5") .map &#123; Observable.just($0) &#125; test.subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) // 运行结果:RxSwift.(Just in _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;Swift.String&gt;RxSwift.(Just in _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;Swift.String&gt;RxSwift.(Just in _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;Swift.String&gt;RxSwift.(Just in _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;Swift.String&gt;RxSwift.(Just in _BD9B9D4356C4038796FB16D0D54A9F8E)&lt;Swift.String&gt; 看到结果会打印出每一个序列，下面我们使用merge()方法将这几个序列进行合并: let test = Observable.of("1", "2", "3", "4", "5") .map &#123; Observable.just($0) &#125;.merge() test.subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//运行结果: 12345 并为一个新序列后我们就可以正常打印元素了。下面看看使用faltMap()函数干这件事 let test = Observable.of("1", "2", "3", "4", "5") .flatMap &#123; Observable.just($0) &#125; test.subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) //运行结果: 12345 看下对比是不是一样，这样子对比就清晰了吧。 map函数只能返回原来的那一个序列，里面的参数的返回值被当做原来序列中所对应的元素。 flatMap函数返回的是一个新的序列，将原来元素进行了处理，返回这些处理后的元素组成的新序列 map函数 + 合并函数 = flatMap函数 flatMap函数在实际应用中有很多地方需要用到，比如网络请求，网络请求可能会发生错误，我们需要对这个请求过程进行监听，然后处理错误。只要继续他返回的是一个新的序列]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Dispose和DisposeBag]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FDispose%E5%92%8CDisposeBag%2F</url>
    <content type="text"><![CDATA[Dispose 和 DisposeBag当监听一个sequence的时候，有消息事件来了，做某些事情。但是这个sequence不再发送消息事件了，那么我们的监听也就没有什么存在的价值了，所以我们需要释放我们这些监听资源，其实也就是内存资源释放 ##手动调用释放方式(一般不适用这种方式) 创建一个subscription监听，在两秒以后我们不需要了，手动调用dispose()方法，就能释放监听资源，不再打印信息。上面的subscription不论是在哪个线程中监听，就算在主线程中调用的dispose()方法一样会销毁资源 let subscription = Observable&lt;Int&gt;.interval(0.3, scheduler:SerialDispatchQueueScheduler.init(internalSerialQueueName: "scott")) .observeOn(MainScheduler.instance) .subscribe &#123; event in print (event) &#125;Thread.sleep(forTimeInterval: 2.0)subscription.dispose() //打印结果：next(0)next(1)next(2)next(3)next(4)next(5) 自动方式 创建一个disposeBag来盛放我们需要管理的资源，然后把新建的监听都放进去，会在适当的时候销毁这些资源如果需要立即释放资源只需要新建一个DisposeBag()，那么上一个DisposeBag就会被销毁 let disposeBag = DisposeBag()Observable&lt;Int&gt;.empty() .subscribe&#123; event in print (event) &#125; .addDisponseableTo(disposeBag) DisposeBag DisposeBag其实就相当于iOS中的ARC似得，会在适当的时候销毁观察者，相当于内存管理者吧]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Driver]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FDriver%2F</url>
    <content type="text"><![CDATA[Driver 官方的例子的场景大概就是，根据一个输入框的关键字，来请求数据，然后接结果绑定到另一个Label,和TableView中首先创建一个可监听序列results;将results绑定到resultCount.rx.text上;将results绑定到resultsTableView上. //throttle过滤操作let results = query.rx.text.throttle(0.3,scheduler: MainScheduler.instance)//在主线程中操作，如果0.3秒内值发生多次改变，取最后一次的值 .flatMapLatest // flatMapLatest只会接收最新的value事件 &#123; query in //筛选出空值, 拍平序列，并取得最后一个有效的值 fetchAutoCompleteItems(query) &#125; results.map &#123; "\($0.count)" &#125; //得出结果之后，取出结果的数量 .bindTo(resultCount.rx.text) //取出结果的数量，绑定到resultCount上面显示出来 .addDisposableTo(disposeBag) //释放资源 results.bindTo(resultsTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" //取出结果，TableView的Cell上面显示出来 &#125; .addDisposableTo(disposeBag) 上面程序会出现下面几个异常： 如果fetchAutoCompleteItems出错，那么它绑定的UI将不再收到任何事件消息； 如果fetchAutoCompleteItems发生在后台线程，那么它绑定的事件也将在后台线程执行，这样更新UI会造成crash； 有两次绑定，fetchAutoCompleteItems就会执行两次 当然针对以上问题，也有解决方案针对第三点，可以使用神器shareReplay(1)保证只执行一次，可以使用observeOn()保证后面所有操作在主线程完成 let results = query.rx.text .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query).observeOn(MainScheduler.instance) // 将返回结果切换到到主线程上 .catchErrorJustReturn([]) // 如果有问题，错误结果将会得到处理 &#125; .shareReplay(1) // HTTP请求将会得到分享，即两次绑定UI使用同一网络请求 results .map &#123; "\($0.count)" &#125; .bindTo(resultCount.rx.text) .addDisposableTo(disposeBag) results .bindTo(resultTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .addDisposableTo(disposeBag) 用Driver来解决 let results = query.rx .text .asDriver() .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query).asDriver(onErrorJustReturn: []) //当遇见错误需要返回什么 &#125; //不需要添加shareReplay(1) results.map &#123; "\($0.count)" &#125; .drive(resultCount.rx.text) //和bingTo()功能一样 .addDisposableTo(disposeBag) results.drive(resultTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .addDisposableTo(disposeBag) .asDriver 将‘ControlProperty’ 转换成了 ‘Driver’ query.rx_text.asDriver() ‘Driver’拥有’ControlProperty’的所有属性，同时又增加了很多属性 任何 ‘Observable’ 序列都可以被转换为’Driver’, 只要他满足一下三点： 1.不能出错 2.观察主线程 3.共享资源 如何确保这些属性都满足呢？只需要使用 ‘asDriver(onErrorJustReturn: [])’ ,相当于如下代码: let safeSequence = xs .observeOn(MainScheduler.instance) // 切换到主线程 .catchErrorJustReturn(onErrorJustReturn) // 不能出错 .shareReplayLatestWhileConnected // 共享资源 return Driver(raw: safeSequence) // 返回 最后一点要说明的是 ‘driver’ 可以代替’bindTo’,drive 只能在 Driver 中使用 drive方法只能在Driver序列中使用，Driver有以下特点： Driver序列不允许发出error， Driver序列的监听只会在主线程中。 所以Driver是专为UI绑定量身打造的东西。以下情况你可以使用Driver替换BindTo: 不能发出error; 在主线程中监听; 共享事件流;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-observeOn()和subscribeOn()]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FobserveOn()%E5%92%8CsubscribeOn()%2F</url>
    <content type="text"><![CDATA[observeOn()和subscribeOn() subscribeOn() 设置起点在哪个线程 observeOn() 置了后续工作在哪个线程 1)所有动作都发生在当前的默认线程2)observeOn()转换线程到主线程，下面所有的操作都在主线程3)subscribeOn()规定动作一开始不是发生在默认线程，而是在OtherScheduler了)-如果之前没有调用observeOn()，那么这边会在OtherScheduler发生，但是我们前面调用了observeOn()，所以这个动作会在主线程中调用subscribeOn()只是影响事件链开始默认的线程，而observeOn()规定了下一步动作发生在哪个线程中。 someObservable .doOneThing() //1 .observeOn(MainRouteScheduler.instance) // 2 .subscribeOn(OtherScheduler.instance) // 3 .subscribeNext &#123; // 4 ...... &#125; .addDisposableTo(disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Subscribe]]></title>
    <url>%2F2018%2F03%2F27%2FRxSwift%2FGrammar%2FSubscribe%2F</url>
    <content type="text"><![CDATA[subscribe 和 subscribe(onNext:) Subscribe subscribe是订阅sequence发出的事件，比如next事件，error事件等 而subscribe(onNext:)是监听sequence发出的next事件中的element进行处理，他会忽略error和completed事件 相对应的还有subscribe(onError:) 和 subscribe(onCompleted:)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Editor-3D场景编辑器]]></title>
    <url>%2F2018%2F03%2F22%2FSceneKit%2FGrammar%2FEditor-3D%E5%9C%BA%E6%99%AF%E7%BC%96%E8%BE%91%E5%99%A8%2FSceneKit-%20Base%2F</url>
    <content type="text"><![CDATA[SceneKit-Editor Xcode自带了一个简单好用的3D场景编辑器,当选中或创建一个xxx.scn文件时就会出现 1.Scene graph(场景节点树) 场景中每一个元素都显示在这里,可以拖拽树状结构的元素来控制父子关系 2.Design area(设计区) 效果呈现区,可以拖拽,旋转和缩放,也可以从对象库中拖放原始节点到这里 3.Inspectors(检查器) 和场景类型有关的检查器,检查器中的内容将根据你选中的节点不同而改变,最上方横放的有五个新的检查器 检查器 Node Inspector(节点检查器) SCNNode对象有关的属性 Attributes Inspector(属性检查器):和选中节点类型有头的检查器,如果选中的是Box,可以设置长宽高,如果是Sphere,可以设置半径 Material Inspector(材料检查器):设置节点的颜色和纹理 Physics Inspector(物理检查器):设置物理行为的配置 Scene Inspector(场景检查器):场景中所有节点都有的全局检查器,可以设置场景中的一些属性 4.Properties(属性) 检查器的内部属性 5.Object Library(对象库) 所有可用的SCNNode对象,从系统自带到用户自定义的节点都有.SCNAction对象也在这里 6.Toolbar(工具条): 包含一些重要元素,从左到右,按钮功能 按钮功能 Add/delete node(添加/删除节点) 选中节点树中的节点,添加一个子元素或者删除选中节点 Search filter(搜索过滤器) 复杂场景下用来快速搜索 Expand/collapse scene graph area(可收缩场景图表区) 打开/关闭左侧的场景图表区 Coordinate system(坐标系) 选择一个活跃坐标系来编辑你的节点,可选local,parent,world或者screen View/camera select(视点/相机选择) 当有多个相机时,可以选择相机列表中任一个活跃视点 Play/stop scene(播放/暂停场景) 播放/暂停物理和动作模拟 Expand/collapse actions(收缩动作区) 打开/关闭下面的动作区 7.Actions area(动作区) 给节点添加动作时,可以从对象库中拖放一个action到这里,就会影响被选中的节点 Basic scene navigation基础场景导航 Pan(拖动) Magic鼠标直接在滚轮处上下左右移动,触摸板用双指移动,普通鼠标按住option键拖动 Rotate(旋转) 按下左键并移动鼠标 Zoom(缩放) 按住option键使用滚轮缩放,触摸板用捏合手势 Multi-selection(多选) 按住Command单击多选 Basic node manipulation基础节点操作 以Box节点为例 Positioning(定位):拖动高亮的坐标轴,可以在坐标轴方向上移动.拖动灰色扇形区,可以沿所有平面移动Rotatation(旋转):拖动高亮的坐标轴曲线,可以旋转节点 附加操作:移动节点时,按住Command键,可放大并仔细检查位置. 旋转节点时,按住Command键,可放大并仔细检查角度. 按住Option键并拖动,可复制一个共享属性的副本,就是说对原本做的属性更改操作将影响副本.如果想取消共享属性,取消按钮在属性检查器中几何体共享分类下面. xxx.scn文件的加载 scnScene = SCNScene(named: "B.scnassets/Scenes/Game.scn")scnView.scene = scnScene]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Editor</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Protocol协议-基础]]></title>
    <url>%2F2018%2F03%2F21%2FSwift%2FGrammar%2FProtocol%E5%8D%8F%E8%AE%AE-Base%2F</url>
    <content type="text"><![CDATA[相关资料1相关资料2相关资料3 1.Protocol 1.1Protocol语法 1.2格式 1.3对属性的使用 1.4方法要求 1.5Mutating方法要求 1.6使用协议规范构造函数 1.7协议类型2.委托/代理设计模式3.协议的使用 3.1在扩展中添加协议成员 3.2通过扩展补充协议声明 3.3集合中的协议类型 3.4仅在类中使用协议4.协议的继承 4.1protocolComposition协议的合成 4.2检验协议的一致性 4.3可选协议要求 Protocol 协议：代理设计模式 协议能够被 类、枚举、结构体 实现，满足协议要求的类、枚举、结构体被称为协议的是实现者 官方的定义：协议定义了一个蓝图 ， 规定了用来实现某一特定工作或者功能所必须的方法和属性，类、结构体、或者枚举类型都可以遵循协议， 并提供具体实现来完成协议定义的方法和功能 。 任意能够满足协议要求的类型都被成为遵循了这个协议 Protocol语法 格式 在类、枚举、结构体的名称后加上协议名称，中间以冒号(:)分隔，即可实现协议，当实现多个协议时，多个协议间用逗号(,)隔开 类含有父类,则应当将父类放在所有的协议之前 协议实现书写格式 class 类名 : 协议1 , 协议n&#123;&#125;class 类名:父类,协议1,协议n&#123;&#125; 对属性的使用 无论声明的属性为类属性还是对象属性，均需要在属性声明后加上{get}或{get set}，代表属性只读或读写 属性被声明为{get}，为可读的属性实现{setter}方法，也不会报错。 在声明类属性时，需要在声明的属性前添加关键字static。 在实现者内，必须实现协议的类属性的getter方法，如果协议内定义的类属性是读写的，则还必须实现setter方法 在协议中使用类型属性 总是使用static 协议1 protocol oneProtocol&#123; // 定义变量，必须在属性声明后添加&#123;get&#125;或者&#123;get set&#125; var argumentOne:Int&#123;get&#125; // 只读 var argumentTwo:Int&#123;get set&#125; // 读写 static var argumentClass:Int&#123;get&#125;&#125; 类 class Person:oneProtocol&#123; var argumentOne: Int var argumentTwo: Int static var argumentClass: Int&#123; get&#123; return 30 &#125; &#125; init(argumentOne:Int,argumentTwo:Int) &#123; self.argumentOne = argumentOne self.argumentTwo = argumentTwo &#125;&#125;var per = Person(argumentOne: 90, argumentTwo: 1)print("\(per.argumentOne)") // 90print("\(Person.argumentClass)") // 30 协议2 protocol Pro1&#123; var name:String&#123;set get&#125; //可读可写 var age:Int &#123; get &#125; //只读属性 static var status:Int &#123;set get&#125; &#125; 遵循协议 struct Struct1 : Pro1 &#123; private var _name = "" var name:String &#123; set&#123; _name = newValue &#125; get&#123; return _name &#125; &#125; var age = 18 //可以声明为可读可写的 static var status = 1 //类型方法。&#125;class Class1: Pro1 &#123; var name = "class" var age:Int&#123; return 19 &#125; //也可以是只读 static var status = 0&#125; 方法要求 协议内声明的方法不需要协议进行方法的实现(OC差不多) 类方法，需要使用关键字 static protocol funcProtocol&#123; func sayHello() static func sayBad()&#125;class Person:funcProtocol&#123; func sayHello() &#123; print("Hello") &#125; static func sayBad() &#123; print("Bad") &#125;&#125; Mutating方法要求 能在方法或者函数内部改变字段的方法称为Mutating方法。 mutating关键字表示该函数允许改变该示例和其属性的类型。 一般mutating用在值拷贝的地方，例如：结构体、枚举。对于类或者类绑定协议中的方法无效 protocol Togglable&#123; mutating func toggle()&#125;enum OnOffSwitch:Togglable&#123; case On,Off mutating func toggle() &#123; switch self &#123; case .Off: self = .On case .On: self = .Off &#125; &#125;&#125;var light = OnOffSwitch.Off //Offlight.toggle() // Onstruct OnOFF:Togglable&#123; var one:Int var two:Int mutating func toggle() &#123; if self.one &gt; 10 &#123; self.two = 30 &#125;else&#123; self.two = 20 &#125; &#125;&#125;var LIGHT = OnOFF(one: 2, two: 3)print("\(LIGHT.two)") // 3LIGHT.toggle()print("\(LIGHT.two)") // 20 使用协议规范构造函数 协议可以规定必须实现指定的构造函数，比如一些类中必须要求实现init构造函数，这样就可以制造一个协议，让实现协议的类必须实现该构造函数。 实现构造协议的类，必须使用关键字required protocol TwoProtocol&#123; init(twoArgument:Int)&#125;class two:TwoProtocol&#123; required init(twoArgument: Int) &#123; &#125;&#125; 父类中存在与协议内相同的构造方法，则子类在实现构造方法时，需要同时使用关键字required和override protocol TwoProtocol&#123; init()&#125;class TwoSuperClass&#123; init() &#123; &#125;&#125;class Two:TwoSuperClass,TwoProtocol&#123; required override init() &#123; &#125;&#125; 不能在final类中实现构造函数协议，因为final类是不能被继承的，因此不能实现构造函数协议 父类内被final修饰的方法与协议内相同，则该方法不能被遵循协议的子类实现 protocol TwoProtocol&#123; func say()&#125;class TwoSuperClass&#123; final func say()&#123; print("Super Say Hello") &#125;&#125;class Two:TwoSuperClass,TwoProtocol&#123; // 无法实现say方法&#125; 协议类型 协议本身不实现任何功能，但是可以将它当作类型来使用。 协议作为类型使用的场景： ⒈作为函数、方法或构造器中的参数类型，返回值类型。 ⒉作为常量、变量、属性的类型。 ⒊作为数组、字典或其它容器中的元素类型 委托/代理设计模式 委托/代理是一种设计模式，它允许类或者结构体将一些需要它们负责的功能交由给其他类型。 委托模式的实现：定义协议来封装那些需要被委托的函数和方法，使实现者拥有数据源的类型 协议的使用 在扩展中添加协议成员 当无法修改原代码时，可以通过扩展来补充已经存在的类型。 扩展可以为已经存在的类型添加属性、方法、下标、协议等成员。 通过扩展为已存在的类型实现协议时，该类型的所有实例也会随之添加协议中的方法 protocol TextProtocol&#123; func printSomeMessage(message:String)&#125;class Dice&#123;&#125;]extension Dice:TextProtocol&#123; func printSomeMessage(message: String) &#123; print("\(message)") &#125;&#125;let dic = Dice()dic.printSomeMessage(message: "hello"); 通过扩展补充协议声明 当一个类型已经实现了协议中的所有要求，却没有声明时，可以通过扩展补充协议的声明。 protocol TextProtocol&#123; func printSomeMessage(message:String)&#125;struct Hamster&#123; func printSomeMessage(message: String) &#123; print("\(message)") &#125;&#125;extension Hamster:TextProtocol&#123; // 此时，Hamster的实例也可以作为TextProtocol类型使用&#125;let hamster = Hamster() 集合中的协议类型 协议也可以作为类型在集合中被使用，表示集合中的元素均为协议类型 let things:[TextProtocol] = [dic,hamster]for thing in things &#123; thing.printSomeMessage(message: "Hello Word")&#125;// 由于thing被当作是TextProtocol类型，故都能调用printSomeMessage方法 仅在类中使用协议 通过在协议中增加class关键字，可以实现协议只让类来实现。 如果该协议同时继承其它协议，则需要在class后添加，并且用逗号隔开 protocol SomeOnlyClassProtocol:class&#123;&#125;// 协议SomeOnlyClassProtocol实现者只能是类 协议的继承 协议可以继承一个或者多个其他协议，多个协议间用逗号隔开。 当类或者枚举等遵循协议时，不仅仅要实现当前协议的方法，也需要实现所遵循协议继承的其他协议 protocol OneProtocol&#123; func sayOne()&#125;// 协议的继承protocol TwoProtocol:OneProtocol&#123; func sayTwo()&#125;class Person:TwoProtocol&#123; func sayOne() &#123; // 协议OneProtocol的方法 &#125; func sayTwo() &#123; // 协议TwoProtocol的方法 &#125;&#125; protocolComposition协议的合成 一个协议可以由多个协议采用protocol这样的格式进行组合，称之为协议的合成(protocol composition)。 协议合成并不会产生一个新的协议，而是将多个协议合成一个临时的协议，超出范围后立即失效 protocol NamedProtocol&#123; var name:String&#123;get set&#125;&#125;protocol GenderProtocol&#123; var gender:String&#123;get set&#125;&#125;protocol AgedProtocol&#123; var age:Int&#123;get&#125;&#125;struct Person:NamedProtocol,GenderProtocol,AgedProtocol&#123; var name: String var gender: String var age: Int&#125;func wishBirthday(celebrator:NamedProtocol &amp; GenderProtocol)&#123; print("姓名：\(celebrator.name)，性别：\(celebrator.gender)")&#125;var per = Person(name: "wang", gender: "man",age:20)wishBirthday(celebrator: per)// 形参celebrator的类型为protocol&lt;NamedProtocol,GenderProtocol&gt;，可以传入任何实现这两个协议的实例。即使此实例不仅仅遵循这两个协议。// swift3.0之后，protocol&lt;NamedProtocol,GenderProtocol&gt;被NamedProtocol &amp; GenderProtocol替换。 检验协议的一致性 用is检验协议的一致性，使用as将协议类型向下转换为其他协议类型。 is操作符用来检查实例是否实现了某个协议。返回值true/false。 as?返回一个可选值，当实例实现协议时，返回该协议类型；否则返回nil。 as用以强制向下转化类型。 @objc用来表示协议时可选的，还可以表示暴露给Objective-C的代码，。 @objc型协议只对类有效，因此只能在类中检查协议的一致性。 @objc protocol HasArea&#123; var area:Double&#123;get&#125;&#125;class Circle:HasArea&#123; let pi = 3.1415927 var radius:Double var area: Double&#123; return pi * radius * radius &#125; init(radius:Double) &#123; self.radius = radius &#125;&#125;class Country:HasArea&#123; var area: Double init(area:Double) &#123; self.area = area &#125;&#125;class Animal&#123; var legs:Int init(legs:Int) &#123; self.legs = legs &#125;&#125;let objects:[AnyObject] = [ Circle(radius: 20), Country(area: 200), Animal(legs: 10)]for object in objects &#123; var objectWithArea = object as? HasArea if objectWithArea != nil &#123; print("\(objectWithArea)") print("遵循了HasArea协议，\(object.area)") &#125;else&#123; print("没有遵循HasArea协议") &#125;&#125;print("--------------------")for object in objects &#123; // 返回值 true/false var objectWithArea = object is HasArea if objectWithArea &#123; print("\(objectWithArea)") print("遵循了HasArea协议，\(object.area)") &#125;else&#123; print("没有遵循HasArea协议") &#125;&#125;/**打印结果：Optional(__lldb_expr_386.Circle)遵循了HasArea协议，Optional(1256.63708)Optional(__lldb_expr_386.Country)遵循了HasArea协议，Optional(200.0)没有遵循HasArea协议--------------------true遵循了HasArea协议，Optional(1256.63708)true遵循了HasArea协议，Optional(200.0)没有遵循HasArea协议*/ ##可选协议要求 可选协议含有可选成员，其实现者可以选择是否实现这些成员。 在协议中使用关键字optional关键字作为前缀来定义可选成员 @objc protocol HasArea&#123; @objc optional var area:Double&#123;get&#125; var width:Double&#123;get&#125;&#125;class Circle:HasArea&#123; let pi = 3.1415927 var radius:Double = 10.0 var width: Double = 20.0&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>Protocol</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-GCD-多请求并发]]></title>
    <url>%2F2018%2F03%2F20%2FOC%2FGCD%2FGCD-%E5%A4%9A%E8%AF%B7%E6%B1%82%E5%B9%B6%E5%8F%91%2F</url>
    <content type="text"><![CDATA[GCD 方式// 创建信号量 dispatch_semaphore_t semaphore = dispatch_semaphore_create(0); // 创建全局并行 dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); dispatch_group_t group = dispatch_group_create(); dispatch_group_async(group, queue, ^&#123; // 请求一 [loginCode getUserInfoWithNick:nil andUserId:kUserId onSuc:^(id data) &#123; NSLog(@&quot;yue&quot;); dispatch_semaphore_signal(semaphore); &#125; andFail:^(NSError *error) &#123; &#125;]; &#125;); dispatch_group_async(group, queue, ^&#123; // 请求二 [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123; NSLog(@&quot;duihuan11&quot;); dispatch_semaphore_signal(semaphore); &#125; onFailure:^(NSError *error) &#123; &#125;]; &#125;); dispatch_group_async(group, queue, ^&#123; // 请求三 [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123; NSLog(@&quot;duihuan22&quot;); dispatch_semaphore_signal(semaphore); &#125; onFailure:^(NSError *error) &#123; &#125;]; &#125;); dispatch_group_notify(group, queue, ^&#123; // 三个请求对应三次信号等待 dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); //在这里 进行请求后的方法，回到主线程 dispatch_async(dispatch_get_main_queue(), ^&#123; //更新UI操作 &#125;); &#125;); 通过请求数量计数 定义一个block typedef void(^Complete)(); 将block作为类的属性 @property (copy, nonatomic) Complete complete; 实现方式： NSInteger requestCount = 0; //第一个网络请求 [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123; NSLog(@&quot;duihuan11&quot;); requestCount++; if (self.complete) &#123; self.complete(); &#125; &#125; onFailure:^(NSError *error) &#123; &#125;]; //第二个网络请求 [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123; NSLog(@&quot;duihuan22&quot;); requestCount++; if (self.complete) &#123; self.complete(); &#125; &#125; onFailure:^(NSError *error) &#123; &#125;]; //第三个网络请求 [CommodityViewModel getPriceTransformForIntegral:nil onSuccess:^(id data) &#123; NSLog(@&quot;duihuan33&quot;); requestCount++; if (self.complete) &#123; self.complete(); &#125; &#125; onFailure:^(NSError *error) &#123; &#125;]; self.complete = ^&#123; //请求网络的数量等于3表示三个网络请求已完成 if (requestCount == 3) &#123; //在这里 进行请求后的方法，回到主线程 dispatch_async(dispatch_get_main_queue(), ^&#123; //更新UI操作 &#125;); &#125; &#125;;]]></content>
      <categories>
        <category>OC</category>
        <category>GCD</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-debug调试操作]]></title>
    <url>%2F2018%2F03%2F20%2FRxSwift%2FGrammar%2FOperators-debug-%E8%B0%83%E8%AF%95%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[①debug基本介绍 我们可以将 debug 调试操作符添加到一个链式步骤当中，这样系统就能将所有的订阅者、事件、和处理等详细信息打印出来，方便我们开发调试 使用样例let disposeBag = DisposeBag() Observable.of("2", "3") .startWith("1") .debug() .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) debug() 方法还可以传入标记参数 当项目中存在多个 debug 时可以很方便地区分出来 let disposeBag = DisposeBag() Observable.of("2", "3") .startWith("1") .debug("调试1") .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) ②RxSwift.Resources.total基本介绍 通过将 RxSwift.Resources.total 打印出来，我们可以查看当前 RxSwift 申请的所有资源数量。这个在检查内存泄露的时候非常有用 使用样例print(RxSwift.Resources.total) let disposeBag = DisposeBag() print(RxSwift.Resources.total) Observable.of("BBB", "CCC") .startWith("AAA") .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) print(RxSwift.Resources.total)//print02AAABBB3 ③retry基本介绍 使用该方法当遇到错误的时候，会重新订阅该序列。比如遇到网络请求失败时，可以进行重新连接。retry() 方法可以传入数字表示重试次数。不传的话只会重试一次 使用样例let disposeBag = DisposeBag()var count = 1 let sequenceThatErrors = Observable&lt;String&gt;.create &#123; observer in observer.onNext("a") observer.onNext("b") //让第一个订阅时发生错误 if count == 1 &#123; observer.onError(MyError.A) print("Error encountered") count += 1 &#125; observer.onNext("c") observer.onNext("d") observer.onCompleted() return Disposables.create()&#125; sequenceThatErrors .retry(2) //重试2次（参数为空则只重试一次） .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag)运行结果如下： //printabError eccounteredabcd]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-关键字-typealias/associatedtype]]></title>
    <url>%2F2018%2F03%2F07%2FSwift%2FGrammar%2F%E5%85%B3%E9%94%AE%E5%AD%97-typealias%3Aassociatedtype%2F</url>
    <content type="text"><![CDATA[wenz]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Lib-Moya-网络封装(RxSwift)]]></title>
    <url>%2F2018%2F03%2F07%2FRxSwift%2FLib%2FMoya%20-%E7%BD%91%E7%BB%9C%E5%B0%81%E8%A3%85(RxSwift)%2F</url>
    <content type="text"><![CDATA[参考01参考02 ①Moya Swift我们用Alamofire来做网络库.而Moya在Alamofire的基础上又封装了一层官方说moya有以下特性: 编译时检查正确的API端点访问. 使你定义不同端点枚举值对应相应的用途更加明晰. 提高测试地位从而使单元测试更加容易. ②开始❶创建枚举API 首先创建一个 enum 来枚举你所有的 API targets关于这个API的信息放在这个枚举类型中 enum APIManager &#123; case getNewsLatest //获取最新消息 case getStartImage //启动界面图像获取 case getVersion(String) //软件版本查询 case getThemes //主题日报列表查看 case getNewsDetail(Int) //获取新闻详情 case create(title: String, body: String, userId: Int)&#125; ❷实现TargetType协议 在这里,可以设置请求的参数,例如url……method……para等. extension APIManager: TargetType &#123;&#125; /// The target's base `URL`.var baseURL: URL &#123; return URL.init(string: "http://news-at.zhihu.com/api/")!&#125;/// The path to be appended to `baseURL` to form the full `URL`.var path: String &#123; switch self &#123; case .getNewsLatest: return "4/news/latest" case .getStartImage: //start-image 后为图像分辨率，接受任意的 number*number 格式， number 为任意非负整数，返回值均相同。 return "4/start-image/1080*1776" case .getVersion(let version): //URL 最后部分的数字代表所安装『知乎日报』的版本 return "4/version/ios/" + version case .getThemes: return "4/themes" case .getNewsDetail(let id): return "4/news/\(id)" &#125;&#125;/// The HTTP method used in the request.// 设置Get、POSTvar method: Moya.Method &#123; return .get&#125;/// The parameters to be incoded in the request.var parameters: [String: Any]? &#123; return nil&#125;/// The method used for parameter encoding.var parameterEncoding: ParameterEncoding &#123; return URLEncoding.default&#125;/// Provides stub data for use in testing.var sampleData: Data &#123; return "".data(using: String.Encoding.utf8)!&#125;/// The type of HTTP task to be performed.var task: Task &#123; return .request&#125;/// Whether or not to perform Alamofire validation. Defaults to `false`.var validate: Bool &#123; return false&#125; ❸使用 Moya的使用非常简单，通过TargetType协议定义好每个target之后，就可以直接使用Moya开始发送网络请求了。就像这样 let provider = MoyaProvider&lt;APIManager&gt;()provider.request(.getNewsLatest) &#123; result in// do something with result&#125; ❹❺ ③配合RxSwift Moya提供了非常方面的RxSwift扩展 let provider = RxMoyaProvider&lt;APIManager&gt;()provider.request(.getNewsLatest) .filterSuccessfulStatusCodes() .mapJSON() .subscribe(onNext: &#123; (json) in //do something with posts print(json) &#125;) .addDisposableTo(disposeBag) RxMoyaProvider 是MoyaProvider的子类，是对RxSwift的扩展 filterSuccessfulStatusCodes() 是Moya为RxSwift提供的扩展方法，可以得到成功地网络请求，忽略其他的 mapJSON() 是Moya RxSwift的扩展方法，可以把返回的数据解析成 JSON 格式 subscribe 是一个RxSwift的方法,对经过一层一层处理的 Observable 订阅一个 onNext 的 observer，一旦得到 JSON 格式的数据，就会经行相应的处理 addDisposableTo(disposeBag) 是 RxSwift 的一个自动内存处理机制，跟ARC有点类似，会自动清理不需要的对象 ④配合HandyJSON ❶网络请求紧密连接着数据层（Model），具体地说，一般需要建立一个类用来统一管理数据，然后把得到的 JSON 数据映射到数据层（Model） struct MenuModel: HandyJSON &#123; var others: [ThemeModel]?&#125;struct ThemeModel: HandyJSON &#123; var color: String? var thumnail: String? var id: Int? var description: String? var name: String? ❷创建ViewModel类,创建具体请求方法 class MenuViewModel &#123; private let provider = RxMoyaProvider&lt;APIManager&gt;() var dispose = DisposeBag() func getThemes(completed: @escaping (_ menuModel: MenuModel) -&gt;())&#123; provider.reuest(.getThemes) .mapModel(MenuModel.self) .subscribe( onNext: &#123; (model) in completed(model)&#125;, onError:&#123; (error) in &#125;, onCompleted:nil, onDisposed:nil, ) .addDisposableTo(dispose) &#125;&#125; 这里是将请求的数据通过闭包传了出去,当然也可以不那么做.个人喜好问题.这里是为 RxSwift 中的 ObservableType和 Response写一个简单的扩展方法 mapModel，利用我们写好的Model 类，一步就把JSON数据映射成 model extension ObservableType where E == Response &#123; public func mapModel &lt;T: HandyJSON&gt;(_ type: T.Type)-&gt; Observable&lt;T&gt; &#123; return flatMap &#123; response -&gt; Observable&lt;T&gt; in return Observable.just(response.mapModel(T.self)) &#125; &#125; &#125; extension Response &#123; func mapModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123; let jsonString = String.init(data: data,encoding: .utf8) return JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString)! &#125; &#125; #⑤配合ObjectMapper ##❷❶创建model类 class DetailModel: Mappable &#123; var body = String() var image_source: String? var title = String() var image: String? var share_url = String() var js = String() var recommenders = [[String: String]]() var ga_prefix = String() var section: DetailSectionModel? var type = Int() var id = Int() var css = [String]() func mapping(map: Map) &#123; body &lt;- map["body"] image_source &lt;- map["image_source"] title &lt;- map["title"] image &lt;- map["image"] share_url &lt;- map["share_url"] js &lt;- map["js"] recommenders &lt;- map["recommenders"] ga_prefix &lt;- map["ga_prefix"] section &lt;- map["section"] type &lt;- map["type"] id &lt;- map["id"] css &lt;- map["css"] &#125; reuired init?(map: Map) &#123; &#125;&#125; ❷使用 ObjectMapper ，需要让自己的 Model 类使用 Mappable 协议，这个协议包括两个方法： required init?(map: Map) &#123;&#125;func mapping(map: Map) &#123;&#125;//在 mapping 方法中，用 &lt;- 操作符来处理和映射你的 JSON数据 ❸数据类建立好之后，还需要为 RxSwift 中的 Observable 写一个简单的扩展方法 mapObject，利用写好的model 类，一步就把JSON 数据映射成一个个 model extension Observable &#123; func mapObject&lt;T: Mappable&gt;(type: T.Type) -&gt; Observale&lt;T&gt; &#123; return self.map &#123; response in //if response is a dictionary, then use ObjectMapper to map the dictionary //if not throw an error guard let dict = response an? [String: Any] else &#123; thow RxSwiftMoyaError.ParseJSONError &#125; return Mapper&lt;T&gt;().map(JSON: dict)! &#125; &#125; func mapArray&lt;T: Mappable&gt;(type: T.Type) -&gt; Observale&lt;[T]&gt; &#123; return self.map &#123; response in //if response is an array of dictionaries, then use ObjectMapper to map the dictionary //if not, throw an error guard let array = response as? [Any] else &#123; thow RxSwiftMoyaError.ParseJSONError &#125; guard let dicts = array as? [[String: Any]] else &#123; thow RxSwiftMoyaError.ParseJSONError &#125; guard let dicts = array as? [[String: Any]] else &#123; thow RxSwiftMoyaError.ParseJSONError &#125; return Mapper&lt;T&gt;().mapArray(JSONArray: dicts)! &#125; &#125; &#125; enum RXSwiftMoyaError: String &#123; case ParaseJSONError case OtherError &#125; extension RxSwiftMoyaError: Swift.Error &#123; &#125; mapObject 方法处理单个对象，mapArray 方法处理对象数组 果传进来的数据 response 是一个 dictionary，那么就利用 ObjectMapper 的 map方法映射这些数据，这个方法会调用你之前在 mapping方法里面定义的逻辑 如果 response 不是一个 dictionary， 那么就抛出一个错误 在底部自定义了简单的Error，继承了Swift 的 Error类，在实际应用过程中可以根据需要提供自己想要的 Error ❹运行请求方法 calss DetailViewModel &#123; private let provider = RxMoyaProvider&lt;APIManager&gt;() func getNewsDetail(id: Int) -&gt; Observable&lt;DetailModel&gt; &#123; return provider.request(.getNewDetail(id)) .filterSuccesssfulStatusCodes() .mapJSON() .mapObject(type: DetailModel.self) &#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Lib</category>
        <category>Moya</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RxSwift + ReactorKit 构建信息流框架]]></title>
    <url>%2F2018%2F03%2F07%2FRxSwift%2FError%2FRxSwift-Error%2F</url>
    <content type="text"></content>
      <categories>
        <category>Swift</category>
        <category>RxSwift</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Lib-Moya]]></title>
    <url>%2F2018%2F03%2F07%2FRxSwift%2FLib%2FRxSwift-Lib-Moya%2F</url>
    <content type="text"><![CDATA[关于moya Moya在Alamofire的基础上又封装一层 moya有以下特性 编译时检查正确的API端点访问. 使你定义不同端点枚举值对应相应的用途更加明晰. 提高测试地位从而使单元测试更加容易 枚举APIenum APIManaager &#123; case getNewsLatest //获取最新消息 case getStartImage // 启动界面图像获取 case getVersion(String)//软件版本查询 case getThemes //主题日报列表查看 case getNewsDetail(Int)//获取新闻详情&#125; 实现TargetType协议extension APIManager: TargetType &#123; // base URL var baseURL: URL &#123; return URL.init(string: "http://news-at.zhihu.com/api/")! &#125; // 请求路径 var path: String &#123; switch self &#123; case .getNewsLatest: return "4/news/latest" case .getStartImage: //start-image 后为图像分辨率，接受任意的 number*number 格式， number 为任意非负整数，返回值均相同。 return "4/start-image/1080*1776" case .getVersion(let version): //URL 最后部分的数字代表所安装『知乎日报』的版本 return "4/version/ios/" + version case .getThemes: return "4/themes" case .getNewsDetail(let id): return "4/news/\(id)" &#125; &#125; // The HTTP method used in the request var method: Moya.Method &#123; return .get &#125; // The parameters to be incoded in the request. var parameters: [String: Any]? &#123; return nil &#125; // The method used for parameter encoding. var parameterEncoding: ParameterEncoding &#123; return URLEncoding.default &#125; // Provides stub data for use in testing. var sampleData: Data &#123; return "".data(using: String.Encoding.utf8)! &#125; // The type of HTTP task to be performed. var task: Task &#123; return .request &#125; // Whether or not to perform Alamofire validation. Defaults to `false`. var validate: Bool &#123; return false &#125; &#125; #使用 Moya的使用非常简单，通过TargetType协议定义好每个target之后，就可以直接使用Moya开始发送网络请求了 let provider = MoyaProvider&lt;APIManager&gt;() provider.request(.getNewsLatest) &#123; result in // do something with result &#125; 配合RxSwiftlet provider = RxMoyaProvider&lt;APIManager&gt;() provider.request(.getNewsLatest) .filterSuccessfulStatusCodes() .mapJSON() .subscribe(onNext: &#123; (json) in //do something with posts print(json) &#125;) .addDisposableTo(disposeBag) RxMoyaProvider是MoyaProvider的子类，是对RxSwift的扩展 filterSuccessfulStatusCodes()是Moya为RxSwift提供的扩展方法，顾名思义，可以得到成功地网络请求，忽略其他的 mapJSON()也是Moya RxSwift的扩展方法，可以把返回的数据解析成 JSON 格式 subscribe 是一个RxSwift的方法，对经过一层一层处理的 Observable 订阅一个 onNext 的 observer，一旦得到 JSON 格式的数据，就会经行相应的处理 addDisposableTo(disposeBag) 是 RxSwift 的一个自动内存处理机制，跟ARC有点类似，会自动清理不需要的对象 配合HandyJSON 在实际应用过程中网络请求往往紧密连接着数据层（Model），具体地说，在我们的这个例子中，一般我们需要建立一个类用来统一管理数据，然后把得到的 JSON 数据映射到数据层（Model） struct MenuModel: HandyJSON &#123;var others: [ThemeModel]? &#125; struct ThemeModel: HandyJSON &#123; var color: String? var thumbnail: String? var id: Int? var description: String? var name: String?&#125; 创建ViewModel类,创建具体请求方法: class MenuViewModel &#123; private let provider = RxMoyaProvider&lt;APIManager&gt;()var dispose = DisposeBag() func getThemes(completed: @escaping (_ menuModel: MenuModel) -&gt; ())&#123; provider.request(.getThemes).mapModel(MenuModel.self).subscribe(onNext: &#123; (model) in completed(model)&#125;, onError: &#123; (error) in &#125;, onCompleted: nil, onDisposed: nil).addDisposableTo(dispose) &#125; &#125; 将请求的数据通过闭包传了出去,当然也可以不那么做.个人喜好问题..这里是为 RxSwift 中的 ObservableType和 Response写一个简单的扩展方法 mapModel，利用我们写好的Model 类，一步就把JSON数据映射成 model extension ObservableType where E == Response &#123;public func mapModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; Observable&lt;T&gt; &#123;return flatMap &#123; response -&gt; Observable&lt;T&gt; inreturn Observable.just(response.mapModel(T.self))&#125;&#125;&#125; extension Response &#123;func mapModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123;let jsonString = String.init(data: data, encoding: .utf8)return JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString)!&#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>RxSwift</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Lib-Reusable-优雅地使用ReusableIdentifier]]></title>
    <url>%2F2018%2F03%2F02%2FSwift%2FLib%2FReusable%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8ReusableIdentifier%2F</url>
    <content type="text"><![CDATA[cell的重用机制与标示符 苹果为了保准UITableView视图的性能，使用了cell的重用机制，cell可以通过重用标示符（reusableIdentifier）进行复用，默认的注册cell和获取cell的方法中，需要传入一个字符串作重用标示符但这种方式很容易出错，而且使用起来也相当别扭，一种普遍的解决方式，就是直接只用类名作为重用标示符: tableView.registerClass(UITableView.self,forCellReuseIdentifier:String(UITableViewCell.self))tableView.dequeueReusableCellWithIdentifier(String(UITableViewCell.self)) 这种写法依然繁琐，每次传入一个类并把它转化成字符串so,可借助Swift的泛型特性，我们可以有更加优雅的实现方式 使用协议 使用泛型来优化 TableView Cells 的使用体验详细介绍了如何通过协议+泛型的方式，优化TableView Cells 的使用体验 具体的做法很简单: ❶协议 //声明了一个协议protocol Reusable: class &#123; static var reuseIdentifier: String &#123; get &#125;&#125;//提供并默认实现了一个reuseIdentifier静态属性extension Reusable &#123; static var reuseIdentifier: String &#123; return String (Self) &#125;&#125; ❷提供一个注册和获取重用cell的方法这样只要cell遵守了Reusable协议，就可以通过上面两个方法注册复用cell了。具体的代码和使用使用泛型来优化 TableView Cells 的使用体验 func registerReusableCell&lt;T: UITableViewCell where T: Reusable&gt;(_: T.Type) &#123; self.registerClass(T.self, forCellReuseIdentifier: T.reuseIdentifier) &#125; func dequeueReusableCell&lt;T: UITableViewCell where T: Reusable&gt;(indexPath indexPath: NSIndexPath) -&gt; T &#123; return self.dequeueReusableCellWithIdentifier(T.reuseIdentifier, forIndexPath: indexPath) as! T &#125; cell必须遵守了Reusable协议，虽然通过让UITableViewCell遵守这个协议的方式，避免每个UITableViewCell子cell都写一遍，但这依然还不是最理想的解决方式。最理想的解决方式，应该是只需要调用方法，不需要UITableViewCell做任何修改，为此我们可以使用结构体，而非协议来实现 使用结构体 使用泛型定义一个ReusableIdentifier结构体，有一个identifier的不变量 public struct ReusableIdentifier &lt;T: UIView&gt; &#123; let identifier: string init () &#123; identifier = String(T.Self) &#125;&#125; 注册的时候就非常简单 tableview.register(UITableViewCell.self) 同样的，可以为UITableView实现一个dequeue方法 @warn_unused_result func dequeue&lt;T: UICollectionViewCell&gt;(indexPath: NSIndexPath) -&gt; T &#123; let rid = ReusableIdentifier&lt;T&gt;() guard let cell = dequeueReusableCellWithReuseIdentifier(rid.identifier, forIndexPath: indexPath) as? T else &#123; assertionFailure("No identifier(\(rid.identifier)) found for \(T.self)") return T.init() &#125; return cell&#125; 使用的时候只需要指定cell的类型，传入indexPath即可 let cell: UITableViewCell = tableview.dequeue(indexPath) 通过引入一个结构体，利用泛型特性，不需要对已有的类型做任何修改，只需要替换注册和复用cell时调用的方法，我们就可以非常优雅的复用Tableview Cell。 参考上面的方法，我们可以借助ReusableIdentifier结构体，为UICollectionView实现相应的方法]]></content>
      <categories>
        <category>Swift</category>
        <category>Lib</category>
        <category>Reusable</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>Lib</tag>
        <tag>Reusable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift + ReactorKit 构建信息流框架]]></title>
    <url>%2F2018%2F03%2F02%2FRxSwift%2FFunc%2FRxSwift%20%2B%20ReactorKit%20%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF%E6%B5%81%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[https://www.jianshu.com/p/dff7b0368d2b]]></content>
      <categories>
        <category>Swift</category>
        <category>RxSwift</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Lib-Then协议库-初始化方式]]></title>
    <url>%2F2018%2F03%2F02%2FSwift%2FLib%2FThen%E5%8D%8F%E8%AE%AE%E5%BA%93-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[写法对比 普通的写法，先看通过Block创建对象的写法优点：代码整合在一个闭包里面，可读性强 let _ = &#123; () -&gt; UILabel in let label = UILab() view.addSubview(label) label.text = "myLabel" label.font = UIFont.systemFont(ofSize: 18) label.center = self.view.center label.bounds = CGRect.init(x : 0, y : 0, width : 100, height : 50) return label &#125;() 在Block外初始化一个对象，再传进闭包进行设值，统一用$0取参数对象，不用再去烦如何命名了。当然也可以命名，参考后文的写法 不过有个缺点：里面的$0没法自动联想出属性，手敲几行代码你就会蓝瘦香菇 let _ =:UILabel &#123; view.addSubview($0) $0.text = "测试" $0.font = UIFont.systemFont(ofSize: 18) $0.center = self.view.center $0.bounds = CGRect.init(x: 0, y: 0, width: 100,height: 50) return $0&#125;(UILabel()) 用Then协议库的初始化写法比上面的代码更简洁，不用写return了，而且里面的$0还能自动联想。优点：暂时没有吐槽点 带参数，可自行命名 let _ = UILabel().then_Any&#123; (label) in label.backgroundColor = .blue label.font = UIFont.systemFont(ofSize: 18) label.textAlinment = .center label.text = "Then协议库写法" label.frame = CGRect.init(x: 20, y:200, width: 150, height:40) // 不会循环引用(已测试) self.view.addSubview(label) (推荐)无参数，无需命名，用$0取参数，可自动联想属性(推荐) let _ = UILabel().then_Any&#123; $0.backgroundColor = .blue $0.font = UIFont.systemFont(ofSize: 18) $0.textAlignment = .center $0.text = "Then库写法1.1" $0.frame = CGRect.init(x: 200, y: 200, height: 50) self.view.adSubview($0)&#125; 2.0 带参数，可自行命名 let label_Any0 = UILabel().then&#123; (label) in label.backgroundColor = .blue label.font = UIFont.systemFont(ofSize: 18) label.textAlignment = .center label.text = "Then库写法_2.0" label.frame = CGRect.init(x: 200, y:240, width:150, height: 40)&#125;self.view.addSubview(label_Any0) 2.1 (推荐)无参数，无需命名，用$0取参数，可自动联想属性 let _ = UILabel().then &#123; $0.backgroundColor = .blue $0.font = UIFont.systemFont(ofSize: 18) $0.textAlignment = .center $0.text = "Then库写法_2.1" $0.frame = CGRect.init(x: 200, y: 260,width: 150,height: 40) self.view.addSubview($0) 栗子：某工厂方法 class func label (withFrame frame: CGRect, text: String?, font: UIFont)-&gt;UILabel &#123; return UILabel.init(frame: frame).then(block: &#123; (label) in label.text = text label.textColor = UIColor.black label.backgroundColor = UIColor.white label.font = font &#125;) 其实Then协议库只有十几行代码，但是能带来非常好的体验感，简约实用，不会出现循环引用。下面的代码可以复制到一个swift file中，直接用 import Foundationpublic protocol Then &#123;&#125;extension Then where Self: Any &#123; public func then_Any( block: (inout Self) -&gt; Void) -&gt; Self &#123; var copy = self block(&amp;copy) return copy &#125;&#125;extension Then where Self: AnyObject &#123; public func then( block: (Self) -&gt; Void) -&gt; Self &#123; block(self) return self &#125;&#125;extension NSObject: Then &#123;&#125; 参考原文]]></content>
      <categories>
        <category>Swift</category>
        <category>Lib</category>
        <category>Then</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RxSwift+Moya+列表展示]]></title>
    <url>%2F2018%2F03%2F01%2FRxSwift%2FDemo%2FRxSwift%2BMoya%2B%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[项目 根据网上demo仿写原文 结构 Controller LXFViewController.swift 主视图控制器 Extension Response+ObjectMapper.swift Response分类，Moya请求完进行Json转模型或模型数组 Model LXFModel.swift 模型 Protocol LXFViewModelType.swift 定义了模型协议 Tool LXFNetworkTool.swift 封装Moya请求 LXFProgressHUD.swift 封装的HUD View LXFViewCell.swift 自定义cell LXFViewCell.xib cell的xib文件 ViewModel LXFViewModel.swift 视图模型 第三方库 RxSwift 想玩RxSwift的必备库 RxCocoa 对 UIKit Foundation 进行 Rx 化 NSObject+Rx 为我们提供 rx_disposeBag Moya/RxSwift 为RxSwift专用提供，对Alamofire进行封装的一个网络请求库 ObjectMapper Json转模型之必备良品 RxDataSources 帮助我们优雅的使用tableView的数据源方法 Then 提供快速初始化的语法糖 Kingfisher 图片加载库 SnapKit 视图约束库 Reusable 帮助我们优雅的使用自定义cell和view,不再出现Optional MJRefresh 上拉加载、下拉刷新的库 SVProgressHUD 简单易用的HUD Moya Moya是基于Alamofire的网络请求库 Moya的基础上添加了对RxSwift的接口支持 ❶ 创建网络类型枚举，用来存放请求类型 顺便设置相应的路径，等下统一取出来直接赋值即可 enum LXFNetworkCategory : String &#123; case all = "all" case android = "Android" case ios = "iOS" case welfare = "福利"&#125; ❷枚举写一个扩展，并遵循塄 TargetType，这个协议的Moya这个库规定的协议 extension LXFNetworkTool : TargetType &#123; //baseURL 统一基本的URL var baseURL : URL &#123; return URL (string : "http://xxxx/xx/") &#125; //path字段会追加至baseURL后面 var path : String &#123; switch self &#123; case.data(let type, let size , let index): return "(type.rawValue)/(size)/(index)" &#125; &#125; // HTTP的请求方式 var method : Moya.Method &#123; return .get &#125; //请求参数(会在请求时进行编码) var parameters : [String : Any]?&#123; return nil &#125; //参数编码方式(这里使用URL的默认方式) var parameterEncoding : ParameterEncoding &#123; return URLEncoding.default &#125; //用于单元测试，不需要的就像我一样随便写写 var sampleData : Data &#123; return "AAAA".data(using : .utf8) &#125; //将要被执行的任务(请求：request 下载：upload 上传：download) var task : Task &#123; return .reuqest &#125; //是否执行Alamofire验证，默认值为false var validate : Bool &#123; return false &#125;&#125; ❸ 定义一个全局变量用于整个项目的网络请求以使用这个全局变量来请求数据 let lxfNetTool = RxMoyaProvider&lt;LXFNetworkTool&gt; RxDataSources RxDataSources是以section来做为数据结构来传输 自定义SectionModel中创建一个Section的结构体，并且创建一个扩展，遵循SectionModelType协议，实现相应的协议方法 LXFModel.swiftstruct LXFSection &#123; // items就是rows var items : [Item] //这里加你需要的东西，比如 headerView 的 title extension LXFSection : SectionModelType &#123; // 重定义 Item 的类型为 LXFModel typealias Item = LXFModel // 实现协议中的方式 init(original: LXFSection, items: [LXFSection.Item]) &#123; self = original self.items = items &#125;&#125; ❷ 控制器下创建数据源属性LXFViewController.swift //创建一个数据源属性，类型为自定义的Section类型 let dataSource = RxTableViewSectionedReloadDataSource&lt;LXFSection&gt;() //使用数据源属性绑定cell dataSource.configureCell = &#123; ds,tv,ip,iteam in // 这个地方使用了Reusable这个库，在LXFViewCell中遵守了相应的协议 // 使其方便转换cell为非可选型的相应的cell类型 let cell = tv.dequeueReusableCell(for : ip) as LXFViewCell cell.picView.kf.setImgage(with : URL(string: item.url)) cell.descLabel.text = "描述 : (item.desc)" cell.sourceLabel.text = "来源 : (item.source)" return cell;&#125; ❸ sections序列绑定给我们的rows output.sections .asDriver() .drive(tableView.rx .items(dataSource : dataSource)) .addDisposable(rx_disposeBag) ViewModel的规范 MVVM思想是将原本在ViewController的视图显示逻辑、验证逻辑、网络请求等代码存放于ViewModel中，达到ViewController瘦身- 逻辑由ViewModel负责，外界不需要关心，外界只需要结果，ViewModel也只需要将结果给到外界 基于此，我们定义了一个协议LXFViewModelType ❶创建LXFViewModelType.swift LXFViewModelType.swift// associatedtype 关键字 用来声明一个类型的占位符作为协议定义的一部分protocol LXFViewModelType &#123; associatedtype Input associatedtype Output func transform(input : Input ) - &gt; Output ❷viewModel遵守LXFViewModelType协议 可以为XFViewModelType的Input和Output定义别名，以示区分,如：这个viewModel的用于请求首页模块相关联的，则可以命名为：HomeInput 和 HomeOutput 可以丰富我们的 Input 和 Output 。可以看到为Output添加了一个序列，类型为自定义的LXFSection数组，在Input里面添加了一个请求类型(即要请求什么数据，比如首页的数据) 通过 transform 方法将input携带的数据进行处理，生成了一个Output LXFViewModel.swiftextension LXFViewModel :LXFViewModelType &#123; // 存放着解析完成的模型数组 let models = Variable &lt;[LXFModel]&gt;([]) // 为LXFViewModelType的Input和Output定义别名 typealias Input = LXFInput typealias Output = LXFOutput // 丰富Input和Output struct LXFInput &#123; //网络请求类型 let category : LXFNetworkTool.LXFNetworkCategory int(category : LXFNetworkTool.LXFNetworkCategory)&#123; self.category = category &#125; &#125; struct LXFOutput &#123; //tableView的sections数据 let sections : Driver &lt;LXFsection&gt; init(sections : Driver &lt;[LXFSection]&gt;)&#123; self.sections = sections &#125; &#125; func transform(input : LXFViewModel.LXFInput) -&gt; LXFViewModel.LXFOutput&#123; let sections = models.asObservable() .map&#123; (models) -&gt; [LXFSection] in // 当models的值被改变时会调用，这是Variable的特性 // 返回section数组 return [LXFSection(item : models)] &#125; .asDriver(onErrorJustReturn : []) let output = LXFOutput(sections : sections) // 接下来的代码是网络请求 &#125;&#125; ❸在ViewController中初始化我们的input，通过transform得到output，然后将output中的sections序列绑定tableView的items LXFViewController.swift// 初始化inputlet vmInput = LXFViewModel.LXFInput(category : welfare)// 通过transform得到outputlet vmOutput = viewModel.transform(input : vmInput)vmOutput.sections .asDriver() .drive(tableView.rx .items(dataSource : dataSource)) .addDisposableTo(rx_disposeBag) MJRefresh ❶定义枚举LXFRefreshStatus，用于标志当前刷新状态 enum LXFRefreshStatus &#123; case none case beingHeaderRefresh case endHeaderRefresh case beingFooterRefresh case endFooterRefresh case noMoreData &#125; ❷LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus给外界订阅，告诉外界的tableView当前的刷新状态 let refreshStatus = Variable&lt;LXFRefreshStatus&gt;(.none) 进行网络请求并得到结果之后，修改refreshStatus的value为相应的LXFRefreshStatus项 ❸外界订阅output的refreshStatus,并且根据接收到的值进行相应的操作 vmOutput.refreshStatus .asObservable() .subscribe(onNext : &#123;[weak self] status in switch status &#123; case .beingHeaderRefresh: self?.tableView.mj_header .beginRefreshing() case .endHeaderRefresh: self?.tableView .mj_header .endRefreshing() case .beingFooterRefresh: self?.tableView .mj_footer .beginRefreshing() case .endFooterRefresh: self?.tableView .mj_footer .endRefreshing case .noMoreData : self?.tableView .endRefreshingWithNoMoreData() default : break &#125; &#125;).addDisposable(rx_disposeBag) ❹output提供一个requestCommond用于请求数据PublishSubject 的特点：即可以作为Observable，也可以作为Observer，就是可以发送信号，也可以订阅信号外界通过该属性告诉viewModel加载数据（传入的值是为了标志是否重新加载） let requestCommond = PublishSubject&lt;Bool&gt;() 在transform中，对生成的output的requestCommond进行订阅 output.requestCommond .subscribe(onNext : &#123; [unowned self] isReloadData in self.index = isReload ?1:self.index+1 lxfNetTool.request(.data(type:input.category, size:10, index:self.index ) ) .mapArray(LXFModel.self) .subscribe(&#123; [weak self] (event) in switch event &#123; case let.next(modelArr): self?.models.value = isReloadData?modelArr:(self?.models.value??[])+modelArr LXFProgressHUD.showSuccess("加载成功") case let.error(error): LXFProgressHUD.showError(error.localizedDescription) case .completed: output.refreshStatus.value = isReloadData?.endHeaderRefresh:.endFooterRefresh &#125; &#125;) .addDisposableTo(slf.rx_disposeBag) &#125;) .addDisposableTo(rx_disposeBag) ❺在ViewController中初始化刷新控件为tableView设置刷新控件，并且在创建刷新控件的回调中使用output的requestCommond发射信号 tableView.mj_header = MJRefreshNormalHeader(refreshingBlock:&#123; vmOutput.requestCommond .onNext(true) &#125;)tableView.mj_footer = MJRefreshAutoNormalFooter(refreshingBlock:&#123; vmOutput.requestCommond .onNext(false) 流程 ViewController已经拿到output，当下拉加载数据的时候，使用output的requestCommond发射信息，告诉viewModel我们要加载数据 viewModel请求数据，在处理完json转模型或模型数组后修改models，当models的值被修改的时候会发信号给sections，sections在ViewController已经绑定到tableView的items了，所以此时tableView的数据会被更新。接着我们根据请求结果，修改output的refreshStatus属性的值 当output的refreshStatus属性的值改变后，会发射信号，由于外界之前已经订阅了output的refreshStatus，此时就会根据refreshStatus的新值来处理刷新控件的状态 原文Demo]]></content>
      <categories>
        <category>Swift</category>
        <category>RxSwift</category>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift+Moya+登录+搜索]]></title>
    <url>%2F2018%2F03%2F01%2FRxSwift%2FDemo%2FRxSwift%2BMoya%2B%E7%99%BB%E5%BD%95%2B%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[项目功能 登录注册功能]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Closures闭包-使用分析]]></title>
    <url>%2F2018%2F02%2F28%2FSwift%2FGrammar%2FClosures%E9%97%AD%E5%8C%85-%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[OC-Block Block通常会用在网络请求中，请求到数据后然后回调 @implementation HttpTool-(void)loadData:(void(^)(NSString * json))callBack&#123; dispatch_async(dispatch_get_global_queue(0, 0), ^&#123; NSLog(@"%@",[NSThread currentThread]); dispatch_async(dispatch_get_main_queue(), ^&#123; NSLog(@"%@",[NSThread currentThread]); callBack(@"222"); &#125;); &#125;);&#125;@end 调用 @interface ViewController () @property(nonatomic,strong) HttpTool * tool; @end @implementation ViewController - (void)viewDidLoad &#123; [super viewDidLoad]; self.tool = [HttpTool new]; &#125;-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123; [self.tool loadData:^(NSString *json) &#123; NSLog(@"%@",json); &#125;];&#125;@end 用闭包来重写上面的逻辑 1，闭包的类型：(参数列表) -&gt; (返回值列表) import UIKitclass HttpTool:NSObject&#123; func loadData(callBack:(json:String)-&gt;())&#123; dispatch_async(dispatch_get_global_queue(0, 0)) &#123; print("\(NSthread.currentThread)") dispatch_sync(dispatch_get_main_queue(), &#123; print("\((NSThread.currentThread())") callBack(json:"json") &#125;) &#125; &#125;&#125; 2.调用 import UIKitclass ViewController: UIViewController &#123;var tool : HttpTool = HttpTool()override func viewDidLoad() &#123; super.viewDidLoad()&#125;override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) &#123; tool.loadData&#123;(json) in print("\(json)") &#125; &#125;&#125; 循环引用black循环引用 weak self-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123; __weak ViewController * weakSelf = self; [self.tool loadData:^(NSString *json) &#123; NSLog(@&quot;%@&quot;,json); weakSelf.view.backgroundColor = [UIColor redColor]; &#125;];&#125; 闭包的循环引用 闭包强引用 import UIKit class Httptool: NSObject&#123; //声明成可选类型的闭包 var callBack :((json : String)-&gt;())? func loadData(callBack : (json : String)-&gt;()) &#123; //强引用 self.callBack = callBack dispatch_async(dispatch_get_global_queue(0, 0)) &#123; print("\(NSThread.currentThread())") dispatch_sync(dispatch_get_main_queue(), &#123; print("\(NSThread.currentThread())") callBack(json: "json") &#125;) &#125; &#125;&#125; 解决闭包循环引用的3种方式 import UIKitclass ViewController: UIViewController &#123; var tool : HttpTool = HttpTool() override func viewDidLoad() &#123; super.viewDidLoad()&#125; override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) &#123; /* weak var weakSelf = self tool.loadData &#123; (json) in print("\(json)") //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行 //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf weakSelf?.view.backgroundColor = UIColor.redColor() &#125; */ tool.loadData &#123; [weak self] (json) in print("\(json)") //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行 //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf self?.view.backgroundColor = UIColor.redColor() &#125; /* //这种写法一旦self为空，就会报错 //unowned相当于oc中的__unsafe_unretained，__unsafe_unretained 修饰的弱引用，如果指向的对象销毁，那么指针指向之前的内存地址，很容易产生坏内存访问，野指针。僵尸对象 tool.loadData &#123;[unowned self] (json) in print("\(json)") //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行 //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf self.view.backgroundColor = UIColor.redColor() &#125; */ &#125; //相当于oc中的dealloc方法 deinit&#123; print("deinit") &#125; &#125; 尾随闭包 普通写法 tool.loadData(&#123; [weak self] (json) in print("\(json)") //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行 //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf self?.view.backgroundColor = UIColor.redColor()&#125;) 尾随闭包一 tool.loadData () &#123; [weak self] (json) in print("\(json)") //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行 //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf&#125; 尾随闭包二，当闭包为函数的最后一个参数时，会自动省略() tool.loadData &#123; [weak self] (json) in print("\(json)") //weakSelf?.view ： 如果前面的可选类型，没有值，后面的所有代码不会执行 //如果有值，系统会自动将weakSelf进行解包，并使用weakSelf&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Func-观察者与陀螺仪传感器的应用（基于PanoramaImageView）]]></title>
    <url>%2F2018%2F02%2F28%2FSceneKit%2FFunc%2FSceneKit-Func-%E8%A7%82%E5%AF%9F%E8%80%85%E4%B8%8E%E9%99%80%E8%9E%BA%E4%BB%AA%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[资料来源]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-Grammar-坐标区域集合交互检测.md]]></title>
    <url>%2F2018%2F02%2F27%2FOC%2FGrammar%2FOC-%20%E5%9D%90%E6%A0%87%E5%8C%BA%E5%9F%9F%E9%9B%86%E5%90%88%E4%BA%A4%E4%BA%92%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[坐标区域集合交互检测点与区域 判断给定的点是否被一个CGRect包含 CGRectContainsPoint函数 BOOL contains = CGRectContainsPoint(CGRect rect, CGPoint point); ##区域包含 判断一个CGRect是否包含再另一个CGRect里面,常用与测试给定的对象之间是否又重叠 BOOL contains = CGRectContainsRect(CGRect rect1, CGRect rect2); 区域交集 判断两个结构体是否有交错.可以用CGRectIntersectsRect BOOL contains = CGRectIntersectsRect(CGRect rect1, CGRect rect2); 边缘的坐标float float_ = CGRectGetMaxX(CGRect rect);返回矩形右边缘的坐标CGRectGetMinY返回矩形顶部的坐标CGRectGetMidX返回矩形中心X的坐标CGRectGetMidY 返回矩形中心Y的坐标CGRectGetMinX 返回矩形左边缘的坐标CGRectGetMaxY 返回矩形底部的坐标]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
        <category>NSSet</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>UIKit</tag>
        <tag>Grammar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNMaterial-材质-Base]]></title>
    <url>%2F2018%2F02%2F15%2FSceneKit%2FGrammar%2FSCNMaterial-%E6%9D%90%E8%B4%A8%2FSCNMaterial-%E6%9D%90%E8%B4%A8-Base%2F</url>
    <content type="text"><![CDATA[SCNMaterial 材质:几何体的外观,颜色，反光强度等等 ①光照模型 提到材质就不得不提到光照模型。在现实生活中有太阳，日光灯等可以产生光的光源，光照射在物体上，不同的物体呈现出不同的质感，这都是很平常的在计算机里，使用光源照射3D模型，产生出想要的质感就不是那么平常。在OpenGL中，我们需要使用Shader根据提供的材质参数和光照来计算每个像素的颜色，从而产生物体被光照射的感觉想要了解Shader中是如何实现光照模型的基本光照和高级光照其中有涉及到lambert和blinn两种光照模型 ❶Lambert 使用SCNMaterial来表示材质 SCNMaterial的一个属性lightingModel表示的就是使用何种光照模型。 选择Lambert光照模型，并且设置如下属性，并且把material赋给球形几何体geometry let material = SCNMaterial()material.lightingModel = .lambertmaterial.diffuse.contents = UIColor.redmaterial.ambient.contents = UIColor.init(white: 0.1, alpha: 1)material.locksAmbientWithDiffuse = falsegeometry.materials = [material] 使用的灯光在(0,6,3)处，所以球体上面是照射到灯光的，下面是灰色的。这里涉及到了两个光照分量，diffuse和ambientdiffuse表示几何体的本色，所以灯光照射到的部分就是本色红色，注意用的灯光是白色的，如果灯光是其他颜色，则会和几何体的本色混合，也就是两个颜色进行3维向量乘法。那灯光照射不到的地方呢？就是ambient环境光环境光的出现是为了让灯光照射不到的地方不会是全黑，你可以试试把环境光改成其他颜色，看看渲染结果如何由于PBR光照模型中ambient和diffuse是锁定的，所以需要把locksAmbientWithDiffuse设置为false，否则ambient只能和diffuse取相同的值。关于PBR光照模型我会在后面的文章单独介绍。最后将material赋值给几何体，这里material是被放在一个数组里赋值的，如果你的几何体有多个element，系统会根据顺序为每个element提供不同的材质。第n个element会得到第n%材质个数个材质 diffuse还和法线相关，法线和光线的夹脚越小，则越亮。法线就是上一篇代码里的normals总的来说，Lambert模型就是最终颜色=光线和法线夹脚系数光照颜色本色diffuse + 环境色ambient ❷Blinn Blinn光照模型其实就是在lambert基础上加上高光，我们将光照模型修改为.blinn，再设置高光的属性 material.lightingModel = .blinnmaterial.specular.contents = UIColor.whitematerial.shininess = 1.0 当光线被反射后和我们视线的夹脚比较小的时候，在金属或者玻璃等反光材质下，会看到非常亮的区域，我们称之为高光。越是光滑的物体，高光区域会越小。我们用shininess来表示物体的表面有多闪（光滑），它的值从0到1。值越大，越光滑。下面是值为0.2和1的效果图。material.specular表示高光的颜色，不过最终呈现的高光颜色受material.specular和灯光的颜色共同影响，是它们颜色值的三维向量相乘 ②材质参数的取值 上面我只给材质的参数赋予了颜色值，除了颜色，还可以赋予贴图，或者说是图片diffuse和specular都是可以接受图片对象的。比如给diffuse赋值一张地球的贴图。 material.diffuse.contents = UIImage.init(named: "earth.jpg") 效果如下 specular接受的贴图就比较特殊，是一张黑白两色的图。图中黑色对应的地方将没有高光 使用了specular贴图显大海部分高光 没有使用specular贴图 不管是什么贴图，都是需要几何体提供UV数据的，也就是所谓的贴图坐标，在上一篇的代码中有涉及到 let uvs: [CGPoint] = [ CGPoint(x: 0, y: 1), CGPoint(x: 0, y: 0), CGPoint(x: 1, y: 0), CGPoint(x: 1, y: 1), ] let uvSource = SCNGeometrySource.init(textureCoordinates:uvs) 系统提供的球形几何体已经有了UV数据，所以才可以轻松的进行贴图，关于贴图的更多信息，会在后面的文章中介绍，或者你也可以去看我写的基于OpenGL的贴图文章。 ③④⑤https://www.jianshu.com/p/d71c1bfee6d3]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
        <category>SCNMaterial</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>SCNMaterial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Grammar-SCNCamera-相机-文档]]></title>
    <url>%2F2018%2F02%2F05%2FSceneKit%2FGrammar%2FSCNCamera-%E7%9B%B8%E6%9C%BA%2FSCNCamera-%E7%9B%B8%E6%9C%BA-%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[SCNCamera 父类为NSObject ```&gt;初始化的方法```swift + (instancetype)camera; 照相机对象设置名字 @property(nonatomic, copy, nullable) NSString *name; X轴方向的视角(默认为60度) @property(nonatomic) double xFov; Y轴方向的视角(默认为60度) @property(nonatomic) double yFov; 照相机能照到的最近距离(默认值为1) @property(nonatomic) double zNear; 照相机能照到的最远距离(默认值为100) @property(nonatomic) double zFar; 让照相机自动调节最近和最远距离(默认为关闭,开启后,没有最近和最远的限制) @property(nonatomic) BOOL automaticallyAdjustsZRange NS_AVAILABLE(10_9, 8_0); 是否开启正投影模式正投影就是说物体在远离或者靠近照相机是,大小保持不变 @property(nonatomic) BOOL usesOrthographicProjection; 设置正投影的比例 (默认为1)这里设置的比例越大,显示的图像越小,你可以这样理解scale = 屏幕的大小:图片的大小 @property(nonatomic) double orthographicScale NS_AVAILABLE(10_9, 8_0); 设置焦距(默认为10) @property(nonatomic) CGFloat focalDistance NS_AVAILABLE(10_9, 8_0); 设置聚焦时，模糊物体模糊度(默认为0) @property(nonatomic) CGFloat focalBlurRadius NS_AVAILABLE(10_9, 8_0); 决定进入焦点和离开焦点的过渡速度 @property(nonatomic) CGFloat aperture NS_AVAILABLE(10_9, 8_0); 用于检测节点碰撞使用 @property(nonatomic) NSUInteger categoryBitMask NS_AVAILABLE(10_10, 8_0); 参考资料]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
        <category>SCNCamera</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>SceneKit</tag>
        <tag>SCNCamera</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Reference-资料]]></title>
    <url>%2F2018%2F02%2F05%2FSceneKit%2FReference%2FReference-%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[网速卡。里面文章展不开 也就看看而已 参考学习2 只能学习而已，太难 没找到博客]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>Reference</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Grammar-SCNCamera-相机-旋转SCNCamera节点]]></title>
    <url>%2F2018%2F02%2F05%2FSceneKit%2FGrammar%2FSCNCamera-%E7%9B%B8%E6%9C%BA%2FSCNCamera-%E7%9B%B8%E6%9C%BA-%E6%97%8B%E8%BD%ACSCNCamera%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[参考资料]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
        <category>SCNCamera</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-创建Observable对象的方法]]></title>
    <url>%2F2018%2F01%2F31%2FRxSwift%2FGrammar%2F%E5%88%9B%E5%BB%BAObservable%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[基本使用①never never就是创建一个sequence，但是不发出任何事件信号 let disposeBag = DisposeBag()let neverSequence = Observable&lt;String&gt;.never() let neverSequenceSubscription = neverSequence .subscribe &#123; _ in print("This will never be printed") &#125;.addDisposableTo(disposeBag)// 结果是什么都不打印y ②empty empty就是创建一个空的sequence,只能发出一个completed事件 let disposeBag = DisposeBag()Observable&lt;Int&gt;.empty() .subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag) completed ③just just是创建一个sequence只能发出一种特定的事件，能正常结束 let disposeBag = DisposeBag() Observable.just("🔴") .subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag) next(🔴)completed ④of of是创建一个sequence能发出很多种事件信号 let disposeBag = DisposeBag() Observable.of("🐶", "🐱", "🐭", "🐹") .subscribe(onNext: &#123; element in print(element) &#125;) .addDisposableTo(disposeBag) 🐶🐱🐭🐹 把上面的onNext:去掉的话，结果会是这样子，也正好对应了我们subscribe中，subscribe只监听事件 next(🐶)next(🐱)next(🐭)next(🐹)completed ⑤from from就是从集合中创建sequence，例如数组，字典或者Set let disposeBag = DisposeBag() Observable.from(["🐶", "🐱", "🐭", "🐹"]) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) ⑥create 自定义可观察的sequencecreate操作符传入一个观察者observer，然后调用observer的onNext，onCompleted和onError方法。返回一个可观察的obserable序列 let disposeBag = DisposeBag() let myJust = &#123; (element: String) -&gt; Observable&lt;String&gt; in return Observable.create &#123; observer in observer.on(.next(element)) observer.on(.completed) return Disposables.create() &#125;&#125; myJust("🔴") .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) next(🔴)completed ⑦range range就是创建一个sequence，他会发出这个范围中的从开始到结束的所有事件 let disposeBag = DisposeBag()Observable.range(start: 1, count: 10) .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) next(1) next(2)next(3)next(4)next(5)next(6)next(7)next(8)next(9)next(10)completed ⑧repeatElement 创建一个sequence，发出特定的事件n次 let disposeBag = DisposeBag() Observable.repeatElement("🔴") .take(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 🔴🔴🔴 ⑨generate generate是创建一个可观察sequence，当初始化的条件为true的时候，他就会发出所对应的事件 let disposeBag = DisposeBag() Observable.generate( initialState: 0, condition: &#123; $0 &lt; 3 &#125;, iterate: &#123; $0 + 1 &#125; ) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 012 ⑩ deferred deferred会为每一为订阅者observer创建一个新的可观察序列下面例子中每次进行subscribe的时候都会去创建一个新的deferredSequence，所以Emitting会打印两遍 let disposeBag = DisposeBag()var count = 1 let deferredSequence = Observable&lt;String&gt;.deferred &#123; print("Creating \(count)") count += 1 return Observable.create &#123; observer in print("Emitting...") observer.onNext("🐶") observer.onNext("🐱") observer.onNext("🐵") return Disposables.create() &#125;&#125; deferredSequence .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) deferredSequence .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) Creating 1Emitting...🐶🐱🐵Creating 2Emitting...🐶🐱🐵 ⑪error 创建一个可观察序列，但不发出任何正常的事件，只发出error事件并结束 let disposeBag = DisposeBag() Observable&lt;Int&gt;.error(TestError.test) .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) error(test) ⑫doOn doOn我感觉就是在直接onNext处理时候，先执行某个方法，doOnNext( :)方法就是在subscribe(onNext:)前调用，doOnCompleted(:)就是在subscribe(onCompleted:)前面调用的 let disposeBag = DisposeBag() Observable.of("🍎", "🍐", "🍊", "🍋") .do(onNext: &#123; print("Intercepted:", $0) &#125;, onError: &#123; print("Intercepted error:", $0) &#125;, onCompleted: &#123; print("Completed") &#125;) .subscribe(onNext: &#123; print($0) &#125;,onCompleted: &#123; print("结束") &#125;) .addDisposableTo(disposeBag) 资料]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PPNetwork 扩展]]></title>
    <url>%2F2018%2F01%2F23%2FOC%2FLib%2FPPNetworkHelper%2FPPNetworkHelper%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[PPNetworkHelper扩展Delete+ (void)httpDeleteWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic noLoginToken:(NSString *)noLoginToken finishedBlock:(void(^)(id responseObject))finishedBlock errorBlock:(void(^)(NSError *error))errorBlock&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; //后台需要增加application/x-www-form-urlencoded manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"text/html", @"application/json", @"text/javascript", @"text/json", @"text/plain", @"application/x-www-form-urlencoded",nil]; // 设置请求头 [manager.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Accept"];// [manager.requestSerializer setValue:authorization forHTTPHeaderField:@"Authorization"]; [manager.requestSerializer setValue:noLoginToken forHTTPHeaderField:@"noLoginToken"]; [manager DELETE:urlStr parameters:paramDic success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; finishedBlock(responseObject); &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; finishedBlock(error); &#125;];&#125; Put+ (void)httpPutWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic noLoginToken:(NSString *)noLoginToken finishedBlock:(void(^)(id responseObject))finishedBlock errorBlock:(void(^)(NSError *error))errorBlock&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;, @&quot;application/json&quot;, @&quot;text/javascript&quot;, @&quot;text/json&quot;, @&quot;text/plain&quot;, @&quot;application/x-www-form-urlencoded&quot;,nil]; // 设置请求头 [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;]; //[manager.requestSerializer setValue:authorization forHTTPHeaderField:@&quot;Authorization&quot;]; [manager.requestSerializer setValue:noLoginToken forHTTPHeaderField:@&quot;noLoginToken&quot;]; [manager PUT:urlStr parameters:paramDic success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; finishedBlock(responseObject); &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; finishedBlock(error); &#125;];&#125; 需要修改AFNetworking可接收的Content-Type 修改AFNetworking可接收的Content-Type，前往AFNetworking源代码目录找到AFURLResponseSerialization.m文件将里面的代码：self.acceptableContentTypes =[NSSetsetWithObjects:@&quot;application/json&quot;,@&quot;text/json&quot;,@&quot;text/javascript&quot;,nil];修改为：self.acceptableContentTypes =[NSSetsetWithObjects:@&quot;application/json&quot;,@&quot;text/json&quot;,@&quot;text/javascript&quot;,@&quot;text/html&quot;,nil];PPNetworkHelper里也可以修改]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>PPNetwork</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Demo-TableView双联表]]></title>
    <url>%2F2018%2F01%2F20%2FSwift%2FDemo%2FSwift-Demo-TableView%E5%8F%8C%E8%81%94%E8%A1%A8%2F</url>
    <content type="text"></content>
      <categories>
        <category>Swift</category>
        <category>Demo</category>
        <category>TableView</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-射线检测]]></title>
    <url>%2F2018%2F01%2F19%2FSceneKit%2FGrammar%2FSceneKit-%E5%B0%84%E7%BA%BF%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[#SceneKit-射线检测 touchesBegan方法在3D中仍然可用在3D空间内采用了射线检测方法来返回触摸到的物体 当有触摸事件发生时 拿到用户触摸在屏幕上的位置 转换到SCNView的坐标系中 当触摸点在SCNView上时,发射一个射线,返回与该射线相交的一系列物体 override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event:UIEvent?) &#123;// 1 拿到触摸对象 let touch = touches.first! // 2 转换坐标系 let location = touch.locationInView(scnView) // 3 执行hitTest,发射射线,返回相交的物体 let hitResults = scnView.hitTest(location, options: nil) // 4 if hitResults.count &gt; 0 &#123;// 5 取出最近的物体 let result = hitResults.first! // 6 处理该节点 handleTouchFor(result.node)&#125;&#125;]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNCamera-相机-Base]]></title>
    <url>%2F2018%2F01%2F19%2FSceneKit%2FGrammar%2FSCNCamera-%E7%9B%B8%E6%9C%BA%2FSCNCamera-%E7%9B%B8%E6%9C%BA-Base%2F</url>
    <content type="text"><![CDATA[SCNCamera-相机 SCNCamera相机是用于显示场景内容必须的节点, 需要把相机加到节点之上, 再把节点加到根节点上 SCNNode包含相机物体观察视野的观察点, 即相机的 位置 &amp; 方向 相机的视角始终沿着节点的局部坐标系的负Z轴, 要在不同的场景指定不同的相机的视野, 使用position, rotation, transfrom来设置 相机类型 透视(perspective)正交(orthographic) 透视相机 游戏中经常使用第一视角的相机, 会有一种近大远小的感觉 正交投影 投影线垂直于投影面的投影属于正交投影 ，属于平行投影一种靠近和远离, 物体大小都是相同的 原理分析视角 场景: 照相机的位置为(10,0,0) 物体A的位置为(0,0,-6)，yFor 表示的是Y轴上的视角 ,照相机好比眼睛,眼睛在X轴(左右看)和Y轴(上下看)有个最大角度，这个角度叫做xFov和yFov对于同一个物体，当然在视野小的时候，显示的体积大，在视野大的时候，显示的体积小 焦距 设备屏幕中的物体都是能被照相机看到的物体]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
        <category>SCNCamera</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>SceneKit</tag>
        <tag>SCNCamera</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-RenderLoop渲染循环]]></title>
    <url>%2F2018%2F01%2F19%2FSceneKit%2FGrammar%2FRenderLoop%E6%B8%B2%E6%9F%93%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[SCNSceneRendererDelegate协议 SCNView有一个delegate属性,需要遵守SCNSceneRendererDelegate协议,可以在每帧画面的动画和渲染过程中收到代理方法的调用 ##Update 会调用renderer(_:updateAtTime:)代理方法,可以在这里写一些基础逻辑,比如添加或移除node节点. Execute Actions&amp;Animations: 执行actions(动作)和animations(动画). Did Apply Animations: 会调用renderer(_: didApplyAnimationsAtTime:)方法,此时场景中所有节点在这一帧的actions(动作)和animations(动画)都已经更新完成. Simulates Physics: 物理效果模拟. Did Simulate Physics: 会调用renderer(_:didSimulatePhysicsAtTime:)方法,此时物理效果模拟已经完成,可以在这里添加和物理效果有关的代码,比如node在受到一个力影响后改变颜色. Evaluates Constraints: 约束更新. Will Render Scene: 会调用renderer(_:willRenderScene:atTime:)方法,此时即将要渲染场景,可以在这里对场景做最后的更改. Renders Scene In View:SceneKit 在view中渲染场景. Did Render Scene: 会调用renderer(_: didRenderScene: atTime:)方法,它标识着一个渲染循环的结束,可以写一些逻辑更新代码在这里,比如游戏中血量增减 注意 默认情况下,如果一个场景中没有任何改变时,Scene Kit会进入”paused”(暂停)状态,渲染循环暂停后代理方法将不会继续调用,为了防止这种情况,需要在创建SCNView实例时设置playing属性为true如:渲染循环的代理就会一直调用 scnView.playing = true]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Grammar-Physics物理效果]]></title>
    <url>%2F2018%2F01%2F18%2FSceneKit%2FGrammar%2FSceneKit-Grammar-Physics%E7%89%A9%E7%90%86%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[物理仿真模拟实质 物理仿真中的type就是为了定义当一个物体受到力的作用时该如何去响应. 首先, 力的作用的相互的, 当两个物体之间进行力的作用时情况是多样的, 可能两者都有运动, 也可能只有其中的一个会运动, 试想, 如果拿一个鸡蛋去碰撞一块很大的石头, 很显然, 鸡蛋碎了, 石头不会有任何变化(以我们肉眼来观察, 石头是不会有变化的, 实质上石头是有变化的), physics body物理形体static 静态物体不会移动 当其他物体可能与这些物体碰撞时，静态物体本身不受模拟中的任何力和碰撞的影响。 可以使用这种类型的墙壁和大块不动的巨石 dynamic 动力体受力量和碰撞的影响 可以使用这种类型的东西，如活动椅子，桌子和杯子 kinematic 运动体类似于静态体，因为它们也不受影响 力量和碰撞 但是可以移动这些类型，并且它们也可能与动态主体相冲突 可以使用这种类型的身体，例如移动电梯或可以打开和关闭的门 SCNPhysicsBody SceneKit中所有的物理对象都是SCNPhysicsBody然后需要把该对象绑定到SCNNode的physicsBody实例属性,然后物理引擎就可以进行仿真模拟 物理形状决定了物理引擎在处理碰撞时的形状检测.为了让物理模拟器运行的更快,最好将物理形状设定为简单的方形,球形或其他系统提供的原始形状,大略匹配节点外观就行了 管理物理引擎 使用Node去管理一个几何体, 同样, SCNPhysicsBody对象也管理物理引擎也就是说, 此时我们的node拥有一个可以做物理仿真模拟的几何体 指定物体应具有的类型和形状 创建物理体时，可以指定物体应具有的类型和形状如果为nil，Scene Kit将根据节点的几何形状自动生成一个形状 let geometryNode = SCNNode(geometry: geometry) //--- &gt;添加代码 geometryNode.physicsBody = SCNPhysicsBody(type: .dynamic, shape: nil) Scene Kit中的scene默认打开了重力,当设定过动态形体后,物体就会受到重力影响下落接下来运行工程, 会发现一个立方体很快的掉落下来, 然后消失. 修改下视角 接下来我们需要修改下视角, 让物体受重力作用更明显一些.看到一个物体从顶部掉下来 cameraNode.position = SCNVector3(x: 0, y: -5, z: 10) 抛物线的自由落体运动 自由落体实现了, 接下来我们给该物体添加一个向上的推力让物体实现一个抛物线的自由落体运动在geometryNode.physicsBody = SCNPhysicsBody(type: .dynamic, shape: nil)下面添加如下代码 这个设置我们的物体要移动的重点位置,下面三个值得意思是, x为0, 代表从中心带开始运动, y值为正数, 代表向上, z为0代表我们看的视角的深度不会变, 如果是负数, 则会发现在运动过程中, 物体越来越小, 如果为正, 则发现在运动过程中物体则会运来越大 let force = SCNVector3(x: 0, y: 15 , z: 0) 作用力的位置 let position = SCNVector3(x: 0.05, y: 0.05, z: 0.05) 给节点上的几何体添加一个作用力, 当您向物理机构施加力量时，您可以使用applyForce（_：atPosition：impluse :)，并将SCNVector3的实例传递给要施加该力的力和位置，以及是否强制将被用作冲动。您应用的力将影响物理体的线性和角加速度 geometryNode.physicsBody?.applyForce(force, at: position, asImpulse: true) 注意 刚刚为了观察自由落体效果, 我们把视角修改了, 让物体从顶部掉落, 现在需要把它再改回来, 让其从底部出现 cameraNode.position = SCNVector3(x: 0, y: 5, z: 10) 物理仿真中的力使用的是向量表示的, 向量是有方向有距离的一个值 forces力 力使用3维向量SCNVector3表示,使用applyForce(_: atPosition: impluse:)方法来添加一个力,并指定位置.一个力可以同时影响线速度和角速度.impluse脉冲状只作用一次,比如踢一个球,非脉冲状的则可以持续作用.Position位置可以影响力的作用效果 torque力矩 力矩使用4维向量SCNVector4表示,使用applyTorque(_: impulse:)来添加一个力矩,力矩只影响角动量.x-,y-,z-指定旋转轴,w-指定旋转角度也就是大小值Scene Kit使用国际单位制,因此质量单位是kg千克,力的单位是N牛,脉冲单位是N-s牛秒,力矩单位是N-m牛米.]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-几何物体-正方体]]></title>
    <url>%2F2018%2F01%2F18%2FSceneKit%2FGrammar%2FSceneKit-%E5%87%A0%E4%BD%95%E7%89%A9%E4%BD%93-%E6%AD%A3%E6%96%B9%E4%BD%93(Swift)%2F</url>
    <content type="text"><![CDATA[//// ViewController.swift// SceneKit-几何物体-正方体(Swift)//// Created by RN on 2018/1/18.// Copyright © 2018年 YKK. All rights reserved.// import UIKitimport SceneKitclass ViewController: UIViewController {//显示3D场景的视图fileprivate lazy var scnView : SCNView = {let scnView = SCNView()scnView.showsStatistics = true// 2scnView.allowsCameraControl = true// 3scnView.autoenablesDefaultLighting = truereturn scnView}() //场景scenefileprivate lazy var scnScene : SCNScene = {let scnScene = SCNScene()//设置背景图片, GeometryFighter.scnassets是我设置的一个资源库, 存放3D资源的// scnScene.background.contents = “GeometryFighter.scnassets/Textures/Background_Diffuse.png”return scnScene}() //3. 添加一个SCNCamerafileprivate lazy var cameraNode : SCNNode = {// 创建一个节点let cameraNode = SCNNode()// 给相机节点赋值相机cameraNode.camera = SCNCamera()// 设置视角的位置, x:0,y:0就是中心点, z只代表观察的距离, z越大, 物体越小cameraNode.position = SCNVector3(x: 0, y: 0, z: 10)return cameraNode}() //4.几何物体fileprivate lazy var geometryNode : SCNNode = {//画一个立方体let shape = SCNBox(width: 1.0,height: 1.0,length: 1.0,chamferRadius: 0.0)//把立方体绑定到节点let geometryNode = SCNNode(geometry: shape)return geometryNode}() override func viewDidLoad() {super.viewDidLoad()//给当前的SCNView 赋值SCNScenescnView.scene = scnScene// 把相机的节点添加到根节点里面scnScene.rootNode.addChildNode(cameraNode)//把节点添加到场景scnScene.rootNode.addChildNode(geometryNode)}//控制屏幕旋转override var shouldAutorotate: Bool {return true}//隐藏状态栏override var prefersStatusBarHidden: Bool {return true} }]]></content>
      <categories>
        <category>SceneKit</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-构建简单几何模型]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-%E6%9E%84%E5%BB%BA%E7%AE%80%E5%8D%95%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[属性构建3D节点@property (nonatomic,strong) SCNScene *scene; //场景，存放元素节点@property (nonatomic,strong) SCNView *sceneView; //用来展示3D图形的控件@property (nonatomic,strong) SCNNode *lightNode; //环境光Node@property (nonatomic,strong) SCNNode *assistLightNode; //增加一个副光@property (nonatomic,strong) SCNNode *caremaNode; //添加摄像机节点 ##创建几何模型 @property (nonatomic,strong) SCNGeometry *carbonAtom; // C 原子@property (nonatomic,strong) SCNGeometry *hydrogenAtom; // H 原子@property (nonatomic,strong) SCNGeometry *oxyGenAtom; // O 原子@property (nonatomic,strong) SCNGeometry *fluorAtom; // F 原子 添加场景加载[self addScene]; 构建场景设置节点- (void)addScene&#123;// SCNBox *box = [SCNBox boxWithWidth:10 height:10 length:10 chamferRadius:1];// SCNNode *node = [SCNNode nodeWithGeometry:box]; //添加摄像机 //[self.scene.rootNode addChildNode:self.caremaNode]; //添加环境副光 [self.scene.rootNode addChildNode:self.assistLightNode]; //添加环境光//[self.scene.rootNode addChildNode:self.lightNode];//添加环境光 //添加正方体 // [self.scene.rootNode addChildNode:node]; //将创建的原子节点添加到根节点 [self.scene.rootNode addChildNode:[self addGeometryToSCNNode]]; self.sceneView.scene = self.scene;&#125; 几何体添加到节点- (SCNNode *)addGeometryToSCNNode&#123; //Creates and initializes a node instance with the specified geometry attached //指定几何图形添加到节点 SCNNode *carbonNode = [SCNNode nodeWithGeometry:[self carbonAtom]]; SCNNode *hydrogenNode = [SCNNode nodeWithGeometry:[self hydrogenAtom]]; SCNNode *oxygenNode = [SCNNode nodeWithGeometry:[self oxyGenAtom]]; SCNNode *fluorNode = [SCNNode nodeWithGeometry:[self fluorAtom]]; //节点位置 carbonNode.position = SCNVector3Make(-6, 0, 0); hydrogenNode.position = SCNVector3Make(-2, 0, 0); oxygenNode.position = SCNVector3Make(2, 0, 0); fluorNode.position = SCNVector3Make(6, 0, 0); //子节点添加到某个父节点 SCNNode *tempNode = [SCNNode node]; [tempNode addChildNode:carbonNode]; [tempNode addChildNode:hydrogenNode]; [tempNode addChildNode:oxygenNode]; [tempNode addChildNode:fluorNode]; return tempNode;&#125; GetetrSCNView- (SCNView *)sceneView&#123; if (!_sceneView) &#123; _sceneView = [[SCNView alloc]initWithFrame:self.view.bounds]; _sceneView.center = self.view.center; _sceneView.backgroundColor = [UIColor grayColor]; _sceneView.allowsCameraControl = YES; _sceneView.autoenablesDefaultLighting = YES; [self.view addSubview:_sceneView]; &#125; return _sceneView;&#125; SCNScene- (SCNScene *)scene&#123; if (!_scene) &#123; _scene =[SCNScene scene]; &#125; return _scene;&#125; 环境光 添加一个环境光node前后都是亮滴 - (SCNNode *)lightNode&#123; if (!_lightNode) &#123; _lightNode = [SCNNode node]; _lightNode.light = [SCNLight light]; _lightNode.light.type = SCNLightTypeAmbient; _lightNode.light.color = [UIColor colorWithWhite:0.4 alpha:1.0]; //_lightNode.light.color = [UIColor redColor]; &#125; return _lightNode;&#125; 增加一个副光 SCNLightTypeDirectional 平行光 SCNLightTypeSpot 聚焦光小球前表面亮。后表面暗 - (SCNNode *)assistLightNode&#123; if (!_assistLightNode) &#123; _assistLightNode = [SCNNode node]; _assistLightNode.light = [SCNLight light]; _assistLightNode.light.type = SCNLightTypeOmni;//像各方向发出的光照强度一样 _assistLightNode.light.color = [UIColor colorWithWhite:0.75 alpha:1]; _assistLightNode.light.color = [UIColor redColor]; _assistLightNode.position = SCNVector3Make(0, -50, 50);//设置光源 &#125; return _assistLightNode;&#125; 添加摄像机节点- (SCNNode *)caremaNode&#123; if (!_caremaNode) &#123; _caremaNode = [SCNNode node]; _caremaNode.camera = [SCNCamera camera];//Creates and returns a camera instance. _caremaNode.position = SCNVector3Make(0, 0, 50); &#125; return _caremaNode;&#125; ##几何模型-C 原子 SCNSphere 有半径属性，类似iOS 剪切 - (SCNGeometry *)carbonAtom&#123; if(!_carbonAtom)&#123; SCNSphere *phere = [SCNSphere sphereWithRadius:1.7]; phere.firstMaterial.diffuse.contents = [UIColor darkGrayColor]; phere.firstMaterial.specular.contents = [UIColor whiteColor]; _carbonAtom = phere; &#125; return _carbonAtom;&#125; ##几何模型 - H 原子 contents 扩散de 内容 颜色(NSColor, UIColor, CGColorRef)，一个图像(NSImage, UIImage, CGImageRef)，一个层(CALayer)，一个路径(NSString或NSURL)，一个SpriteKit场景(SKScene)，一个纹理(sk纹理，id&lt; mtl纹理&gt;或GLKTextureInfo)，或一个浮动值在0到1 (NSNumber)之间的金属和粗糙度属性 - (SCNGeometry *)hydrogenAtom&#123; if (!_hydrogenAtom) &#123; SCNSphere *sphere = [SCNSphere sphereWithRadius:1.2]; sphere.firstMaterial.diffuse.contents = [UIColor lightGrayColor]; //specular - 镜面 sphere.firstMaterial.specular.contents = [UIColor whiteColor]; _hydrogenAtom = sphere; &#125; return _hydrogenAtom;&#125; 几何模型 - O 原子- (SCNGeometry *)oxyGenAtom&#123; if (!_oxyGenAtom) &#123; SCNSphere *sphere = [SCNSphere sphereWithRadius:1.52]; sphere.firstMaterial.diffuse.contents = [UIColor redColor]; sphere.firstMaterial.specular.contents = [UIColor whiteColor]; _oxyGenAtom = sphere; &#125; return _oxyGenAtom;&#125; ##几何模型 - F 原子 - (SCNGeometry *)fluorAtom&#123; if (!_fluorAtom) &#123; SCNSphere *sphere = [SCNSphere sphereWithRadius:1.47]; sphere.firstMaterial.diffuse.contents = [UIColor yellowColor]; sphere.firstMaterial.specular.contents = [UIColor whiteColor]; _fluorAtom = sphere; &#125; return _fluorAtom;&#125;]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNNode]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-SCNNode%2F</url>
    <content type="text"><![CDATA[SCNNode SCNNode : NSObjectabstract SCNNode is the model class for node-tree object 属性 name NSString light SCNLight camera SCNGeometry skinner SCNSkinner 控制皮肤几何图形的变形 morpher SCNMorpher 控制变形的几何图形 transform SCNMatrix4 变换 worldTransform SCNMatrix4 世界转换 在世界空间中的转换(相对于场景的根节点) position SCNVector3 worldPosition SCNVector3 rotation SCNVector4 orientation SCNQuaternion worldOrientation SCNQuaternion eulerAngles SCNVector3 scale SCNVector3 pivot SCNMatrix4 hidden BOOL 否显示 dedault NO opacity CGFloat 不透明度 Default is 1 castsShadow BOOL 投下阴影 Defaults to YES movabilityHint SCNMovabilityHint 可动性暗示 与SceneKit的呈现系统沟通你想如何在场景中移动内容它不会影响您更改节点位置或向节点添加动画或物理的能力默认为SCNMovabilityHintFixed parentNode SCNNode 父节点 childNodes NSArray 子节点数组 方法 加载 + (instancetype)node; 加载geometry： 几何模型 + (SCNNode *)nodeWithGeometry:(nullable SCNGeometry *)geometry; 克隆 - (instancetype)clone; 被克隆 - (instancetype)flattenedClone 世界转换|在世界空间中的转换(相对于场景的根节点) - (void)setWorldTransform:(SCNMatrix4)worldTransform; 加子节点 - (void)addChildNode:(SCNNode *)child; 根据index加子节点 - (void)insertChildNode:(SCNNode *)child atIndex:(NSUInteger)index; 从父节点移除 - (void)removeFromParentNode; 新的子节点替换某个节点 - (void)replaceChildNode:(SCNNode *)oldChild with:(SCNNode *)newChild; Returns the first node found in the node tree with the specified name返回在节点树中找到具有指定名称的第一个节点recursively 递归 - (nullable SCNNode *)childNodeWithName:(NSString *)name recursively:(BOOL)recursively; 子节点通过测试Returns the child nodes of the receiver that passes a test in a given Block.返回在给定块中通过测试的接收方的子节点 predicate:谓词 - (NSArray&lt;SCNNode *&gt; *)childNodesPassingTest:(NS_NOESCAPE BOOL (^)(SCNNode *child, BOOL *stop))predicate; &gt; 系统文档太多了。。。]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNMaterial- 材质]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-SCNMaterial%2F</url>
    <content type="text"><![CDATA[SCNMaterial- 材质 SCNMaterial : NSObject 初始化+ (instancetype)material; 属性 Properties name NSString diffuse SCNMaterialProperty 扩散 漫射属性指定从表面漫反射的光量漫射光在各个方向上都是均匀反射的，因此与视点无关 ambient SCNMaterialProperty 环境 环境属性指定要反射的环境光的数量这个属性对没有环境光的场景没有视觉效果如果将locksambientwith扩散设置为YES，则设置环境没有效果 specular SCNMaterialProperty 镜面 镜子的属性指定光的数量以类似镜子的方式反射当视点与反射光的方向一致时，镜面强度增加 emission SCNMaterialProperty 发射 发射属性指定材料发出的光量这种发射不会照亮场景中的其他表面 transparent SCNMaterialProperty 透明 透明属性指定材料的透明区域 reflective SCNMaterialProperty 反射 反射特性指定了表面的反射率表面不会真实地反映场景中的其他物体这个属性可以作为一个球体映射来反映一个预先计算的环境 multiply SCNMaterialProperty 乘法 乘法属性指定用于将输出片段相乘的颜色或图像计算出的片段与相乘值相乘以产生最后的片段此属性可用于阴影映射、淡出或tint 3d对象 normal SCNMaterialProperty 普通 普通属性指定表面方向当一个图像设置在正常的属性上时，每个像素的材料会自动被点亮设置颜色没有效果 displacement SCNMaterialProperty 位移 ambientOcclusion SCNMaterialProperty 环境闭塞 指定了表面的环境遮挡环境遮挡与环境光相乘，结果被添加到照明贡献这个属性对没有环境光的场景没有视觉效果当环境遮挡图被设置时，环境属性被忽略。 selfIllumination SCNMaterialProperty 纹理或颜色 属性指定一个纹理或颜色，它被添加到表面的照明贡献中当设置一个自填体时，会忽略发射特性 metalness SCNMaterialProperty 金属属性 金属属性指定材料表面的金属材质较低的值(较深的颜色)使材料看起来更像介质表面较高的值(较亮的颜色)会使表面看起来更有金属感此属性时才会被“lightingModelName”是“SCNLightingModelPhysicallyBased”。 roughness SCNMaterialProperty 粗糙度 粗糙度属性指定表面平滑度较低的颜色(较深的颜色)使材料看起来闪闪发亮，有明确的高光较高的值(较亮的颜色)会导致高光的高光，使材料的弥散性变得更强反射性此属性时才会被“lightingModelName”是“SCNLightingModelPhysicallyBased” shininess CGFloat 亮度值 默认为1.0 transparency CGFloat 透明度 默认为1.0 lightingModelName SCNLightingModel 明模型名称 决定了接收机的照明模型请参阅上面的照明模型列表默认为SCNLightingModelBlinn litPerPixel BOOL 否按像素点亮 默认YES doubleSided BOOL 是否为双面 默认NO fillMode SCNFillMode 栅格化 默认为SCNFillModeFill cullMode SCNCullMode 筛选模式 默认为SCNCullBack transparencyMode SCNTransparencyMode 透明模式 透明模式见上文默认为SCNTransparencyModeDefault locksAmbientWithDiffuse BOOL 环境属性自动匹配扩散属性 默认值为YES writesToDepthBuffer BOOL 是否写入到深度缓冲区 默认值为YES colorBufferWriteMask SCNColorMask 是否写入颜色缓冲区 默认为SCNColorMaskAll readsFromDepthBuffer BOOL 是否从深度缓冲区读取 默认值为YES fresnelExponent CGFloat y菲涅耳指数 默认为0.0反射率特性的影响fresnel指数改变了反射率的指数指数越大，反射就越集中在边缘 blendMode SCNBlendMode 混合模式 默认为SCNBlendModeAlpha]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>SCNMaterial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNGeometry-SCNSphere-几何-球]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSCNGeometry%2FSCNGeometry-SCNSphere-%E5%87%A0%E4%BD%95-%E7%90%83%2F</url>
    <content type="text"><![CDATA[Sphere 几何-球 SCNPlane : SCNGeometry 初始化 radius:球的半径 + (instancetype)sphereWithRadius:(CGFloat)radius; 属性 radius CGFloat 球的半径 默认值是0.5 geodesic BOOL 测地线 表示几何是一个岩石圈默认值为NO segmentCount NSInteger 段数 在两个球坐标下的线段数。可以做成动画如果值小于3，则该行为是未定义的。默认值是24 使用 创建 C 原子模型 - (SCNGeometry *) carbonAtom&#123; SCNSphere *phere = [SCNSphere sphereWithRadius:1.7]; phere.firstMaterial.diffuse.contents = [UIColor darkGrayColor]; phere.firstMaterial.specular.contents = [UIColor whiteColor]; return phere;&#125; 原子添加到节点 SCNNode *tempNode = [SCNNode node];SCNNode *carbonNode = [SCNNode nodeWithGeometry:[self carbonAtom]];[tempNode addChildNode:carbonNode]; 将创建的原子节点添加到根节点 [self.scene.rootNode addChildNode:[self AddFunction]];]]></content>
      <categories>
        <category>SceneKit</category>
        <category>SCNGeometry</category>
        <category>SCNSphere</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNGeometry]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-SCNGeometry%2F</url>
    <content type="text"><![CDATA[SCNGeometry 几何创建 创建并返回一个空的几何对象 + (instancetype)geometry; 属性 name NSString materials NSArray 材料数组 firstMaterial SCNMaterial 决定几何的第一个材料如果几何图形没有材质，返回nil它等价于上面的“材料”数组中的第一个对象]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNScene-场景]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSCNScene-%E5%9C%BA%E6%99%AF%2FSCNScene%2F</url>
    <content type="text"><![CDATA[SCNScene-场景初始化 SCNScene : NSObject + (instancetype)scene; 属性 根节点 @property(nonatomic, readonly) SCNNode *rootNode; 物理世界 每个场景自动创建一个物理世界对象来模拟场景中的节点物理 使用此属性可访问场景的全局物理属性，例如重力 要将物理添加到特定的节点，请参阅物理体 @property(nonatomic, readonly) SCNPhysicsWorld *physicsWorld 背景（材料属性） @property(nonatomic, readonly) SCNMaterialProperty *background 照明环境 @property(nonatomic, readonly) SCNMaterialProperty *lightingEnvironment 雾开始距离 @property(nonatomic) CGFloat fogStartDistance ; 雾结束距离 @property(nonatomic) CGFloat fogEndDistance ; 雾密度指数 @property(nonatomic) CGFloat fogDensityExponent API_AVAILABLE(macos(10.10)); 雾的颜色 @property(nonatomic, retain) id fogColor ; 停顿 @property(nonatomic, getter=isPaused) BOOL paused API 关键属性 abstract:检索场景属性 指定要读取的属性的NSString对象 - (nullable id)attributeForKey:(NSString *)key; attributeForKey - (void)setAttribute:(nullable id)attribute forKey:(NSString *)key; name + (nullable instancetype)sceneNamed:(NSString *)name name + (nullable instancetype)sceneNamed:(NSString *)name inDirectory:(nullable NSString *)directory options:(nullable NSDictionary&lt;SCNSceneSourceLoadingOption, id&gt; *)options ; url + (nullable instancetype)sceneWithURL:(NSURL *)url options:(nullable NSDictionary&lt;SCNSceneSourceLoadingOption, id&gt; *)options error:(NSError **)error; writeToURL - (BOOL)writeToURL:(NSURL *)url options:(nullable NSDictionary&lt;NSString *, id&gt; *)options delegate:(nullable id &lt;SCNSceneExportDelegate&gt;)delegate progressHandler:(nullable SCNSceneExportProgressHandler)progressHandler; 代理协议 SCNSceneExportDelegate - (nullable NSURL *)writeImage:(UIImage *)image withSceneDocumentURL:(NSURL *)documentURL originalImageURL:(nullable NSURL *)originalImageURL;]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNLight]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-SCNLight%2F</url>
    <content type="text"><![CDATA[SCNLight 光源 光源可以附加到节点上，在渲染场景中提供着色 初始化 初始化 + (instancetype)light; 属性 type @property(nonatomic, copy) SCNLightType type; SCNLightType SCNLightTypeAmbient 环境光 SCNLightTypeOmni 向各方向发出的光照强度一样 SCNLightTypeDirectional 平行光 SCNLightTypeSpot 聚焦光 SCNLightTypeIES SCNLightTypeProbe clolor @property(nonatomic, retain) id color; temperature 温度值 @property(nonatomic) CGFloat temperature; intensity 亮度值 @property(nonatomic) CGFloat intensity 确定接收方的名称 @property(nonatomic, copy, nullable) NSString *name;]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>SCNLight</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNView]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-SCNView%2F</url>
    <content type="text"><![CDATA[SCNViewSCNView : UIView &lt;SCNSceneRenderer, SCNTechniqueSupport&gt; 初始化 options 视图初始化选项 - (instancetype)initWithFrame:(CGRect)frame options:(nullable NSDictionary&lt;NSString *, id&gt; *)options; 属性 节点 @property(nonatomic, retain, nullable) SCNScene *scene; 是否开启连续绘制（类似定位是否持续定位） 当设置为YES时，视图会连续地重绘显示链路帧速率。 当设置为NO时，视图只会在接收方场景发生变化或动画时重新绘制。默认为没有。 @property(nonatomic, assign) BOOL rendersContinuously; 相机控制 @property(nonatomic) BOOL allowsCameraControl; 相机设置 @property(nonatomic, readonly) id &lt;SCNCameraControlConfiguration&gt; cameraControlConfiguration 默认相机控制器 返回默认的SCNCameraController用于驱动当前的视角，当允许cameracontroller设置为YES @property(nonnull, nonatomic, readonly) SCNCameraController* defaultCameraController 帧率 @property(nonatomic) NSInteger preferredFramesPerSecond 指定与接收方关联的EAGL上下文 @property(nonatomic, retain, nullable) EAGLContext *eaglContext; 抗锯齿模式 @property(nonatomic) SCNAntialiasingMode antialiasingMode 主要API 快照 绘制视图的内容并将其作为一个新的图像对象返回 方法是线程安全的，可以随时调用 - (UIImage *)snapshot 播放控制方法 play pause stop SCNView切换相机视角]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>SCNView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-SCNAction]]></title>
    <url>%2F2018%2F01%2F17%2FSceneKit%2FGrammar%2FSceneKit-SCNAction%2F</url>
    <content type="text"><![CDATA[使用 节点（Node） 动画移动到(19,18,17)这个位置，时间=5s SCNAction *action = [SCNAction moveTo:SCNVector3Make(19,18,17) duration:5];[oneNode runAction: action]; SCNAction 主要的APISCNAction 属性 时间间隔，真实时间间隔受speed影响 @property(nonatomic) NSTimeInterval duration 速度系数。假设duration 为10，但speed 为2的话，就是速度是以前的2倍，实际duration 就为5 @property(nonatomic) CGFloat speed 定时模式,有四个常量值：ConstantsSCNActionTimingModeLinear 匀速SCNActionTimingModeEaseIn 一开始慢，慢慢加快SCNActionTimingModeEaseOut 一开始快，逐渐变慢SCNActionTimingModeEaseInEaseOut 开始慢慢地,通过中间的时候加速,然后再次放缓 @property(nonatomic) SCNActionTimingMode timingMode SCNAction主要的API 将node从x,y,z上各移动到指定位置 + (SCNAction *)moveByX:(CGFloat)deltaX y:(CGFloat)deltaY z:(CGFloat)deltaZ duration:(NSTimeInterval)duration 向量方式输入参数，移动到指定位置 + (SCNAction *)moveBy:(SCNVector3)delta duration:(NSTimeInterval)duration 将node移动到location这个位置 + (SCNAction *)moveTo:(SCNVector3)location duration:(NSTimeInterval)duration 将node从x,y,z上各旋转多少度 + (SCNAction *)rotateByX:(CGFloat)xAngle y:(CGFloat)yAngle z:(CGFloat)zAngle duration:(NSTimeInterval)duration /将node从x,y,z上旋转到指定角度 + (SCNAction *)rotateToX:(CGFloat)xAngle y:(CGFloat)yAngle z:(CGFloat)zAngle duration:(NSTimeInterval)duration &gt; // 同上，与上面的方法区别在于多了shortestUnitArc 这个参数，BOOL值。//举个例子：我们需要将一个node从 0度旋转到270度，//如果将shortestUnitArc设置为NO，node会顺时针旋转到270度；//如果将shortestUnitArc设置为YES，node会逆时针旋转90度到270度，//即选择最小的旋转角度旋转到特定的度数。默认为NO + (SCNAction *)rotateToX:(CGFloat)xAngle y:(CGFloat)yAngle z:(CGFloat)zAngle duration:(NSTimeInterval)duration shortestUnitArc:(BOOL)shortestUnitArc // 沿着特定的轴旋转angle度。前面旋转都是沿x,y,z轴旋转，都是互相垂直的，//大家有没有想过如何沿着与x轴成45度夹角的方向旋转node？//这个API大家这里留意一下，//上篇提到的不在X-Z 这个平面旋转，会用这个方法在后面的demo中解决。 + (SCNAction *)rotateByAngle:(CGFloat)angle aroundAxis:(SCNVector3)axis duration:(NSTimeInterval)duration // SCNVector4(x,y,z,angle) 沿着特定的轴旋转到angle度。//这里解释一下angle 类似π，如果angle=2,//我们可不能理解为旋转到2度，而是旋转到2/π*180 度 + (SCNAction *)rotateToAxisAngle:(SCNVector4)axisAngle duration:(NSTimeInterval)duration 缩小（放大）By 多少 + (SCNAction *)scaleBy:(CGFloat)scale duration:(NSTimeInterval)sec 缩小（放大）到 To多少 + (SCNAction *)scaleTo:(CGFloat)scale duration:(NSTimeInterval)sec 淡入将node 的opacity 渐渐变成1 + (SCNAction *)fadeInWithDuration:(NSTimeInterval)sec 淡出 + (SCNAction *)fadeOutWithDuration:(NSTimeInterval)sec 将node 的opacity 渐渐变化特定的数值 + (SCNAction *)fadeOpacityBy:(CGFloat)factor duration:(NSTimeInterval)sec 将node 的opacity 渐渐变化到特定的数值 + (SCNAction *)fadeOpacityTo:(CGFloat)opacity duration:(NSTimeInterval)sec 隐藏node + (SCNAction *)hide 显示node + (SCNAction *)unhide 移除node + (SCNAction *)removeFromParentNode 播放音频 waitForCompletion，BOOL值 如果为YES Action的duration就是音频的时长 如果为NO，可以认为duration 为0 可以去看SCNAudioPlayer 的API + (SCNAction *)playAudioSource:(SCNAudioSource *)source waitForCompletion:(BOOL)wait roup 被用来并发执行多个SCNAction + (SCNAction *)group:(NSArray&lt;SCNAction *&gt; *)actions 顺序执行多个SCNAction，上个SCNAction执行结束后，才执行下个SCNAction + (SCNAction *)sequence:(NSArray&lt;SCNAction *&gt; *)actions 将一个SCNAction执行count 次 + (SCNAction *)repeatAction:(SCNAction *)action count:(NSUInteger)count 一直执行某个SCNAction + (SCNAction *)repeatActionForever:(SCNAction *)action 延迟SCNAction 比如用sequence 顺序执行多个SCNAction时， 可以给SCNAction a,c 中间添加一个SCNAction b, 等a执行结束后，延迟一会，再去执行c + (SCNAction *)waitForDuration:(NSTimeInterval)sec 自定义SCNAction ，你可以在block 做一些操作 + (SCNAction *)runBlock:(void (^)(SCNNode *node))block 在一个特定的队列中，执行block + (SCNAction *)runBlock:(void (^)(SCNNode *node))block queue:(dispatch_queue_t)queue 上篇数学旋转用到的方法，当这个SCNAction执行时，SceneKit 在这个时间间隔内会重复调用actionBlock，并将已逝去的时间传给actionBlock + (SCNAction *)customActionWithDuration:(NSTimeInterval)seconds actionBlock:(void (^)(SCNNode *node, CGFloat elapsedTime))block 在时间间隔内，执行一段JavaScript代码 + (SCNAction *)javaScriptActionWithScript:(NSString *)script duration:(NSTimeInterval)seconds 逆转一个已经创建的SCNAction 相当于CABasicAnimation的autoreverses属性 哪里来的，回哪里去 - (SCNAction *)reversedAction]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
        <tag>SCNAction</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scenekit-Roation-旋转]]></title>
    <url>%2F2018%2F01%2F16%2FSceneKit%2FGrammar%2FScenekit-Roation-%E6%97%8B%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[旋转 每个SCNNode 都有自身的三维坐标系，用CABasicAnimation让SCNNode绕自身的三维坐标轴旋转，所以要特别注意是坐标轴，不是这个SCNNode的几何中心。一般SceneKit 的自带的几个几何体的坐标系原点(0,0,0)就是这个它的几何中心，比如说SCNBox；SCNSphere等等 先实现地球，月球自转]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC-Lib-WCDB -简单使用参考]]></title>
    <url>%2F2018%2F01%2F12%2FOC%2FLib%2FWCDB%2FOC-Lib-WCDB%20-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83%2F</url>
    <content type="text"><![CDATA[创建model Message.h @interface Message : NSObject@property int localID;@property(retain) NSString *content;@property(retain) NSDate *createTime;@property(retain) NSDate *modifiedTime;@end Message.mm 绑定到表的类 绑定到表中的字段 主键 索引属性 @implementation Message // 利用这个宏定义绑定到表的类WCDB_IMPLEMENTATION(Message) // 下面四个宏定义绑定到表中的字段WCDB_SYNTHESIZE(Message, localID)WCDB_SYNTHESIZE(Message, content)WCDB_SYNTHESIZE(Message, createTime)WCDB_SYNTHESIZE(Message, modifiedTime) // 约束宏定义数据库的主键WCDB_PRIMARY(Message, localID) // 定义数据库的索引属性，它直接定义createTime字段为索引// 同时 WCDB 会将表名 + "_index" 作为该索引的名称WCDB_INDEX(Message, "_index", createTime) 类别扩展（model） Message+WCTTableCoding.h 要导入WCDB 协议 WCTTableCoding #import "Message.h"#import &lt;WCDB/WCDB.h&gt; @interface Message (WCTTableCoding) &lt;WCTTableCoding&gt;// 实现WCTTableCoding代理 // 需要绑定到表中的字段在这里声明，在.mm中去绑定WCDB_PROPERTY(localID)WCDB_PROPERTY(content)WCDB_PROPERTY(createTime)WCDB_PROPERTY(modifiedTime) 创建数据库//获取沙盒根目录 NSString *documentsPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject]; // 文件路径 NSString *filePath = [documentsPath stringByAppendingPathComponent:@"model.sqlite"]; NSLog(@"path = %@",filePath); database = [[WCTDatabase alloc]initWithPath:filePath]; // 数据库加密 NSData *password = [@"MyPassword" dataUsingEncoding:NSASCIIStringEncoding]; [database setCipherKey:password]; //测试数据库是否能够打开 if ([database canOpen]) &#123; // WCDB大量使用延迟初始化（Lazy initialization）的方式管理对象，因此SQLite连接会在第一次被访问时被打开。开发者不需要手动打开数据库。 // 先判断表是不是已经存在 if ([database isOpened]) &#123; if ([database isTableExists:tableName]) &#123; NSLog(@"表已经存在"); &#125;else &#123; [database createTableAndIndexesOfName:tableName withClass:Message.class]; &#125; &#125; 插入数据Message *message = [[Message alloc] init];message.localID = 1;message.content = @"Hello, WCDB!";message.createTime = [NSDate date];message.modifiedTime = [NSDate date];/* INSERT INTO message(localID, content, createTime, modifiedTime) VALUES(1, "Hello, WCDB!", 1496396165, 1496396165); */ [database insertObject:message into:@"message"]; 更新数据//UPDATE message SET content="Hello, Wechat!";Message *message = [[Message alloc] init];message.content = @"Hello, Wechat!"; //下面这句在17号的时候和微信团队的人在学习群里面沟通过，这个方法确实是不存在的，使用教程应该会更新，要是没更新注意这个方法//BOOL result = [database updateTable:@"message" onProperties:Message.content withObject:message];[database updateAllRowsInTable:@"message" onProperty:Message.content withObject:message]; 查询数据 //SELECT * FROM message ORDER BY localIDNSArray&lt;Message *&gt; * message = [database getObjectsOfClass:Message.class fromTable:@"message" orderBy:Message.localID.order()];NSLog(@"&gt;&gt;&gt;&gt; %@",message); 删除数据[database deleteObjectsFromTable:@"message" where:Message.localID &gt; 0]; WCTDatabase 事务操作，利用WCTTransactionBOOL ret = [database beginTransaction]; ret = [self insertMessage]; if (ret) &#123; [database commitTransaction]; &#125;else [database rollbackTransaction]; return ret; 使用Block处理事务BOOL commit = [database runTransaction:^BOOL&#123; BOOL ret = [self insertMessage]; if (ret) &#123; return YES; &#125;else return NO; &#125; event:^(WCTTransactionEvent event) &#123; NSLog(@"Event %d", event); &#125;]; return commit; FMDB迁移到WCDBFMDB迁移到WCDB ORM 资料1 官方简单使用文档资料2]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>WCDB</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Lib</tag>
        <tag>WCDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-Lib-WCDB]]></title>
    <url>%2F2018%2F01%2F12%2FOC%2FLib%2FWCDB%2FOC-Lib-WCDB%2F</url>
    <content type="text"><![CDATA[WCDB 文档 WCDB 使用 官方iOS文档 CocoaPods pod &apos;WCDB&apos; 引入 #import &lt;WCDB/WCDB.h&gt; ⚠️引用注意 WCDB是基于Objective-C++，需要将引用WCDB的源文件后缀.m改为.mm。 iOS 11中Bug 需要在pod中指定该库的地址，并且指定分支master target &apos;WCDBDemo&apos; doplatform:ios,&quot;8.0&quot;pod &apos;WCDB&apos;,git: &apos;https://github.com/Tencent/wcdb.git&apos; , branch: &apos;master&apos;pod &apos;YYModel&apos;end 基本简介WCDB 易用 WCDB支持一句代码即可将数据取出并组合为object WINQ(WCDB语言集成查询) 通过WINQ，开发者无须为了拼接SQL的字符串而写一大坨胶水代码 ORM(Object Relational Mapping) 将一个ObjC的类，映射到数据库的表和索引； 将类的property，映射到数据库表的字段 通过ORM，可以达到直接通过Object进行数据库操作，省去拼装过程的目的 WCDB支持灵活、易用的ORM 开发者可以很便捷地定义表、索引、约束，并进行增删改查操作 [database getObjectsOfClass:WCTSampleConvenient.class fromTable:tableName where:WCTSampleConvenient.intValue&gt;=10 limit:20]; 高效 WCDB通过框架层和sqlcipher源码优化，使其更高效的表现 多线程高并发 WCDB支持多线程读与读、读与写并发执行，写与写串行执行 批量写操作性能测试 性能数据，请参考benchmark 完整(WCDB覆盖了数据库相关各种场景的所需功能) 加密：WCDB提供基于SQLCipher的数据库加密 损坏修复：WCDB内建了Repair Kit用于修复损坏的数据库 反注入：WCDB内建了对SQL注入的保护 已有的OC类QRM绑定的过程①协议、定义 定义该类遵守WCTTableCoding协议可以在类声明上定义也可以通过文件模版在category内定义 推荐用第2种，通过文件模板在category内定义，为了隔离Objective-C++代码 不通过category定义，而是选择了在类声明中写，这样的话Message.h 中就需要有宏WCDB_PROPERTY，这样你就在Message.h使用了WCDB的代码，当你把Message.h在其他Controller/View中引用的时候，那相应的Controller/View的.m就需要修改成.mm 。造成不必要的工作，但你用第二种方法写的时候，你就发现在Message.h中是没有任何的关于WCDB的代码的，后面你引用也不需要再去修改 ②修改文件 WCDB基于WINQ，引入了Objective-C++代码，所以对于引入了WCDB的源文件，都需要把后缀.m改为.mm为减少影响范围，可以通过Objective-C的category特性将其隔离，达到只在model层使用Objective-C++编译，而不影响Controller和View这一点在Wiki中是有提到的 ③使用WCDB_PROPERTY宏 使用WCDB_PROPERTY宏在头文件声明需要绑定到数据库表的字段(也就是把你的表里面需要的字段在这里用这宏声明一次)使用WCDB_IMPLEMENTATIO宏在类文件定义绑定到数据库表的类（把这个类绑定到数据库的表，你会在下面创建数据库的时候创建相应的表，表会和类绑定）使用WCDB_SYNTHESIZE宏在类文件定义绑定到数据库表的类（第二步声明了表需要的字段，第三步绑定了表中的类，第四步就等于把表和字段绑定） 宏 声明 绑定到数据库表 WCDB_PROPERTY 头文件声明 字段 WCDB_IMPLEMENTATIO 类类文件定义 类 WCDB_SYNTHESIZE 类文件定义 字段 WCDB_PRIMARY 主键 可选的宏 WCDB_INDEX 索引 可选的宏 WCDB_UNIQUE 唯一约束 可选的宏 WCDB_NOT_NULL 非空约束 可选的宏]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>WCDB</category>
      </categories>
      <tags>
        <tag>Lib</tag>
        <tag>WCDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-QMUIKit]]></title>
    <url>%2F2018%2F01%2F12%2FOC%2FLib%2FQMUIKit%2FOC-QMUIKit%2F</url>
    <content type="text"><![CDATA[QMUIKitQMUIKit 使用 官方文档 CocoaPodspod &apos;QMUIKit&apos;#import &lt;QMUIKit/QMUIKit.h&gt; QMUI iOS 主要由 5 大部分组成：QMUICore 配置表、全局的宏、工具方法等，是所有 QMUI 类的基础代码 QMUIMainFrame 几个常用的 UIViewController 的基类，建议将这几个基类作为你项目里的对应 class 的父类，QMUI iOS 有大量功能也是基于这几个基类实现 UIKitExtensions 对系统 UIKit 的拓展，所有 Category 的方法、属性均会带 qmui_ 前缀，以避免冲突 QMUIComponents 提供大量常用的控件，具体的控件列表、效果展示、使用代码示例请查看 QMUI Demo。 QMUIResources存储 QMUI 控件里可能用到的一些图，例如表情面板的删除按钮、选图控件的 checkbox、QMUITips 那些成功、失败的 icon 等。 功能列表 Other腾讯开源iOS自动内存泄露检测工具MLeaksFinder 腾讯开源的数据库框架 QMUI iOS——致力于提高项目 UI 开发效率的解决方案 专注于提升H5首屏速度优化]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>QMUIKit</category>
      </categories>
      <tags>
        <tag>QMUIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Lib-CYLTabBarCtl]]></title>
    <url>%2F2018%2F01%2F10%2FOC%2FLib%2FCYLTabBarCtl%2FOC-Lib-CYLTabBarCtl%2F</url>
    <content type="text"><![CDATA[Github Adress]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>CYLTabBarCtl</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SceneKit-Panorama-全景图]]></title>
    <url>%2F2018%2F01%2F10%2FSceneKit%2FGrammar%2FSceneKit-Panorama-%E5%85%A8%E6%99%AF%E5%9B%BE%2F</url>
    <content type="text"></content>
      <categories>
        <category>SceneKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git-Gitlab代码托管配置]]></title>
    <url>%2F2018%2F01%2F09%2FGit%2FGit-Gitlab%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Gitlab平台设置为Project添加Gitcd “本地项目的路径” git init //初始化 git remote add origin git@gitlab.com:USERNAME/PROJECTNAME.git //将”USERNAME”和”PROJECTNAME”替换为自己的用户名和项目名 git add . //注意add和”.”之间的空格 git commit -m ‘commit description’ //提交改动到本地库git push -u origin master //push到Gitlab 问题1 需要注意，输入commit命令后会提示输入commit message，如下图，对终端不熟悉的同学可能要抓狂了，这里需要按s键进入INSERT模式,开始输入commit message，最后按ESC，然后输入:wq退出commit message输入模式 注意：建议commit message第一行输入标题（概要），空一行再输入详细信息。当然，这是建议，如果你觉得无所谓，也可以随意输入或直接:wq跳过 输入commit message 坑No.2git push -u origin master命令后可以看到提示：error: src refspec master does not match any.error: failed to push some refs to ‘git@gitlab.com:int1987/testProject.git’ 这是因为没有项目说明书，所以push失败 解决方案：touch README //生成说明文件 git add README //添加说明文件到 git commit -m ‘commit readme file’ //提交改动 Push到Gitlab添加README后再重新输入git push -u origin master，push项目到Gitlab， 首次push会提示gitlab.com的真实性无法确定，输入yes，确定即可。之后gitlab.com就会被添加到已知服务器（可以在~/.ssh文件夹中查看到多了一个known_hosts文件，它就是存储已知服务器的文件） Gitlab https://baijiahao.baidu.com/s?id=1560915146966961&amp;wfr=spider&amp;for=pc http://blog.csdn.net/lemonaha/article/details/69977098]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-SceneKit-Reference]]></title>
    <url>%2F2018%2F01%2F09%2FSceneKit%2FGrammar%2FSceneKit-Reference%2F</url>
    <content type="text"><![CDATA[资料 参考学习1 参考学习2 只能学习而已，太难 没找到博客]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-SceneKit-展示3D模型&施加动画]]></title>
    <url>%2F2018%2F01%2F08%2FSceneKit%2FGrammar%2FSceneKit-%E5%B1%95%E7%A4%BA3D%E6%A8%A1%E5%9E%8B%26%E6%96%BD%E5%8A%A0%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-SceneKit-加载obj文件]]></title>
    <url>%2F2018%2F01%2F08%2FSceneKit%2FGrammar%2FSceneKit-%E5%8A%A0%E8%BD%BDobj%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>SceneKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-SceneKit-Base]]></title>
    <url>%2F2018%2F01%2F08%2FSceneKit%2FGrammar%2FSceneKit-%20Base%2F</url>
    <content type="text"><![CDATA[SceneKitSceneKit 的三维坐标系 右手坐标系(笛卡尔坐标系)与其他3D框架共享数据，了解其框架是右、左手坐标系（就是Z 轴的正负不一样） 相关类 SCNViewSCNSceneRenderer 类似UIView 用来显示 SceneKit 的内容，定义了一些代理方法，可以用 addSubView 方法添加到UiView 中 SCNScene 场景图(SceneKit内容的容器) 从3D建模工具生成的.dae文件中加载一个场景，或者用代码创建一个 ，然后把它显示在视图上 SCNNode 节点树的模型类对象 可以把摄像机，灯光，几何体附加到节点上 SCNGeometry 一个可以连接到一个节点的三维物体 一个几何体（有时称为模型或网格）只定义了一个可见物体的形状。要定义对象的表面颜色图案，你必需要给几何体要附加材料。然后给材料贴图，或者上色，这个几何体表面才会有颜色，或者图案。SceneKit 提供了几种常见几何体，是SCNGeometry的子类，比如长方体，球，圆柱球等等 SCNMaterial 材质 由于在3D建模工具中呈现球形，所以也叫材质球。上色，贴图全靠它 SCNLight 光源 光源可以附加到节点上，在渲染场景中提供着色 SCNCamera 虚拟摄像机,观察场景的视角 虚拟摄像机可以附加到节点上，提供了一个场景的视图要显示场景中的内容, 必须为节点指定一个SCNCamera对象相机的视角始终沿着节点的局部坐标系的负z轴]]></content>
      <categories>
        <category>SceneKit</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>SceneKit</tag>
        <tag>3D引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Lib-ArcGIS-大图加载]]></title>
    <url>%2F2018%2F01%2F08%2FOC%2FLib%2FArcGIS%2FOC-Lib-ArcGIS-%E5%A4%A7%E5%9B%BE%E5%8A%A0%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[资料 https://developers.arcgis.com http://blog.csdn.net/pzhtpf/article/details/51027047]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>ArcGIS</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Lib</tag>
        <tag>ArcGIS</tag>
        <tag>大图加载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-常用的命令]]></title>
    <url>%2F2018%2F01%2F08%2FGit%2FGit-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1. git status（查看本地分支文件信息，确保更新时不产生冲突）2. git checkout -- [file name] （若文件有修改，可以还原到最初状态; 若文件需要更新到服务器上，应该先merge到服务器，再更新到本地）3. git branch（查看当前分支情况）4. git checkout [remote branch](若分支为本地分支，则需切换到服务器的远程分支)5. git pull若命令执行成功，则更新代码成功！ &lt;a&gt;github的提交方式 （1）git add .--------------------存储到本地 git commit -m &apos;message&apos;-------存储时的标记（修改了哪些地方，方便下次查询） git pull------------------------下载服务器代码 git push------------------------上传代码至服务器 &lt;b&gt;svn服务器的提交方式 （1）git add . ------------------存储到本地 git commit -m &apos;message&apos;--------存储时的标记（修改了哪些地方，方便下次查询） git svn rebase------------------下载服务器代码 git svn dcommit-----------------上传代码至服务器 &lt;c&gt;其他相关的git命令 （1）git branch-------------------查看当前属于哪个分支 1、只有冲突存在时才会修改分支——改为冲突再git add . 2、git rebase –-continue-------------------自动合并 3、git checkout –b svn 新建分支名----------新建分支存储现有文件 4、git branch-------------------------------查看在哪个分支下 5、git checkout master----------------------将其放到master分支下 6、git merge-------------------------------整合分支 7、git branch -d 分支名----------------------删除分支 （2）git checkout + 上传的commit编号-----------将本地代码恢复到此状态 （3）git log------------------------------------查看本地git上传日志 （4）git log -p app/controllers/grids_controller.rb----查看某个文件的修改历史 （5）git checkout d0eb6ef3afe8a377943d3cf6f1e9c320c18f6f32 app/controllers/charts_controller.rb-----------返回到这个版本的文件（重现错误） （6）git diff ＋ commit编号--------------------------查询不同代码]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIWKWebView]]></title>
    <url>%2F2017%2F12%2F21%2FSwift%2FUIKit%2FSwift-UIKit-UIWKWebView%2F</url>
    <content type="text"></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>WKWebView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>WKWebView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-调试操作 -07-08]]></title>
    <url>%2F2017%2F12%2F20%2FRxSwift%2FGrammar%2F08-%E7%89%B9%E5%BE%81%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[关于可被观察的序列（Observable）我们应该都了解的查不多了。 除了 Observable，RxSwift 还为我们提供了一些特征序列（Traits）：Single、Completable、Maybe、Driver、ControlEvent可以将这些 Traits 看作是 Observable 的另外一个版本。它们之间的区别是 Observable 是能够用于任何上下文环境的通用序列 而 Traits 可以帮助我们更准确的描述序列。同时它们还为我们提供上下文含义、语法糖，让我们能够用更加优雅的方式书写代码 ①Single ②Completable ③Maybe ④asMaybe ⑤Driver ⑥ControlProperty ⑦ControlEvent ①Single❶基本介绍 Single 是 Observable 的另外一个版本但它不像 Observable 可以发出多个元素，它要么只能发出一个元素，要么产生一个 error 事件 发出一个元素，或一个 error 事件 不会共享状态变化 ❷应用场景 Single 比较常见的例子就是执行 HTTP 请求，然后返回一个应答或错误。不过我们也可以用 Single 来描述任何只有一个元素的序列 ❸SingleEvent 为方便使用，RxSwift 还为 Single 订阅提供了一个枚举（SingleEvent）： .success：里面包含该 Single 的一个元素值 .error：用于包含错误 public enum SingleEvent&lt;Element&gt; &#123; case success(Element) case error(Swift.Error)&#125; ❹使用样例 创建 Single 和创建 Observable 非常相似。下面代码我们定义一个用于生成网络请求 Single 的函数： //获取豆瓣某频道下的歌曲信息func getPlaylist(_ channel: String) -&gt; Single&lt;[String: Any]&gt; &#123; return Single&lt;[String: Any]&gt;.create &#123; single in let url = "https://douban.fm/j/mine/playlist?" + "type=n&amp;channel=\(channel)&amp;from=mainsite" let task = URLSession.shared.dataTask(with: URL(string: url)!) &#123; data, _, error in if let error = error &#123; single(.error(error)) return &#125; guard let data = data, let json = try? JSONSerialization.jsonObject(with: data, options: .mutableLeaves), let result = json as? [String: Any] else &#123; single(.error(DataError.cantParseJSON)) return &#125; single(.success(result)) &#125; task.resume() return Disposables.create &#123; task.cancel() &#125; &#125;&#125; //与数据相关的错误类型enum DataError: Error &#123; case cantParseJSON&#125; ❺接着我们可以使用如下方式使用这个 Single：import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; //获取第0个频道的歌曲信息 getPlaylist("0") .subscribe &#123; event in switch event &#123; case .success(let json): print("JSON结果: ", json) case .error(let error): print("发生错误: ", error) &#125; &#125; .disposed(by: disposeBag) &#125;&#125; ❻也可以使用 subscribe(onSuccess:onError:) 这种方式：import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; //获取第0个频道的歌曲信息 getPlaylist("0") .subscribe(onSuccess: &#123; json in print("JSON结果: ", json) &#125;, onError: &#123; error in print("发生错误: ", error) &#125;) .disposed(by: disposeBag) &#125;&#125;print ===打印出json结果 ❼asSingle() 可以通过调用 Observable 序列的 .asSingle() 方法，将它转换为 Single let disposeBag = DisposeBag() Observable.of("1") .asSingle() .subscribe(&#123; print($0) &#125;) .disposed(by: disposeBag) print ==== sucess("1") ②Completable❶基本介绍 Completable 是 Observable 的另外一个版本。不像 Observable 可以发出多个元素，它要么只能产生一个 completed 事件，要么产生一个 error 事件 不会发出任何元素 只会发出一个 completed 事件或者一个 error 事件 不会共享状态变化-❷应用场景 ompletable 和 Observable 有点类似。适用于那些只关心任务是否完成，而不需要在意任务返回值的情况。比如：在程序退出时将一些数据缓存到本地文件，供下次启动时加载。像这种情况我们只关心缓存是否成功 ❸CompletableEvent 为方便使用，RxSwift 为 Completable 订阅提供了一个枚举（CompletableEvent）： .completed：用于产生完成事件 .error：用于产生一个错误 public enum CompletableEvent &#123; case error(Swift.Error) case completed&#125; ❹使用样例 1.创建 Completable 和创建 Observable 非常相似。下面代码我们使用 Completable 来模拟一个数据缓存本地的操作 //将数据缓存到本地func cacheLocally() -&gt; Completable &#123; return Completable.create &#123; completable in //将数据缓存到本地（这里掠过具体的业务代码，随机成功或失败） let success = (arc4random() % 2 == 0) guard success else &#123; completable(.error(CacheError.failedCaching)) return Disposables.create &#123;&#125; &#125; completable(.completed) return Disposables.create &#123;&#125; &#125;&#125; //与缓存相关的错误类型enum CacheError: Error &#123; case failedCaching&#125; 2.接着我们可以使用如下方式使用这个 Completable： cacheLocally() .subscribe &#123; completable in switch completable &#123; case .completed: print("保存成功!") case .error(let error): print("保存失败: \(error.localizedDescription)") &#125; &#125; .disposed(by: disposeBag) 3.也可以使用 subscribe(onCompleted:onError:) 这种方式： cacheLocally() .subscribe(onCompleted: &#123; print("保存成功!") &#125;, onError: &#123; error in print("保存失败: \(error.localizedDescription)") &#125;) .disposed(by: disposeBag) ③Maybe❶基本介绍 Maybe 同样是 Observable 的另外一个版本。它介于 Single 和 Completable 之间，它要么只能发出一个元素，要么产生一个 completed 事件，要么产生一个 error 事件 发出一个元素、或者一个 completed 事件、或者一个 error 事件 不会共享状态变化 ❷应用场景 Maybe 适合那种可能需要发出一个元素，又可能不需要发出的情况 ❸MaybeEvent 为方便使用，RxSwift 为 Maybe 订阅提供了一个枚举（MaybeEvent）： .success：里包含该 Maybe 的一个元素值 .completed：用于产生完成事件 .error：用于产生一个错误 public enum MaybeEvent&lt;Element&gt; &#123; case success(Element) case error(Swift.Error) case completed&#125; ❹使用样例 1.创建 Maybe 和创建 Observable 同样非常相似： func generateString() -&gt; Maybe&lt;String&gt; &#123; return Maybe&lt;String&gt;.create &#123; maybe in //成功并发出一个元素 maybe(.success("hangge.com")) //成功但不发出任何元素 maybe(.completed) //失败 //maybe(.error(StringError.failedGenerate)) return Disposables.create &#123;&#125; &#125;&#125; //与缓存相关的错误类型enum StringError: Error &#123; case failedGenerate&#125; 2.接着我们可以使用如下方式使用这个 Maybe： generateString() .subscribe &#123; maybe in switch maybe &#123; case .success(let element): print("执行完毕，并获得元素：\(element)") case .completed: print("执行完毕，且没有任何元素。") case .error(let error): print("执行失败: \(error.localizedDescription)") &#125; &#125; .disposed(by: disposeBag) 3.也可以使用 subscribe(onSuccess:onCompleted:onError:) 这种方式 generateString() .subscribe(onSuccess: &#123; element in print("执行完毕，并获得元素：\(element)") &#125;, onError: &#123; error in print("执行失败: \(error.localizedDescription)") &#125;, onCompleted: &#123; print("执行完毕，且没有任何元素。") &#125;) .disposed(by: disposeBag) ④asMaybe() 可以通过调用 Observable 序列的 .asMaybe() 方法，将它转换为 Maybe let disposeBag = DisposeBag() Observable.of(&quot;1&quot;) .asMaybe() .subscribe(&#123; print($0) &#125;) .disposed(by: disposeBag)//printsuccess(&quot;1&quot;) ⑤Driver❶基本介绍 Driver 可以说是最复杂的 trait，它的目标是提供一种简便的方式在 UI 层编写响应式代码如果我们的序列满足如下特征，就可以使用它 不会产生 error 事件 一定在主线程监听（MainScheduler） 共享状态变化（shareReplayLatestWhileConnected） ❷为什么要使用 Driver? Driver 最常使用的场景应该就是需要用序列来驱动应用程序的情况了，比如： 通过 CoreData 模型驱动 UI 使用一个 UI 元素值（绑定）来驱动另一个 UI 元素值 与普通的操作系统驱动程序一样，如果出现序列错误，应用程序将停止响应用户输入在主线程上观察到这些元素也是极其重要的，因为 UI 元素和应用程序逻辑通常不是线程安全的此外，使用构建 Driver 的可观察的序列，它是共享状态变化 ❸使用样例 官方提供的样例，大致的意思是根据一个输入框的关键字，来请求数据，然后将获取到的结果绑定到另一个 Label 和 TableView 中 初学者使用 Observable 序列加 bindTo 绑定来实现这个功能的话可能会这么写： let results = query.rx.text .throttle(0.3, scheduler: MainScheduler.instance) //在主线程中操作，0.3秒内值若多次改变，取最后一次 .flatMapLatest &#123; query in //筛选出空值, 拍平序列 fetchAutoCompleteItems(query) //向服务器请求一组结果&#125; //将返回的结果绑定到用于显示结果数量的label上results .map &#123; "\($0.count)" &#125; .bind(to: resultCount.rx.text) .disposed(by: disposeBag) //将返回的结果绑定到tableView上results .bind(to: resultsTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .disposed(by: disposeBag) 但这个代码存在如下 3 个问题 如果 fetchAutoCompleteItems 的序列产生了一个错误（网络请求失败），这个错误将取消所有绑定。此后用户再输入一个新的关键字时，是无法发起新的网络请求。 如果 fetchAutoCompleteItems 在后台返回序列，那么刷新页面也会在后台进行，这样就会出现异常崩溃。 返回的结果被绑定到两个 UI 元素上。那就意味着，每次用户输入一个新的关键字时，就会分别为两个 UI 元素发起 HTTP 请求，这并不是我们想要的结果。 把上面几个问题修改后的代码是这样的 let results = query.rx.text .throttle(0.3, scheduler: MainScheduler.instance)//在主线程中操作，0.3秒内值若多次改变，取最后一次 .flatMapLatest &#123; query in //筛选出空值, 拍平序列 fetchAutoCompleteItems(query) //向服务器请求一组结果 .observeOn(MainScheduler.instance) //将返回结果切换到到主线程上 .catchErrorJustReturn([]) //错误被处理了，这样至少不会终止整个序列 &#125; .shareReplay(1) //HTTP 请求是被共享的 //将返回的结果绑定到显示结果数量的label上results .map &#123; "\($0.count)" &#125; .bind(to: resultCount.rx.text) .disposed(by: disposeBag) //将返回的结果绑定到tableView上results .bind(to: resultsTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .disposed(by: disposeBag) 虽然我们通过增加一些额外的处理，让程序可以正确运行。到对于一个大型的项目来说，如果都这么干也太麻烦了，而且容易遗漏出错 3.而如果我们使用 Driver 来实现的话就简单了，代码如下： 代码讲解： （1）首先我们使用 asDriver 方法将 ControlProperty 转换为 Driver。 （2）接着我们可以用 .asDriver(onErrorJustReturn: []) 方法将任何 Observable 序列都转成 Driver，因为我们知道序列转换为 Driver 要他满足 3 个条件： 不会产生 error 事件 一定在主线程监听（MainScheduler） 共享状态变化（shareReplayLatestWhileConnected） 而 asDriver(onErrorJustReturn: []) 相当于以下代码： let safeSequence = xs .observeOn(MainScheduler.instance) // 主线程监听 .catchErrorJustReturn(onErrorJustReturn) // 无法产生错误 .share(replay: 1, scope: .whileConnected)// 共享状态变化 return Driver(raw: safeSequence) // 封装 （3）同时在 Driver 中，框架已经默认帮我们加上了 shareReplayLatestWhileConnected，所以我们也没必要再加上”replay”相关的语句了。 （4）最后记得使用 drive 而不是 bindTo let results = query.rx.text.asDriver() // 将普通序列转换为 Driver .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query) .asDriver(onErrorJustReturn: []) // 仅仅提供发生错误时的备选返回值 &#125; //将返回的结果绑定到显示结果数量的label上results .map &#123; &quot;\($0.count)&quot; &#125; .drive(resultCount.rx.text) // 这里使用 drive 而不是 bindTo .disposed(by: disposeBag) //将返回的结果绑定到tableView上results .drive(resultsTableView.rx.items(cellIdentifier: &quot;Cell&quot;)) &#123; // 同样使用 drive 而不是 bindTo (_, result, cell) in cell.textLabel?.text = &quot;\(result)&quot; &#125; .disposed(by: disposeBag) 由于 drive 方法只能被 Driver 调用。这意味着，如果代码存在 drive，那么这个序列不会产生错误事件并且一定在主线程监听。这样我们就可以安全的绑定 UI 元素 ⑥ControlProperty❶基本介绍 1.ControlProperty 是专门用来描述 UI 控件属性，拥有该类型的属性都是被观察者（Observable)ControlProperty 具有以下特征： 不会产生 error 事件 一定在 MainScheduler 订阅（主线程订阅） 一定在 MainScheduler 监听（主线程监听） 共享状态变化 ❷使用样例 1.其实在 RxCocoa 下许多 UI 控件属性都是被观察者（可观察序列）。比如我们查看源码（UITextField+Rx.swift），可以发现 UITextField 的 rx.text 属性类型便是 ControlProperty： import RxSwiftimport UIKit extension Reactive where Base: UITextField &#123; public var text: ControlProperty&lt;String?&gt; &#123; return value &#125; public var value: ControlProperty&lt;String?&gt; &#123; return base.rx.controlPropertyWithDefaultEvents( getter: &#123; textField in textField.text &#125;, setter: &#123; textField, value in if textField.text != value &#123; textField.text = value &#125; &#125; ) &#125; //......&#125; 2.那么我们如果想让一个 textField 里输入内容实时地显示在另一个 label 上，即前者作为被观察者，后者作为观察者。可以这么写 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var textField: UITextField! @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //将textField输入的文字绑定到label上 textField.rx.text .bind(to: label.rx.text) .disposed(by: disposeBag) &#125;&#125; extension UILabel &#123; public var fontSize: Binder&lt;CGFloat&gt; &#123; return Binder(self) &#123; label, fontSize in label.font = UIFont.systemFont(ofSize: fontSize) &#125; &#125;&#125; ⑦ControlEvent❶基本介绍 1.ControlEvent 是专门用于描述 UI 所产生的事件，拥有该类型的属性都是被观察者（Observable）2.ControlEvent 和 ControlProperty 一样，都具有以下特征 不会产生 error 事件 一定在 MainScheduler 订阅（主线程订阅） 一定在 MainScheduler 监听（主线程监听） 共享状态变化 ❷使用样例 1.同样地，在 RxCocoa 下许多 UI 控件的事件方法都是被观察者（可观察序列）。比如我们查看源码（UIButton+Rx.swift），可以发现 UIButton 的 rx.tap 方法类型便是 ControlEvent： import RxSwiftimport UIKit extension Reactive where Base: UIButton &#123; public var tap: ControlEvent&lt;Void&gt; &#123; return controlEvent(.touchUpInside) &#125;&#125; 2.那么我们如果想实现当一个 button 被点击时，在控制台输出一段文字。即前者作为被观察者，后者作为观察者。可以这么写： import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() @IBOutlet weak var button: UIButton! override func viewDidLoad() &#123; //订阅按钮点击事件 button.rx.tap .subscribe(onNext: &#123; print(&quot;欢迎访问hangge.com&quot;) &#125;).disposed(by: disposeBag) &#125;&#125; UIViewController 添加 RxSwift 扩展UIViewController+Rx.swift 这里我们对 UIViewController 进行扩展： 将 viewDidLoad、viewDidAppear、viewDidLayoutSubviews 等各种 ViewController 生命周期的方法转成 ControlEvent 方便在 RxSwift 项目中使用。-增加 isVisible 序列属性，方便对视图的显示状态进行订阅。 增加 isDismissing 序列属性，方便对视图的释放进行订阅。 import UIKitimport RxCocoaimport RxSwift public extension Reactive where Base: UIViewController &#123; public var viewDidLoad: ControlEvent&lt;Void&gt; &#123; let source = self.methodInvoked(#selector(Base.viewDidLoad)).map &#123; _ in &#125; return ControlEvent(events: source) &#125; public var viewWillAppear: ControlEvent&lt;Bool&gt; &#123; let source = self.methodInvoked(#selector(Base.viewWillAppear)) .map &#123; $0.first as? Bool ?? false &#125; return ControlEvent(events: source) &#125; public var viewDidAppear: ControlEvent&lt;Bool&gt; &#123; let source = self.methodInvoked(#selector(Base.viewDidAppear)) .map &#123; $0.first as? Bool ?? false &#125; return ControlEvent(events: source) &#125; public var viewWillDisappear: ControlEvent&lt;Bool&gt; &#123; let source = self.methodInvoked(#selector(Base.viewWillDisappear)) .map &#123; $0.first as? Bool ?? false &#125; return ControlEvent(events: source) &#125; public var viewDidDisappear: ControlEvent&lt;Bool&gt; &#123; let source = self.methodInvoked(#selector(Base.viewDidDisappear)) .map &#123; $0.first as? Bool ?? false &#125; return ControlEvent(events: source) &#125; public var viewWillLayoutSubviews: ControlEvent&lt;Void&gt; &#123; let source = self.methodInvoked(#selector(Base.viewWillLayoutSubviews)) .map &#123; _ in &#125; return ControlEvent(events: source) &#125; public var viewDidLayoutSubviews: ControlEvent&lt;Void&gt; &#123; let source = self.methodInvoked(#selector(Base.viewDidLayoutSubviews)) .map &#123; _ in &#125; return ControlEvent(events: source) &#125; public var willMoveToParentViewController: ControlEvent&lt;UIViewController?&gt; &#123; let source = self.methodInvoked(#selector(Base.willMove)) .map &#123; $0.first as? UIViewController &#125; return ControlEvent(events: source) &#125; public var didMoveToParentViewController: ControlEvent&lt;UIViewController?&gt; &#123; let source = self.methodInvoked(#selector(Base.didMove)) .map &#123; $0.first as? UIViewController &#125; return ControlEvent(events: source) &#125; public var didReceiveMemoryWarning: ControlEvent&lt;Void&gt; &#123; let source = self.methodInvoked(#selector(Base.didReceiveMemoryWarning)) .map &#123; _ in &#125; return ControlEvent(events: source) &#125; //表示视图是否显示的可观察序列，当VC显示状态改变时会触发 public var isVisible: Observable&lt;Bool&gt; &#123; let viewDidAppearObservable = self.base.rx.viewDidAppear.map &#123; _ in true &#125; let viewWillDisappearObservable = self.base.rx.viewWillDisappear .map &#123; _ in false &#125; return Observable&lt;Bool&gt;.merge(viewDidAppearObservable, viewWillDisappearObservable) &#125; //表示页面被释放的可观察序列，当VC被dismiss时会触发 public var isDismissing: ControlEvent&lt;Bool&gt; &#123; let source = self.sentMessage(#selector(Base.dismiss)) .map &#123; $0.first as? Bool ?? false &#125; return ControlEvent(events: source) &#125;&#125; 使用样例 1.通过扩展，我们可以直接对 VC 的各种方法进行订阅。 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() required init?(coder aDecoder: NSCoder) &#123; super.init(coder: aDecoder) //页面显示状态完毕 self.rx.isVisible .subscribe(onNext: &#123; visible in print(&quot;当前页面显示状态：\(visible)&quot;) &#125;).disposed(by: disposeBag) //页面加载完毕 self.rx.viewDidLoad .subscribe(onNext: &#123; print(&quot;viewDidLoad&quot;) &#125;).disposed(by: disposeBag) //页面将要显示 self.rx.viewWillAppear .subscribe(onNext: &#123; animated in print(&quot;viewWillAppear&quot;) &#125;).disposed(by: disposeBag) //页面显示完毕 self.rx.viewDidAppear .subscribe(onNext: &#123; animated in print(&quot;viewDidAppear&quot;) &#125;).disposed(by: disposeBag) &#125; override func viewDidLoad() &#123; super.viewDidLoad() &#125;&#125; 2.运行结 viewDidLoadviewWillAppear当前页面显示状态： trueviewDidApper]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-调试操作]]></title>
    <url>%2F2017%2F12%2F20%2FRxSwift%2FGrammar%2F07-08-Operators-%E8%B0%83%E8%AF%95%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[①debug ②RxSwift.Resources.total ③retry ①debug❶基本介绍 可以将 debug 调试操作符添加到一个链式步骤当中，这样系统就能将所有的订阅者、事件、和处理等详细信息打印出来，方便我们开发调试 ❷使用样例let disposeBag = DisposeBag() Observable.of("2", "3") .startWith("1") .debug() .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag)//print2018-10-06 15:39:38.633: ViewController.swift:85 (viewDidLoad()) -&gt; subscribed2018-10-06 15:39:38.644: ViewController.swift:85 (viewDidLoad()) -&gt; Event next(1)12018-10-06 15:39:38.647: ViewController.swift:85 (viewDidLoad()) -&gt; Event next(2)22018-10-06 15:39:38.647: ViewController.swift:85 (viewDidLoad()) -&gt; Event next(3)32018-10-06 15:39:38.648: ViewController.swift:85 (viewDidLoad()) -&gt; Event completed2018-10-06 15:39:38.648: ViewController.swift:85 (viewDidLoad()) -&gt; isDisposed ❸debug() 方法还可以传入标记参数，这样当项目中存在多个 debug 时可以很方便地区分出来。let disposeBag = DisposeBag() Observable.of("2", "3") .startWith("1") .debug("调试1") .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) //print=== 调试1 -&gt; subscribed 调试1 -&gt; Event next(1)1 调试1 -&gt; Event next(2)2调试1 -&gt; Event next(3)3 调试1 -&gt; Event completed 调试1 -&gt; isDisposed ②RxSwift.Resources.total❶基本介绍 通过将 RxSwift.Resources.total 打印出来，我们可以查看当前 RxSwift 申请的所有资源数量。这个在检查内存泄露的时候非常有用 ❷使用样例print(RxSwift.Resources.total) let disposeBag = DisposeBag() print(RxSwift.Resources.total) Observable.of("BBB", "CCC") .startWith("AAA") .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) print(RxSwift.Resources.total)//print02AAABBBCCC3 ③retry基本介绍 使用该方法当遇到错误的时候，会重新订阅该序列。比如遇到网络请求失败时，可以进行重新连接。retry() 方法可以传入数字表示重试次数。不传的话只会重试一次 使用样例let disposeBag = DisposeBag()var count = 1 let sequenceThatErrors = Observable&lt;String&gt;.create &#123; observer in observer.onNext("a") observer.onNext("b") //让第一个订阅时发生错误 if count == 1 &#123; observer.onError(MyError.A) print("Error encountered") count += 1 &#125; observer.onNext("c") observer.onNext("d") observer.onCompleted() return Disposables.create()&#125; sequenceThatErrors .retry(2) //重试2次（参数为空则只重试一次） .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag)运行结果如下： //printabError eccounteredabcd]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-错误处理操作-07-07]]></title>
    <url>%2F2017%2F12%2F20%2FRxSwift%2FGrammar%2F07-07-Operators-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[错误处理操作符可以用来帮助我们对 Observable 发出的 error 事件做出响应，或者从错误中恢复。这里我们先自定义一个错误枚举供后面使用 enum MyError: Error &#123; case A case B&#125; ①catchErrorJustReturn##基本介绍 当遇到 error 事件的时候，就返回指定的值，然后结束。 使用样例let disposeBag = DisposeBag() let sequenceThatFails = PublishSubject&lt;String&gt;() sequenceThatFails .catchErrorJustReturn("错误") .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) sequenceThatFails.onNext("a")sequenceThatFails.onNext("b")sequenceThatFails.onNext("c")sequenceThatFails.onError(MyError.A)sequenceThatFails.onNext("d")//printabc错误 ②catchError基本介绍 该方法可以捕获 error，并对其进行处理。同时还能返回另一个 Observable 序列进行订阅（切换到新的序列） 使用样例let disposeBag = DisposeBag() let sequenceThatFails = PublishSubject&lt;String&gt;()let recoverySequence = Observable.of("1", "2", "3") sequenceThatFails .catchError &#123; print("Error:", $0) return recoverySequence &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) sequenceThatFails.onNext("a")sequenceThatFails.onNext("b")sequenceThatFails.onNext("c")sequenceThatFails.onError(MyError.A)sequenceThatFails.onNext("d")//printabcError: A123 ③retry基本介绍 使用该方法当遇到错误的时候，会重新订阅该序列。比如遇到网络请求失败时，可以进行重新连接。retry() 方法可以传入数字表示重试次数。不传的话只会重试一次 使用样例let disposeBag = DisposeBag()var count = 1 let sequenceThatErrors = Observable&lt;String&gt;.create &#123; observer in observer.onNext("a") observer.onNext("b") //让第一个订阅时发生错误 if count == 1 &#123; observer.onError(MyError.A) print("Error encountered") count += 1 &#125; observer.onNext("c") observer.onNext("d") observer.onCompleted() return Disposables.create()&#125; sequenceThatErrors .retry(2) //重试2次（参数为空则只重试一次） .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag)运行结果如下： //printabError eccounteredabcd]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-实用的操作符-07-06]]></title>
    <url>%2F2017%2F12%2F20%2FRxSwift%2FGrammar%2F07-06-Operators-%E5%AE%9E%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[①delay ②delaySubscription ③materialize ⑤timeout ④dematerialize ⑥using ①delay ①delay基本介绍 该操作符会将 Observable 的所有元素都先拖延一段设定好的时间，然后才将它们发送出来 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; Observable.of(1, 2, 1) .delay(3, scheduler: MainScheduler.instance) //元素延迟3秒才发出 .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) &#125;&#125;//print121 ②delaySubscription ②delaySubscription基本介绍 使用该操作符可以进行延时订阅。即经过所设定的时间后，才对 Observable 进行订阅操作 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; Observable.of(1, 2, 1) .delaySubscription(3, scheduler: MainScheduler.instance) //延迟3秒才开始订阅 .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) &#125;&#125;//print121 ③concat ③materialize基本介绍 该操作符可以将序列产生的事件，转换成元素通常一个有限的 Observable 将产生零个或者多个 onNext 事件，最后产生一个 onCompleted 或者 onError 事件。而 materialize 操作符会将 Observable 产生的这些事件全部转换成元素，然后发送出来 使用样例1let disposeBag = DisposeBag() let subject1 = BehaviorSubject(value: "🍎")let subject2 = BehaviorSubject(value: "🐶") let variable = Variable(subject1) variable.asObservable() .concat() .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) subject1.onNext("🍐")subject1.onNext("🍊") variable.value = subject2 subject2.onNext("🐱") //1完成前，会被忽略subject2.onNext("teng") //1完成前，会被忽略subject2.onNext("fei") //1完成前的最后一个，会被接收 subject1.onCompleted() subject2.onNext("🐭")next(🍎)next(🍐)next(🍊)next(fei)next(🐭) 使用样例2import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; Observable.of(1, 2, 1) .materialize() .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) &#125;&#125;//printnext(1)next(2)next(1)completeted ④dematerialize ④dematerialize基本介绍 该操作符的作用和 materialize 正好相反，它可以将 materialize 转换后的元素还原 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; Observable.of(1, 2, 1) .materialize() .dematerialize() .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) &#125;&#125;//print121 ⑤timeout ⑤timeout基本介绍 使用该操作符可以设置一个超时时间。如果源 Observable 在规定时间内没有发任何出元素，就产生一个超时的 error 事件 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; //定义好每个事件里的值以及发送的时间 let times = [ [ "value": 1, "time": 0 ], [ "value": 2, "time": 0.5 ], [ "value": 3, "time": 1.5 ], [ "value": 4, "time": 4 ], [ "value": 5, "time": 5 ] ] //生成对应的 Observable 序列并订阅 Observable.from(times) .flatMap &#123; item in return Observable.of(Int(item["value"]!)) .delaySubscription(Double(item["time"]!), scheduler: MainScheduler.instance) &#125; .timeout(2, scheduler: MainScheduler.instance) //超过两秒没发出元素，则产生error事件 .subscribe(onNext: &#123; element in print(element) &#125;, onError: &#123; error in print(error) &#125;) .disposed(by: disposeBag) &#125;&#125;//print123Sequenece timeout ⑥using ⑥using基本介绍 使用 using 操作符创建 Observable 时，同时会创建一个可被清除的资源，一旦 Observable 终止了，那么这个资源就会被清除掉了 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; override func viewDidLoad() &#123; //一个无限序列（每隔0.1秒创建一个序列数 ） let infiniteInterval$ = Observable&lt;Int&gt; .interval(0.1, scheduler: MainScheduler.instance) .do( onNext: &#123; print("infinite$: \($0)") &#125;, onSubscribe: &#123; print("开始订阅 infinite$")&#125;, onDispose: &#123; print("销毁 infinite$")&#125; ) //一个有限序列（每隔0.5秒创建一个序列数，共创建三个 ） let limited$ = Observable&lt;Int&gt; .interval(0.5, scheduler: MainScheduler.instance) .take(2) .do( onNext: &#123; print("limited$: \($0)") &#125;, onSubscribe: &#123; print("开始订阅 limited$")&#125;, onDispose: &#123; print("销毁 limited$")&#125; ) //使用using操作符创建序列 let o: Observable&lt;Int&gt; = Observable.using(&#123; () -&gt; AnyDisposable in return AnyDisposable(infiniteInterval$.subscribe()) &#125;, observableFactory: &#123; _ in return limited$ &#125; ) o.subscribe() &#125;&#125; class AnyDisposable: Disposable &#123; let _dispose: () -&gt; Void init(_ disposable: Disposable) &#123; _dispose = disposable.dispose &#125; func dispose() &#123; _dispose() &#125;&#125;//print 开始订阅 infinite$ 开始订阅 limited$ infinite$: 0 infinite$: 1 infinite$: 2 infinite$: 3 infinite$: 4 limited$: 0 infinite$: 5 infinite$: 6 infinite$: 7 infinite$: 8 infinite$: 9 limited$: 1 销毁 limited$ 销毁 infinite $]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-算数&聚合操作符-07-05]]></title>
    <url>%2F2017%2F12%2F20%2FRxSwift%2FGrammar%2F07-05-Operators-%E6%95%B0%E5%AD%A6%E5%92%8C%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[①toArray ①②reduce ②concat ①toArray ①toArray 将sequence转换成一个array，并转换成单一事件信号，然后结束 使用样例let disposeBag = DisposeBag()Observable.range(start: 1, count: 10) .toArray() .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag)//打印next([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])completed ②reduce ②reduce基本介绍 用一个初始值，对事件数据进行累计操作reduce接受一个初始值，和一个操作符号使用一个初始值和一个操作符，对Observable序列中的所有元素进行累计操作，并转换成单一事件信号。(PS:和map有的区别就是：map针对单个元素进行操作，reduce针对所有元素累计操作) 使用样例let disposeBag = DisposeBag() Observable.of(10, 100, 1000) .reduce(1, accumulator: +) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)/// 1111 ③concat ③concat基本介绍 oncat会把多个sequence和并为一个sequence，并且当前面一个sequence发出了completed事件，才会开始下一个sequence的事件在第一sequence完成之前，第二个sequence发出的事件都会被忽略，但会接收一完成之前的二发出的最后一个事件。不好解释，看例子说明 使用样例let disposeBag = DisposeBag() let subject1 = BehaviorSubject(value: "🍎")let subject2 = BehaviorSubject(value: "🐶") let variable = Variable(subject1) variable.asObservable() .concat() .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) subject1.onNext("🍐")subject1.onNext("🍊") variable.value = subject2 subject2.onNext("🐱") //1完成前，会被忽略subject2.onNext("teng") //1完成前，会被忽略subject2.onNext("fei") //1完成前的最后一个，会被接收 subject1.onCompleted() subject2.onNext("🐭")next(🍎)next(🍐)next(🍊)next(fei)next(🐭)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Combination Operators-联合操作Observable流-07-04]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2F07-04-Operators-%E8%81%94%E5%90%88%E6%93%8D%E4%BD%9CObservable%E6%B5%81%2F</url>
    <content type="text"><![CDATA[联合操作Observable流 结合操作（或者称合并操作）指的是将多个 Observable 序列进行组合，拼装成一个新的 Observable 序列联合操作就是把多个Observable流合成单个Observable流 ①startWith (优先插入特定的事件消息) ②merge （组合成单个Observable,并且按照时间顺序发射对应事件） ③zip （一个事件对应另一个流一个事件） ④combineLatest （一个流的事件对应另一个流的最新的事件） ⑤switchLatest (事件流进行转换) 联合操作Observable流 ①startWith ②merge ③zip ④combineLatest ⑤switchLatest #①startWith 基本介绍 在发出事件消息之前，先发出某个特定的事件消息。比如发出事件2 ，3然后我startWith(1)，那么就会先发出1，然后2 ，3 使用样例1let disposeBag = DisposeBag()Observable.of("2","3") .startWith("1") .subscribe(onNext:&#123; print($0) &#125;) .addDisposableTo(disposeBag)//123 使用样例2 在Observable释放元素之前，发射指定的元素序列startWith和栈类似，先进后出在发送一个东西前，先发送一个指定的 let disposeBag = DisposeBag()Observable.of([&quot;C&quot;,&quot;C++&quot;,&quot;OC&quot;]) .startWith([&quot;今晚吃鸡，大吉大利&quot;]) .subscribe(&#123; (event) in print(event) &#125;) .disposed(by: disposeBag)//打印next([&quot;今晚吃鸡，大吉大利&quot;])next([&quot;C&quot;, &quot;C++&quot;, &quot;OC&quot;])completed ②merge基本介绍 将多个Observable组合成单个Observable,并且按照时间顺序发射对应事件 使用样例let disposeBag = DisposeBag()let sbj1 = PublishSubject&lt;String&gt;()let sbj2 = PublishSubject&lt;String&gt;()Observable.of(sbj1,sbj2) .merge() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)subject1.onNext("🅰️")subject1.onNext("🅱️")subject2.onNext("①")subject2.onNext("②")subject1.onNext("🆎")subject2.onNext("③") //🅰️🅱️①②🆎③ ③zip基本介绍 绑定超过最多不超过8个的Observable流，结合在一起处理注意Zip是一个事件对应另一个流一个事件将多个Observable(注意：必须是要成对)组合成单个Observable，当有事件到达时，会在每个序列中对应的索引上对应的元素发出。(ps:之前版本的RxSwift好像最多只能组合8个Observable) zip-文档 使用样例let disposeBag = DisposeBag() let strSbj = PublishSubject&lt;String&gt;()let intSbj = PublishSubject&lt;Int&gt;() Observable.zip(strSbj, intSbj)&#123; strElement,intElement in "\(strElement) \(intElement)" &#125; .subscribe(OnNext: &#123; pint($0) &#125;) .addDisposableTo(disposeBag) strSbj.onNext("🅰️")strSbj.onNext("🅱️") intSbj.onNext(1)intSbj.onNext(2) strSbj.onNext("🆎")intSbj.onNext(2) //🅰️ 1 将stringSubject和intSubject压缩到一起共同处理🅱️ 2🆎 3 ④combineLatest基本介绍 绑定超过最多不超过8个的Observable流，结合在一起处理和Zip不同的是combineLatest是一个流的事件对应另一个流的最新的事件，两个事件都会是最新的事件，可将下图与Zip的图进行对比邻近事件一起处理 使用样例let disposeBag = DisposeBag()let strSbj = PublishSubject&lt;String&gt;()let intSbj = PublishSubject&lt;Int&gt;() Observable.combineLatest(strSbj, intSbj)&#123; strElement,intElement in "\(strElement) \(intElement)" &#125; .addscribe(onNext: &#123;print( $0) &#125;) .addDisposableTo(disposeBag) strSbj.onNext("🅰️")strSbj.onNext("🅱️")intSbj.onNext(1)intSbj.onNext(2)strSbj.onNext("🆎")// 输出🅱️ 1🅱️ 2🆎 2 当一个项目由两个Observables发射时，通过一个指定的功能将每个Observable观察到的最新项目组合起来，并根据该功能的结果发射事件 let disposeBag = DisposeBag()let subject1 = PublishSubject&lt;String&gt;()let subject2 = PublishSubject&lt;String&gt;() Observable.combineLatest(subject1, subject2) &#123; string1,string2 in "\(string1)--\(string2)" &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject1.onNext("A") subject2.onNext("1")subject2.onNext("2") subject1.onNext("B")subject1.onNext("C") //输出结果A--1A--2B--2C--2 #⑤switchLatest 基本介绍 切换Observable队列switchLatest可以对事件流进行转换，本来监听的sbj1，可以通过更改variable里面的value更换事件源—&gt;变成监听sbj2witchLatest 有点像其他语言的 switch 方法，可以对事件流进行转换 使用样例let disposeBag = DisposeBag()let sbj1 = BehaviorSubject(value: "⚽️")let sbj2 = BehaviorSubject(value: "🍎") let variable = Variable(sbj1)variable.asObservable() .switchLatest() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) sbj1.onNext("🏈")sbj1.onNext("🏀") variable.value = sbj1 subject1.onNext("⚾️") sbj2.onNext("🍐")variable.value = sbj1sbj2.onNext("54321")sbj1.onNext("12345") ///⚽️🏈🏀🍎🍐⚾️12345 例子分析 et disposeBag = DisposeBag() let subject1 = BehaviorSubject(value: "1")let subject2 = BehaviorSubject(value: "A") let variable = Variable(subject1) variable.asObservable() .switchLatest() .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject1.onNext("2")subject1.onNext("3") variable.value = subject2 subject1.onNext("4")subject2.onNext("B")//打印结果123AB]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Conditional Boolean Operators过滤操作符-07-03]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2F07-03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%2F</url>
    <content type="text"><![CDATA[条件和布尔操作会根据条件发射或变换 Observables，或者对他们做布尔运算 ①amb ②takeWhile ③takeUntil ④skipWhile ⑤skipUntil ①amb基本介绍 当传入多个 Observables 到 amb 操作符时，它将取第一个发出元素或产生事件的 Observable，然后只发出它的元素。并忽略掉其他的 Observables 使用样例let disposeBag = DisposeBag() let subject1 = PublishSubject&lt;Int&gt;()let subject2 = PublishSubject&lt;Int&gt;()let subject3 = PublishSubject&lt;Int&gt;() subject1 .amb(subject2) .amb(subject3) .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject2.onNext(1)subject1.onNext(20)subject2.onNext(2)subject1.onNext(40)subject3.onNext(0)subject2.onNext(3)subject1.onNext(60)subject3.onNext(0)subject3.onNext(0)//print123 ②takeWhile 该方法依次判断 Observable 序列的每一个值是否满足给定的条件。 当第一个不满足条件的值出现时，它便自动完成 使用样例let disposeBag = DisposeBag() Observable.of(2, 3, 4, 5, 6) .takeWhile &#123; $0 &lt; 4 &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag)//print23 ③takeUntil 除了订阅源 Observable 外，通过 takeUntil 方法我们还可以监视另外一个 Observable， 即 notifier。如果 notifier 发出值或 complete 通知，那么源 Observable 便自动完成，停止发送事件 基本介绍 使用样例let disposeBag = DisposeBag() let source = PublishSubject&lt;String&gt;()let notifier = PublishSubject&lt;String&gt;() source .takeUntil(notifier) .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) source.onNext("a")source.onNext("b")source.onNext("c")source.onNext("d") //停止接收消息notifier.onNext("z") source.onNext("e")source.onNext("f")source.onNext("g")//printabcd ④skipWhile基本介绍 该方法用于跳过前面所有满足条件的事件。一旦遇到不满足条件的事件，之后就不会再跳过了 使用样例let disposeBag = DisposeBag() Observable.of(2, 3, 4, 5, 6) .skipWhile &#123; $0 &lt; 4 &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) &#125;&#125;//print456 ⑤skipUntil基本介绍 同上面的 takeUntil 一样，skipUntil 除了订阅源 Observable 外，通过 skipUntil 方法我们还可以监视另外一个 Observable， 即 notifier 。与 takeUntil 相反的是。源 Observable 序列事件默认会一直跳过，直到 notifier 发出值或 complete 通知。 使用样例let disposeBag = DisposeBag() let source = PublishSubject&lt;Int&gt;()let notifier = PublishSubject&lt;Int&gt;() source .skipUntil(notifier) .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) source.onNext(1)source.onNext(2)source.onNext(3)source.onNext(4)source.onNext(5) //开始接收消息notifier.onNext(0) source.onNext(6)source.onNext(7)source.onNext(8) //仍然接收消息notifier.onNext(0) source.onNext(9)//print6789]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-连接性操作]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2FOperators-%E8%BF%9E%E6%8E%A5%E6%80%A7%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[连接性操作 ①publish ②replay ③multicast Connectable Observable有订阅时不开始发射事件消息，而是仅当调用它们的connect（）方法时。这样就可以等待所有我们想要的订阅者都已经订阅了以后，再开始发出事件消息，这样能保证我们想要的所有订阅者都能接收到事件消息。其实也就是等大家都就位以后，开始发出消息 ①publish ①publish 将一个正常的sequence转换成一个connectable sequence let intSequence = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) .publish() _ = intSequence .subscribe(onNext: &#123; print("Subscription 1:, Event: \($0)") &#125;) delay(2) &#123; _ = intSequence.connect() &#125; //相当于把事件消息推迟了两秒 delay(4) &#123; _ = intSequence .subscribe(onNext: &#123; print("Subscription 2:, Event: \($0)") &#125;)&#125; delay(6) &#123; _ = intSequence .subscribe(onNext: &#123; print("Subscription 3:, Event: \($0)") &#125;)&#125;//Subscription 1:, Event: 0Subscription 1:, Event: 1Subscription 2:, Event: 1Subscription 1:, Event: 2Subscription 2:, Event: 2Subscription 1:, Event: 3Subscription 3:, Event: 3Subscription 2:, Event: 3Subscription 1:, Event: 4Subscription 3:, Event: 4 ②replay ②replay 将一个正常的sequence转换成一个connectable sequence，然后和replaySubject相似，能接收到订阅之前的事件消息 let intSequence = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) .replay(5) //接收到订阅之前的5条事件消息 _ = intSequence .subscribe(onNext: &#123; print("Subscription 1:, Event: \($0)") &#125;) delay(2) &#123; _ = intSequence.connect() &#125; delay(4) &#123; _ = intSequence .subscribe(onNext: &#123; print("Subscription 2:, Event: \($0)") &#125;)&#125; delay(8) &#123; _ = intSequence .subscribe(onNext: &#123; print("Subscription 3:, Event: \($0)") &#125;)&#125; ③multicast ③multicast 将一个正常的sequence转换成一个connectable sequence，并且通过特性的subject发送出去，比如PublishSubject，或者replaySubject，behaviorSubject等。不同的Subject会有不同的结果 let subject = PublishSubject&lt;Int&gt;() _ = subject .subscribe(onNext: &#123; print("Subject: \($0)") &#125;) let intSequence = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) .multicast(subject) _ = intSequence .subscribe(onNext: &#123; print("\tSubscription 1:, Event: \($0)") &#125;) delay(2) &#123; _ = intSequence.connect() &#125; delay(4) &#123; _ = intSequence .subscribe(onNext: &#123; print("\tSubscription 2:, Event: \($0)") &#125;)&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-错误处理操作]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2FOperators-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[错误处理操作 ①catchErrorJustReturn ②catchError ③retry ④debug ①catchErrorJustReturn ①catchErrorJustReturn 遇到error事件的时候，就return一个值，然后结束 let disposeBag = DisposeBag() let sequenceThatFails = PublishSubject&lt;String&gt;() sequenceThatFails .catchErrorJustReturn("😊") .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) sequenceThatFails.onNext("😬")sequenceThatFails.onNext("😨")sequenceThatFails.onNext("😡")sequenceThatFails.onNext("🔴")sequenceThatFails.onError(TestError.test)///next(😬)next(😨)next(😡)next(🔴)next(😊)completed ②catchError ②catchError 捕获error进行处理，可以返回另一个sequence进行订阅 let disposeBag = DisposeBag() let sequenceThatFails = PublishSubject&lt;String&gt;()let recoverySequence = PublishSubject&lt;String&gt;() sequenceThatFails .catchError &#123; print("Error:", $0) return recoverySequence &#125; .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) sequenceThatFails.onNext("😬")sequenceThatFails.onNext("😨")sequenceThatFails.onNext("😡")sequenceThatFails.onNext("🔴")sequenceThatFails.onError(TestError.test) recoverySequence.onNext("😊")//next(😬)next(😨)next(😡)next(🔴)Error: testnext(😊) ③retry ③retry 遇见error事件可以进行重试，比如网络请求失败，可以进行重新连接 let disposeBag = DisposeBag()var count = 1 let sequenceThatErrors = Observable&lt;String&gt;.create &#123; observer in observer.onNext("🍎") observer.onNext("🍐") observer.onNext("🍊") if count == 1 &#123; observer.onError(TestError.test) print("Error encountered") count += 1 &#125; observer.onNext("🐶") observer.onNext("🐱") observer.onNext("🐭") observer.onCompleted() return Disposables.create()&#125; sequenceThatErrors .retry(3) //不传入数字的话，只会重试一次 .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) ④debug ④debug 打印所有的订阅, 事件和disposals sequenceThatErrors .retry(3) .debug() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) RxSwift.Resources.total 查看RxSwift所有资源的占用 print(RxSwift.Resources.total)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-过滤和条件操作符]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2FOperators-%E8%BF%87%E6%BB%A4%E5%92%8C%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[过滤和条件操作符①filter②distinctUntilChanged③elementAt④single⑤take⑥takeLast⑦takeWhile⑧takeUntil⑨skip⑩ skipWhile⑪skipWhileWithIndex⑫skipUntil ①filter ①filter 过滤掉某些不符合要求的事件在Observable序列中只发出满足过滤条件的事件 let disposeBag = DisposeBag() Observable.of( "🐱", "🐰", "🐶", "🐸", "🐱", "🐰", "🐹", "🐸", "🐱") .filter &#123; $0 == "🐱" &#125; .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)///🐱🐱🐱 let disposeBag = DisposeBag() Observable.of(1,2,3,4,5) .filter( &#123;$0 &gt; 2&#125; ) .subscribe( onNext: &#123;print($0)&#125; ) .disposed(by: disposeBag)//打印结果345 ②distinctUntilChanged ②distinctUntilChanged 过滤连续发出的相同事件distinctUntilChanged就是当下一个事件与前一个事件是不同事件的事件才进行处理操作 let disposeBag = DisposeBag() Observable.of("🐱", "🐷", "🐱", "🐱", "🐱", "🐵", "🐱") .distinctUntilChanged() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)///🐱🐷🐱🐵🐱 ③elementAt ③elementAt 只处理在指定位置的事件 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .elementAt(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//🐸 ④single ④single 用法一：检测Observable序列是否发射一个元素。如果发射多个，会报错 let disposeBag = DisposeBag()// error:Sequence contains more than one element// Observable.of(1,2,3).single().subscribe(onNext: &#123;print($0)&#125;).disposed(by: disposeBag)Observable.of(1) .single() .subscribe( onNext: &#123;print($0)&#125; ) .disposed(by: disposeBag) 用法二:检测Observable序列发射的元素里面是否包含多个指定的元素，如果有多个或者没有，会报错。 let disposeBag = DisposeBag()Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single &#123; $0 == "🐸" &#125; .subscribe &#123; print($0) &#125; .disposed(by: disposeBag) Observable.of("🐱", "🐰", "🐶", "🐱", "🐰", "🐶") .single &#123; $0 == "🐒" &#125; .subscribe &#123; print($0) &#125; .disposed(by: disposeBag) Observable.of("🐱", "🐰", "🐶", "🐶","🐸") .single &#123; $0 == "🐶" &#125; .subscribe &#123; print($0) &#125; .disposed(by: disposeBag //打印结果 next(🐸) completed error(Sequence doesn't contain any elements.) next(🐶) error(Sequence contains more than one element.) 出在sequence只发出一次的事件，如果超过一个就会发出error错误 Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 🐱 //单一信号超过了一个Received unhandled error: /var/folders/hz/v15ld5mj0nqf83d21j13y0tw0000gn/T/./lldb/7229/playground107.swift:69:__lldb_expr_107 -&gt; Sequence contains more than one element. Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single &#123; $0 == "🐸" &#125; //青蛙只有一个，completed .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) Observable.of("🐱", "🐰", "🐶", "🐱", "🐰", "🐶") .single &#123; $0 == "🐰" &#125; //兔子有两个，会发出error .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single &#123; $0 == "🔵" &#125; //没有蓝色球，会发出error .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) ⑤take ⑤take 只处理前几个事件信号 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .take(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//🐱🐰🐶 从Observable序列开始点起只处理前几个事件 let disposeBag = DisposeBag() Observable.of(1,2,3) .take(2) .subscribe( onNext: &#123;print($0)&#125; ) .disposed(by: disposeBag)//打印结果: 1 2 ⑥takeLast ⑥takeLast 只处理后几个事件信号与take相反，从Observable序列的结束位置起，只处理前几个事件 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .takeLast(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//打印结果🐸🐷🐵let disposeBag = DisposeBag() Observable.of(1,2,3) .takeLast(2) .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag)//打印结果23 ⑦takeWhile ⑦takeWhile 只处理满足条件的事件。感觉和filter没什么区别 let disposeBag = DisposeBag() Observable.of(1, 2, 3, 4, 5, 6) .takeWhile &#123; $0 &lt; 4 &#125; .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) //打印结果：123let disposeBag = DisposeBag()Observable.of(1,2,3,4,5) .takeWhile&#123;$0 &lt; 3&#125; .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag)//打印结果：12 ⑧takeUntil ⑧takeUntil 接收事件消息，直到另一个sequence发出事件消息的时候 let disposeBag = DisposeBag() let sourceSequence = PublishSubject&lt;String&gt;()let referenceSequence = PublishSubject&lt;String&gt;() sourceSequence .takeUntil(referenceSequence) .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) sourceSequence.onNext("🐱")sourceSequence.onNext("🐰")sourceSequence.onNext("🐶") referenceSequence.onNext("🔴") //停止接收消息 sourceSequence.onNext("🐸")sourceSequence.onNext("🐷")sourceSequence.onNext("🐵")///next(🐱)next(🐰)next(🐶)completed 直到另一个Observable序列发出一个信号，则原序列终 let disposeBag = DisposeBag() let orinSubject = PublishSubject&lt;Int&gt;()let refreSubject = PublishSubject&lt;Int&gt;() orinSubject.takeUntil(refreSubject) .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag) orinSubject.onNext(1)orinSubject.onNext(2)refreSubject.onNext(10)orinSubject.onNext(3)//打印结果12 ⑨skip ⑨skip 取消前几个事件 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .skip(2) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) // 🐶 🐸 🐷 🐵 从Observable序列的元素跳过指定个数 let disposeBag = DisposeBag()Observable.of(1,2,3,4,5,6) .skip(2) .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag)//打印结果：3456 ⑩skipWhile ⑩ skipWhile 满足条件的事件消息都取消 let disposeBag = DisposeBag() Observable.of(1, 2, 3, 4, 5, 6) .skipWhile &#123; $0 &lt; 4 &#125; .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) /// 4 5 6 跳过满足条件的事件，只要遇见不满足条件的事件，则该事件以及之后的事件（不管是否满足条件）都会发出 let disposeBag = DisposeBag() Observable.of(1,2,3,4,5,6) .skipWhile&#123;$0 &lt; 3&#125; .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag)//打印结果3456 ⑪skipWhileWithIndex ⑪skipWhileWithIndex 满足条件的都被取消，传入的闭包同skipWhile有点区别而已 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .skipWhileWithIndex &#123; element, index in index &lt; 3 &#125; .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 跳过索引满足条件的事件 let disposeBag = DisposeBag()Observable.of(1,2,3,4,5,6).skipWhileWithIndex(&#123; (element, index) -&gt; Bool in index &lt; 3 &#125;).subscribe(onNext: &#123;print($0)&#125;).disposed(by: disposeBag) //打印结果: 456 ⑫skipUntil ⑫skipUntil 直到某个sequence发出了事件消息，才开始接收当前sequence发出的事件消息 let disposeBag = DisposeBag() let sourceSequence = PublishSubject&lt;String&gt;()let referenceSequence = PublishSubject&lt;String&gt;() sourceSequence .skipUntil(referenceSequence) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) sourceSequence.onNext("🐱")sourceSequence.onNext("🐰")sourceSequence.onNext("🐶") referenceSequence.onNext("🔴") sourceSequence.onNext("🐸")sourceSequence.onNext("🐷")sourceSequence.onNext("🐵")&#125; 跳过另一个Observable序列发出事件之前的所有事件与takeUntil相反。 let disposeBag = DisposeBag() let oriSubject = PublishSubject&lt;Int&gt;() let refreSubject = PublishSubject&lt;Int&gt;() oriSubject.skipUntil(refreSubject) .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag) oriSubject.onNext(1)oriSubject.onNext(2) refreSubject.onNext(10)oriSubject.onNext(3)oriSubject.onNext(4)//打印结果:34]]></content>
      <categories>
        <category>Swift</category>
        <category>RxSwift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Filtering Observables过滤操作符-07-02]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2F07-02-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BF%87%E6%BB%A4%E6%93%8D%2F</url>
    <content type="text"><![CDATA[①filter ②distinctUntilChanged ③elementAt ④single ⑤take ⑥takeLast ⑦ignoreElements ⑧skip ⑨Sample ⑩debounce 变换操作 过滤操作指的是从源 Observable 中选择特定的数据发送 ①filter ①filter基本介绍 该操作符就是用来过滤掉某些不符合要求的事件过滤掉某些不符合要求的事件在Observable序列中只发出满足过滤条件的事件 使用样例1 let disposeBag = DisposeBag() Observable.of( "🐱", "🐰", "🐶", "🐸", "🐱", "🐰", "🐹", "🐸", "🐱") .filter &#123; $0 == "🐱" &#125; .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)///🐱🐱🐱 使用样例2Observable.of(2, 30, 22, 5, 60, 3, 40 ,9) .filter &#123; $0 &gt; 10 &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) //print 30 22 60 40 ②distinctUntilChanged ②distinctUntilChanged基本介绍 过滤连续发出的相同事件(连续重复的事件)distinctUntilChanged就是当下一个事件与前一个事件是不同事件的事件才进行处理操作 let disposeBag = DisposeBag() Observable.of("🐱", "🐷", "🐱", "🐱", "🐱", "🐵", "🐱") .distinctUntilChanged() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)///🐱🐷🐱🐵🐱 ③elementAt ③elementAt基本介绍 只处理在指定位置的事件 使用样例 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .elementAt(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//🐸 ④single ④single基本介绍 限制只发送一次事件，或者满足条件的第一个事件。如果存在有多个事件或者没有事件都会发出一个 error 事件。如果只有一个事件，则不会发出 error 事件 使用样例 用法一：检测Observable序列是否发射一个元素。如果发射多个，会报错 let disposeBag = DisposeBag()// error:Sequence contains more than one element// Observable.of(1,2,3).single().subscribe(onNext: &#123;print($0)&#125;).disposed(by: disposeBag)Observable.of(1) .single() .subscribe( onNext: &#123;print($0)&#125; ) .disposed(by: disposeBag) 用法二:检测Observable序列发射的元素里面是否包含多个指定的元素，如果有多个或者没有，会报错。 let disposeBag = DisposeBag()Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single &#123; $0 == "🐸" &#125; .subscribe &#123; print($0) &#125; .disposed(by: disposeBag) Observable.of("🐱", "🐰", "🐶", "🐱", "🐰", "🐶") .single &#123; $0 == "🐒" &#125; .subscribe &#123; print($0) &#125; .disposed(by: disposeBag) Observable.of("🐱", "🐰", "🐶", "🐶","🐸") .single &#123; $0 == "🐶" &#125; .subscribe &#123; print($0) &#125; .disposed(by: disposeBag //打印结果 next(🐸) completed error(Sequence doesn't contain any elements.) next(🐶) error(Sequence contains more than one element.) 出在sequence只发出一次的事件，如果超过一个就会发出error错误 Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single() .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 🐱 //单一信号超过了一个Received unhandled error: /var/folders/hz/v15ld5mj0nqf83d21j13y0tw0000gn/T/./lldb/7229/playground107.swift:69:__lldb_expr_107 -&gt; Sequence contains more than one element. Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single &#123; $0 == "🐸" &#125; //青蛙只有一个，completed .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) Observable.of("🐱", "🐰", "🐶", "🐱", "🐰", "🐶") .single &#123; $0 == "🐰" &#125; //兔子有两个，会发出error .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .single &#123; $0 == "🔵" &#125; //没有蓝色球，会发出error .subscribe &#123; print($0) &#125; .addDisposableTo(disposeBag) ⑤take ⑤take基本介绍 该方法实现仅发送 Observable 序列中的前 n 个事件，在满足数量之后会自动 .completed ##使用样例 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .take(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//🐱🐰🐶 从Observable序列开始点起只处理前几个事件 let disposeBag = DisposeBag() Observable.of(1,2,3) .take(2) .subscribe( onNext: &#123;print($0)&#125; ) .disposed(by: disposeBag)//打印结果: 1 2 ⑥takeLast ⑥takeLast基本介绍 只处理后几个事件信号与take相反，从Observable序列的结束位置起，只处理前几个事件 let disposeBag = DisposeBag() Observable.of("🐱", "🐰", "🐶", "🐸", "🐷", "🐵") .takeLast(3) .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//打印结果🐸🐷🐵let disposeBag = DisposeBag() Observable.of(1,2,3) .takeLast(2) .subscribe(onNext: &#123;print($0)&#125;) .disposed(by: disposeBag)//打印结果23 ⑦ignoreElements ⑦ignoreElements基本介绍 该操作符可以忽略掉所有的元素，只发出 error 或 completed 事件。 如果我们并不关心 Observable 的任何元素，只想知道 Observable 在什么时候终止，那就可以使用 ignoreElements 操作符 let disposeBag = DisposeBag() Observable.of(1, 2, 3, 4) .ignoreElements() .subscribe&#123; print($0) &#125; .disposed(by: disposeBag) //printcompleted ⑧skip ⑧skip基本介绍 该方法用于跳过源 Observable 序列发出的前 n 个事件 使用样例let disposeBag = DisposeBag() Observable.of(1, 2, 3, 4) .skip(2) .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) //print 3 4 ⑨Sample ⑨Sample基本介绍 Sample 除了订阅源 Observable 外，还可以监视另外一个 Observable， 即 notifier 。 每当收到 notifier 事件，就会从源序列取一个最新的事件并发送。而如果两次 notifier 事件之间没有源序列的事件，则不发送值 使用样例let disposeBag = DisposeBag() let source = PublishSubject&lt;Int&gt;()let notifier = PublishSubject&lt;String&gt;() source .sample(notifier) .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) source.onNext(1) //让源序列接收接收消息notifier.onNext("A") source.onNext(2) //让源序列接收接收消息notifier.onNext("B")notifier.onNext("C") source.onNext(3)source.onNext(4) //让源序列接收接收消息notifier.onNext("D") source.onNext(5) //让源序列接收接收消息notifier.onCompleted()//print12345 ⑩debouncedebounce和throttle其实是一样的，队列中的元素如果和下一个元素的间隔小于了指定的时间间隔，那么这个元素将被过滤掉 基本介绍 debounce 操作符可以用来过滤掉高频产生的元素，它只会发出这种元素：该元素产生后，一段时间内没有新元素产生。 换句话说就是，队列中的元素如果和下一个元素的间隔小于了指定的时间间隔，那么这个元素将被过滤掉。 debounce 常用在用户输入的时候，不需要每个字母敲进去都发送一个事件，而是稍等一下取最后一个事件 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; //定义好每个事件里的值以及发送的时间 let times = [ [ "value": 1, "time": 0.1 ], [ "value": 2, "time": 1.1 ], [ "value": 3, "time": 1.2 ], [ "value": 4, "time": 1.2 ], [ "value": 5, "time": 1.4 ], [ "value": 6, "time": 2.1 ] ] //生成对应的 Observable 序列并订阅 Observable.from(times) .flatMap &#123; item in return Observable.of(Int(item["value"]!)) .delaySubscription(Double(item["time"]!), scheduler: MainScheduler.instance) &#125; .debounce(0.5, scheduler: MainScheduler.instance) //只发出与下一个间隔超过0.5秒的元素 .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) &#125;&#125;//print156]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-线程]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2F%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[#线程 线程切换 RxSwift 中切换线程 sequence1.observeOn(backgroundScheduler) // 切换到后台线程.map &#123; n in print("在 background scheduler 执行")&#125;.observeOn(MainScheduler.instance) // 切换到主线程.map &#123; n in print("在 main scheduler")&#125; 调用一下 observeOn 就切换到我们想要的线程了当前的线程切换支持 GCD 和 NSOperation在线程这部分主要有两个操作符：observeOn 和 subscribeOn ，常用的还是 observeOn 调用 observeOn 指定接下来的操作在哪个线程 调用 subscribeOn 决定订阅者的操作执行在哪个线程 当然，如果我们没有明确调用这两个操作，后面的操作都是在当前线程执行的 extension ObservableType &#123; public func observeOn(scheduler: ImmediateSchedulerType) -&gt; RxSwift.Observable&lt;Self.E&gt; public func subscribeOn(scheduler: ImmediateSchedulerType) -&gt; RxSwift.Observable&lt;Self.E&gt;&#125; 两个方法的声明几乎都是一样的，我们只需要传入一个满足 ImmediateSchedulerType 协议的东西 MainScheduler 串行 在 Rx 中我们已经有主线程切换 .observeOn(MainScheduler.instance)//切换到了主线程 MainScheduler 有一个很有用的功能 public class func ensureExecutingOnScheduler() 可以在需要保证代码一定执行在主线程的地方调用 MainScheduler.ensureExecutingOnScheduler()特别是在线程切换来切换去的情况下，或者是调用其他的库，我们不确定当前是否在执行在主线程毕竟 UI 的更新还是要在主线程执行的 SerialDispatchQueueScheduler 串行 SerialDispatchQueueScheduler ，这个就是一个串行的调度器，上面的 MainScheduler 就是继承的这个 DispatchQueueSchedulerQOSiOS 8 新增加了 QOS ，分别有以下五种等级： QOS_CLASS_USER_INTERACTIVE QOS_CLASS_USER_INITIATED QOS_CLASS_DEFAULT QOS_CLASS_UTILITY QOS_CLASS_BACKGROUND 在 Rx 中，我们用 enum 创建了 DispatchQueueSchedulerQOS ： public enum DispatchQueueSchedulerQOS &#123; case UserInteractive case UserInitiated case Default case Utility case Background&#125; 和上面的等级是一一对应的用 QOS 创建一个 DispatchQueueSchedulerQOS 非常方便 public convenience init(globalConcurrentQueueQOS: DispatchQueueSchedulerQOS, internalSerialQueueName: String = "rx.global_dispatch_queue.serial") 用一个初始化就 OK ： SerialDispatchQueueScheduler(globalConcurrentQueueQOS: .Background) 更推荐你使用已有的 QOS 管理多线程问题，毕竟这是一个线程等级更明确的方案。即便是创建自己的 GCD 我也建议直接使用 SerialDispatchQueueScheduler ，毕竟自己再去实现那些协议很麻烦不是吗 可以通过以下两种方式创建自己的 GCD ： public convenience init(internalSerialQueueName: String, serialQueueConfiguration: ((dispatch_queue_t) -&gt; Void)? = nil)public convenience init(queue: dispatch_queue_t, internalSerialQueueName: String) MainScheduler 是继承 SerialDispatchQueueScheduler 的 ConcurrentDispatchQueueScheduler 并行 同样我们还有一个并行的 Scheduler ：ConcurrentDispatchQueueSchedulerAPI 的使用和 SerialDispatchQueueScheduler 是一样的 OperationQueueScheduler 并行 使用 NSOperationQueue 最大的好处就是我们可以很方便的定制最大并发线程数量，即设置 maxConcurrentOperationCount创建方法也很简单，只需要传入一个 NSOperationQueue 难懂啊 原文]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Transforming Observables-变换操作]]></title>
    <url>%2F2017%2F12%2F19%2FRxSwift%2FGrammar%2F07-01-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[①map ②flatMap ③flatMapLatest ④scan ⑤groupBy ⑥buffer ⑦window ⑧concatMap 变换操作 ①map基本介绍 通过使用一个闭包函数将原来的Observable序列sequence转换为一个新的Observable序列sequence let disposeBag = DisposeBag()Observable.of(1,2,3) .map(&#123; return 10 * $0 &#125;) .subscribe(&#123;print($0)&#125;) .disposed(by: disposeBag)//打印next(10)next(20)next(30)completed #②flatMap 基本介绍 将一个sequence转换为一个sequences，当你接收一个sequence的事件，你还想接收其他sequence发出的事件的话可以使用flatMap，她会将每一个sequence事件进行处理以后，然后再以一个sequence形式发出事件而且flatMap有一次拆包动作将一个Observable序列转换为另一个Observable序列，并且合并两个Observable序列。会按时间顺序接收两个序列发出的元素 map 在做转换的时候容易出现“升维”的情况。即转变之后，从一个序列变成了一个序列的序列。 而 flatMap 操作符会对源 Observable 的每一个元素应用一个转换方法，将他们转换成 Observables。 然后将这些 Observables 的元素合并之后再发送出来。即又将其 “拍扁”（降维）成一个 Observable 序列。 这个操作符是非常有用的。比如当 Observable 的元素本生拥有其他的 Observable 时，我们可以将所有子 Observables 的元素发送出来 使用样例1let disposeBag = DisposeBag()sttuct Player&#123; var score: Variable&lt;Int&gt; //里面是一个Variable&#125;let 👦🏻 = Player(score: Variable(80)) let 👧🏼 = Player(score: Variable(90))let 😂 = Player(score: Variable(550))let player = Variable(👦🏻) //将player转为Variableplayer.asObservable() //拆箱转成可被监听的sequence .flatMap &#123; $0.score.asObservable() &#125; // flatMap有一次拆包动作，$0本来应该是一个BehaviorSubject类型，但是直接访问了score。所以猜想flatMap对behaviorSubject进行了onNext拆包取数据 .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 👦🏻.score.value = 85 player.value = 👧🏼 //更换了value，相当于又添加了一个sequence，两个sequence都可以接收 👦🏻.score.value = 95 👦🏻.score.value = 222 player.value = 😂 👧🏼.score.value = 100// 80 85 90 95 222 550 100 使用样例2let disposeBag = DisposeBag() let subject1 = BehaviorSubject(value: "A")let subject2 = BehaviorSubject(value: "1") let variable = Variable(subject1) variable.asObservable() .flatMap &#123; $0 &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject1.onNext("B")variable.value = subject2subject2.onNext("2")subject1.onNext("C")//AB12C ③flatMapLatest基本介绍 flatMapFirst 与 flatMapLatest 正好相反：flatMapFirst 只会接收最初的 value 事件flatMapLatest只会接收最新的value事件，将上例改为flatMapLatest。结果为 808590550 将上例中的 flatMap 改为 flatMapLatestlet disposeBag = DisposeBag() let subject1 = BehaviorSubject(value: "A")let subject2 = BehaviorSubject(value: "1") let variable = Variable(subject1) variable.asObservable() .flatMapLatest &#123; $0 &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject1.onNext("B")variable.value = subject2subject2.onNext("2")subject1.onNext("C")//AB12 ④scan基本介绍 scan就是给一个初始化的数，然后不断的拿前一个结果和最新的值进行处理操作 使用样例1let disposeBag = DisposeBag()Observable.of(10,100,1000) .scan(1)&#123;aggregateValue, newValue in aggregateValue + newValue&#125; .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag)//111111111 使用样例2let disposeBag = DisposeBag() Observable.of(1, 2, 3, 4, 5) .scan(0) &#123; acum, elem in acum + elem &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag)//print1361015 ⑤groupBy基本介绍 groupBy 操作符将源 Observable 分解为多个子 Observable，然后将这些子 Observable 发送出来也就是说该操作符会将元素通过某个键进行分组，然后将分组后的元素序列以 Observable 的形态发送出来 使用样例let disposeBag = DisposeBag() //将奇数偶数分成两组Observable&lt;Int&gt;.of(0, 1, 2, 3, 4, 5) .groupBy(keySelector: &#123; (element) -&gt; String in return element % 2 == 0 ? "偶数" : "基数" &#125;) .subscribe &#123; (event) in switch event &#123; case .next(let group): group.asObservable().subscribe(&#123; (event) in print("key：\(group.key) event：\(event)") &#125;) .disposed(by: disposeBag) default: print("") &#125; &#125;.disposed(by: disposeBag)//printkey: 偶数 event: next(0)key: 奇数 event: next(1)key: 偶数 event: next(2)key: 奇数 event: next(3)key: 偶数 event: next(4)key: 奇数 event: next(5)key: 偶数 event: completedkey: 奇数 event: completed ⑥buffer❶基本介绍 buffer 方法作用是缓冲组合，第一个参数是缓冲时间，第二个参数是缓冲个数，第三个参数是线程 该方法简单来说就是缓存 Observable 中发出的新元素，当元素达到某个数量，或者经过了特定的时间，它就会将这个元素集合发送出来 ❷使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; let subject = PublishSubject&lt;String&gt;() //每缓存3个元素则组合起来一起发出。 //如果1秒钟内不够3个也会发出（有几个发几个，一个都没有发空数组 []） subject .buffer(timeSpan: 1, count: 3, scheduler: MainScheduler.instance) .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject.onNext("a") subject.onNext("b") subject.onNext("c") subject.onNext("1") subject.onNext("2") subject.onNext("3") &#125;&#125;//print =======["a", "b", "c"]["1", "2", "3"][][][][][][][][][][][][][][] ⑦window##❶ 基本介绍 window 操作符和 buffer 十分相似。不过 buffer 是周期性的将缓存的元素集合发送出来，而 window 周期性的将元素集合以 Observable 的形态发送出来 同时 buffer 要等到元素搜集完毕后，才会发出元素序列。而 window 可以实时发出元素序列 ##❷ 使用样例 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; let disposeBag = DisposeBag() override func viewDidLoad() &#123; let subject = PublishSubject&lt;String&gt;() //每3个元素作为一个子Observable发出。 subject .window(timeSpan: 1, count: 3, scheduler: MainScheduler.instance) .subscribe(onNext: &#123; [weak self] in print(&quot;subscribe: \($0)&quot;) $0.asObservable() .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: self!.disposeBag) &#125;) .disposed(by: disposeBag) subject.onNext(&quot;a&quot;) subject.onNext(&quot;b&quot;) subject.onNext(&quot;c&quot;) subject.onNext(&quot;1&quot;) subject.onNext(&quot;2&quot;) subject.onNext(&quot;3&quot;) &#125;&#125;//printsubscribe: RxSwift.AddRef&lt;Swift.String&gt;abcsubscribe: RxSwift.AddRef&lt;Swift.String&gt;123subscribe: RxSwift.AddRef&lt;Swift.String&gt;subscribe: RxSwift.AddRef&lt;Swift.String&gt;... ⑧concatMap❶ 基本介绍 concatMap 与 flatMap 的唯一区别是：当前一个 Observable 元素发送完毕后，后一个Observable 才可以开始发出元素。或者说等待前一个 Observable 产生完成事件后，才对后一个 Observable 进行订阅 ❷栗子let disposeBag = DisposeBag() let subject1 = BehaviorSubject(value: "A")let subject2 = BehaviorSubject(value: "1") let variable = Variable(subject1) variable.asObservable() .concatMap &#123; $0 &#125; .subscribe(onNext: &#123; print($0) &#125;) .disposed(by: disposeBag) subject1.onNext("B")variable.value = subject2subject2.onNext("2")subject1.onNext("C")subject1.onCompleted() //只有前一个序列结束后，才能接收下一个序列//print ===== A B C 2]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-进阶理解]]></title>
    <url>%2F2017%2F12%2F18%2FRxSwift%2FGrammar%2F%E8%BF%9B%E9%98%B6%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[https://www.jianshu.com/p/431f645cb805 Disposing 当监听一个事件序列的时候，有消息事件来了，做某些事情but,这个事件序列不再发出消息，监听也就没有存在价值，so,需要释放监听资源(内存资源释放)不需要用某些变量时，把这些变量所占用的内存空间释放掉释放某一个监听的时可手动调用释放方法，但是这个貌似一般不常用： let subscription = Observable&lt;Int&gt;.interval(0.3, scheduler: SerialDispatchQueueScheduler.init(internalSerialQueueName: "test"))//关于scheduler，我们会在下面讲到 .observeOn(MainScheduler.instance) //observeOn也会在下面讲到 .subscribe &#123; event in print(event) &#125; Thread.sleep(forTimeInterval: 2.0)subscription.dispose()//--next(0)next(1)next(2)next(3)next(4)next(5) 创建了一个subscription监听，2s后不需要了，手动调用dispose()方法，释放监听资源，不再打印信息subscription不伦是在哪个线程中监听，就算在主线程中调用的dispose()方法一样会销毁资源 Dispose Bag 自动的方式推荐使用，ARC方式相似，会自动去释放资源 let disposeBag = DisposeBag() Observable&lt;Int&gt;.empty() .subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag) 创建一个disposeBag来盛放需要管理的资源，然后把新建的监听都放进去，会在适当的时候销毁这些资源如需要立即释放资源，只需要新建一个DisposeBag()，那么上一个DisposeBag就会被销毁 observeOn()和subscribeOn() subscribeOn()设置起点在哪个线程observeOn()设置了后续工作在哪个线程 someObservable .doOneThing() ① .observeOn(MainRouteScheduler.instance) ② .subscribeOn(OtherScheduler.instance) ③ .subscribeNext &#123; ④ ...... &#125; .addDisposableTo(disposeBag) ① 所有动作都发生在当前的默认线程 ② observeOn转换线程到主线程，下面所有的操作都是在主线程中 ③ subscribeOn规定动作一开始不是发生在默认线程了，而是在OtherScheduler了 ④ 如果我们之前没有调用observeOn，那么这边会在OtherScheduler发生，但是我们前面调用了observeOn，所以这个动作会在主线程中调用 subscribeOn只是影响事件链开始默认的线程，而observeOn规定了下一步动作发生在哪个线程中 shareReplaylet testReplay = Observable.just("😂") .map &#123; print($0) &#125; testReplay.subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag) testReplay.subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag)///--- 😂 next(()) completed 😂 next(()) completed map函数执行了两遍，但是有些时候不需要map函数里的东西执行两遍比如map函数里面如果执行的是网络请求，只需要一次请求结果供大家使用就行了，多余的请求没啥用，浪费时间所以这时候就需要shareReplay(1)了。这里面的数字一般都是1，只执行一次。你可以改为2，3看看结果有啥不同哦 let testReplay = Observable.just("😂") .map &#123; print($0) &#125; .shareReplay(1) testReplay.subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag) testReplay.subscribe &#123; event in print(event) &#125; .addDisposableTo(disposeBag)///-- 😂 //只执行了一次 next(()) completed next(()) completed 自定义operator 自定义操作符很简单，官方推荐尽量用标准的操作符，但是你也可以自定义自己的操作符，文档上说有两种方法，这里我们只说一下最常用的一种方法 自定义一个map操作符 extension ObservableType &#123; func myMap&lt;R&gt;(transform: E -&gt; R) -&gt; Observable&lt;R&gt; &#123; return Observable.create &#123; observer in let subscription = self.subscribe &#123; e in switch e &#123; case .next(let value): let result = transform(value) observer.on(.next(result)) case .error(let error): observer.on(.error(error)) case .completed: observer.on(.completed) &#125; &#125; return subscription &#125; &#125;&#125; 参数是一个闭包，其中闭包参数是E类型返回值是R类型，map函数的返回值是一个Observable类型 Driverlet results = query.rx .text .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query) &#125;results.map &#123; "\($0.count)" &#125; .bindTo(resultCount.rx.text) .addDisposableTo(disposeBag)results.bindTo(resultsTableView.rx .items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .addDisposableTo(disposeBag) 首先创建一个可监听序列results，其中flatMapLatest怎么用我们下面讲 然后将results绑定到resultCount.rx.text上 将results绑定到resultsTableView上 上面程序会有下面几个异常情况 如果上面fetchAutoCompleteItems出错了，那么他绑定的UI将不再收到任何事件消息 如果上面fetchAutoCompleteItems是在后台某个线程中运行的，那么事件绑定也是发生在后台某个线程，这样更新UI的时候会造成crash 有两次绑定fetchAutoCompleteItems会执行两次 当然针对上面问题我们也有解决方案，我们可以使用神器shareReplay(1)保证不会执行两次，可以使用observeOn()保证后面所有操作在主线程完成 let results = query.rx.text .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query) .observeOn(MainScheduler.instance) .catchErrorJustReturn([]) &#125; .shareReplay(1) results .map &#123; "\($0.count)" &#125; .bindTo(resultCount.rx.text) .addDisposableTo(disposeBag)results .bindTo(resultTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .addDisposableTo(disposeBag) 但是,也可以使用Driver let results = query.rx.text.asDriver() //转换成一个Driver序列 .throttle(0.3, scheduler: MainScheduler.instance) .flatMapLatest &#123; query in fetchAutoCompleteItems(query) .asDriver(onErrorJustReturn: []) //当遇见错误需要返回什么 &#125; //不需要添加shareReplay(1)results .map &#123; "\($0.count)" &#125; .drive(resultCount.rx.text) //和bingTo()功能一样 .addDisposableTo(disposeBag) results .drive(resultTableView.rx.items(cellIdentifier: "Cell")) &#123; (_, result, cell) in cell.textLabel?.text = "\(result)" &#125; .addDisposableTo(disposeBag) drive方法只能在Driver序列中使用，Driver有以下特点：① Driver序列不允许发出error② Driver序列的监听只会在主线程中所以Driver是转为UI绑定量身打造的东西。以下情况你可以使用Driver替换BindTo: 不能发出error 在主线程中监听 共享事件流 map和flatMap何时使用官方Demo的时候，可能会迷惑为啥有的地方使用flatMapLatest为啥有些地方使用map呢？比如上面那个Driver所用的例子 map函数，接受一个R类型的序列，返回一个R类型的序列，还是原来的序列 public func map&lt;R&gt;(_ transform: @escaping (Self.E) throws -&gt; R) -&gt; RxSwift.Observable&lt;R&gt; flatMap函数，接收一个O类型的序列，返回一个O.E类型的序列，也就是有原来序列里元素组成的新序列 public func flatMap&lt;O : ObservableConvertibleType&gt;(_ selector: @escaping (Self.E) throws -&gt; O) -&gt; RxSwift.Observable&lt;O.E&gt; 其实这里的map和flatMap在swift中的作用是一样的。map函数可以对原有序列里面的事件元素进行改造，返回的还是原来的序列。而flatMap对原有序列中的元素进行改造和处理，每一个元素返回一个新的sequence，然后把每一个元素对应的sequence合并为一个新的sequence序列 let test = Observable.of("1", "2", "3", "4", "5") .map &#123; $0 + "TTF" &#125; test .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 1TTF2TTF3TTF4TTF5TTF 使用map对序列中每一个元素进行了处理，返回的是一个元素，而使用flatMap需要返回的序列。那么使用map也返回一个序列看看 let test = Observable.of("1", "2", "3", "4", "5") .map &#123; Observable.just($0) &#125;test .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) RxSwift.Just&lt;Swift.String&gt;RxSwift.Just&lt;Swift.String&gt;RxSwift.Just&lt;Swift.String&gt;RxSwift.Just&lt;Swift.String&gt;RxSwift.Just&lt;Swift.String&gt; 看到结果会打印出每一个序列，下面我们使用merge()方法将这几个序列进行合并 let test = Observable.of("1", "2", "3", "4", "5") .map &#123; Observable.just($0) &#125; .merge() test .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) /// 1 2 3 4 5 合并为一个新序列后我们就可以正常打印元素了。下面看看使用faltMap()函数干这件事 let test = Observable.of("1", "2", "3", "4", "5") .flatMap &#123; Observable.just($0) &#125; test .subscribe(onNext: &#123; print($0) &#125;) .addDisposableTo(disposeBag) 12345 看下对比是不是一样，这样子对比就清晰了吧 map函数只能返回原来的那一个序列，里面的参数的返回值被当做原来序列中所对应的元素。 flatMap函数返回的是一个新的序列，将原来元素进行了处理，返回这些处理后的元素组成的新序列 map函数 + 合并函数 = flatMap函数 flatMap函数在实际应用中有很多地方需要用到，比如网络请求，网络请求可能会发生错误，我们需要对这个请求过程进行监听，然后处理错误。只要继续他返回的是一个新的序列 validatedUsername = input.username .flatMapLatest &#123; username in return validationService.validateUsername(username) .observeOn(MainScheduler.instance) .catchErrorJustReturn(.failed(message: "Error contacting server")) &#125; .shareReplay(1) flatMapLatest其实就是flatMap的另一个方式，只发送最后一个合进来的序列事件。上面认证username是一个网络请求，我们需要对这个过程进行处理这个password不需要后台联网认证，只需要返回password符合不符合要求就行了，还是原来的序列就行了 validatedPassword = input.password .map &#123; password in return validationService.validatePassword(password) &#125; .shareReplay(1) flatMap也解决了内嵌多个subscribe的问题，官方不建议内嵌多个subscribe。比如： textField.rx_text.subscribe(onNext: &#123; text in performURLRequest(text).subscribe(onNext: &#123; result in ... &#125;) .addDisposableTo(disposeBag)&#125;).addDisposableTo(disposeBag) 改写为flatMap textField.rx_text .flatMapLatest &#123; text in return performURLRequest(text) //因为flatMap返回一个新的sequence &#125; ... .addDisposableTo(disposeBag) 再举一个例子，当我们网络请求得到json数据的时候，我们可以使用flatmap进行序列转换，解析成Model序列，然后我们订阅这个带有Model的序列，代码就会变得很优雅 UIBindingObserver UIBindingObserver这个东西很有用的，创建我们自己的监听者，有时候RxCocoa(RxSwiftz中对UIKit的一个扩展库)给的扩展不够我们使用，比如一个UITextField有个isEnabled属性，我想把这个isEnabled变为一个observer，我们可以这样做： extension Reactive where Base: UITextField &#123; var inputEnabled: UIBindingObserver&lt;Base, Result&gt; &#123; return UIBindingObserver(UIElement: base) &#123; textFiled, result in textFiled.isEnabled = result.isValid &#125; &#125;&#125; UIBindingObserver是一个类，他的初始化方法中，有两个参数，第一个参数是一个元素本身，第一个参数是一个闭包，闭包参数是元素本身，还有他的一个性 public init(UIElement: UIElementType, binding: @escaping (UIElementType, Value) -&gt; Swift.Void) 自定义了一个inputEnabled Observer里面关联的UITextField的isEnabled属性]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Subject]]></title>
    <url>%2F2017%2F12%2F16%2FRxSwift%2FGrammar%2F06-Subject%2F</url>
    <content type="text"><![CDATA[SubjectSubjects 既是订阅者，也是Observable Subject是observable和Observer之间的桥梁说它是订阅者，是因为它能够动态地接收新的值。作为一个 Observer ，它可以订阅序列说它又是一个 Observable，是因为当 Subjects 有了新的值之后，就会通过 Event 将新值发出给他的所有订阅者同时作为一个 Observable ，它可以转发或者发射数据 Subject 有以下几种 ①PublishSubject 只发射给观察者订阅后的数据 ②ReplaySubject ③BehaviorSubject ④Variable ⑤BehaviorRelay 1.区别 PublishSubject, ReplaySubject和BehaviorSubject是不会自动发出completed事件的 2.相同之处： 首先他们都是 Observable，他们的订阅者都能收到他们发出的新的 Event 直到 Subject 发出 .complete 或者 .error 的 Event 后，该 Subject 便终结了，同时它也就不会再发出 .next 事件 对于那些在 Subject 终结后再订阅他的订阅者，也能收到 subject 发出的一条 .complete 或 .error 的 event，告诉这个新的订阅者它已经终结了。 他们之间最大的区别只是在于：当一个新的订阅者刚订阅它的时候，能不能收到 Subject 以前发出过的旧 Event，如果能的话又能收到多少个 Subject 常用的几个方法 onNext(:)：是 on(.next(:)) 的简便写法。该方法相当于 subject 接收到一个 .next 事件 onError(:)：是 on(.error(:)) 的简便写法。该方法相当于 subject 接收到一个 .error 事件 onCompleted()：是 on(.completed) 的简便写法。该方法相当于 subject 接收到一个 .completed 事件 ①PublishSubject❶基本介绍 PublishSubject 是最普通的 Subject，它不需要初始值就能创建当有观察者订阅 PublishSubject 时，PublishSubject 会发射订阅之后的数据给这个观察者,只能接收到订阅他之后发生的事件PublishSubject 的订阅者从他们开始订阅的时间点起，可以收到订阅后 Subject 发出的新 Event，而不会收到他们在订阅前已发出的 Even于是这里存在丢失数据的问题，如需全部数据，推荐改用 ReplaySubjectsubject.onNext()发出onNext事件对应的还有onError()和onCompleted()事件 ❷时序图 最上面一条是PublishSubject下面两条分别表示两个新的订阅，它们订阅的时间点不同，可以发现 PublishSubject 的订阅者只能收到他们订阅后的 Even如果序列因为错误终止发射序列，此时 PublishSubject 就不会发射数据，只是传递这次错误事件 ❸使用样例let disposeBag = DisposeBag() //创建一个PublishSubjectlet subject = PublishSubject&lt;String&gt;() //由于当前没有任何订阅者，所以这条信息不会输出到控制台subject.onNext("111") //第1次订阅subjectsubject.subscribe(onNext: &#123; string in print("第1次订阅：", string)&#125;, onCompleted:&#123; print("第1次订阅：onCompleted")&#125;).disposed(by: disposeBag) //当前有1个订阅，则该信息会输出到控制台subject.onNext("222") //第2次订阅subjectsubject.subscribe(onNext: &#123; string in print("第2次订阅：", string)&#125;, onCompleted:&#123; print("第2次订阅：onCompleted")&#125;).disposed(by: disposeBag) //当前有2个订阅，则该信息会输出到控制台subject.onNext("333") //让subject结束subject.onCompleted() //subject完成后会发出.next事件了。subject.onNext("444") //subject完成后它的所有订阅（包括结束后的订阅），都能收到subject的.completed事件，subject.subscribe(onNext: &#123; string in print("第3次订阅：", string)&#125;, onCompleted:&#123; print("第3次订阅：onCompleted")&#125;).disposed(by: disposeBag)//print 第1次订阅： 222 第1次订阅： 333 第2次订阅： 333 第1次订阅： onCompleted 第2次订阅： onCompleted 第3次订阅： onCompleted ②ReplaySubject❶基本介绍 和 PushblishSubject 不同，不论观察者什么时候订阅， ReplaySubject 都会发射完整的数据给观察者 ReplaySubject和PublishSubject不同的是，Observer有可能接收到订阅之前的值 ReplaySubject 在创建时候需要设置一个 bufferSize，表示它对于它发送过的 event 的缓存个数 比如一个 ReplaySubject 的 bufferSize 设置为 2，它发出了 3 个 .next 的 event，那么它会将后两个（最近的两个）event 给缓存起来。此时如果有一个 subscriber 订阅了这个 ReplaySubject，那么这个 subscriber 就会立即收到前面缓存的两个 .next 的 event 如果一个 subscriber 订阅已经结束的 ReplaySubject，除了会收到缓存的 .next 的 event 外，还会收到那个终结的 .error 或者 .complete 的 event ❷时序图 最上面一条是 ReplaySubject（bufferSize 设为为 2） 下面两条分别表示两个新的订阅，它们订阅的时间点不同。可以发现 ReplaySubject 的订阅者一开始就能收到 ReplaySubject 之前发出的两个 Event（如果有的话） ❷使用样例 let disposeBag = DisposeBag() //创建一个bufferSize为2的ReplaySubjectlet subject = ReplaySubject&lt;String&gt;.create(bufferSize: 2) //连续发送3个next事件subject.onNext("111")subject.onNext("222")subject.onNext("333") //第1次订阅subjectsubject.subscribe &#123; event in print("第1次订阅：", event)&#125;.disposed(by: disposeBag) //再发送1个next事件subject.onNext("444") //第2次订阅subjectsubject.subscribe &#123; event in print("第2次订阅：", event)&#125;.disposed(by: disposeBag) //让subject结束subject.onCompleted() //第3次订阅subjectsubject.subscribe &#123; event in print("第3次订阅：", event)&#125;.disposed(by: disposeBag)//print 第1次订阅: next(222)第1次订阅: next(333)第1次订阅: next(444)第2次订阅: next(333)第2次订阅: next(444)第1次订阅: completed第2次订阅: completed第3次订阅: next(333)第3次订阅: next(444)第3次订阅: completed ③BehaviorSubject❶基本介绍 BehaviorSubject 需要通过一个默认初始值来创建当一个订阅者来订阅它的时候，这个订阅者会立即收到 BehaviorSubjects 上一个发出的 event。之后就跟正常的情况一样，它也会接收到 BehaviorSubject 之后发出的新的 event。 ❷时序图 最上面一条是BehaviorSubject下面两条分别表示两个新的订阅，它们订阅的时间点不同，可以发现 BehaviorSubject的订阅者一开始就能收到BehaviorSubjects 之前发出的一个 Event ❸使用样例let disposeBag = DisposeBag() //创建一个BehaviorSubjectlet subject = BehaviorSubject(value: "111") //第1次订阅subjectsubject.subscribe &#123; event in print("第1次订阅：", event)&#125;.disposed(by: disposeBag) //发送next事件subject.onNext("222") //发送error事件subject.onError(NSError(domain: "local", code: 0, userInfo: nil)) //第2次订阅subjectsubject.subscribe &#123; event in print("第2次订阅：", event)&#125;.disposed(by: disposeBag)//print==========第1次订阅: next(111)第1次订阅: next(222)第1次订阅: next(Error Domain=local Code=0 "null")第2次订阅: next(Error Domain=local Code=0 "null") ④Variable❶基本介绍 Variable 是 BehaviorSubject 的一个封装 相比 BehaviorSubject ，它不会因为错误终止也不会正常终止，是一个无限序列 Variable是BehaviorSubject一个包装箱，就像是一个箱子一样，使用的时候需要调用asObservable()拆箱，里面的value是一个BehaviorSubject，他不会发出error事件，但是会自动发出completed事件 Variable 其实就是对 BehaviorSubject 的封装，所以它也必须要通过一个默认的初始值进行创建。Variable 具有 BehaviorSubject 的功能，能够向它的订阅者发出上一个 event 以及之后新创建的 event。不同的是，Variable 还把会把当前发出的值保存为自己的状态。同时它会在销毁时自动发送 .complete 的 event，不需要也不能手动给 Variables 发送 completed 或者 error 事件来结束它。简单地说就是 Variable 有一个 value 属性，我们改变这个 value 属性的值就相当于调用一般 Subjects 的 onNext() 方法，而这个最新的 onNext() 的值就被保存在 value 属性里了，直到我们再次修改它 注意： Variables 本身没有 subscribe() 方法，但是所有 Subjects 都有一个 asObservable() 方法。我们可以使用这个方法返回这个 Variable 的 Observable 类型，拿到这个 Observable 类型我们就能订阅它了。 使用样例import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() let disposeBag = DisposeBag() //创建一个初始值为111的Variable let variable = Variable("111") //修改value值 variable.value = "222" //第1次订阅 variable.asObservable().subscribe &#123; print("第1次订阅：", $0) &#125;.disposed(by: disposeBag) //修改value值 variable.value = "333" //第2次订阅 variable.asObservable().subscribe &#123; print("第2次订阅：", $0) &#125;.disposed(by: disposeBag) //修改value值 variable.value = "444" &#125;&#125; 运行结果如下：注意：由于 Variable 对象在 viewDidLoad() 方法内初始化，所以它的生命周期就被限制在该方法内。当这个方法执行完毕后，这个 Variable 对象就会被销毁，同时它也就自动地向它的所有订阅者发出 .completed 事件 第1次订阅: next(222)第1次订阅: next(333)第2次订阅: next(333)第1次订阅: next(444)第2次订阅: next(444)第1次订阅: completed第1次订阅: completed ⑤BehaviorRelay❶基本介绍 BehaviorRelay 是作为 Variable 的替代者出现的。它的本质其实也是对 BehaviorSubject 的封装，所以它也必须要通过一个默认的初始值进行创建 BehaviorRelay 具有 BehaviorSubject 的功能，能够向它的订阅者发出上一个 event 以及之后新创建的 event。与 BehaviorSubject 不同的是，不需要也不能手动给 BehaviorReply 发送 completed 或者 error 事件来结束它（BehaviorRelay 会在销毁时也不会自动发送 .complete 的 event） BehaviorRelay 有一个 value 属性，我们通过这个属性可以获取最新值。而通过它的 accept() 方法可以对值进行修改 ❷上面的 Variable 样例我们可以改用成 BehaviorRelay，代码如下import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() let disposeBag = DisposeBag() //创建一个初始值为111的BehaviorRelay let subject = BehaviorRelay&lt;String&gt;(value: "111") //修改value值 subject.accept("222") //第1次订阅 subject.asObservable().subscribe &#123; print("第1次订阅：", $0) &#125;.disposed(by: disposeBag) //修改value值 subject.accept("333") //第2次订阅 subject.asObservable().subscribe &#123; print("第2次订阅：", $0) &#125;.disposed(by: disposeBag) //修改value值 subject.accept("444") &#125;&#125;//print ===== 第1次订阅： next(222) 第1次订阅： next(333) 第2次订阅： next(333) 第1次订阅： next(444) 第2次订阅： next(444) ❸如果想将新值合并到原值上，可以通过 accept() 方法与 value 属性配合来实现 这个常用在表格上拉加载功能上，BehaviorRelay 用来保存所有加载到的数据 class ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() let disposeBag = DisposeBag() //创建一个初始值为包含一个元素的数组的BehaviorRelay let subject = BehaviorRelay&lt;[String]&gt;(value: ["1"]) //修改value值 subject.accept(subject.value + ["2", "3"]) //第1次订阅 subject.asObservable().subscribe &#123; print("第1次订阅：", $0) &#125;.disposed(by: disposeBag) //修改value值 subject.accept(subject.value + ["4", "5"]) //第2次订阅 subject.asObservable().subscribe &#123; print("第2次订阅：", $0) &#125;.disposed(by: disposeBag) //修改value值 subject.accept(subject.value + ["6", "7"]) &#125;&#125;//print =====第1次订阅： next(["1", "2", "3"])第1次订阅： next(["1", "2", "3", "4", "5"])第2次订阅： next(["1", "2", "3", "4", "5"])第1次订阅： next(["1", "2", "3", "4", "5", "6", "7"])第2次订阅： next(["1", "2", "3", "4", "5", "6", "7"])]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Observer-观察者]]></title>
    <url>%2F2017%2F12%2F16%2FRxSwift%2FGrammar%2F05-Observer-%E8%A7%82%E5%AF%9F%E8%80%85%2F</url>
    <content type="text"><![CDATA[①Observer观察者 ②直接在 subscribe、bind 方法中创建观察者 ③使用 AnyObserver 创建观察者 ④使用 Binder 创建观察者 ⑤自定义可绑定属性 ⑥RxSwift 自带的可绑定属性（UI 观察者） ①1 ①Observer观察者 观察者（Observer）的作用就是监听事件，然后对这个事件做出响应。或者说任何响应事件的行为都是观察者 当点击按钮，弹出一个提示框。那么这个“弹出一个提示框”就是观察者 Observer 当请求一个远程的json数据后，将其打印出来。那么这个“打印 json 数据”就是观察者 Observer ②直接在 subscribe、bind 方法中创建观察者❶在 subscribe 方法中创建 创建观察者最直接的方法就是在 Observable 的 subscribe 方法后面描述当事件发生时，需要如何做出响应 比如下面的样例，观察者就是由后面的 onNext，onError，onCompleted 这些闭包构建出来的 let observable = Observable.of("A", "B", "C") observable.subscribe( onNext: &#123; element in print(element)&#125;, onError: &#123; error in print(error)&#125;, onCompleted: &#123; print("completed")&#125;)//printABCcompleted ❷在 bind 方法中创建 创建一个定时生成索引数的Observable序列，并将索引数不断显示在 label 标签上 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //Observable序列（每隔1秒钟发出一个索引数） let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) observable .map &#123; "当前索引数：\($0 )"&#125; .bind &#123; [weak self](text) in //收到发出的索引数后显示到label上 self?.label.text = text &#125; .disposed(by: disposeBag) &#125;&#125; ③使用 AnyObserver 创建观察者 AnyObserver 可以用来描叙任意一种观察者 ❶配合 subscribe 方法使用//观察者let observer: AnyObserver&lt;String&gt; = AnyObserver &#123; (event) in switch event &#123; case .next(let data): print(data) case .error(let error): print(error) case .completed: print("completed") &#125;&#125; let observable = Observable.of("A", "B", "C")observable.subscribe(observer) ❷配合 bindTo 方法使用 也可配合Observable的数据绑定方法（bindTo）使用 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //观察者 let observer: AnyObserver&lt;String&gt; = AnyObserver &#123; [weak self] (event) in switch event &#123; case .next(let text): //收到发出的索引数后显示到label上 self?.label.text = text default: break &#125; &#125; //Observable序列（每隔1秒钟发出一个索引数） let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) observable .map &#123; "当前索引数：\($0 )"&#125; .bind(to: observer) .disposed(by: disposeBag) &#125;&#125; ④使用 Binder 创建观察者❶基本介绍 相较于 AnyObserver 的大而全，Binder 更专注于特定的场景。Binder 主要有以下两个特征： 不会处理错误事件 确保绑定都是在给定 Scheduler 上执行（默认 MainScheduler） 一旦产生错误事件，在调试环境下将执行 fatalError，在发布环境下将打印错误信息 ❷使用样例 在上面序列数显示样例中，label 标签的文字显示就是一个典型的 UI 观察者它在响应事件时，只会处理 next 事件，而且更新 UI 的操作需要在主线程上执行那么这种情况下更好的方案就是使用 Binder上面的样例我们改用 Binder 会简单许多： import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //观察者 let observer: Binder&lt;String&gt; = Binder(label) &#123; (view, text) in //收到发出的索引数后显示到label上 view.text = text &#125; //Observable序列（每隔1秒钟发出一个索引数） let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) observable .map &#123; "当前索引数：\($0 )"&#125; .bind(to: observer) .disposed(by: disposeBag) &#125;&#125; ⑤自定义可绑定属性 有时想让 UI 控件创建出来后默认就有一些观察者，而不必每次都为它们单独去创建观察者比如我们想要让所有的 UIlabel 都有个 fontSize 可绑定属性，它会根据事件值自动改变标签的字体大小 ❶方式一:通过对 UI 类进行扩展 通过对 UILabel 进行扩展，增加了一个 fontSize 可绑定属性 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //Observable序列（每隔0.5秒钟发出一个索引数） let observable = Observable&lt;Int&gt;.interval(0.5, scheduler: MainScheduler.instance) observable .map &#123; CGFloat($0) &#125; .bind(to: label.fontSize) //根据索引数不断变放大字体 .disposed(by: disposeBag) &#125;&#125; extension UILabel &#123; public var fontSize: Binder&lt;CGFloat&gt; &#123; return Binder(self) &#123; label, fontSize in label.font = UIFont.systemFont(ofSize: fontSize) &#125; &#125;&#125; ❷通过对 Reactive 类进行扩展 既然使用了 RxSwift，那么更规范的写法应该是对 Reactive 进行扩展。这里同样是给 UILabel 增加了一个 fontSize 可绑定属性 （注意：这种方式下，我们绑定属性时要写成 label.rx.fontSize） import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //Observable序列（每隔0.5秒钟发出一个索引数） let observable = Observable&lt;Int&gt;.interval(0.5, scheduler: MainScheduler.instance) observable .map &#123; CGFloat($0) &#125; .bind(to: label.rx.fontSize) //根据索引数不断变放大字体 .disposed(by: disposeBag) &#125;&#125; extension Reactive where Base: UILabel &#123; public var fontSize: Binder&lt;CGFloat&gt; &#123; return Binder(self.base) &#123; label, fontSize in label.font = UIFont.systemFont(ofSize: fontSize) &#125; &#125;&#125; ⑥RxSwift 自带的可绑定属性（UI 观察者） 其实 RxSwift 已经为我们提供许多常用的可绑定属性比如 UILabel 就有 text 和 attributedText 这两个可绑定属性。 import RxSwiftimport UIKit extension Reactive where Base: UILabel &#123; /// Bindable sink for `text` property. public var text: Binder&lt;String?&gt; &#123; return Binder(self.base) &#123; label, text in label.text = text &#125; &#125; /// Bindable sink for `attributedText` property. public var attributedText: Binder&lt;NSAttributedString?&gt; &#123; return Binder(self.base) &#123; label, text in label.attributedText = text &#125; &#125; &#125; 那么上文那个定时显示索引数的样例，我们其实不需要自定义 UI 观察者，直接使用 RxSwift 提供的绑定属性即可。 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; @IBOutlet weak var label: UILabel! let disposeBag = DisposeBag() override func viewDidLoad() &#123; //Observable序列（每隔1秒钟发出一个索引数） let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance) observable .map &#123; "当前索引数：\($0 )"&#125; .bind(to: label.rx.text) //收到发出的索引数后显示到label上 .disposed(by: disposeBag) &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-响应式编程对比]]></title>
    <url>%2F2017%2F12%2F16%2FRxSwift%2FGrammar%2F%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[#Rx 介绍 Rx Rx 是 ReactiveX 的缩写，简单来说就是基于异步 Event（事件）序列的响应式编程 Rx 可以简化异步编程方法，并提供更优雅的数据绑定。让我们可以时刻响应新的数据同时顺序地处理它们 Rx 库 Rx 本身可以说是一种跨平台的标准，它有自己的社区论坛，不管是 web 还是移动开发，都能用 Rx 的思维和方法来完成你的工作 作为一种跨平台标准，目前已经有许多基于不同开发语言的 Rx 的库。除了我后面会着重介绍的 RxSwift 之外，还有 RxJava, RxJS, RxKotlin, Rx.NET…等等 这些 Rx 库虽然用的语言不同，但它们之间其实都是相通的，都有相同的 API。所以说如果以后你使用别的语言做其他的方面的开发，同样是可以使用相同的思维甚至相同的方法接口（除了语言不同）来编程 ##Rx 主页 如果想了解整个 Rx 大家庭的成员，可以访问它的主页 RxSwift 介绍RxSwift 的作用 经常需要检测某些值的变化（比如：textFiled 输入值的变化、数据请求完成或失败的变化），然后进行相应的处理 过去针对不同的情况，我们需要采用不同的事件传递方法去处理，比如：delegate、notifinotion、target-action、KVO 等等 而 RectiveX 机制（由 RxSwift 实现）的出现，让程序里的事件传递响应方法做到统一。将之前那些常用的事件传递方法（比如：delegate、notification、target-action 等等），全部替换成 Rx 的“信号链”方式 如果使用的是 MVVM 开发模式的话，通过 RxSwift 可以获得更加方便的数据绑定的方法，使得 MVVM 开发更加如虎添翼 RxSwift 的安装与配置 GitHub 上下载或 cocopods 导入 2 import RxSwiftimport RxCocoa RxSwift 与 RxCocoa RxSwift：它只是基于 Swift 语言的 Rx 标准实现接口库，所以 RxSwift 里不包含任何 Cocoa 或者 UI 方面的类 RxCocoa：是基于 RxSwift 针对于 iOS 开发的一个库，它通过 Extension 的方法给原生的比如 UI 控件添加了 Rx 的特性，使得我们更容易订阅和响应这些控件的事件]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Observable订阅&事件监听&订阅销毁]]></title>
    <url>%2F2017%2F12%2F16%2FRxSwift%2FGrammar%2F04-Observable-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%2F</url>
    <content type="text"><![CDATA[监听事件的生命周期doOn 介绍 可以使用 doOn 方法来监听事件的生命周期，它会在每一次事件发送前被调用同时它和 subscribe 一样，可以通过不同的 block 回调处理不同类型的 event。比如 do(onNext:) 方法就是在 subscribe(onNext:) 前调用 而 do(onCompleted:) 方法则会在 subscribe(onCompleted:) 前面调用 使用样例let observable = Observable.of("A", "B", "C") observable .do(onNext: &#123; element in print("Intercepted Next：", element) &#125;, onError: &#123; error in print("Intercepted Error：", error) &#125;, onCompleted: &#123; print("Intercepted Completed") &#125;, onDispose: &#123; print("Intercepted Disposed") &#125;) .subscribe(onNext: &#123; element in print(element) &#125;, onError: &#123; error in print(error) &#125;, onCompleted: &#123; print("completed") &#125;, onDisposed: &#123; print("disposed") &#125;)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Observable-事件监听]]></title>
    <url>%2F2017%2F12%2F16%2FRxSwift%2FGrammar%2F04-Observable-%E8%AE%A2%E9%98%85%E9%94%80%E6%AF%81%2F</url>
    <content type="text"><![CDATA[Observable 的销毁（Dispose）Observable 从创建到终结流程 一个 Observable 序列被创建出来后它不会马上就开始被激活从而发出 Event，而是要等到它被某个人订阅了才会激活它。而Observable序列激活之后要一直等到它发出了 .error 或者 .completed 的 event后，它才被终结 dispose() 方法 除了 dispose() 方法之外，我们更经常用到的是一个叫 DisposeBag 的对象来管理多个订阅行为的销毁 以把一个DisposeBag对象看成一个垃圾袋，把用过的订阅行为都放进去，感觉有点像OC释放池 而这个DisposeBag就会在自己快要dealloc的时，对它里面的所有订阅行为都调用 dispose() 方法 let disposeBag = DisposeBag() //第1个Observable，及其订阅let observable1 = Observable.of("A", "B", "C")observable1.subscribe &#123; event in print(event)&#125;.disposed(by: disposeBag) //第2个Observable，及其订阅let observable2 = Observable.of(1, 2, 3)observable2.subscribe &#123; event in print(event)&#125;.disposed(by: disposeBag)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Observable订阅]]></title>
    <url>%2F2017%2F12%2F16%2FRxSwift%2FGrammar%2F04-Observable-%E8%AE%A2%E9%98%85%2F</url>
    <content type="text"><![CDATA[订阅 Observable 有了Observable，还要使用 subscribe() 方法来订阅它，接收它发出的 Event 方法1 ❶使用 subscribe() 订阅一个 Observable 对象该方法的 block 的回调参数就是被发出的 event 事件，将其直接打印出来 let observable = Observable.of("A", "B", "C") observable.subscribe &#123; event in print(event)&#125;//打印next(A)next(B)next(C)completed 初始化 Observable 序列时设置的默认值都按顺序通过 .next 事件发送出来 当 Observable 序列的初始数据都发送完毕，它还会自动发一个 .completed 事件出来 ❷如果想要获取到这个事件里的数据，可以通过 event.element 得到 let observable = Observable.of("A", "B", "C") observable.subscribe &#123; event in print(event.element)&#125;//printOptional("A")Optional("B")Optional("C")nil 方法2 RxSwift还提供另一个subscribe 方法，它可以把 event 进行分类 通过不同的 block 回调处理不同类型的 event。（其中 onDisposed 表示订阅行为被 dispose 后的回调，这个我后面会说） 同时会把 event 携带的数据直接解包出来作为参数，方便我们使用 let observable = Observable.of("A", "B", "C") observable.subscribe(onNext: &#123; element in print(element)&#125;, onError: &#123; error in print(error)&#125;, onCompleted: &#123; print("completed")&#125;, onDisposed: &#123; print("disposed")&#125;)//printABCcompleteddisposed subscribe() 方法的 onNext、onError、onCompleted 和 onDisposed 这四个回调 block 参数都是有默认值的，即它们都是可选的。所以我们也可以只处理 onNext 而不管其他的情况 let observable = Observable.of("A", "B", "C") observable.subscribe(onNext: &#123; element in print(element)&#125;)//printABC]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-Grammar- 资料]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FGrammar%2FRxSwift-%E8%B5%84%E6%96%99%2F</url>
    <content type="text"></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-UI控件的扩展]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FUIKit%2F%E5%9F%BA%E6%9C%ACUI%E6%8E%A7%E4%BB%B6%E7%9A%84%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[UITextField / UITextView监听多个UITextField 监听三个UITextField随便哪个的text变化了，都会引起代码执行，并且结果赋值到result的text @IBOutlet weak var number1: UITextField!@IBOutlet weak var number2: UITextField!@IBOutlet weak var number3: UITextField!@IBOutlet weak var result: UILabel!var disposeBag = DisposeBag()override func viewDidLoad() &#123; super.viewDidLoad() Observable.combineLatest(number1.rx.text.orEmpty, number2.rx.text.orEmpty, number3.rx.text.orEmpty) &#123; textValue1, textValue2, textValue3 -&gt; Int in return (Int(textValue1) ?? 0) + (Int(textValue2) ?? 0) + (Int(textValue3) ?? 0) &#125; .map &#123; $0.description &#125; .bindTo(result.rx.text) .disposed(by: disposeBag)&#125; 单个UITextField变化监听 官方： // also test two way bindinglet textValue = Variable("")_ = textField.rx.textInput &lt;-&gt; textValuetextValue.asObservable() .subscribe(onNext: &#123; [weak self] x in self?.debug("UITextField text \(x)") &#125;) .disposed(by: disposeBag) 例子：单个UITextField事件监听 usernameTF.rx.controlEvent([.editingDidBegin]) //状态可以组合 .asObservable() .subscribe(onNext: &#123; _ in print("begin edit") &#125;).disposed(by: disposeBag) UITextField遇到键盘Next/Go按钮时，焦点的切换 这里有个小坑，如果usernameTF和passwordTF用了Observable.combineLatest然后订阅的话，你会发现下面的delegate代码没用了，在usernameTF点击Next/Go不能切换到passwordTF了 func textFieldShouldReturn(_ textField: UITextField) -&gt; Bool &#123; if textField == usernameTF &#123; passwordTF.becomeFirstResponder() &#125; else &#123; passwordTF.resignFirstResponder() Log("view become") &#125; return true&#125; 用事件监听即可，监听return key结束编辑的事件(editingDidEndOnExit)： /* editingDidEndOnExit: UIControlEvents // 'return key' ending editing */usernameTF.rx.controlEvent(.editingDidEndOnExit).subscribe(onNext: &#123; [weak self] (_) in self?.passwordTF.becomeFirstResponder()&#125;).disposed(by: disposeBag)passwordTF.rx.controlEvent(.editingDidEndOnExit).subscribe(onNext: &#123; [weak self] (_) in self?.passwordTF.resignFirstResponder()&#125;).disposed(by: disposeBag) UITextView变化监听 / also test two way bindinglet textViewValue = Variable("")_ = textView.rx.textInput &lt;-&gt; textViewValuetextViewValue.asObservable() .subscribe(onNext: &#123; [weak self] x in self?.debug("UITextView text \(x)") &#125;) .disposed(by: disposeBag) UIButton / UIBarButtonItem监听按钮的点击（touchUpInside） @IBOutlet weak var doSomethingOutlet: UIButton! doSomethingOutlet.rx.tap .subscribe(onNext: &#123; [weak self] in self?.showAlert() //这里self指vc &#125;) .disposed(by: disposeBag) 也可以这样： button.rx.tap .bindNext &#123; [weak self] in self?.openAppPreferences() &#125; .disposed(by: disposeBag) UISegmentedControl / UISwitch 监听状态切换 // also test two way bindinglet segmentedValue = Variable(0)_ = segmentedControl.rx.value &lt;-&gt; segmentedValuesegmentedValue.asObservable() .subscribe(onNext: &#123; [weak self] x in self?.debug("UISegmentedControl value \(x)") &#125;) .disposed(by: disposeBag) // also test two way bindinglet switchValue = Variable(true)_ = switcher.rx.value &lt;-&gt; switchValueswitchValue.asObservable() .subscribe(onNext: &#123; [weak self] x in self?.debug("UISwitch value \(x)") &#125;) .disposed(by: disposeBag) UIActivityIndicatorView 状态指示器根据UISwitch的状态来决定是否显示旋转 switcher.rx.value .bindTo(activityIndicator.rx.isAnimating) .disposed(by: disposeBag) UISlider // also test two way bindinglet sliderValue = Variable&lt;Float&gt;(1.0)_ = slider.rx.value &lt;-&gt; sliderValuesliderValue.asObservable() .subscribe(onNext: &#123; [weak self] x in self?.debug("UISlider value \(x)") &#125;) .disposed(by: disposeBag) UIDatePicker // also test two way bindinglet dateValue = Variable(Date(timeIntervalSince1970: 0))_ = datePicker.rx.date &lt;-&gt; dateValuedateValue.asObservable() .subscribe(onNext: &#123; [weak self] x in self?.debug("UIDatePicker date \(x)") &#125;) .disposed(by: disposeBag) UIGestureRecognizer 手势回调，x是UIPanGestureRecognizer对象 mypan.rx.event.subscribe(onNext: &#123; [weak self] x in self?.debug("UIGestureRecognizer event \(x.state)") let p = x.location(in: x.view) self?.debug("pan ges point: \(p)")&#125;).disposed(by: disposeBag) CLLocationManager 还有一堆didxxx方法，自己Command点进去看 manager.requestWhenInUseAuthorization()manager.rx.didUpdateLocations .subscribe(onNext: &#123; x in print("rx.didUpdateLocations \(x)") &#125;) .disposed(by: disposeBag)_ = manager.rx.didFailWithError .subscribe(onNext: &#123; x in print("rx.didFailWithError \(x)") &#125;) manager.rx.didChangeAuthorizationStatus .subscribe(onNext: &#123; status in print("Authorization status \(status)") &#125;) .disposed(by: disposeBag) manager.startUpdatingLocation() UITableView的扩展单个section的情况 除了下面几个最常用的，还有itemDeselected、itemInserted、itemDeleted等等行为可以订阅，自己Command点进去看 class SimpleTableViewExampleViewController : ViewController, UITableViewDelegate &#123; @IBOutlet weak var tableView: UITableView! override func viewDidLoad() &#123; super.viewDidLoad() let items = Observable.just( (0..&lt;20).map &#123; "\($0)" &#125; ) //大概是对cellForRowAtIndexPath的封装 items .bindTo(tableView.rx.items(cellIdentifier: "Cell", cellType: UITableViewCell.self)) &#123; (row, element, cell) in //element 是 items[row]元素 cell.textLabel?.text = "\(element) @ row \(row)" &#125; .disposed(by: disposeBag) //点击某个cell触发, value 是 items[row]，类似的是tableView.rx.itemSelected，都是对didSelectRowAtIndexPath的封装 tableView.rx .modelSelected(String.self) .subscribe(onNext: &#123; value in DefaultWireframe.presentAlert("Tapped `\(value)`") &#125;) .disposed(by: disposeBag) //accessoryButtonTappedForRowWithIndexPath tableView.rx .itemAccessoryButtonTapped .subscribe(onNext: &#123; indexPath in DefaultWireframe.presentAlert("Tapped Detail @ \(indexPath.section),\(indexPath.row)") &#125;) .disposed(by: disposeBag) &#125; &#125; 多section的情况 class SimpleTableViewExampleSectionedViewController : ViewController, UITableViewDelegate &#123; @IBOutlet weak var tableView: UITableView! let dataSource = RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, Double&gt;&gt;() override func viewDidLoad() &#123; super.viewDidLoad() let dataSource = self.dataSource let items = Observable.just([ SectionModel(model: "First section", items: [ 11.0, 12.0, 13.0 ]), SectionModel(model: "Second section", items: [ 21.0, 22.0, 23.0 ]), SectionModel(model: "Third section", items: [ 31.0, 32.0, 33.0 ]), ]) dataSource.configureCell = &#123; (_, tv, indexPath, element) in let cell = tv.dequeueReusableCell(withIdentifier: "Cell")! cell.textLabel?.text = "\(element) @ row \(indexPath.row)" return cell &#125; items .bindTo(tableView.rx.items(dataSource: dataSource)) .disposed(by: disposeBag) tableView.rx .itemSelected .map &#123; indexPath in return (indexPath, dataSource[indexPath]) &#125; .subscribe(onNext: &#123; indexPath, model in DefaultWireframe.presentAlert("Tapped `\(model)` @ \(indexPath)") &#125;) .disposed(by: disposeBag) tableView.rx .setDelegate(self) .disposed(by: disposeBag) &#125; func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? &#123; let label = UILabel(frame: CGRect.zero) label.text = dataSource[section].model return label &#125; func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat &#123; return 30 &#125; // to prevent swipe to delete behavior func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -&gt; UITableViewCellEditingStyle &#123; return .none &#125;&#125; 原文]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-简介以及简单学习使用]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FGrammar%2F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Swift-RxSwift-简介以及简单学习使用 RxSwift 项目文档中 Why 已有详细介绍 Bindings [RxWhy] -&gt; [Bindings] -&gt; [BindingsViewController.swift] Observable.combineLatest(firstName.rx_text, lastName.rx_text) &#123; $0 + " " + $1 &#125; // ① .map &#123; "Greeting \($0)" &#125; // ② .bindTo(greetingLabel.rx_text) // ③ 将 firstName 和 lastName 的 text 属性结合起来，并进行合并处理，也就是 $0 + “ “ + $1 这部分，用空格将两个值合并起来作为结果传递给后面使用 使用 map 的方法，将上一步得到值前面加上一个 Greeting ，并将该值传递给后面使用 bindTo 就是绑定，将上一步的值绑定到 greetingLabel 的 text 代码就是实时的执行 greetingLabel.text = "Greeting " + firstName.text + " " + lastName.text 要求是实时 每当 fisrtName.text 或者 lastName.text 改变时， greetingLabel.text 都要随之改变 ContentOffset 经常通过 delegate 处理 scrollView 的 contentOffset 变化问题 public func scrollViewDidScroll(scrollView: UIScrollView) &#123; self.title = "contentOffset.x = \(scrollView.contentOffset.y)"&#125; 可能就和关联的逻辑分家了，内聚性啊…而且多个 scrollView ，还要做额外的判断处理，复杂性可想而知也有写过通过 closure 来解决的，其实可以认为 Rx 自带了这些功能（而且更强大[RxWhy] -&gt; [ContentOffset] -&gt; [ContentOffsetViewController.swift]Note: 在使用了 rx_contentOffset 后，最好不要去更改 delegate同样 button 也有类似的功能 tableView.rx_contentOffset .map &#123; $0.y &#125; .subscribeNext &#123; [unowned self] in self.title = "contentOffset.x = \($0)" &#125;.addDisposableTo(disposeBag) Tap button 的点击事件是一个很棘手的问题了，建立一个 target ，同时还使用的带字符串的 Select，button 的点击也和响应逻辑分家了处理方式会有两个问题 使用了带 String 的 Target 点击的关联事件代码和处理的逻辑分开了 button.addTarget(self, action: "tapButton", forControlEvents: .TouchDragInside) Rx 已经提供了 closure 的功能 button.rx_tap .subscribeNext &#123; print("Tap") &#125;.addDisposableTo(disposeBag) 资料来源]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-RxSwift-创建Observable序列]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FGrammar%2F%E5%88%9B%E5%BB%BAObservable%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[①just ②of ③from ④empty ⑤never ⑥error ⑦range ⑧repeatElement ⑨generate ⑩create ⑪deferred ⑫interval ⑬timer ①just just() 方法该方法通过传入一个默认值来初始化只创建包含一个元素的序列。换言之，只发送一个值和 .Completed： let observable = Observable&lt;Int&gt;.just(5) ②of 通过一组元素创建一个序列该方法可以接受可变数量的参数（必需要是同类型的） let observable = Observable.of("A", "B", "C") ③from 需要一个数组参数数据里的元素就会被当做这个 Observable 所发出 event 携带的数据内容，最终效果同上面 of 样例是一样的 let observable = Observable.from(["A", "B", "C"]) ④empty 创建一个空内容的 Observable 序列 let observable = Observable&lt;Int&gt;.empty() ⑤never ⑤never 创建一个永远不会发出 Event（也不会终止）的 Observable 序列 let observable = Observable&lt;Int&gt;.never() ⑥error 创建一个不做任何操作，而是直接发送一个错误的 Observable 序列 enum MyError: Error &#123; case A case B&#125; let observable = Observable&lt;Int&gt;.error(MyError.A) ⑦range 通过指定起始和结束数值，创建一个以这个范围内所有值作为初始值的 Observable 序列。下面样例中，两种方法创建的 Observable 序列都是一样的 //使用range()let observable = Observable.range(start: 1, count: 5) //使用of()let observable = Observable.of(1, 2, 3 ,4 ,5) ⑧repeatElement 法创建一个可以无限发出给定元素的 Event 的 Observable 序列（永不终止） let observable = Observable.repeatElement(1) #⑨generate 该方法创建一个只有当提供的所有的判断条件都为 true 的时候，才会给出动作的 Observable 序列两种方法创建的 Observable 序列都是一样的 //使用generate()方法let observable = Observable.generate( initialState: 0, condition: &#123; $0 &lt;= 10 &#125;, iterate: &#123; $0 + 2 &#125;) //使用of()方法let observable = Observable.of(0 , 2 ,4 ,6 ,8 ,10) #⑩create 接受一个 block 形式的参数，任务是对每一个过来的订阅进行处理方便演示，这里增加了订阅相关代码 //这个block有一个回调参数observer就是订阅这个Observable对象的订阅者//当一个订阅者订阅这个Observable对象的时候，就会将订阅者作为参数传入这个block来执行一些内容let observable = Observable&lt;String&gt;.create&#123;observer in //对订阅者发出了.next事件，且携带了一个数据&quot;hangge.com&quot; observer.onNext(&quot;hangge.com&quot;) //对订阅者发出了.completed事件 observer.onCompleted() //因为一个订阅行为会有一个Disposable类型的返回值，所以在结尾一定要returen一个Disposable return Disposables.create()&#125; //订阅测试observable.subscribe &#123; print($0)&#125;//打印 next(hangge.com) completed #⑪deferred 该个方法相当于是创建一个 Observable 工厂，通过传入一个 block 来执行延迟 Observable 序列创建的行为，而这个 block 里就是真正的实例化序列对象的地方 //用于标记是奇数、还是偶数var isOdd = true //使用deferred()方法延迟Observable序列的初始化，通过传入的block来实现Observable序列的初始化并且返回。let factory : Observable&lt;Int&gt; = Observable.deferred &#123; //让每次执行这个block时候都会让奇、偶数进行交替 isOdd = !isOdd //根据isOdd参数，决定创建并返回的是奇数Observable、还是偶数Observable if isOdd &#123; return Observable.of(1, 3, 5 ,7) &#125;else &#123; return Observable.of(2, 4, 6, 8) &#125;&#125; //第1次订阅测试factory.subscribe &#123; event in print("\(isOdd)", event)&#125; //第2次订阅测试factory.subscribe &#123; event in print("\(isOdd)", event)&#125;// printfalse next(2)false next(4)false next(6)false next(8)false completedtrue next(1)true next(3)true next(5)true next(7)true completed #⑫interval 创建的 Observable 序列每隔一段设定的时间，会发出一个索引数的元素。而且它会一直发送下去创建的 Observable 序列每隔一段设定的时间，会发出一个索引数的元素。而且它会一直发送下去 let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)observable.subscribe &#123; event in print(event)&#125;//printnext(0)next(1)next(2)next(3) ⑬timer 这个方法有两种用法，一种是创建的 Observable 序列在经过设定的一段时间后，产生唯一的一个元素 //5秒种后发出唯一的一个元素0let observable = Observable&lt;Int&gt;.timer(5, scheduler: MainScheduler.instance)observable.subscribe &#123; event in print(event)&#125;//printnext(0)competed 另一种是创建的 Observable 序列在经过设定的一段时间后，每隔一段时间产生一个元素 //延时5秒种后，每隔1秒钟发出一个元素let observable = Observable&lt;Int&gt;.timer(5, period: 1, scheduler: MainScheduler.instance)observable.subscribe &#123; event in print(event)&#125;//printnext(0)next(1)next(2)next(3)]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-Grammar-Observables-介绍]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FGrammar%2F02-Observables-%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[①概念❶Observable Observable 类是 Rx 框架的基础，既可观察序列 作用是:异步地产生一系列的 Event（事件），即一个 Observable 对象会随着时间推移不定期地发出 event(element : T) 这样一个东西 Event 还可以携带数据，它的泛型 就是用来指定这个 Event 携带的数据的类型 每一个Observable的实例都是一个序列 Observable序列相比于Swift序列的关键优势点在于它能够异步地接收元素 有可观察序列，还需要一个 Observer（订阅者）来订阅它，这样这个订阅者才能收到 Observable 不时发出的 Event Observable(ObservableType) 等效于Sequence observableType.subscribe(_:) 方法等效于Sequence.makeIterator() ObservableType.subscribe(_:) 接收一个观察者ObserverType参数,它将被订阅自动接收由可观察到的序列事件和元素，而不是在返回的生成器上手动调用next() 如果一个Observable发出一个next事件(Event.next(Element)),它还能够继续发出更多的事件 如果一个Observable发出一个error事件(Event.error(ErrorType))或者一个completed事件(Event.completed)，那么这个Observable序列就不能给订阅者发送其他的事件了 ❷Event 事件 Event 的定义 public enum Event&lt;Element&gt; &#123; case next(Element) /// Next element is produced. case error(Swift.Error) /// Sequence terminated with an error. case completed /// Sequence completed successfully.&#125; Event 就是一个枚举，一个 Observable 是可以发出 3 种不同类型的 Event 事件 1.next next：next 事件就是那个可以携带数据 的事件，可以说它就是一个“最正常”的事件 1--2--3---&gt; 2.error error：error 事件表示一个错误，它可以携带具体的错误内容，一旦 Observable 发出了 error event，则这个 Observable 就等于终止了，以后它再也不会发出 event 事件了 -------1-----2------ x 3.completed completed：completed 事件表示 Observable 发出的事件正常地结束了，跟 error 一样，一旦 Observable 发出了 completed event，则这个 Observable 就等于终止了，以后它再也不会发出 event 事件了 ------1 ------2--------3-------| ❸Observable 与 Sequence比较 可以把每一个 Observable 的实例想象成于一个 Swift 中的 Sequence 即一个 Observable（ObservableType）相当于一个序列 Sequence（SequenceType） ObservableType.subscribe(_:) 方法其实就相当于 SequenceType.generate() 区别 Swift 中的 SequenceType 是同步的循环，而 Observable 是异步的 Observable 对象会在有任何 Event 时候，自动将 Event 作为一个参数通过 ObservableType.subscribe(_:) 发出，并不需要使用 next 方法]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-基本介绍&安装配置-01]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FGrammar%2F01-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%26%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[#Rx 介绍 Rx Rx 是 ReactiveX 的缩写，简单来说就是基于异步 Event（事件）序列的响应式编程 Rx 可以简化异步编程方法，并提供更优雅的数据绑定。让我们可以时刻响应新的数据同时顺序地处理它们 Rx 库 Rx 本身可以说是一种跨平台的标准，它有自己的社区论坛，不管是 web 还是移动开发，都能用 Rx 的思维和方法来完成你的工作 作为一种跨平台标准，目前已经有许多基于不同开发语言的 Rx 的库。除了我后面会着重介绍的 RxSwift 之外，还有 RxJava, RxJS, RxKotlin, Rx.NET…等等 这些 Rx 库虽然用的语言不同，但它们之间其实都是相通的，都有相同的 API。所以说如果以后你使用别的语言做其他的方面的开发，同样是可以使用相同的思维甚至相同的方法接口（除了语言不同）来编程 ##Rx 主页 如果想了解整个 Rx 大家庭的成员，可以访问它的主页 RxSwift 介绍RxSwift 的作用 经常需要检测某些值的变化（比如：textFiled 输入值的变化、数据请求完成或失败的变化），然后进行相应的处理 过去针对不同的情况，我们需要采用不同的事件传递方法去处理，比如：delegate、notifinotion、target-action、KVO 等等 而 RectiveX 机制（由 RxSwift 实现）的出现，让程序里的事件传递响应方法做到统一。将之前那些常用的事件传递方法（比如：delegate、notification、target-action 等等），全部替换成 Rx 的“信号链”方式 如果使用的是 MVVM 开发模式的话，通过 RxSwift 可以获得更加方便的数据绑定的方法，使得 MVVM 开发更加如虎添翼 RxSwift 的安装与配置 GitHub 上下载或 cocopods 导入 2 import RxSwiftimport RxCocoa RxSwift 与 RxCocoa RxSwift：它只是基于 Swift 语言的 Rx 标准实现接口库，所以 RxSwift 里不包含任何 Cocoa 或者 UI 方面的类 RxCocoa：是基于 RxSwift 针对于 iOS 开发的一个库，它通过 Extension 的方法给原生的比如 UI 控件添加了 Rx 的特性，使得我们更容易订阅和响应这些控件的事件 两种编程方式的比较样例需求 以最常见的 tableView 数据展示功能为例作为演示。后面分别使用传统写法，以及使用 RxSwift 响应式写法来实现 表格中显示的是歌曲信息（歌名，以及歌手） 点击选中任意一个单元格，在控制台中打印出对应的歌曲信息 实现 首先我们创建一个 Music 的结构体，用来保存歌曲名称、歌手名字。此外它还遵循 CustomStringConvertible 协议，方便我们输出调试 //歌曲结构体struct Music &#123; let name: String //歌名 let singer: String //演唱者 init(name: String, singer: String)&#123; self.name = name self.singer = singer &#125; &#125;extension Music: CustomStringConvertible &#123; var description: String &#123; return "name:\(name) singer:\(singer)" &#125;&#125; 传统式编程 ViewModel import Foundation //歌曲列表数据源struct MusicListViewModel &#123; let data = [ Music(name: "无条件", singer: "陈奕迅"), Music(name: "你曾是少年", singer: "S.H.E"), Music(name: "从前的我", singer: "陈洁仪"), Music(name: "在木星", singer: "朴树"), ]&#125; 视图控制器代码（ViewController.swift 设置 UITableView 的委托，并让视图控制器实现 UITableViewDataSource 和 UITableViewDelegate 协议，及相关的协议方法 import UIKitimport RxSwift class ViewController: UIViewController &#123; //tableView对象 @IBOutlet weak var tableView: UITableView! //歌曲列表数据源 let musicListViewModel = MusicListViewModel() override func viewDidLoad() &#123; super.viewDidLoad() //设置代理 tableView.dataSource = self tableView.delegate = self &#125;&#125; extension ViewController: UITableViewDataSource &#123; //返回单元格数量 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; return musicListViewModel.data.count &#125; //返回对应的单元格 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123; let cell = tableView.dequeueReusableCell(withIdentifier: "musicCell")! let music = musicListViewModel.data[indexPath.row] cell.textLabel?.text = music.name cell.detailTextLabel?.text = music.singer return cell &#125;&#125; extension ViewController: UITableViewDelegate &#123; //单元格点击 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) &#123; print("你选中的歌曲信息【\(musicListViewModel.data[indexPath.row])】") &#125;&#125; RxSwift 进行改造（响应式编程） ViewModel data 属性变成一个可观察序列对象（Observable Squence），而对象当中的内容和我们之前在数组当中所包含的内容是完全一样的 import RxSwift //歌曲列表数据源struct MusicListViewModel &#123; let data = Observable.just([ Music(name: "无条件", singer: "陈奕迅"), Music(name: "你曾是少年", singer: "S.H.E"), Music(name: "从前的我", singer: "陈洁仪"), Music(name: "在木星", singer: "朴树"), ])&#125; 视图控制器代码（ViewController.swift） DisposeBag：作用是 Rx 在视图控制器或者其持有者将要销毁的时候，自动释法掉绑定在它上面的资源。它是通过类似“订阅处置机制”方式实现（类似于 NotificationCenter 的 removeObserver）。 rx.items(cellIdentifier:）:这是 Rx 基于 cellForRowAt 数据源方法的一个封装。传统方式中我们还要有个 numberOfRowsInSection 方法，使用 Rx 后就不再需要了（Rx 已经帮我们完成了相关工作）。 rx.modelSelected： 这是 Rx 基于 UITableView 委托回调方法 didSelectRowAt 的一个封装。 import UIKitimport RxSwiftimport RxCocoa class ViewController: UIViewController &#123; //tableView对象 @IBOutlet weak var tableView: UITableView! //歌曲列表数据源 let musicListViewModel = MusicListViewModel() //负责对象销毁 let disposeBag = DisposeBag() override func viewDidLoad() &#123; super.viewDidLoad() //将数据源数据绑定到tableView上 musicListViewModel.data .bind(to: tableView.rx.items(cellIdentifier:"musicCell")) &#123; _, music, cell in cell.textLabel?.text = music.name cell.detailTextLabel?.text = music.singer &#125;.disposed(by: disposeBag) //tableView点击响应 tableView.rx.modelSelected(Music.self).subscribe(onNext: &#123; music in print("你选中的歌曲信息【\(music)】") &#125;).disposed(by: disposeBag) &#125;&#125;]]></content>
      <categories>
        <category>RxSwift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift-UIKit-UILabel-响应式扩展-01]]></title>
    <url>%2F2017%2F12%2F15%2FRxSwift%2FUIKit%2FUILabel-01%2F</url>
    <content type="text"><![CDATA[RxSwift RxSwift 是一个用于与 Swift 语言交互的框架，但它只是基础，并不能用来进行用户交互、网络请求等。 而 RxCocoa 是让 Cocoa APIs 更容易使用响应式编程的一个框架。RxCocoa 能够让我们方便地进行响应式网络请求、响应式的用户交互、绑定数据模型到 UI 控件等等。而且大多数的 UIKit 控件都有响应式扩展，它们都是通过 rx 属性进行使用 UILabel disposeBag let disposeBag = DisposeBag() UI- 显示时间lab fileprivate lazy var timeLabel: UILabel = &#123; let timeLabel = UILabel() timeLabel.frame = CGRect(x:30,y:40,width:300,height:111) return timeLabel&#125;() 显示彩色时间lab fileprivate lazy var timeColorLabel: UILabel = &#123; let timeColorLabel = UILabel() timeColorLabel.frame = CGRect(x:30,y:40+150,width:300,height:111) return timeColorLabel&#125;() 功能主要实现 UI- 添加UI view.addSubview(timeLabel) 把时间弄到lab上显示创建一个计时器（每0.1秒发送一个索引数） let timer = Observable&lt;Int&gt;.interval(0.1, scheduler: MainScheduler.instance) ``` &gt;已过去的时间格式化成想要的字符串，并绑定到label上```swift //普通文本 timer.map&#123;(String(format: "过去多少时间:%0.2d:%0.2d.%0.1d", arguments:[($0 / 600) % 600, ($0 % 600) / 10, $0 % 10]))&#125; .bind(to: timeLabel.rx.text) .disposed(by: disposeBag) //MARK:UI-彩色lab view.addSubview(timeColorLabel) timer.map(formatTimeInterval) .bind(to: timeColorLabel.rx.attributedText) .disposed(by: disposeBag) 将数字转成对应的富文本 func formatTimeInterval(ms: NSInteger) -&gt; NSMutableAttributedString &#123; let string = String(format: "过去多少时间%0.2d:%0.2d.%0.1d", arguments: [(ms / 600) % 600, (ms % 600 ) / 10, ms % 10]) //富文本设置 let attibuteString = NSMutableAttributedString(string: string) //从文本0开始6个字符字体HelveticaNeue-Bold,16号 attibuteString.addAttributes([NSAttributedStringKey.font : UIFont(name: "HelveticaNeue-Bold", size: 16)!], range: NSMakeRange(0, 5)) //设置字体颜色 attibuteString.addAttributes([NSAttributedStringKey.foregroundColor : UIColor.white], range: NSMakeRange(0,5)) //设置文字背景颜色 attibuteString.addAttributes([NSAttributedStringKey.backgroundColor : UIColor.orange], range: NSMakeRange(0,5)) return attibuteString&#125; 效果图]]></content>
      <categories>
        <category>RxSwift</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>RxSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIImagePickerController]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUIImagePickerController%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/qq_14920635/article/details/51472057]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIImagePickerController</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIImagePickerController</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-NSAttributedString]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FNSAttributedString%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/qq_14920635/article/details/76318309]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>NSAttributedString</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>NSAttributedString</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Func-Mirror-反射]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FFunc%2FSwift-Func-Mirror-%E5%8F%8D%E5%B0%84%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/qq_14920635/article/details/77676231]]></content>
      <categories>
        <category>Swift</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Func-正则表达式]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FFunc%2FSwift-Func-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[#常用的正则表达式方式 在NSpredicate中使用 let email = "lifusc464@qq.com" let regex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;" let predicate = NSPredicate(format: "SELF MATCHES %@", regex) let isValid = predicate.evaluate(with: email) print(isValid ? "正确的邮箱地址" : "错误的邮箱地址") 利用String的RangeOfString: option: 直接查找 正则表达判断是否含有结果值 /** 正则表达判断是否含有结果值 - parameter pattern: 一个字符串类型的正则表达式 - parameter str: 需要比较判断的对象 - returns: 返回布尔值判断结果 - warning: 注意匹配到结果的话就会返回true，没有匹配到结果就会返回false */ class func regex(pattern:String, str:String) -&gt; Bool &#123; let regex = try! NSRegularExpression(pattern: pattern, options:[NSRegularExpression.Options.caseInsensitive]) let resultNum = regex.numberOfMatches(in: str, options: NSRegularExpression.MatchingOptions(rawValue: 0) , range: NSMakeRange(0, str.characters.count)) if resultNum&gt;=1 &#123; return true &#125; return false &#125; 正则表达式获取目的值 /** 正则表达式获取目的值 - parameter pattern: 一个字符串类型的正则表达式 - parameter str: 需要比较判断的对象 - imports: 这里子串的获取先转话为NSString的[以后处理结果含NS的还是可以转换为NS前缀的方便] - returns: 返回目的字符串结果值数组(目前将String转换为NSString获得子串方法较为容易) - warning: 注意匹配到结果的话就会返回true，没有匹配到结果就会返回false */ class func regexGetSub(pattern:String, str:String) -&gt; [String] &#123; var subStr = [String]() let regex = try! NSRegularExpression(pattern: pattern, options:[NSRegularExpression.Options.caseInsensitive]) let results = regex.matches(in: str, options: NSRegularExpression.MatchingOptions.init(rawValue: 0), range: NSMakeRange(0, str.characters.count)) //解析出子串 for rst in results &#123; let nsStr = str as NSString //可以方便通过range获取子串 subStr.append(nsStr.substring(with: rst.range)) //str.substring(with: Range&lt;String.Index&gt;) //本应该用这个的，可以无法直接获得参数，必须自己手动获取starIndex 和 endIndex作为区间 &#125; return subStr &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Func-使用iconfont图标]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FFunc%2FSwift-Func-%E4%BD%BF%E7%94%A8iconfont%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/qq_14920635/article/details/78408761]]></content>
      <categories>
        <category>Swift</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-NSNotificationCenter-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FNSNotificationCenter-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[NSNotificationCenter 如果被通知对象创建了，那么执行完发送通知之后就会执行被通知的selector的方法，之后再回来执行后一行代码通知一般在mode与View需要交流（传递数据）时使用，或者也可以用于多线程的消息传递，也可是其他的信息传递,最常用的场景是页面值的回传 注册通知 参数：第一个是响应被通知的对象，一般是self， selector:一个自定义方法，实现得到通知后的操作（如果使用闭包的方法，就在回调中实现），name:通知的名字（注意注册通知和发送通知必须一致才能够响应通知），object:发通知的对象，如果填nil则表示接受所有通知，如果填上具体的对象，则是1对1的通知。建议：如果通知多可以单独写一个方法放通知（调用第二个方法），如果通知比较少建议使用第一种，再实现其selector方法，注册通知是在需要被通知的类里写 NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(TiltleNotification), name: "TiltleNotification", object: nil)//注册了一个名字叫做TiltleNotification 发送通知post 在需要通知的类（即需要传信息出去的类）中使用通知传递消息name也可以这样写:NSNotification.Name.init(“TiltleNotification”) NSNotificationCenter.defaultCenter().postNotificationName(NSNotification.Name("TiltleNotification"), object: self, userInfo: ["success":true,"img":UIImage(named:"image"]) 在完成通知中的选择器方法func pushBookTiltleNotification(notification:NSNotification)&#123; //记得参数加上，才能得到信息 let dict = notification.userInfo if (dict["success"] as! Bool) &#123;//获取传递过来的值,而且需要转换下 ProgressHUD.showSuccess("通知成功") &#125;else&#123; ProgressHUD.showError("通知失败") &#125; &#125; 移除通知 由于通知是单列的，所以使用完后必须在析构deinit中移除通知，否则后期将引发难以查询的莫名错误 deinit&#123; //注意由于通知是单例的，所以用了之后需要析构， NSNotificationCenter.defaultCenter().removeObserver(self, name: "TiltleNotification", object: nil) &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>NSNotificationCenter</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>NSNotificationCenter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-高效切圆角]]></title>
    <url>%2F2017%2F12%2F14%2FOC%2FFunc%2FiOS-Func-%E9%AB%98%E6%95%88%E5%88%87%E5%9C%86%E8%A7%92%2F</url>
    <content type="text"><![CDATA[UIView（不包括其子类） UIView 只要设置图层的 cornerRadius 属性即可（不明白的话，可以看看官方文档里对 cornerRadius 的描述）设置 layer.masksToBounds = YES，会造成不必要的离屏渲染 UIView *view = [[UIView alloc] init];view.backgroundColor = [UIColor blackColor];view.layer.cornerRadius = 3.f;// 以下两行，任写一行view.layer.masksToBounds = NO;view.clipToBounds = NO; 以下两行，千万不要加！ view.layer.masksToBounds = YES;view.clipToBounds = YES; 文本类视图UITextField UITextField有两种实现方法 // 支持设置圆角边框UITextField *textField = [[UITextField alloc] init];textField.borderStyle = UITextBorderStyleRoundedRect;// 与 UIView 类似UITextField *textField = [[UITextField alloc] init];textField.layer.cornerRadius = cornerRadius; UITextView// 与 UIView 类似UITextView *textView = [[UITextView alloc] init];textView.layer.cornerRadius = cornerRadius; UILabelUILabel *label = [[UILabel alloc] init];// 重点在此！！设置视图的图层背景色，千万不要直接设置 label.backgroundColorlabel.layer.backgroundColor = [UIColor grayColor].CGColor;label.layer.cornerRadius = cornerRadius; UIButton UIButton 的背景图片，如果是复杂的图片，可以依靠 UI 切图来实现如果是简单的纯色背景图片，可以利用代码绘制带圆角的图片 UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];// 设置 UIButton 的背景图片。[button setBackgroundImage:image forState:UIControlStateNormal]; 背景图片绘制方法 + (UIImage *)pureColorImageWithSize:(CGSize)size color:(UIColor *)color cornRadius:(CGFloat)cornRadius &#123; UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0.0f, 0.0f, size.width, size.height)]; view.backgroundColor = color; view.layer.cornerRadius = cornerRadius; // 下面方法，第一个参数表示区域大小。第二个参数表示是否是非透明的。如果需要显示半透明效果，需要传NO，否则传YES。第三个参数是屏幕密度UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale); [view.layer renderInContext:UIGraphicsGetCurrentContext()]; UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return image; &#125; UIImageView 方式一：贝塞尔曲线切割圆角 - (UIImageView *)roundedRectImageViewWithCornerRadius:(CGFloat)cornerRadius &#123; UIBezierPath *bezierPath = [UIBezierPath bezierPathWithRoundedRect:self.bounds cornerRadius:cornerRadius]; CAShapeLayer *layer = [CAShapeLayer layer]; layer.path = bezierPath.CGPath; self.layer.mask = layer; return self;&#125; 绘制四个角的遮罩（使用场景受限） 在 UIImageView 上添加一个四个角有内容，其它部分是透明的视图，只对 UIImageView 圆角部分进行遮挡。但要保证被遮挡的部分背景色要与周围背景相同，避免穿帮。所以当 UIImageView 处于一个复杂的背景时，是不适合使用这个方法的 最不推荐做法（当一个页面只有少量圆角图片时才推荐使用） UIImageView *imageView = [[UIImageView alloc] init];imageView.layer.cornerRadius = 5.f;imageView.layer.masksToBounds = YES;]]></content>
      <categories>
        <category>iOS</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Func</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISearchController-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUISearchController-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISearchController</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITableView-双表联动]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUITableView-%E5%8F%8C%E8%A1%A8%E8%81%94%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[FFTableViewCtl.swift协议class FFTableViewCtl: UIViewController, UITableViewDataSource, UITableViewDelegate&#123;&#125; 声明变量 左侧 菜单分类数据源 fileprivate lazy var categoryData = [FFCategoryModel]() 右侧，某类型具体菜单详情 fileprivate lazy var foodData = [[FFFoodModel]]() 记录当前选择分类（菜类型） fileprivate var selectIndex = 0 //默认选择 0 记录是否向下滚动 fileprivate var isScrollDown = true 记录最后Y方向偏移量 fileprivate var lastOffsetY : CGFloat = 0.0 左侧TableView表 fileprivate lazy var leftTableView : UITableView = &#123; let leftTableView = UITableView() leftTableView.delegate = self leftTableView.dataSource = self leftTableView.frame = CGRect(x: 0, y: 0, width: 80, height: UIScreen.main.bounds.height) leftTableView.rowHeight = 55 leftTableView.showsVerticalScrollIndicator = false leftTableView.separatorColor = UIColor.clear leftTableView.register(FFLeftTableViewCell.self, forCellReuseIdentifier: "FFLeftTableViewCell") return leftTableView&#125;() 右侧TableView表 fileprivate lazy var rightTableView : UITableView = &#123; let rightTableView = UITableView() rightTableView.delegate = self rightTableView.dataSource = self rightTableView.frame = CGRect(x: 80, y: 64, width: UIScreen.main.bounds.width - 80, height: UIScreen.main.bounds.height - 64) rightTableView.rowHeight = 80 rightTableView.showsVerticalScrollIndicator = false rightTableView.register(FFRightTableViewCell.self, forCellReuseIdentifier: "FFRightTableViewCell") return rightTableView&#125;() API extension FFTableViewCtl &#123; fileprivate func configureData () &#123; guard let path = Bundle.main.path(forResource: "meituan", ofType: "json") else &#123; return &#125; guard let data = NSData(contentsOfFile: path) as Data? else &#123; return &#125; guard let anyObject = try? JSONSerialization.jsonObject(with: data, options: .mutableContainers) else &#123; return &#125; guard let dict = anyObject as? [String : Any] else &#123; return &#125; guard let datas = dict["data"] as? [String : Any] else &#123; return &#125; guard let foods = datas["food_spu_tags"] as? [[String : Any]] else &#123; return &#125; print("\(foods)") for food in foods &#123; let model = FFCategoryModel(dict: food) categoryData.append(model) guard let spus = model.spus else &#123; continue &#125; var datas = [FFFoodModel]() for fModel in spus &#123; datas.append(fModel) &#125; foodData.append(datas) &#125; &#125;&#125; TableView 2个协议 实现extension FFTableViewCtl &#123;//DataSource //Delegate &#125; 行 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; if leftTableView == tableView&#123; return categoryData.count &#125;else&#123; return foodData[section].count &#125;&#125; cell func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123; if leftTableView == tableView &#123; let cell = tableView.dequeueReusableCell(withIdentifier: "FFLeftTableViewCell", for: indexPath)as! FFLeftTableViewCell let model = categoryData[indexPath.row] cell.nameLab.text = model.name return cell &#125;else&#123; let cell = tableView.dequeueReusableCell(withIdentifier: "FFRightTableViewCell", for: indexPath) as! FFRightTableViewCell let model = foodData[indexPath.section][indexPath.row] cell.setDatas(model: model) return cell &#125;&#125; 区 数 func numberOfSections(in tableView: UITableView) -&gt; Int &#123; if leftTableView == tableView &#123; return 1 &#125; else &#123; return categoryData.count &#125;&#125; 区 view- 设置 func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? &#123; if leftTableView == tableView &#123; return nil &#125;else&#123; let headerView = FFTableViewHeaderView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 20)) let model = categoryData[section] headerView.nameLab.text = model.name return headerView &#125;&#125; 区头view - 区高 func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat &#123; if leftTableView == tableView &#123; return 0 &#125; return 20&#125; 区头view - 即将展示 func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) &#123; // 当前的 tableView 是 FFRightTableView，FFRightTableView 滚动的方向向上，FFRightTableView 是用户拖拽而产生滚动的（（主要判断 RightTableView 用户拖拽而滚动的，还是点击 FFLeftTableView 而滚动的） if(rightTableView == tableView) &amp;&amp; !isScrollDown &amp;&amp; (rightTableView.isDragging || rightTableView.isDecelerating)&#123; selectRow(index: section) &#125;&#125; 区头view - 展示结束 func tableView(_ tableView: UITableView, didEndDisplayingHeaderView view: UIView, forSection section: Int) &#123; // 当前的 tableView 是 FFRightTableView，FFRightTableView 滚动的方向向下，FFRightTableView 是用户拖拽而产生滚动的（（主要判断 RightTableView 用户拖拽而滚动的，还是点击 FFLeftTableView 而滚动的） if (rightTableView == tableView) &amp;&amp; isScrollDown &amp;&amp; (rightTableView.isDragging || rightTableView.isDecelerating) &#123; selectRow(index: section + 1) &#125;&#125; didSelct - 选择cell func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) &#123; if leftTableView == tableView &#123; selectIndex = indexPath.row self.scrollToTop(section: selectIndex, animated: true) leftTableView.scrollToRow(at: IndexPath(row: selectIndex, section: 0), at: .top, animated: true) &#125;&#125; scrollViewDidScroll标记一下 RightTableView 的滚动方向，是向上还是向下 func scrollViewDidScroll(_ scrollView: UIScrollView) &#123; let tableView = scrollView as! UITableView if rightTableView == tableView &#123; isScrollDown = lastOffsetY &lt; scrollView.contentOffset.y lastOffsetY = scrollView.contentOffset.y &#125;&#125; private 私有方法 selectRow 当拖动右边TableView，处理左边 TableView private func selectRow(index:Int)&#123; leftTableView.selectRow(at: IndexPath(row: index, section: 0), animated: true, scrollPosition: .top)&#125; scrollToTop fileprivate func scrollToTop(section:Int,animated: Bool) &#123; let headerRect = rightTableView.rect(forSection: section) let topHeader = CGPoint(x: 0, y: headerRect.origin.y - rightTableView.contentInset.top) rightTableView.setContentOffset(topHeader, animated: animated)&#125; FFLeftTableViewCell.swift import UIKitclass FFLeftTableViewCell: UITableViewCell &#123; override func awakeFromNib() &#123; super.awakeFromNib() // Initialization code &#125; lazy var nameLab = UILabel() private lazy var yellowView = UIView() override init (style:UITableViewCellStyle,reuseIdentifier:String?)&#123; super.init(style: style, reuseIdentifier: reuseIdentifier) selectionStyle = .none initUI() &#125; required init?(coder aDecoder: NSCoder) &#123; fatalError("init(coder:) has not been implemented") &#125; func initUI() &#123; nameLab.frame = CGRect(x: 10, y: 10, width: 60, height: 40) nameLab.numberOfLines = 0 nameLab.font = UIFont.systemFont(ofSize: 15) nameLab.textColor = UIColor(130, 130, 130) nameLab.highlightedTextColor = UIColor(253, 212, 49) contentView.addSubview(nameLab) yellowView.frame = CGRect(x:0,y:5,width:5,height:45) yellowView.backgroundColor = UIColor(253, 212, 49) contentView.addSubview(yellowView) &#125; override func setSelected(_ selected: Bool, animated: Bool) &#123; super.setSelected(selected, animated: animated) // Configure the view for the selected state contentView.backgroundColor = selected ? UIColor.white : UIColor(white: 0, alpha: 0.1) isHighlighted = selected nameLab.isHighlighted = selected yellowView.isHidden = !selected &#125;&#125; FFRightTableViewCell.swift class FFRightTableViewCell: UITableViewCell &#123; override func awakeFromNib() &#123; super.awakeFromNib() // Initialization code &#125; override func setSelected(_ selected: Bool, animated: Bool) &#123; super.setSelected(selected, animated: animated) // Configure the view for the selected state &#125; private lazy var nameLab = UILabel() //名称 private lazy var imgView = UIImageView() // private lazy var priceLab = UILabel() // 价格 override init(style: UITableViewCellStyle, reuseIdentifier: String?)&#123; super.init(style: style, reuseIdentifier: reuseIdentifier) initUI() &#125; required init?(coder aDecoder: NSCoder) &#123; fatalError("init(coder:) has not been implemented") &#125; //#MARK:设置UI func initUI()&#123; nameLab.frame = CGRect(x: 15, y: 15, width: 50, height: 50) contentView.addSubview(nameLab) imgView.frame = CGRect(x: 15, y: 15, width: 50, height: 50) contentView.addSubview(imgView) priceLab.frame = CGRect(x: 80, y: 45, width: 200, height: 30) priceLab.font = UIFont.systemFont(ofSize: 14) priceLab.textColor = UIColor.red contentView.addSubview(priceLab) &#125; //#MARK: 加载数据 func setDatas( model:FFFoodModel)&#123; guard let minPrice = model.minPrice, let picture = model.picture, let name = model.name else &#123; return &#125; priceLab.text = "￥\(minPrice)" nameLab.text = name guard let url = URL.init(string: picture) else &#123; return &#125; imgView.kf.setImage(with: url) &#125;&#125; FFCategoryModel.swift class FFCategoryModel: NSObject &#123; var name: String? var icon: String? var spus: [FFFoodModel]? init(dict :[String:Any]) &#123; super.init() setValuesForKeys(dict) &#125; override func setValue(_ value: Any?, forKey key: String) &#123; if key == "spus" &#123; spus = Array() guard let datas = value as? [[String:Any]] else &#123; return &#125; for dict in datas&#123; let foodModel = FFFoodModel(dict:dict) spus?.append(foodModel) &#125; &#125;else&#123; super.setValue(value, forKey: key) &#125; &#125; override func setValue(_ value: Any?, forUndefinedKey key: String) &#123; &#125;&#125; FFFoodModel.swift class FFFoodModel: NSObject &#123; var name : String? var picture : String? var minPrice : Float? init(dict : [String : Any]) &#123; super.init() setValuesForKeys(dict) &#125; override func setValue(_ value: Any?, forKey key: String) &#123; if key == "min_price" &#123; guard let price = value as? Float else &#123;return&#125; minPrice = price &#125; else &#123; super.setValue(value, forKey: key) &#125; &#125; override func setValue(_ value: Any?, forUndefinedKey key: String) &#123; &#125;&#125; FFTableViewHeaderView.swift class FFTableViewHeaderView: UIView &#123; lazy var nameLab = UILabel() override init (frame:CGRect)&#123; super.init(frame: frame) backgroundColor = UIColor(240, 240, 240, 0.8) nameLab.frame = CGRect(x: 15, y: 0, width: 200, height: 20) nameLab.font = UIFont.systemFont(ofSize: 13) addSubview(nameLab) &#125; required init?(coder aDecoder: NSCoder) &#123; fatalError("init(coder:) has not been implemented") &#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITableView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITableView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Error-网络错误锦集]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FError%2FSwift-Error-%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF%E9%94%A6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[HTTP 错误信息 App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&apos;s Info.plist file 修改info.plist App Transport Security Settings Allow Arbitrary Loads YES]]></content>
      <categories>
        <category>Swift</category>
        <category>Error</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Error-开发错误锦集]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FError%2FSwift-Error-%E5%BC%80%E5%8F%91%E9%94%99%E8%AF%AF%E9%94%A6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Model赋值 某个key（比如has_next_page）没var，但数据里有(forUndefinedKey) reason:this class is not key value coding-compliant for the key has_next_page.' forKey/forUndefinedKey //forKeyoverride func setValue(_ value: Any?, forKey key: String) &#123;&#125;//forUndefinedKey override func setValue(_ value: Any?, forUndefinedKey key: String) &#123;&#125; 添加环境变量 OS_ACTIVITY_MODE Xcode 8多余日志输出 nw_socket_set_common_sockopts setsockopt SO_NOAPNFALLBK failed: [42] Protocol not available, dumping backtrace: 添加环境变量 【product】-【scheme】-【Edit Scheme】-【Run】-【Argument】-【Environment Variable】添加key Value【OS_ACTIVITY_MODE disable】 #检查字典或者数组的形式是否正确 Swift编译时报错：Command failed due to signal: Segmentation fault: 11在网络请求完，解析的时候遇到这个问题： Alamofire.request(.GET, "http://api.budejie.com/api/api_open.php", parameters: ["a":"newlist", "c":"data", "type":1]).responseJSON() &#123; response in let json = JSON(response.result.value!) arr = json["list"].arrayObject! DRLog(arr) self.tableView.reloadData() &#125; 在控制台上看到的确实是arr是一个数组形式，里面有多个NSDictionary形式，但是如果我们直接这个用：arr[index][“text”]是错误的。必须先将arr中的每个类似NSDictionary形式转换成NSDictionary： let dic = arr[index] as! NSDictionarylet text = dic["text"] as? String]]></content>
      <categories>
        <category>Swift</category>
        <category>Error</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIWebView-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FSwift-UIKit-UIWebView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[UIWebView UIWebView 继承与 UIView, 并且遵守了 UIScrollViewDelegate 协议, 所以它可以使用里面的方法和属性 遵守代理协议 class ViewController: UIViewController, UIWebViewDelegate &#123;&#125; 自定义UIWebVIewfunc myWebView() &#123; // 1.获取 UIWebView 的 UIScrollView 属性 let webScroll = webView.scrollView println("webScroll = \(webScroll)") // 2.获取 UIWebView 的 request 属性 let webRequest = webView.request println("webRequest = \(webRequest)") // 3.获取 UIWebView 是否在接收数据的时候可以退后一步 let webCanBack = webView.canGoBack println("webCanBack = \(webCanBack)") // 4.获取 UIWebView 是否在接收数据的时候可以前进一步 let webCanGo = webView.canGoForward println("webCanGo = \(webCanGo)") // 5.获取 UIWebVIew 是否接受完数据 let webLoading = webView.loading println("webLoading = \(webLoading)") // 6.设置 UIWebView 接收的数据是否可以通过手势来调整页面内容大小 webView.scalesPageToFit = true // 7.设置 UIWebView 接收到得数据是什么类型的 webView.dataDetectorTypes = UIDataDetectorTypes.All // 8.设置 UIWebView 内是否可以回放媒体 webView.allowsInlineMediaPlayback = true // 9.设置 UIWebView 中的 HTML5 视频是否自动播放 webView.mediaPlaybackRequiresUserAction = true // 10.设置 UIWebView 是否可以使用 Air 播放 webView.mediaPlaybackAllowsAirPlay = true // 11.设置 UIWebView 是否使用同步加载(默认是False) webView.suppressesIncrementalRendering = false // 12.设置 UIWebView 在点击视图或者元素时是否显示键盘(默认是True) webView.keyboardDisplayRequiresUserAction = true // 13.设置 UIWebView 的分页模式 webView.paginationMode = UIWebPaginationMode.RightToLeft // 14.设置 UIWebView 的分页打破模式 webView.paginationBreakingMode = UIWebPaginationBreakingMode.Column // 15.设置 UIWebView 的分页长度 webView.pageLength = 400 // 16.设置 UIWebView 每个分页之间的宽度 webView.gapBetweenPages = 100 // 17.获取 UIWebView 的分页数量 let webViewPageCount = webView.pageCount println(webViewPageCount) // 18.设置 UIWebView 的代理对象 webView.delegate = self // 19.发送网络请求 var url:NSURL = NSURL(string:"http://www.baidu.com")! var request:NSURLRequest = NSURLRequest(URL:url) webView.loadRequest(request) &#125; 实现代理方法// 1.该方法是用来设置是否在 UIWebView 加载之前发送一个请求 func webView(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest, navigationType: UIWebViewNavigationType) -&gt; Bool &#123; return true &#125; // 2.该方法是在 UIWebView 在开发加载时调用 func webViewDidStartLoad(webView: UIWebView) &#123; println("开始加载") &#125; // 3.该方法是在 UIWebView 加载完之后才调用 func webViewDidFinishLoad(webView: UIWebView) &#123; println("加载完成") &#125; // 4.该方法是在 UIWebView 请求失败的时候调用 func webView(webView: UIWebView, didFailLoadWithError error: NSError) &#123; println("加载失败") &#125; 在 ViewDidLoad 方法中实现override func viewDidLoad() &#123; super.viewDidLoad() self.myWebView() &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIWebView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIWebView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIWebView-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FSwift-UIKit-UIWebView-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UIWebView的常用属性 1.设置 UIWebView 的代理对象 var delegate: UIWebViewDelegate? 2.获取 UIWebView 的 UIScrollView 属性 var scrollView: UIScrollView &#123; get &#125; 3.获取 UIWebView 的网络请求 var request: NSURLRequest? &#123; get &#125; 4.获取 UIWebView 是否在接收数据的时候可以退后一步 var canGoBack: Bool &#123; get &#125; 5.获取 UIWebView 是否在接收数据的时候可以前进一步 var canGoForward: Bool &#123; get &#125;``` &gt; 6.获取 UIWebView 是否接受完数据```swift var loading: Bool &#123; get &#125; 7.设置 UIWebView 接收的数据是否可以通过手势来调整页面内容大小 var scalesPageToFit: Bool 8.设置 UIWebView 接收的数据是什么类型 var dataDetectorTypes: UIDataDetectorTypes 9.设置 UIWebView 内是否可以回放媒体 var allowsInlineMediaPlayback: Bool 10.设置 UIWebView 中的 HTML5 视频是否自动播放(默认是True) var mediaPlaybackRequiresUserAction: Bool 11.设置 UIWebView 是否可以使用 Air 播放(默认是True) var mediaPlaybackAllowsAirPlay: Bool 12.设置 UIWebView 是否使用同步加载(默认是False) var suppressesIncrementalRendering: Bool 13.设置 UIWebView 在点击视图或者元素时是否显示键盘(默认是True) var keyboardDisplayRequiresUserAction: Bool 14.设置 UIWebView 的分页模式 var paginationMode: UIWebPaginationMode 15.设置 UIWebView 的分页打破模式 var paginationBreakingMode: UIWebPaginationBreakingMode 16.设置 UIWebView 的分页长度 var pageLength: CGFloat 17.设置 UIWebView 之间的页面宽度 var gapBetweenPages: CGFloat 18.获取 UIWebView 的页面数量 var pageCount: Int &#123; get &#125; 常用类型 1.获取 UIWebView 的数据类型 struct UIDataDetectorTypes : RawOptionSetType &#123; init(_ rawValue: UInt) init(rawValue: UInt) static var PhoneNumber: UIDataDetectorTypes &#123; get &#125; static var Link: UIDataDetectorTypes &#123; get &#125; static var Address: UIDataDetectorTypes &#123; get &#125; static var CalendarEvent: UIDataDetectorTypes &#123; get &#125; static var None: UIDataDetectorTypes &#123; get &#125; static var All: UIDataDetectorTypes &#123; get &#125;&#125; 2.设置 UIWebView 的 Navigation 类型 enum UIWebViewNavigationType : Int &#123; case LinkClicked case FormSubmitted case BackForward case Reload case FormResubmitted case Other&#125; 3.设置 UIWebView 的分页样式 enum UIWebPaginationMode : Int &#123; case Unpaginated case LeftToRight case TopToBottom case BottomToTop case RightToLeft&#125; 4.设置 UIWebView 打破分页样式的样式 enum UIWebPaginationBreakingMode : Int &#123; case Page case Column&#125; UIWebView的代理方法 1.该方法是用来设置是否在 UIWebView 加载之前发送一个请求 optional func webView(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest, navigationType: UIWebViewNavigationType) -&gt; Bool 2.该方法是在 UIWebView 在开发加载时调用 optional func webViewDidStartLoad(webView: UIWebView) 3.该方法是在 UIWebView 加载完之后才调用 optional func webViewDidFinishLoad(webView: UIWebView) 4.该方法是在 UIWebView 请求失败的时候调用 optional func webView(webView: UIWebView, didFailLoadWithError error: NSError)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIWebView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIWebView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UINavigationController-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUINavigationController-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[UINavigationController UINavigationController 是继承与 UIViewController 的, 所以里面的方法以及属性都是可以使用的. 首先我们要再AppDelegate.swift文件中实现func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool &#123; // Override point for customization after application launch. self.window = UIWindow(frame: UIScreen.mainScreen().bounds) self.window!.backgroundColor = UIColor.grayColor() self.window!.makeKeyAndVisible() let viewController = ViewController() let navigationController = UINavigationController(rootViewController: viewController) self.window!.rootViewController = navigationController return true &#125; 遵守代理协议class ViewController: UIViewController, UINavigationControllerDelegate &#123; &#125; 自定义UINavigationControllerfunc myNavigationContronller() &#123; // 1.设置 UINavigationController 的 Title self.title = "UINavigationContronller" // 2.设置 UIVavigationController 的按钮 Title, Style, Target, Action 等方法属性 let backBarButtonItem = UIBarButtonItem(title: "返回", style: UIBarButtonItemStyle.Plain, target: self, action: "backAction") let nextBarButtonItem = UIBarButtonItem(title: "下一页", style: UIBarButtonItemStyle.Plain, target: self, action: "nextAction") // 3.设置 UINavigationItem self.navigationItem.leftBarButtonItem = backBarButtonItem self.navigationItem.rightBarButtonItem = nextBarButtonItem // 4.获取 UINavigationController 的顶部的视图控制器 let topView = self.navigationController?.topViewController println(topView) // 5.获取 UINavigationController 可见的视图控制器 let visibleView = self.navigationController?.visibleViewController println(visibleView) // 6.设置 UINavigationController 的导航栏控制器 self.navigationController?.viewControllers // 7.设置 UINavigationController 的导航栏控制器是否隐藏(默认是 false) self.navigationController?.navigationBarHidden = false // 8.获取 UINavigationController 的导航栏控制器 let navigationBar = self.navigationController?.navigationBar println(navigationBar) // 9.设置 UINavigationController 的内置工具栏是否可见(默认是 ture) self.navigationController?.toolbarHidden = false // 10.获取 UINavigationController 的 toolbar let toolbar = self.navigationController?.toolbar println(toolbar) // 11.设置 UINavigationController 的代理对象 self.navigationController?.delegate = self // 12.获取 UINavigationController 的手势识别顶部视图控制器 let pop = self.navigationController?.interactivePopGestureRecognizer println(pop) // 13.设置 UINavigationController 当键盘出现时是否隐藏导航栏和工具栏 self.navigationController!.hidesBarsWhenKeyboardAppears = true // 14.设置 UINavigationController 是否使用向上滑动的手势隐藏导航栏和工具栏 self.navigationController?.hidesBarsOnSwipe = true // 15.获取 UINavigationController 用手势识别隐藏导航栏和工具栏 let barHide = self.navigationController!.barHideOnSwipeGestureRecognizer println(barHide) // 16.设置 UINavigationController 是否在垂直显示时隐藏 self.navigationController!.hidesBarsWhenVerticallyCompact = true // 17.设置 UINavigationController 是否使用点击手势来隐藏 self.navigationController?.hidesBarsOnTap = true // 18.获取 UINavigationController 隐藏时所使用的手势 let barHideOnTap = self.navigationController!.barHideOnTapGestureRecognizer println(barHideOnTap) // 19.设置 UINavigationController 的导航栏是否隐藏, 是否使用动画 self.navigationController?.setNavigationBarHidden(true, animated: true) // 20.设置 UINavigationController 的工具栏是否隐藏, 是否使用动画 self.navigationController?.setToolbarHidden(true, animated: true) &#125; 自定义代理方法以及监听方法// 1.该方法使用来设置 UINavigationController 将要显示时所调用的方法 func navigationController(navigationController: UINavigationController, willShowViewController viewController: UIViewController, animated: Bool) &#123; println("UINavigationController 将要显示") &#125; // 2.该方法使用来设置 UINavigationController 完全显示时所调用的方法 func navigationController(navigationController: UINavigationController, didShowViewController viewController: UIViewController, animated: Bool) &#123; println("UINavigationController 完全显示") &#125; // 3.返回按钮的监听方法 func backAction() &#123; println("点击了返回") &#125; // 4.下一页按钮的监听方法 func nextAction() &#123; println("点击了下一页") &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UINavigationController</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UINavigationController</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UINavigationController-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUINavigationController-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UINavigationController常用属性 1.获取 UINavigationController 的顶部的视图控制器 var topViewController: UIViewController! &#123; get &#125; 2.获取 UINavigationController 可见的视图控制器 var visibleViewController: UIViewController! &#123; get &#125; 3.设置 UINavigationController 的 viewControllers 对象 var viewControllers: [AnyObject]! 4.设置 UINavigationController 的导航栏控制器是否隐藏, 默认是 false var navigationBarHidden: Bool 5.获取 UINavigationController 的导航栏控制器 var navigationBar: UINavigationBar &#123; get &#125; 6.设置 UINavigationController 的内置工具栏是否可见(默认是 ture) var toolbarHidden: Bool 7.获取 UINavigationController 的 toolbar var toolbar: UIToolbar! &#123; get &#125; 8.设置 UINavigationController 的代理对象 var delegate: UINavigationControllerDelegate? 9.获取 UINavigationController 的手势识别顶部视图控制器 var interactivePopGestureRecognizer: UIGestureRecognizer! &#123; get &#125; 10.设置 UINavigationController 当键盘出现时是否隐藏导航栏和工具栏 var hidesBarsWhenKeyboardAppears: Bool 11.设置 UINavigationController 是否使用向上滑动的手势隐藏导航栏和工具栏 var hidesBarsOnSwipe: Bool 12.获取 UINavigationController 用手势识别隐藏导航栏和工具栏 var barHideOnSwipeGestureRecognizer: UIPanGestureRecognizer &#123; get &#125; 13.设置 UINavigationController 是否在垂直显示时隐藏 var hidesBarsWhenVerticallyCompact: Bool 14.设置 UINavigationController 是否使用点击手势来隐藏 var hidesBarsOnTap: Bool 15.获取 UINavigationController 隐藏时所使用的手势 var barHideOnTapGestureRecognizer: UITapGestureRecognizer &#123; get &#125; UINavigationController常用的方法 1.该方法是用来设置 UINavigationController 跳转到指定的视图控制器, 是否使用动画 func pushViewController(viewController: UIViewController, animated: Bool) 2.该方法是用来设置 UINavigationController Pop到其他视图控制器时是否使用动画, 并且返回的类型必须是 UIViewController func popViewControllerAnimated(animated: Bool) -&gt; UIViewController? 3.该方法是用来设置 UINavigationController Pop到指定的视图控制器, 是否使用动画, 返回的类型是任意类型 func popToViewController(viewController: UIViewController, animated: Bool) -&gt; [AnyObject]? 4.该方法是用来设置 UINavigationController Pop到根视图时是否使用动画, 并且返回的类型必须是任意类型 func popToRootViewControllerAnimated(animated: Bool) -&gt; [AnyObject]? 5.该方法是用来替换之前于 UINavigationController 绑定的视图控制器, 并且是否使用动画 func setViewControllers(viewControllers: [AnyObject]!, animated: Bool) 6.该方法是用来设置 UINavigationController 的导航栏是否隐藏, 是否使用动画 func setNavigationBarHidden(hidden: Bool, animated: Bool) 7.该方法是用来设置 UINavigationController 的工具栏是否隐藏, 是否使用动画 func setToolbarHidden(hidden: Bool, animated: Bool) 8.该方法是用来设置 UINavigationController 显示指定的 ViewController func showViewController(vc: UIViewController, sender: AnyObject!) UINavigationController代理方法 1.该方法使用来设置 UINavigationController 将要显示时所调用的方法 optional func navigationController(navigationController: UINavigationController, willShowViewController viewController: UIViewController, animated: Bool) 2.该方法使用来设置 UINavigationController 完全显示时所调用的方法 optional func navigationController(navigationController: UINavigationController, didShowViewController viewController: UIViewController, animated: Bool)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UINavigationController</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UINavigationController</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISegmentedControl-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUISegmentedControl-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[自定义UISegmentedControfunc mySegmentedControl() &#123; // 1.自定义 UISegemtedControl 并且设置它的 Item 数组对象 var segmented = UISegmentedControl(items: ["分段一", "分段二"]) // 2.设置 UISegemtedControl 的中心点 segmented.center = CGPointMake(self.view.frame.width / 2, self.view.frame.height / 2) // 3.设置 UISegemtedControl 的尺寸 segmented.bounds = CGRectMake(0, 0, 300, 30) // 4.设置 UISegemtedControl 点击之后是否瞬间弹起, (默认是 false) segmented.momentary = true // 5.获取 UISegemtedControl 的分段按钮个数 var number: Int = segmented.numberOfSegments // 6.设置 UISegemtedControl 是否基于内容自动调整尺寸, 默认是 false, 前提是要不设置 UISegemtedControl 的尺寸 segmented.apportionsSegmentWidthsByContent = false // 7.插入一个 UISegemtedControl 的分段按钮, 并且设置标题和索引, 以及是否使用动画 segmented.insertSegmentWithTitle("分段三", atIndex: 2, animated: true) // 8.插入一个 UISegemtedControl 作为分段按钮, 并且设置索引, 以及是否使用动画 segmented.insertSegmentWithImage(UIImage(named: "image_black.jpg")!, atIndex: 3, animated: true) // 9.删除指定索引的 UISegemtedControl 分段按钮, 以及是否使用动画 segmented.removeSegmentAtIndex(1, animated: true) // 10.删除所有 UISegemtedControl 的分段按钮 //segmented.removeAllSegments() // 11.修改 UISegemtedControl 指定的 Item 分段按钮标题 segmented.setTitle("分段四", forSegmentAtIndex: 0) // 12.获取指定的 UISegemtedControl 分段按钮的标题 var title: String = segmented.titleForSegmentAtIndex(0)! println(title) // 13.修改 UISegemtedControl 指定的 Item 分段按钮图片 segmented.setImage(UIImage(named: "image_black.jpg")!, forSegmentAtIndex: 2) // 14.获取指定的 UISegemtedControl 分段按钮的图片 var image: UIImage = segmented.imageForSegmentAtIndex(2)! println(image) // 15.设置 UISegemtedControl 指定的 Item 宽度 segmented.setWidth(70, forSegmentAtIndex: 0) // 16.获取指定 UISegemtedControl 分段按钮的宽度 var width: CGFloat = segmented.widthForSegmentAtIndex(0) println(width) // 17.设置 UISegemtedControl 指定的 Item 内容偏移量 segmented.setContentOffset(CGSizeMake(5, 5), forSegmentAtIndex: 0) // 18.获取指定 UISegemtedControl 指定的 Item 内容偏移量 var size: CGSize = segmented.contentOffsetForSegmentAtIndex(0) println(size) // 19.设置 UISegemtedControl 指定的 Item 是否可以点击 segmented.setEnabled(true, forSegmentAtIndex: 0) // 20.获取指定 UISegemtedControl 指定的 Item 是否可以点击 var bool: Bool = segmented.isEnabledForSegmentAtIndex(0) println(bool) // 21.获取 UISegemtedControl 可点击的 Item 数量 var selected: Int = segmented.selectedSegmentIndex println(selected) // 22.设置 UISegemtedControl 的样式颜色 segmented.tintColor = UIColor.redColor() // 23.设置 UISegemtedControl 的背景图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式 segmented.setBackgroundImage(UIImage(named: "image_black.jpg"), forState: UIControlState.Normal, barMetrics: UIBarMetrics.Default) // 24.获取 UISegemtedControl 在指定的状态, 图片显示下的图片 var backgroundImage: UIImage = segmented.backgroundImageForState(UIControlState.Normal, barMetrics: UIBarMetrics.Default)! println(backgroundImage) // 25.设置 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式 segmented.setDividerImage(UIImage(named: "image_divider"), forLeftSegmentState: UIControlState.Normal, rightSegmentState: UIControlState.Normal, barMetrics: UIBarMetrics.Default) // 26.获取 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式 var divider: UIImage = segmented.dividerImageForLeftSegmentState(UIControlState.Normal, rightSegmentState: UIControlState.Normal, barMetrics: UIBarMetrics.Default)! println(divider) // 27.添加 UISegemtedControl 的监听方法 segmented.addTarget(self, action: "didClicksegmentedControlAction:", forControlEvents: UIControlEvents.ValueChanged) // 添加到 self.view self.view.addSubview(segmented) &#125; UISegemtedControl的监听方法func didClicksegmentedControlAction(segmented: UISegmentedControl!) &#123; var index = segmented.selectedSegmentIndex if index == 0 &#123; println("分段按钮一") &#125; else if index == 1 &#123; println("分段按钮二") &#125; else if index == 2 &#123; println("分段按钮三") &#125; &#125; 在 viewDidLoad 中实现 override func viewDidLoad() &#123; super.viewDidLoad() self.mySegmentedControl()&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISegmentedControl</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISegmentedControl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISegmentedControl-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUISegmentedControl-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UISegemtedControl的常用属性 1.初始化时设置 UISegemtedControl 的 Item 数组 init(items: [AnyObject]) 2.设置 UISegemtedControl 点击之后是否瞬间弹起, (默认是 false) var momentary: Bool 3.获取 UISegemtedControl 里有的分段按钮个数 var numberOfSegments: Int &#123; get &#125; 4.设置 UISegemtedControl 是否基于内容自动调整尺寸, 默认是 false, 前提是要不设置 UISegemtedControl 的尺寸 var apportionsSegmentWidthsByContent: Bool 5.获取 UISegemtedControl 可点击的 Item 数量 var selectedSegmentIndex: Int 6.设置 UISegemtedControl 的样式颜色 var tintColor: UIColor! UISegemtedControl的常用方法 1.插入一个 UISegemtedControl 的分段按钮, 并且设置标题和索引, 以及是否使用动画 func insertSegmentWithTitle(title: String!, atIndex segment: Int, animated: Bool) 2.插入一个 UISegemtedControl 作为分段按钮, 并且设置索引, 以及是否使用动画 func insertSegmentWithImage(image: UIImage, atIndex segment: Int, animated: Bool) 3.删除指定索引的 UISegemtedControl 分段按钮, 以及是否使用动画 func removeSegmentAtIndex(segment: Int, animated: Bool) 4.删除所有 UISegemtedControl 的分段按钮 func removeAllSegments() 3.修改 UISegemtedControl 指定的 Item 分段按钮标题 func setTitle(title: String?, forSegmentAtIndex segment: Int) 4.获取指定的 UISegemtedControl 分段按钮的标题 func titleForSegmentAtIndex(segment: Int) -&gt; String? 5.修改 UISegemtedControl 指定的 Item 分段按钮图片 func setImage(image: UIImage?, forSegmentAtIndex segment: Int) 6.获取指定的 UISegemtedControl 分段按钮的图片 func imageForSegmentAtIndex(segment: Int) -&gt; UIImage? 7.设置 UISegemtedControl 指定的 Item 宽度 func setWidth(width: CGFloat, forSegmentAtIndex segment: Int) 8.获取指定 UISegemtedControl 分段按钮的宽度 func widthForSegmentAtIndex(segment: Int) -&gt; CGFloat 9.设置 UISegemtedControl 指定的 Item 内容偏移量 func setContentOffset(offset: CGSize, forSegmentAtIndex segment: Int) 10.获取指定 UISegemtedControl 指定的 Item 内容偏移量 func contentOffsetForSegmentAtIndex(segment: Int) -&gt; CGSize 11.设置 UISegemtedControl 指定的 Item 是否可以点击 func setEnabled(enabled: Bool, forSegmentAtIndex segment: Int) 12.获取指定 UISegemtedControl 指定的 Item 是否可以点击 func isEnabledForSegmentAtIndex(segment: Int) -&gt; Bool 13.设置 UISegemtedControl 的背景图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式 func setBackgroundImage(backgroundImage: UIImage?, forState state: UIControlState, barMetrics: UIBarMetrics) 14.获取 UISegemtedControl 在指定的状态, 图片显示下的图片 func backgroundImageForState(state: UIControlState, barMetrics: UIBarMetrics) -&gt; UIImage? 15.设置 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式 func setDividerImage(dividerImage: UIImage?, forLeftSegmentState leftState: UIControlState, rightSegmentState rightState: UIControlState, barMetrics: UIBarMetrics) 16.获取 UISegemtedControl 的左右的分隔符图片, 并且在 UISegemtedControl 指定的样式下才会显示, 以及图片显示的样式 func dividerImageForLeftSegmentState(leftState: UIControlState, rightSegmentState rightState: UIControlState, barMetrics: UIBarMetrics) -&gt; UIImage?]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISegmentedControl</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISegmentedControl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISwitch-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUISwitch-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[自定义UISwitch UISwitch 是继承于 UIControl, 所以 UIControl 里面的属性和方法 UISwitch 都是可以用的 func mySwitch() &#123; // 1.自定义 UISwitch var switchButton = UISwitch() // 2.设置 UISwitch 的位置 switchButton.center = CGPointMake(self.view.frame.width / 2, self.view.frame.height / 2) // 3.设置 UISwitch 打开时底图渐变颜色, 默认是从白变绿 switchButton.onTintColor = UIColor.redColor() // 4.设置 UISwitch 关闭时底图渐变颜色, 默认是从绿变白 switchButton.tintColor = UIColor.blackColor() // 5.设置 UISwitch 的小圆点颜色, 默认是白色 switchButton.thumbTintColor = UIColor.blueColor() // 6.设置 UISwitch 是否打开 switchButton.on = true // 7.设置 UISwitch 是否打开, 并且是否打开动画效果 switchButton.setOn(true, animated: true) // 8.添加到 UISwitch 到 self.view self.view.addSubview(switchButton) &#125; 在 viewDidLoad中实现 override func viewDidLoad() &#123; super.viewDidLoad() self.mySwitch()&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISwitch</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISwitch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISwitch-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUISwitch-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UISwitch的常用属性 1.设置 UISwitch 打开时底图渐变颜色, 默认是从白变绿 var onTintColor: UIColor! 2.设置 UISwitch 关闭时底图渐变颜色, 默认是从白变绿 var tintColor: UIColor? 3.设置 UISwitch 的小圆点颜色, 默认是白色 var thumbTintColor: UIColor? 4.设置 UISwitch 是否打开 var on: Bool 5.设置 UISwitch 的位置 init(frame: CGRect) 6.设置 UISwitch 是否打开, 并且是否打开动画效果 func setOn(on: Bool, animated: Bool)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISwitch</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISwitch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITextField-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUITextField-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[遵守代理协议class ViewController: UIViewController, UITextFieldDelegate &#123;&#125; 添加UITextFieldfunc myTextField() &#123; // 1.创建UITextField, 并且设置它的Frame textField.frame = CGRectMake(100, 200, 200, 100) // 2.设置UITextField的背景颜色 textField.backgroundColor = UIColor.greenColor() // 3.设置UITextField的显示样式 textField.borderStyle = UITextBorderStyle.RoundedRect // 4.设置UITextField的编辑状态, 默认是永远不打开, 这里设置的是在编辑时才打开 textField.clearButtonMode = UITextFieldViewMode.WhileEditing // 5.设置UITextField的键盘样式 textField.keyboardType = UIKeyboardType.ASCIICapable // 6.设置UITextField的首字母是否大写 textField.autocapitalizationType = UITextAutocapitalizationType.Sentences // 7.设置UITextField的键盘外观颜色 textField.keyboardAppearance = UIKeyboardAppearance.Dark // 8.设置UITextField的return样式 textField.returnKeyType = UIReturnKeyType.Default // 9.设置UITextField预输入的文字 textField.attributedText = NSAttributedString(string: "ABCDEFG") // 10.设置UITextField的提示文字 textField.placeholder = "请输入您的名字" // 11.设置UITextField的代理对象 textField.delegate = self // 12.设置UITextField内容的垂直对齐方式, 默认是center textField.contentVerticalAlignment = UIControlContentVerticalAlignment.Top // 13.再次编辑时对旧内容进行自动清除, 默认是false textField.clearsOnBeginEditing = true // 14.根据TextField的大小自动缩放字体大小, 默认是false textField.adjustsFontSizeToFitWidth = true // 15.添加到父视图 self.view.addSubview(textField) &#125; 实现代理方法func textFieldShouldReturn(textField: UITextField) -&gt; Bool &#123; // 取消第一响应者 textField.resignFirstResponder() // 返回true return true &#125; 在ViewDidload实现 UITExtField不会自动换行的, 所以我们只可能限制用户所输入多少个字符, 如果需要自动换行, 那就需要去了解UITextVIew override func viewDidLoad() &#123; super.viewDidLoad() self.myTextField() &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITextField</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITextField</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITxtxField-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FSwift-UIKit-UITxtxField-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UITxtxField的常用状态TextField边框的样式 enum UITextBorderStyle : Int &#123; case None // TextField边框什么都没有, 默认是方角 case Line // TextField边框有一条黑色的实现围着, 默认也是方角的 case Bezel // TextField边框有两条线围着, 形成一定的层次感, 默认也是方角的 case RoundedRect // TextField边框什么都没有, 默认是圆角&#125; TextField的快速删除状态 enum UITextFieldViewMode : Int &#123; case Never // 永远都不打开 case WhileEditing // 在编辑的状态才打开 case UnlessEditing // 在非编辑的状态才打开 case Always // 一直打开&#125; TextField的键盘样式 enum UIKeyboardType : Int &#123; case Default // 显示默认的键盘 case ASCIICapable // 显示所有ASCII表的所有字符 case NumbersAndPunctuation // 数字和标点符号的键盘 case URL // 输入网站所使用的键盘 case NumberPad // 纯数字键盘 case PhonePad // 为了方便输入手机号码所使用的键盘 case NamePhonePad // 为了方便输入名字和电话号码所使用的键盘 case EmailAddress // 面向邮箱所使用的键盘 case DecimalPad // 面向带小数点的数字键盘 case Twitter // 面向Twitter等社交所使用的键盘, 为了方便@和# case WebSearch // 面向网站所使用的键盘&#125; TextField的大写样式 enum UITextAutocapitalizationType : Int &#123; case None // 不自动大写 case Words // 单个单词首字母大写 case Sentences // 句子首字母大写 case AllCharacters // 全部大写&#125; TextField的键盘外观颜色 enum UIKeyboardAppearance : Int &#123; case Default // 默认是光亮的 case Dark // 设置为黑暗颜色 case Light // 设置为光亮的颜色&#125; TextField的Return样式 enum UIReturnKeyType : Int &#123; case Default // 模样的样式 case Go // 标着有Go的蓝色样式 case Google // 标着Google的蓝色样式, 用于语音搜索, 显示的样式是Search case Join // 标有Join的蓝色按钮 case Next // 标着有Next的蓝色按钮 case Route // 标着有Route的蓝色按钮 case Search // 标着有Search的蓝色按钮 case Send // 标着有Send的蓝色按钮 case Yahoo // 标着有Yahoo的蓝色按钮, 显示的样式是Search case Done // 标着有Done的蓝色按钮 case EmergencyCall // 标着有EmergencyCall的蓝色按钮, 紧急呼救的按钮&#125; TextField的右边显示图样式 enum UITextFieldViewMode : Int &#123; case Never // 永远不显示 case WhileEditing // 在编辑的情况下显示 case UnlessEditing // 在非编辑的情况下显示 case Always // 永远显示&#125; UITextField的垂直排列方式 enum UIControlContentVerticalAlignment : Int &#123; case Center // 居中对齐, 默认 case Top // 顶部对齐 case Bottom // 底部对齐 case Fill // 平铺整个TextField的高度&#125; UITextField的水平排列方式 enum UIControlContentHorizontalAlignment : Int &#123; case Center // 居中对齐 case Left // 左对齐, 默认 case Right // 右对齐 case Fill // 平铺整个TextField的宽度&#125; UITextField的常用属性 字体颜色, 默认的字体颜色是黑色 var textColor: UIColor! 字体大小, 默认的字体大小是12 var font: UIFont!``` &gt;字体对齐方式, 默认是向左对齐```swift var textAlignment: NSTextAlignment 边框的样式, 默认是None. var borderStyle: UITextBorderStyle 快捷清楚的按钮, 默认是不打开的 var clearButtonMode: UITextFieldViewMode 提示文本, 默认是nil, 字体颜色是70%的灰 var placeholder: String? 再次编辑时对旧内容进行自动清除, 默认是false var clearsOnBeginEditing: Bool 根据TextField的大小自动缩放字体大小, 默认是false var adjustsFontSizeToFitWidth: Bool 常用代理方法 点击return会结束编辑, 也可以在这里设置取消TextField的第一响应者, 使键盘隐藏 optional func textFieldShouldReturn(textField: UITextField) -&gt; Bool 可限制文字输入的长度以及特定的字符, 如果返回true, 那么就是可以修改, 如果返回false就不可修改 optional func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITxtxField</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITxtxField</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIImage-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUIImage-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[创建func myImage() &#123; // 1.创建一个UIImageView, 并且设置它的frame var myImageView = UIImageView(frame: CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)) // 2.设置UIImage的图片名, 以及展示的样式 var myImage = UIImage(named: "image_bate.jpg")?.imageWithRenderingMode(UIImageRenderingMode.Automatic) // 3.把UIImage添加到ImageView里面去 myImageView.image = myImage self.view.addSubview(myImageView) &#125; 在viewDidload中实现: override func viewDidLoad() &#123; super.viewDidLoad() self.myImage() &#125; 注意 由于UIImage不能单独的拿出来展示, 它必须依赖于某个一个继承于UIView的一个View, 比如UIImageView或者UIButton, 这些都是可以的]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIImage</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIImage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIImage-简介]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUIImage-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UIImage的状态 UIImageOrientation enum UIImageOrientation : Int &#123; case Up //默认方向 case Down //180°旋转 case Left //逆时针旋转90° case Right //顺时针旋转90° case UpMirrored //水平向上翻转 case DownMirrored //水平向下翻转 case LeftMirrored //逆时针旋转90°后再垂直翻转 case RightMirrored //顺时针旋转90°后再垂直翻转&#125; UIImageResizingMode enum UIImageResizingMode : Int &#123; case Tile //平铺到调整完位置的图像 case Stretch //拉伸到调整完位置的图像&#125; UIImageRenderingMode enum UIImageRenderingMode : Int &#123; case Automatic //默认上下文显示的图像位置 case AlwaysOriginal //总是以图片为模板 case AlwaysTemplate //会把图像作为绘画的模板, 忽略其他颜色&#125; 常用的属性 UIImage里面虽然有很多属性, 但唯一常用的属性就只有设置获取image名字的属性. init?(named name: String) -&gt; UIImage]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIImage</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIImage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITableViewCell-简单使用]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUITableViewCell-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[UITableViewCell-简单使用 由于 TableViewCell 是不可以单独存在的, 所以必须得依赖于 UITableView 遵守 TableView 代理协议以及数据源协议 class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate &#123;&#125; 自定义 TableVIewfunc myTableView() &#123; var tableView = UITableView(frame: self.view.frame, style: UITableViewStyle.Plain) tableView.dataSource = self tableView.delegate = self self.view.addSubview(tableView) &#125; 实现数据源方法func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int &#123; return 1 &#125; func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; return 5 &#125; 自定义 UITableViewCellfunc tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell &#123; // 1.自定义 UITableViewCell 的样式以及标签, reuseIdentifier 是 Cell 得标签, 作用和 Tag 类似 var cell = UITableViewCell(style: UITableViewCellStyle.Value1, reuseIdentifier: "cell") // 2.设置 UITableViewCell 的标题Label cell.textLabel!.text = "我是 Cell" // 3.设置 UITableViewCell 的简介Label cell.detailTextLabel?.text = "Cell" // 4.设置 UITableViewCell 的 imageView 图片 cell.imageView?.image = UIImage(named: "image_black.jpg") // 5.设置 UITableViewCell 的编辑模式是否开启, 以及是否执行动画效果 cell.setEditing(true, animated: true) // 6.设置 UITableViewCell 的背景色 cell.backgroundColor = UIColor.greenColor() // 7.设置 UITableViewCell 的编辑模式辅助按钮 cell.editingAccessoryType = UITableViewCellAccessoryType.DisclosureIndicator // 8.设置 UITableViewCell 被选中的样式 cell.selectionStyle = UITableViewCellSelectionStyle.Default // 9.设置 UITableViewCell 分割线的位置 cell.separatorInset = UIEdgeInsetsMake(0, 0, 0, 20) // 10.设置 UITableViewCell 被选中时的背景View cell.selectedBackgroundView = nil // 11.设置 UITableViewCell 的辅助按钮样式 cell.accessoryType = UITableViewCellAccessoryType.DisclosureIndicator // 返回自定的 Cell return cell &#125; 开启 TableViewCell 的编辑模式 func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) &#123; &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITableViewCell</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITableViewCell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITableViewCell]]></title>
    <url>%2F2017%2F12%2F14%2FSwift%2FUIKit%2FUITableViewCell-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[常用属性UITableViewCell 显示的样式 enum UITableViewCellStyle : Int &#123; case Default // 默认显示样式 case Value1 // 样式一 case Value2 // 样式二 case Subtitle // 副标题样式&#125; UITableViewCell 选中的样式 enum UITableViewCellEditingStyle : Int &#123; case None // 没有 case Delete // 删除 case Insert // 添加&#125; UITableViewCell 辅助按钮的样式 enum UITableViewCellAccessoryType : Int &#123; case None // 没有按钮 case DisclosureIndicator // 蓝色向右的箭头 case DetailDisclosureButton // 蓝色向右的箭头以及信息按钮 case Checkmark // 复选框 @availability(iOS, introduced=7.0) case DetailButton // 信息按钮&#125; UITableViewCell 常用属性 1.初始化 Cell 的 Style 以及标签名 init(style: UITableViewCellStyle, reuseIdentifier: String?) 2.设置 Cell 的 ImageView 内容 var imageView: UIImageView? &#123; get &#125; 3.设置 Cell 的 textLabel 的内容 var textLabel: UILabel? &#123; get &#125; 4.设置 Cell 的 副标题内容 var detailTextLabel: UILabel? &#123; get &#125; 5.设置 Cell 的内容 View var contentView: UIView &#123; get &#125; 6.设置 Cell 的背景 View var backgroundView: UIView? 7.设置 Cell 被选中时的背景 View var selectedBackgroundView: UIView! 8.设置 Cell 多选中得背景 View var multipleSelectionBackgroundView: UIView? 9.设置 Cell 被选中时的 Style var selectionStyle: UITableViewCellSelectionStyle 10.设置 Cell 编辑的 Style var editingStyle: UITableViewCellEditingStyle &#123; get &#125; 11.设置 Cell 是否开启编辑状态 var editing: Bool 12.设置 Cell 的辅助按钮样式 var accessoryType: UITableViewCellAccessoryType]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITableViewCell</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITableViewCell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITableView-简单使用]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUITableView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[遵守代理协议和数据源协议class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource &#123;&#125; 自定义 UITableViewfunc myTableView() &#123; // 1.设置 TableView 的 frame 和 style var tableView: UITableView = UITableView(frame: self.view.frame, style: UITableViewStyle.Plain) // 2.设置 TableView 的背景色 tableView.backgroundColor = UIColor(red: 0.0, green: 127.0, blue: 127.0, alpha: 1.0) // 3.设置 TableView 的代理对象 tableView.delegate = self // 4.设置 TableView 的数据源对象 tableView.dataSource = self // 5.设置 TableView 每一行 Cell 的高度 tableView.rowHeight = 44 // 6.设置 TableView 每一行 Cell 页头的行高 tableView.sectionHeaderHeight = 50 // 7.设置 TableView 每一行 Cell 页尾的行高 tableView.sectionFooterHeight = 50 // 8.设置 TableView 每一行 Cell 的估计行高 tableView.estimatedRowHeight = 100 // 9.设置 TableView 每一行 Cell 的页头估计行高 tableView.estimatedSectionHeaderHeight = 50 // 10.设置 TableView 每一行 Cell 的页尾估计行高 tableView.estimatedSectionFooterHeight = 50 // 11.设置 TableView 每一行 Cell 之间分割线位置(分别是: 上, 左, 下, 右) tableView.separatorInset = UIEdgeInsetsMake(0, 50, 0, 50) // 12.设置 TableView 每一行 Cell 之间分割线的颜色 tableView.separatorColor = UIColor.redColor() // 13.设置 TableView 每一行 Cell 之间的分割效果(暂无方法, 目前只是用来实例化) tableView.separatorEffect = UIVisualEffect() // 14.设置 TableView 每一行 Cell 之间的分割线样式(默认是 SingleLine 样式) tableView.separatorStyle = UITableViewCellSeparatorStyle.SingleLine // 15.设置 TableView 的背景 View 对象 tableView.backgroundView = UIView() // 16.设置 TableView 的编辑模式是否开启, 并且是否使用动画效果 tableView.setEditing(true, animated: true) // 17.添加到 self.view 上 self.view.addSubview(tableView) &#125; 实现代理方法和数据源方法// 1.该方法是用来设置 TableView 有多少组 Cell func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int &#123; return 2 &#125; // 2.该方法是用来设置 TableView 有多少行 Cell func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; return 2 &#125; // 3.该方法是用来设置 TableView 每一行 Cell 的详细内容 func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell &#123; let cell = UITableViewCell() cell.backgroundColor = UIColor.blueColor() return cell &#125; // 4.该方法是用来设置 TableView 每一行 Cell 的标题内容 func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? &#123; return "我是页头" &#125; // 5.该方法是用来设置 TableView 每一行 Cell 的页尾内容 func tableView(tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? &#123; return "我是页尾" &#125; // 6.该方法是用来设置 TableView 每一行 Cell 的高度, 一旦这里设置了, 那么在自定义里的 rowHeight 属性就会被覆盖 func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat &#123; return 100 &#125; // 7.该方法是用来响应 TableVIewCell 被点击的事件 func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) &#123; println("我被点击了") &#125; // 8.该方法是用来设置 TableView 每一行 Cell 的编辑模式, 如果不设置, 默认都是删除 func tableView(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCellEditingStyle &#123; return UITableViewCellEditingStyle.Insert &#125; // 9.该方法是用来设置 Tabelview 的左滑快捷按钮, 只要写了该方法, 默认打开 func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) &#123; &#125; // 10.该方法是用来设置 TabelView 左滑快捷按钮的详细内容以及操作 func tableView(tableView: UITableView, titleForDeleteConfirmationButtonForRowAtIndexPath indexPath: NSIndexPath) -&gt; String! &#123; return "删除" &#125; // 11.该方法是用来设置 TableView 是否可以拖拽到其他行数, 只要写了该方法, 默认打开 func tableView(tableView: UITableView, moveRowAtIndexPath sourceIndexPath: NSIndexPath, toIndexPath destinationIndexPath: NSIndexPath) &#123; &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITableView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITableView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITableView-简介]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUITableView-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UITableview常用属性UITableView 的样式 enum UITableViewStyle : Int &#123; case Plain // 平铺样式 case Grouped // 分组样式&#125; UITableView 添加或者删除 Cell 时的动画 enum UITableViewRowAnimation : Int &#123; case Fade // 淡入淡出 case Right // 从右添加 case Left // 从左添加 case Top // 从上添加 case Bottom // 从底部添加 case None // 没有动画 case Middle // 从中间添加 case Automatic // 随机添加&#125; UITableView 滚动时指定的位置 enum UITableViewScrollPosition : Int &#123; case None // 不指定 case Top // 指定上面 case Middle // 指定中间 case Bottom // 指定底部&#125; UITableView 分割线的样式 enum UITableViewCellSeparatorStyle : Int &#123; case None // 没有分割线 case SingleLine // 单行分割线 case SingleLineEtched // 多行分割线融合&#125; UITableView 属性 1.设置 UITableView 的位置以及Style init(frame: CGRect, style: UITableViewStyle) var style: UITableViewStyle &#123; get &#125; 2.设置数据源对象 unowned(unsafe) var dataSource: UITableViewDataSource? 3.设置代理对象 unowned(unsafe) var delegate: UITableViewDelegate? 4.设置 Cell 的行高 var rowHeight: CGFloat 5.设置 Cell 的标题高度 var sectionHeaderHeight: CGFloat``` &gt; 6.设置 Cell 的页尾高度```swiftvar sectionFooterHeight: CGFloat 7.设置估计的 Cell 的行高 var estimatedRowHeight: CGFloat 8.设置估计的 Cell 的标题行高 var estimatedSectionHeaderHeight: CGFloat 9.设置估计的 Cell 的页尾行高 var estimatedSectionFooterHeight: CGFloat 10.设置 Cell 与 Cell 之间的分割线位置 var separatorInset: UIEdgeInsets 11.设置 UITableView 的背景 View 对象 var backgroundView: UIView? 常用数据源方法 要使用数据源方法(DataSoucre方法), 首先我们需要遵守 UITableView 的数据源方法(UITableViewDataSoucre)协议 1.该方法是用来设置 TableView 有多少行 Cell func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int 2.该方法是用来设置 TableView 每一行 Cell 的详细内容 func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell 3.该方法是用来设置 TableView 有多少组 Cell optional func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int 4.该方法是用来设置每一组 Cell 的标题内容 optional func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? 5.该方法是用来设置每一组 Cell 的页尾内容 optional func tableView(tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? 6.该方法使用来设置 TableView 左滑快捷 optional func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) 7.该方法是用来设置 TableView 是否可以拖拽到其他行数, 只要写了该方法, 默认打开 optional func tableView(tableView: UITableView, moveRowAtIndexPath sourceIndexPath: NSIndexPath, toIndexPath destinationIndexPath: NSIndexPath) 常用代理方法 1.该方法是用来设置每一行 Cell 的高度 optional func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat 2.该方法是用来设置 Cell 标题内容的高度(如果该方法使用了, 那么在自定义 TableView 的sectionHeaderHeight属性就会被覆盖) optional func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat 3.该方法是用来设置 Cell 页尾内容的高度(如果该方法使用了, 那么在自定义 TableView 的sectionFooterHeight属性就会被覆盖) optional func tableView(tableView: UITableView, heightForFooterInSection section: Int) -&gt; CGFloat 4.该方法是用来设置 TableView 左滑快捷按钮的内容以及详细操作 optional func tableView(tableView: UITableView, titleForDeleteConfirmationButtonForRowAtIndexPath indexPath: NSIndexPath) -&gt; String! 5.该方法是用来设置 TableView 每一行 Cell 的编辑模式, 如果不设置, 默认都是删除 optional func tableView(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCellEditingStyle]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITableView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITableView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIScrollView-简单使用]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUIScrollView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[实例化UIScrollView, UIImageView, UIImage class ViewController: UIViewController, UIScrollViewDelegate &#123; var scrollView = UIScrollView() var imageView = UIImageView() var imageURL = UIImage()&#125; 设置UIScrollViewfunc myScrollView() &#123; // 1.1设置ScrollView的Frame scrollView.frame = CGRectMake(0, 0, self.view.frame.width, self.view.frame.height) // 1.2设置ScrollView的边距 scrollView.contentInset = UIEdgeInsetsMake(10, 10, 10, 10) // 1.3设置ScrollView的代理 scrollView.delegate = self // 1.4设置ScrollView的最小缩放比例 scrollView.minimumZoomScale = 0.1 // 1.5设置ScrollView的最大缩放比例 scrollView.maximumZoomScale = 1.5 // 1.6添加到父视图 self.view.addSubview(scrollView) &#125; 设置UIImageViewfunc myImageView() &#123; // 2.1设置ImageView的图片 imageURL = UIImage(named: "image_landscape3.jpg")! // 2.2设置添加图片的方法以及对象 self.setImage(imageURL) // 2.3添加到ScrollView上 scrollView.addSubview(imageView) &#125; 设置UIImagefunc setImage (image: UIImage) &#123; // 3.1设置image对象 imageURL = image // 3.2设置imageView的image内容 imageView.image = image // 3.3设置imageView根据image自动调整大小 imageView.sizeToFit() // 3.4设置ScrollView的内容大小为image的大小 scrollView.contentSize = image.size &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIScrollView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIScrollView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIScrollView-简介]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUIScrollView-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UIScrollView的常用属性 设置内容的中心点, 默认是0 var contentOffset: CGPoint 设置内容的宽高, 默认是0 var contentSize: CGSize 设置UIScrollView的边距, 默认是0 var contentInset: UIEdgeInsets 设置UIScrollView是否可以翻页, 默认是false var pagingEnabled: Bool 设置UIScrollView是否可用, 默认是true var scrollEnabled: Bool 设置UIScrollView的水平滚动, 默认是true var showsHorizontalScrollIndicator: Bool 设置UIScrollView的垂直滚动, 默认是true var showsVerticalScrollIndicator: Bool 设置UIScrollView滚动条显示的位置, 默认是0 var scrollIndicatorInsets: UIEdgeInsets 设置最小的缩放比例, 默认是1.0 var minimumZoomScale: CGFloat 设置最大的缩放比例, 默认是1.0 var maximumZoomScale: CGFloat 设置点击状态栏就回到ScrollView的最顶部, 默认是true var scrollsToTop: Bool 设置缩放视图时是否有弹簧效果, 默认是true var bouncesZoom: Bool 设置ScrollView是否滚动时是否有弹簧效果, 默认是true var bounces: Bool UIScrollView的常用方法 拖拽视图时调用 optional func scrollViewDidScroll(scrollView: UIScrollView) 刚开始拖拽视图的时候调用 optional func scrollViewWillBeginDragging(scrollView: UIScrollView) 拖拽停止的时候调用 optional func scrollViewDidEndDragging(scrollView: UIScrollView, willDecelerate decelerate: Bool) 当视图滚动速度开始减慢的时候调用 optional func scrollViewWillBeginDecelerating(scrollView: UIScrollView) 当拖拽的视图完全停下来后才调用 optional func scrollViewDidEndDecelerating(scrollView: UIScrollView) 当ScrollView的动画执行完之后才调用 optional func scrollViewDidEndScrollingAnimation(scrollView: UIScrollView) 设置视图的比例放大或者缩小 optional func viewForZoomingInScrollView(scrollView: UIScrollView) -&gt; UIView? 当完成比例放大或者缩小的时候调用 optional func scrollViewDidEndZooming(scrollView: UIScrollView, withView view: UIView!, atScale scale: CGFloat) 是否可以点击状态栏回到最顶部, 默认是true optional func scrollViewShouldScrollToTop(scrollView: UIScrollView) -&gt; Bool 当点击状态栏回到顶部的时候才调用 optional func scrollViewDidScrollToTop(scrollView: UIScrollView)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIScrollView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIScrollView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITextView-简单使用]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FSwift-UIKit-UITextView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[遵守代理协议 class ViewController: UIViewController, UITextViewDelegate &#123;&#125; 自定义UITextViewfunc myTextView() &#123; // 1.自定义 UITextView 以及文本容器的大小 var textView = UITextView(frame: CGRectMake(0, 200, self.view.frame.width, 200)) // 2.设置 UITextView 的文本内容 textView.text = "http://www.baidu.com\nabcdefghijk" // 3.设置 UITextView 的文本颜色 textView.textColor = UIColor.redColor() // 4.设置 UITextView 的文字大小 textView.font = UIFont.systemFontOfSize(30) // 5.设置 UITextView 的文字对齐方式 textView.textAlignment = NSTextAlignment.Center // 6.设置 UITextView 是否可编辑 textView.editable = true // 7.设置 UITextView 是否可以选中 textView.selectable = true // 8.设置 UITextView 的背景颜色 textView.backgroundColor = UIColor.greenColor() // 9.设置 UITextView 的超文本样式 textView.dataDetectorTypes = UIDataDetectorTypes.All // 10.设置 UITextView 的文本长按时是否可以更改为粗体, 斜体或者斜体下划线样式 textView.allowsEditingTextAttributes = true // 11.设置 UITextView 的文本容器边界 textView.textContainerInset = UIEdgeInsetsMake(10, 10, 10, 10) // 12.设置 UITextView 是否点击编辑时把旧内容全选 textView.clearsOnInsertion = true // 13.设置 UITextView 的代理对象 textView.delegate = self // 14.添加到 self.view self.view.addSubview(textView) &#125; 实现代理方法// 1.该方法是用来设置 UITextView 是否可以编辑 func textViewShouldBeginEditing(textView: UITextView) -&gt; Bool &#123; println("正在开始编辑") return true &#125; // 2.该方法是用来设置 UITextView 是否可以结束编辑 func textViewShouldEndEditing(textView: UITextView) -&gt; Bool &#123; println("正在结束编辑") return true &#125; // 3.该方法是用来设置 UITextView 在开始编辑时调用 func textViewDidBeginEditing(textView: UITextView) &#123; println("开始编辑") &#125; // 4.该方法是用来设置 UITextView 在结束编辑时调用 func textViewDidEndEditing(textView: UITextView) &#123; println("结束编辑") &#125; // 5.该方法是用来设置 UITextView 内容是否可更改 func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -&gt; Bool &#123; println("正在更改内容") return true &#125; // 6.该方法是用来设置 UITextView 内容更改后时调用 func textViewDidChange(textView: UITextView) &#123; println("内容已经改变") &#125; // 7.该方法是用来选择需要更改内容的 UITextView func textViewDidChangeSelection(textView: UITextView) &#123; println("已经选择要更改内容的文本框") &#125; 在 viewDidLoad 调用override func viewDidLoad() &#123; super.viewDidLoad() self.myTextView() &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITextView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITextView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITextView-简介]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FSwift-UIKit-UITextView-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UITextView常用属性 1.设置 UITextView 的文字 var text: String! 2.设置 UITextView 的字体大小 var font: UIFont! 3.设置 UITextView 的字体颜色 var textColor: UIColor! 4.设置 UITextView 的字体排序, 默认是从左往右 var textAlignment: NSTextAlignment 5.设置 UITextView 是否可编辑 var editable: Bool 6.设置 UITextView 是否可以点击 var selectable: Bool 7.设置 UITextView 的超文本样式 var dataDetectorTypes: UIDataDetectorTypes 8.设置 UITextView 在长按下是否可以选择不同的文字样式 var allowsEditingTextAttributes: Bool``` &gt; 9.设置 UITextView 的文本容器边界```swiftvar textContainerInset: UIEdgeInsets 10.设置 UITextView 是否点击编辑时把旧内容全选 var clearsOnInsertion: Bool UITextView 的代理方法 1.该方法是用来设置 UITextView 是否可以编辑 optional func textViewShouldBeginEditing(textView: UITextView) -&gt; Bool 2.该方法是用来设置 UITextView 是否可以结束编辑 optional func textViewShouldEndEditing(textView: UITextView) -&gt; Bool 3.该方法是用来设置 UITextView 在开始编辑时调用 optional func textViewDidBeginEditing(textView: UITextView) 4.该方法是用来设置 UITextView 在结束编辑时调用 optional func textViewDidEndEditing(textView: UITextView) 5.该方法是用来设置 UITextView 内容是否可更改 optional func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -&gt; Bool 6.该方法是用来设置 UITextView 内容更改后时调用 optional func textViewDidChange(textView: UITextView) 7.该方法是用来选择需要更改内容的 UITextView optional func textViewDidChangeSelection(textView: UITextView)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITextView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITextView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIActionSheet-简单使用]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUIActionSheet-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[遵守代理协议class ViewController: UIViewController, UIActionSheetDelegate &#123;&#125; 自定义UIButton并且监听 ActionSheet 方法func myButton() &#123; var button: UIButton = UIButton.buttonWithType(UIButtonType.System) as! UIButton button.frame = CGRectMake(100, 200, 50, 20) button.setTitle("弹窗", forState: UIControlState.Normal) button.backgroundColor = UIColor.redColor() button.addTarget(self, action: "myActionSheet", forControlEvents: UIControlEvents.TouchUpInside) self.view.addSubview(button) &#125; 自定义UIActionSheetfunc myActionSheet() &#123; // 1.自定义 UIActionSheet, 并且设置标题, 代理对象, 以及按钮的标题 var actionSheet = UIActionSheet(title: "UIActionSheet", delegate: self, cancelButtonTitle: "取消", destructiveButtonTitle: "按钮一") // 2.设置 UIActionSheet 的样式 actionSheet.actionSheetStyle = UIActionSheetStyle.Default // 3.设置取消按钮的索引 actionSheet.cancelButtonIndex = 1 // 4.设置destructive的索引值 actionSheet.destructiveButtonIndex = 0 // 5.添加其他按钮的标题 actionSheet.addButtonWithTitle("按钮二") // 6.设置按钮标题的索引 actionSheet.buttonTitleAtIndex(1) // 7.显示到 self.view 上 actionSheet.showInView(self.view) &#125; 实现UIActionSheet代理方法// 1.该方法是在 UIActionSheet 上的按钮被点击时调用的 func actionSheet(actionSheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int) &#123; println("被点击了") &#125; // 2.该方法是在 UIActionSheet 上的点击了取消按钮时调用的 func actionSheetCancel(actionSheet: UIActionSheet) &#123; println("点击了取消按钮") &#125; // 3.该方法是在 UIActionSheet 完全即将显示的时候调用的 func willPresentActionSheet(actionSheet: UIActionSheet) &#123; println("UIActionSheet即将显示") &#125; // 4.该方法是在 UIActionSheet 完全显示的时候调用的 func didPresentActionSheet(actionSheet: UIActionSheet) &#123; println("UIActionSheet完全显示") &#125; // 5.该方法是在 UIActionSheet 完全即将消失的时候调用的 func actionSheet(actionSheet: UIActionSheet, willDismissWithButtonIndex buttonIndex: Int) &#123; println("UIActionSheet即将消失") &#125; // 6.该方法是在 UIActionSheet 完全消失的时候调用的 func actionSheet(actionSheet: UIActionSheet, didDismissWithButtonIndex buttonIndex: Int) &#123; println("UIActionSheet完全消失") &#125; 在viewDidLoad实现override func viewDidLoad() &#123; super.viewDidLoad() self.myButton() &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIActionSheet</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIActionSheet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIActionSheet-简介]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUIActionSheet-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UIActionSheet常用属性 1.设置 UIActionSheet 的代理对象 var delegate: UIActionSheetDelegate? 2.设置 UIActionSheet 的标题 var title: String 3.设置 UIActionSheet 的样式 var actionSheetStyle: UIActionSheetStyle 4.读取 UIActionSheet 里有多少个按钮 var numberOfButtons: Int &#123; get &#125; 5.设置 UIActionSheet 取消按钮的索引 var cancelButtonIndex: Int 6.设置其他按钮的索引 var destructiveButtonIndex: Int 7.读取 UIActionSheet 其他按钮的索引值 var firstOtherButtonIndex: Int &#123; get &#125; 8.读取 UIActionSheet 是否可见 var visible: Bool &#123; get &#125; UIActionSheet的常用方法 1.该方法是用来添加 UIActionSheet 的按钮标题 func addButtonWithTitle(title: String) -&gt; Int 2.该方法是用来设置 UIActionSheet 的按钮索引 func buttonTitleAtIndex(buttonIndex: Int) -&gt; String 3.该方法是来用设置 UIActionSheet 显示到 ToolBar func showFromToolbar(view: UIToolbar!) 4.该方法是用来设置 UIActionSheet 显示到 TabBar func showFromTabBar(view: UITabBar!) 5.该方法是用来设置来自 UIBarButtonItem 的 UIActionSheet, 并且是否开启动画效果 func showFromBarButtonItem(item: UIBarButtonItem!, animated: Bool) 6.该方法是用来设置 UIActionSheet 的显示的视图大小, 以及指定视图和是否开启动画效果 func showFromRect(rect: CGRect, inView view: UIView!, animated: Bool) 7.该方法是用来设置 UIActionSheet 显示到哪一个视图 func showInView(view: UIView!) 8.该方法是用来设置 UIActionSheet 消失的按钮索引, 以及是否使用动画 func dismissWithClickedButtonIndex(buttonIndex: Int, animated: Bool) UIActionSheet的代理方法 1.该方法是在 UIActionSheet 上的按钮被点击时调用的 optional func actionSheet(actionSheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int) 2.该方法是在 UIActionSheet 上的点击了取消按钮时调用的 optional func actionSheetCancel(actionSheet: UIActionSheet) 3.该方法是在 UIActionSheet 完全即将显示的时候调用的 optional func willPresentActionSheet(actionSheet: UIActionSheet) 4.该方法是在 UIActionSheet 完全显示的时候调用的 optional func didPresentActionSheet(actionSheet: UIActionSheet) 5.该方法是在 UIActionSheet 完全即将消失的时候调用的 optional func actionSheet(actionSheet: UIActionSheet, willDismissWithButtonIndex buttonIndex: Int) 6.该方法是在 UIActionSheet 完全消失的时候调用的 optional func actionSheet(actionSheet: UIActionSheet, didDismissWithButtonIndex buttonIndex: Int)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIActionSheet</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIActionSheet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Func-字典模型互转]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FFunc%2FSwift-Func-%E5%AD%97%E5%85%B8%E6%A8%A1%E5%9E%8B%E4%BA%92%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[字典–&gt;模型 class User: NSObject &#123; //模型类 var name:String? var icon:String? // print时会调用。相当于java中的 toString()。为了代码整洁下面的模型去了这个计算属性。测试时请下载demo override internal var description: String &#123; return "name: \(name) \n icon:\(icon) \n" &#125;&#125; func func1()&#123; let dict = ["name":"Jack","icon":"lufy.png"] if let user = User.objectWithKeyValues(dict) as? User&#123; print("\(user)") &#125; &#125; 输出： name: Optional("Jack") icon: Optional("lufy.png") 字典–&gt;模型 ：模型中包裹模型 //模型类class Status :NSObject &#123; var text:String? var user:User? //与 1 中的模型相同 var retweetedStatus:Status?&#125; func func2()&#123; let dict = ["text":"Agree!Nice weather!", "user":["name":"Jack","icon":"lufy.png"], "retweetedStatus":["text":"Nice weather!", "user":["name":"Rose","icon":"nami.png"]] ] if let status = Status.objectWithKeyValues(dict) as? Status&#123; print("\(status)") &#125; &#125;输出： text:Optional("Agree!Nice weather!") user:Optional(name: Optional("Jack") icon:Optional("lufy.png")) retweetedStatus:Optional(text:Optional("Nice weather!") user:Optional(name: Optional("Rose")icon:Optional("nami.png")) retweetedStatus:nil) 字典–&gt;模型： 字典中包裹数组， 数组中的元素是 一个模型对应的字典 //模型类， 必须遵守DictModelProtocol协议， 并实现customClassMapping方法。class UserGroup: NSObject,DictModelProtocol &#123; var groupName:String?; //团队名称 var numbers:NSArray? //成员，保存User实例 static func customClassMapping() -&gt; [String: String]?&#123; return ["numbers":"User"]; //指定numbers数组中的元素类型是User &#125;&#125;func func3()&#123; let dict = ["groupName":"Dream Team", "numbers":[["name":"Jack","icon":"lufy.png"], ["name":"Rose","icon":"nami.png"]] ] if let group = UserGroup.objectWithKeyValues(dict)&#123; print("\(group)") &#125;&#125;输出： groupName:Optional("Dream Team") numbers:Optional(( "name: Optional(\"Jack\") \n icon:Optional(\"lufy.png\") \n", "name: Optional(\"Rose\") \n icon:Optional(\"nami.png\") \n" )) 字典–&gt;模型： 将一个字典数组转成模型数组 func func4()&#123; let arrayOfStatus = [["text":"Agree!Nice weather!", "user":["name":"Jack", "icon":"lufy.png" ], "retweetedStatus":["text":"Nice weather!", "user":["name":"Rose", "icon":"nami.png" ] ] ], ["text":"2___Agree!Nice weather!", "user":["name":"2___Jack", "icon":"2___lufy.png" ], "retweetedStatus":["text":"2___Nice weather!", "user":["name":"2___Rose", "icon":"2___nami.png" ] ] ]] if let status = Status.objectArrayWithKeyValuesArray(arrayOfStatus)&#123; for item in status&#123; //打印出数组的元素 print(item) &#125; &#125; &#125;输出： text:Optional("Agree!Nice weather!") user:Optional(name: Optional("Jack")icon:Optional("lufy.png")) retweetedStatus:Optional(text:Optional("Nice weather!") user:Optional(name: Optional("Rose") icon:Optional("nami.png")) retweetedStatus:nil ) text:Optional("2___Agree!Nice weather!") user:Optional(name: Optional("2___Jack")icon:Optional("2___lufy.png")) retweetedStatus:Optional(text:Optional("2___Nice weather!") user:Optional(name: Optional("2___Rose")icon:Optional("2___nami.png")) retweetedStatus:nil ) 模型–&gt;字典 func func5()&#123; let user = User() user.name = "hejunm" user.icon = "my.png" if let dict = user.keyValues&#123; do&#123; //转化为JSON 字符串，打印出来更直观 let data = try NSJSONSerialization.dataWithJSONObject(dict, options: .PrettyPrinted) print(NSString(data: data, encoding: NSUTF8StringEncoding)) &#125;catch&#123;&#125; &#125; &#125;输出： Optional(&#123; "icon" : "my.png", "name" : "hejunm"&#125;) 模型–&gt;字典： 模型中还有模型 func func6()&#123; let user = User() user.name = "retweeted user hejunm" user.icon = "my.png" let retweetedStatus = Status(); //转发微博 retweetedStatus.text = "this is retweeted status"; retweetedStatus.user = user let oriUser = User() oriUser.name = "original user" oriUser.icon = "my.png" let oriStatus = Status(); //原微博 oriStatus.text = "this is original status" oriStatus.user = oriUser oriStatus.retweetedStatus = retweetedStatus let dict = oriStatus.keyValues do&#123; //转化为JSON 字符串 var data = try NSJSONSerialization.dataWithJSONObject(dict!, options: .PrettyPrinted) print(NSString(data: data, encoding: NSUTF8StringEncoding)) &#125;catch&#123; &#125;&#125;输出： Optional(&#123; "text" : "this is original status", "user" : &#123; "icon" : "my.png", "name" : "original user" &#125;, "retweetedStatus" : &#123; "text" : "this is retweeted status", "user" : &#123; "icon" : "my.png", "name" : "retweeted user hejunm" &#125; &#125;&#125;) 模型–&gt;字典 ： 模型数组转字典数组 func func7()&#123; let user1 = User() user1.name = "hejunm_1" user1.icon = "my.png_1" let user2 = User() user2.name = "hejunm_2" user2.icon = "my.png_2" let userArray = [user1,user2] as NSArray if let dicts = userArray.keyValuesArray&#123; do&#123; let data = try NSJSONSerialization.dataWithJSONObject(dicts, options: .PrettyPrinted) //转成json字符串 print(NSString(data: data, encoding: NSUTF8StringEncoding)) &#125;catch&#123; &#125; &#125; &#125;输出： Optional([ &#123; "icon" : "my.png_1", "name" : "hejunm_1" &#125;, &#123; "icon" : "my.png_2", "name" : "hejunm_2" &#125;]) 源码 - 字典–&gt;模型 import Foundation/** 当字典中存在数组， 并且数组中保存的值得类型是字典， 那么就需要指定数组中的字典对应的类类型。 这里以键值对的形式保存 eg 字典如下： key: [[key1:value1, key2:value2],[key1:value3, key2:value4],[key1:value5, key2:value6]] key： key值 value: 字典[key1:value1, key2:value2] 对应的模型*/@objc public protocol DictModelProtocol&#123; static func customClassMapping() -&gt; [String: String]?&#125;extension NSObject&#123; //dict: 要进行转换的字典 class func objectWithKeyValues(dict: NSDictionary)-&gt;AnyObject?&#123; if HEFoundation.isClassFromFoundation(self) &#123; print("只有自定义模型类才可以字典转模型") assert(true) return nil &#125; let obj:AnyObject = self.init() var cls:AnyClass = self.classForCoder() //当前类的类型 while("NSObject" != "\(cls)")&#123; var count:UInt32 = 0 let properties = class_copyPropertyList(cls, &amp;count) //获取属性列表 for i in 0..&lt;count&#123; let property = properties[Int(i)] //获取模型中的某一个属性 let propertyType = String.fromCString(property_getAttributes(property))! //属性类型 let propertyKey = String.fromCString(property_getName(property))! //属性名称 if propertyKey == "description"&#123; continue &#125; //description是Foundation中的计算型属性，是实例的描述信息 var value:AnyObject! = dict[propertyKey] //取得字典中的值 if value == nil &#123;continue&#125; let valueType = "\(value.classForCoder)" //字典中保存的值得类型 if valueType == "NSDictionary"&#123; //1，值是字典。 这个字典要对应一个自定义的模型类并且这个类不是Foundation中定义的类型。 let subModelStr:String! = HEFoundation.getType(propertyType) if subModelStr == nil&#123; print("你定义的模型与字典不匹配。 字典中的键\(propertyKey) 对应一个自定义的 模型") assert(true) &#125; if let subModelClass = NSClassFromString(subModelStr)&#123; value = subModelClass.objectWithKeyValues(value as! NSDictionary) //递归 &#125; &#125;else if valueType == "NSArray"&#123; //值是数组。 数组中存放字典。 将字典转换成模型。 如果协议中没有定义映射关系，就不做处理 if self.respondsToSelector("customClassMapping") &#123; if var subModelClassName = cls.customClassMapping()?[propertyKey]&#123; //子模型的类名称 subModelClassName = HEFoundation.bundlePath+"."+subModelClassName if let subModelClass = NSClassFromString(subModelClassName)&#123; value = subModelClass.objectArrayWithKeyValuesArray(value as! NSArray); &#125; &#125; &#125; &#125; obj.setValue(value, forKey: propertyKey) &#125; free(properties) //释放内存 cls = cls.superclass()! //处理父类 &#125; return obj &#125; /** 将字典数组转换成模型数组 array: 要转换的数组, 数组中包含的字典所对应的模型类就是 调用这个类方法的类 当数组中嵌套数组， 内部的数组包含字典，cls就是内部数组中的字典对应的模型 */ class func objectArrayWithKeyValuesArray(array: NSArray)-&gt;NSArray?&#123; if array.count == 0&#123; return nil &#125; var result = [AnyObject]() for item in array&#123; let type = "\(item.classForCoder)" if type == "NSDictionary"&#123; if let model = objectWithKeyValues(item as! NSDictionary)&#123; result.append(model) &#125; &#125;else if type == "NSArray"&#123; if let model = objectArrayWithKeyValuesArray(item as! NSArray)&#123; result.append(model) &#125; &#125;else&#123; result.append(item) &#125; &#125; if result.count==0&#123; return nil &#125;else&#123; return result &#125; &#125;&#125; 源码 - 模型–&gt;字典 import Foundationextension NSObject&#123; var keyValues:[String:AnyObject]?&#123; //获取一个模型对应的字典 get&#123; var result = [String: AnyObject]() //保存结果 var classType:AnyClass = self.classForCoder while("NSObject" != "\(classType)" )&#123; var count:UInt32 = 0 let properties = class_copyPropertyList(classType, &amp;count) for i in 0..&lt;count&#123; let property = properties[Int(i)] let propertyKey = String.fromCString(property_getName(property))! //模型中属性名称 let propertyType = String.fromCString(property_getAttributes(property))! //模型中属性类型 if "description" == propertyKey&#123; continue &#125; //描述，不是属性 let tempValue:AnyObject! = self.valueForKey(propertyKey) if tempValue == nil &#123; continue &#125; if let _ = HEFoundation.getType(propertyType) &#123; //1,自定义的类 result[propertyKey] = tempValue.keyValues &#125;else if (propertyType.containsString("NSArray"))&#123; //2, 数组, 将数组中的模型转成字典 result[propertyKey] = tempValue.keyValuesArray //3， 基本数据 &#125;else&#123; result[propertyKey] = tempValue &#125; &#125; free(properties) classType = classType.superclass()! &#125; if result.count == 0&#123; return nil &#125;else&#123; return result &#125; &#125; &#125;&#125;extension NSArray&#123; //数组的拓展 var keyValuesArray:[AnyObject]?&#123; get&#123; var result = [AnyObject]() for item in self&#123; if !HEFoundation.isClassFromFoundation(item.classForCoder)&#123; //1,自定义的类 let subKeyValues:[String:AnyObject]! = item.keyValues if subKeyValues == nil &#123;continue&#125; result.append(subKeyValues) &#125;else if item.classForCoder == NSArray.classForCoder()&#123; //2, 如果item 是数组 let subKeyValues:[AnyObject]! = item.keyValuesArray if subKeyValues == nil &#123;continue&#125; result.append(subKeyValues) &#125;else&#123; //3, 基本数据类型 result.append(item) &#125; &#125; if result.count == 0&#123; return nil &#125;else&#123; return result &#125; &#125; &#125;&#125; 辅助类 import Foundationclass HEFoundation &#123; static let set = NSSet(array: [ NSURL.classForCoder(), NSDate.classForCoder(), NSValue.classForCoder(), NSData.classForCoder(), NSError.classForCoder(), NSArray.classForCoder(), NSDictionary.classForCoder(), NSString.classForCoder(), NSAttributedString.classForCoder() ]) static let bundlePath = NSBundle.mainBundle().infoDictionary!["CFBundleExecutable"] as! String /*** 判断某个类是否是 Foundation中自带的类 */ class func isClassFromFoundation(c:AnyClass)-&gt;Bool &#123; var result = false if c == NSObject.classForCoder()&#123; result = true &#125;else&#123; set.enumerateObjectsUsingBlock(&#123; (foundation, stop) -&gt; Void in if c.isSubclassOfClass(foundation as! AnyClass) &#123; result = true stop.initialize(true) &#125; &#125;) &#125; return result &#125; /** 很据属性信息， 获得自定义类的 类名*/ /** let propertyType = String.fromCString(property_getAttributes(property))! 获取属性类型 到这个属性的类型是自定义的类时， 会得到下面的格式： T+@+"+..+工程的名字+数字+类名+"+,+其他, 而我们想要的只是类名，所以要修改这个字符串 */ class func getType(var code:String)-&gt;String?&#123; if !code.containsString(bundlePath)&#123; //不是自定义类 return nil &#125; code = code.componentsSeparatedByString("\"")[1] if let range = code.rangeOfString(bundlePath)&#123; code = code.substringFromIndex(range.endIndex) var numStr = "" //类名前面的数字 for c:Character in code.characters&#123; if c &lt;= "9" &amp;&amp; c &gt;= "0"&#123; numStr+=String(c) &#125; &#125; if let numRange = code.rangeOfString(numStr)&#123; code = code.substringFromIndex(numRange.endIndex) &#125; return bundlePath+"."+code &#125; return nil &#125;&#125; 原文]]></content>
      <categories>
        <category>Swift</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-AppKit-NSTimer-定时器]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FNSTimer-%E5%AE%9A%E6%97%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[NSTimerpublic class NSTimer : NSObject 定时器的作用 在指定的时间执行指定的任务 间隔一段时间执行指定任务 定时器的创建scheduled方式 创建并启动定时器 默认将时钟以NSDefaultRunLoopMode模式添加到运行循环 用户发生交互的时候时钟将暂停 /* public class func scheduledTimerWithTimeInterval(ti: NSTimeInterval, target aTarget: AnyObject, selector aSelector: Selector, userInfo: AnyObject?, repeats yesOrNo: Bool) -&gt; NSTimer 参数： TimeInterval：触发时间，单位秒 target：定时起触发对象 selector：定时器响应方法 userInfo：用户信息 repeats：是否重复执行，YES 每个指定的时间重复执行，NO 只执行一次 */ // 创建并启动定时器 let timer:NSTimer = NSTimer.scheduledTimerWithTimeInterval(2.0, target: self, selector: #selector(YPScrollView.timerChange),2 userInfo: nil, repeats: true) timer方式 创建定时器添加到运行循环 将时钟以指定模式添加到运行循环 /* mode： NSDefaultRunLoopMode: 时钟，网络。 发生用户交互的时候，时钟会被暂停 NSRunLoopCommonModes: 用户交互，响应级别高。 发生用户交互的时候，时钟仍然会触发，如果时钟触发方法非常 耗时，使用此方式时用户操作会造成非常严重的卡顿。 */ // 创建定时器 let timer:NSTimer = NSTimer(timeInterval: 2.0, target: self, selector: #selector(ViewController.updateTimer(_:)), userInfo: nil, repeats: true) // 将定时器添加到运行循环 NSRunLoop.currentRunLoop().addTimer(timer, forMode: NSRunLoopCommonModes) 定时器的启动与关闭 // 启动定时器 timer.fireDate = NSDate.distantFuture() // 暂停定时器 timer.fireDate = NSDate.distantPast() // 关闭定时器，永久关闭定时器 timer.invalidate() 子线程定时器的创建 在子线程创建定时器时，需要手动开启子线程的运行循环 dispatch_async(dispatch_get_global_queue(0, 0)) &#123; // 在子线程创建定时器 /* scheduled 或 timer 方式创建 */ let timer:NSTimer = NSTimer(timeInterval: 2.0, target: self, selector: #selector(ViewController.updateTimer(_:)), userInfo: nil, repeats: true) NSRunLoop.currentRunLoop().addTimer(timer, forMode: NSRunLoopCommonModes) // 启动子线程的运行循环 /* 这句代码就是一个死循环！如果不停止运行循环，不会执行添加到此句之后的任何代码 */ CFRunLoopRun() // 停止子线程运行循环之前，不会执行添加到此处的任何代码 &#125; var num:Int = 0 func updateTimer(timer:NSTimer) &#123; num = num + 1 // 满足条件后，停止当前的运行循环 if (num == 8) &#123; // 停止当前的运行循环 /* 一旦停止了运行循环，后续代码能够执行，执行完毕后，线程被自动销毁 */ CFRunLoopStop(CFRunLoopGetCurrent()) &#125; &#125; 定时任务/ 延时调用 /* 1.5 秒后自动调用 self 的 hideHUD 方法 */ self.performSelector(#selector(NsTimer.hideHUD), withObject: nil, afterDelay: 1.5) // 取消延时调用 NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: #selector(NsTimer.hideHUD), object: nil) / 延时调用 /* 1.5 秒后自动调用 self 的 hideHUD 方法 */ self.performSelector(#selector(NsTimer.hideHUD), withObject: nil, afterDelay: 1.5) // 取消延时调用 NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: #selector(NsTimer.hideHUD), object: nil) / 延时调用 /* 1.5 秒后自动调用 self 的 hideHUD 方法 */ self.performSelector(#selector(NsTimer.hideHUD), withObject: nil, afterDelay: 1.5) // 取消延时调用 NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: #selector(NsTimer.hideHUD), object: nil)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>NSTimer</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>NSTimer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UICollectionView-简单使用]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUICollectionView-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[遵守协议 class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout &#123; &#125; 自定义UICollectionView func myCollectionView() &#123; // 1.自定义 Item 的FlowLayout let flowLayout = UICollectionViewFlowLayout() // 2.设置 Item 的 Size flowLayout.itemSize = CGSizeMake(90, 120) // 3.设置 Item 的排列方式 flowLayout.scrollDirection = UICollectionViewScrollDirection.Vertical // 4.设置 Item 的四周边距 flowLayout.sectionInset = UIEdgeInsetsMake(20, 20, 20, 20) // 5.设置同一竖中上下相邻的两个 Item 之间的间距 flowLayout.minimumLineSpacing = 20 // 6.设置同一行中相邻的两个 Item 之间的间距 flowLayout.minimumInteritemSpacing = 20 // 7.设置UICollectionView 的页头尺寸 flowLayout.headerReferenceSize = CGSizeMake(100, 50) // 8.设置 UICollectionView 的页尾尺寸 flowLayout.footerReferenceSize = CGSizeMake(100, 50) // 1.自定义 UICollectionView 的位置大小, 以及 Item 的显示样式为 flowLayout var collection = UICollectionView(frame: CGRectMake(0, 64, self.view.frame.width, self.view.frame.height - 64), collectionViewLayout: flowLayout) // 2.设置 UICollectionView 的背景颜色 collection.backgroundColor = UIColor.whiteColor() // 3.设置 UICollectionView 垂直滚动是否滚到 Item 的最底部内容 collection.alwaysBounceVertical = true // 4.设置 UICollectionView 垂直滚动是否滚到 Item 的最右边内容 collection.alwaysBounceHorizontal = true // 5.设置 UICollectionView 的数据源对象 collection.dataSource = self // 6.设置 UICollectionView 的代理对象 collection.delegate = self // 7.设置 UICollectionView 的单元格点击(默认是 true) collection.allowsSelection = true // 8.设置 UICollectionView 的单元格多选(默认是 false) collection.allowsMultipleSelection = false // 9.开启 UICollectionView 的分页显示效果 collection.pagingEnabled = true // 10.注册 UICollectionViewCell collection.registerClass(UICollectionViewCell.self, forCellWithReuseIdentifier: "cell") // 11.添加到 self.view 上 self.view.addSubview(collection) &#125; 自定义UINavigationBar func myNavigationBar() &#123; // 1.自定义 NavigationBar, 设置它的位置大小 var navigationBar = UINavigationBar(frame: CGRectMake(0, 0, self.view.frame.width, 64)) // 2.设置 NavigationBar 的背景色 navigationBar.backgroundColor = UIColor.redColor() // 3.自定义 NavigationItem 设定它的 Title let navigationItem = UINavigationItem(title: "UICollectionView演示") // 4.自定义 UIBarButtonItem 的Title, Style, Target 的对象, 已经监听的方法 let leftButton = UIBarButtonItem(title: "返回", style: UIBarButtonItemStyle.Plain, target: self, action: "back") // 5.设置 Navigation 左边的按钮为 leftButton navigationItem.leftBarButtonItem = leftButton // 6.把 NavigationItem 添加到 NavigationBar navigationBar.pushNavigationItem(navigationItem, animated: true) // 7.添加到到 self.view 上 self.view.addSubview(navigationBar) &#125; // 8.NavigationBar监听方法 func back() &#123; println("点击了返回") &#125; UICollectionView的代理方法, 数据源方法, FlowLayout 方法 // 1.该方法是用来设置返回 CollectionViewCell 的组数 func numberOfSectionsInCollectionView(collectionView: UICollectionView) -&gt; Int &#123; return 1 &#125; // 2.该方法是用来设置返回 CollectionViewCell 的个数 func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123; return 15 &#125; // 3.该方法是用来设置 CollectionViewCell 的内容 func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell &#123; var collectionCell = collectionView.dequeueReusableCellWithReuseIdentifier("cell", forIndexPath: indexPath) as! UICollectionViewCell collectionCell.backgroundColor = UIColor.redColor() return collectionCell &#125; // 4.该方法是点击了 CollectionViewCell 时调用的监听方法 func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) &#123; println("aaa") &#125; // 5.该方法是用来设置 CollectionViewCell 的大小 func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize &#123; return CGSizeMake(90, 120) &#125; // 6.该方法是用来设置 CollectionViewCell 四周的边距 func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAtIndex section: Int) -&gt; UIEdgeInsets &#123; return UIEdgeInsetsMake(20, 20, 20, 20) &#125; // 7.该方法是用来设置同一行 CollectionViewCell 之间的间距 func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAtIndex section: Int) -&gt; CGFloat &#123; return 20 &#125; // 8.该方法是用来设置同一列 CollectionViewCell 之间的间距 func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAtIndex section: Int) -&gt; CGFloat &#123; return 20 &#125; // 9.该方法是用来设置 CollectionView 的页头尺寸 func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -&gt; CGSize &#123; return CGSizeMake(100, 50) &#125; // 10.该方法是用来设置 CollectionView 的页尾尺寸 func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -&gt; CGSize &#123; return CGSizeMake(100, 50) &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UICollectionView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UICollectionView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UICollectionView-简介]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FUIKit%2FUICollectionView-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UICollectionView的常用属性 1.设置位置和大小 init(frame: CGRect, collectionViewLayout layout: UICollectionViewLayout) 2.设置子视图的布局方式 var collectionViewLayout: UICollectionViewLayout 3.设置UICollectionView的代理对象 unowned(unsafe) var delegate: UICollectionViewDelegate? 4.设置UICollectionView的数据源对象 unowned(unsafe) var dataSource: UICollectionViewDataSource? 5.设置UICollectionView的背景视图 var backgroundView: UIView? 6.设置 UICollectionView 的 Cell 是否可以点击 var allowsSelection: Bool 7.设置 UICollectionView 的 Cell 是否可以多选 var allowsMultipleSelection: Bool UICollectionViewCell显示的样式 struct UICollectionViewScrollPosition : RawOptionSetType &#123; init(_ rawValue: UInt) init(rawValue: UInt) // 1.没有样式 static var None: UICollectionViewScrollPosition &#123; get &#125; // 2.垂直居中显示 static var CenteredVertically: UICollectionViewScrollPosition &#123; get &#125; // 3.向下显示 static var Bottom: UICollectionViewScrollPosition &#123; get &#125; // 4.向左显示 static var Left: UICollectionViewScrollPosition &#123; get &#125; // 5.水平居中显示 static var CenteredHorizontally: UICollectionViewScrollPosition &#123; get &#125; // 6.向右显示 static var Right: UICollectionViewScrollPosition &#123; get &#125; &#125; UICollectionView常用的方法 1.设置UICollectionView的注册类, 以及标示符 func registerClass(cellClass: AnyClass?, forCellWithReuseIdentifier identifier: String) 2.设置 UICollectionView的注册Nib, 以及标示符 func registerNib(nib: UINib?, forCellWithReuseIdentifier identifier: String) 3.设置 UICollectionView 的注册类, 以及辅助视图名称, 标示符 func registerClass(viewClass: AnyClass?, forSupplementaryViewOfKind elementKind: String, withReuseIdentifier identifier: String) 4.设置 UICollectionView的注册Nib, 以及辅助视图名称, 标示符 func registerNib(nib: UINib?, forSupplementaryViewOfKind kind: String, withReuseIdentifier identifier: String) 5.设置 UICollectionView 可重用的 Cell 以及所以路径 func dequeueReusableCellWithReuseIdentifier(identifier: String, forIndexPath indexPath: NSIndexPath!) -&gt; AnyObject 6.设置 UICollectionView 可重用的的辅视图, 标示符, 以及索引路径 func dequeueReusableSupplementaryViewOfKind(elementKind: String, withReuseIdentifier identifier: String, forIndexPath indexPath: NSIndexPath!) -&gt; AnyObject 7.选择 Item 的索引路径 func indexPathsForSelectedItems() -&gt; [AnyObject] 8.选择 Item 的索引路径, 以及是否使用动画, 显示样式 func selectItemAtIndexPath(indexPath: NSIndexPath?, animated: Bool, scrollPosition: UICollectionViewScrollPosition) 9.取消选择 Item 的索引路径, 以及是否使用动画 func deselectItemAtIndexPath(indexPath: NSIndexPath?, animated: Bool) 10.刷新数据 func reloadData() 11.设置 UICollectionView 的集合视图布局, 及是否使用动画 func setCollectionViewLayout(layout: UICollectionViewLayout, animated: Bool) 12.设置 UICollectionView 的集合视图布局, 及是否使用动画, 以及完成之后的闭包方法 func setCollectionViewLayout(layout: UICollectionViewLayout, animated: Bool, completion: ((Bool) -&gt; Void)!) 13.设置 UICollectionView 显示多少个 Item func numberOfSections() -&gt; Int 14.设置 UICollectionView 显示多少组 Item func numberOfItemsInSection(section: Int) -&gt; Int 15.设置 UICollectionView 滚动到第几个 Item 的索引路径, 以及显示样式和是否启用动画 func scrollToItemAtIndexPath(indexPath: NSIndexPath, atScrollPosition scrollPosition: UICollectionViewScrollPosition, animated: Bool) 16.在 UICollectionView 中插入某个 Item func insertSections(sections: NSIndexSet) 17.在 UICollectionView 中删除某个 Item func deleteSections(sections: NSIndexSet) 18.在 UICollectionView 中刷新某个 Item func reloadSections(sections: NSIndexSet) 19.移动 UICollectionView 中某个 Item 到某个位置 func moveSection(section: Int, toSection newSection: Int) UICollectionView代理方法 1.点击 Item 时调用的方法 optional func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) 2.取消选中 Item 时调用的方法 optional func collectionView(collectionView: UICollectionView, didDeselectItemAtIndexPath indexPath: NSIndexPath) UICollectionView数据源方法 1.设置UICollectionView有多少个Item func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int 2.设置 UICollectionViewCell 所显示的内容, 以及索引路径 func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell 3.设置 UICollectionView 有多少组 Cell optional func numberOfSectionsInCollectionView(collectionView: UICollectionView) -&gt; Int UICollectionView的集视图布局方法 1.该方法是用来设置 UICollectionView 的 Item 尺寸大小 optional func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize 2.该方法是用来设置 UICollectionView 的 Item 四周的边界 optional func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAtIndex section: Int) -&gt; UIEdgeInsets 3.该方法是用来设置 UICollectionView 的 Item 上下之间的最小间距如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性 optional func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAtIndex section: Int) -&gt; CGFloat 4.该方法是用来设置 UICollectionView 的 Item 左右之间的最小间距(如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性) optional func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAtIndex section: Int) -&gt; CGFloat 5.该方法是用来设置 UICollectionView 的页头尺寸如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性) optional func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -&gt; CGSize 6.该方法是用来设置 UIcollectionView 的页尾尺寸(如果在自定义UICollectionView中实现了该属性, 那么该方法就会覆盖掉原来的属性) optional func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -&gt; CGSize]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UICollectionView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UICollectionView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Network-AFNetworking-网络请求]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FNetwork%2FSwift-Network-AFNetworking-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[创建数据请求类 import UIKit import AFNetworking //请求方法 /// - GET: get /// - POST: post enum RequsetMethod:String &#123; case GET = "GET" case POST = "POST" &#125; class SPFNetWorkManager: AFHTTPSessionManager &#123; //单例 static let sharedTools:SPFNetWorkManager = &#123; let instance = SPFNetWorkManager() instance.responseSerializer.acceptableContentTypes?.insert("text/html") instance.responseSerializer.acceptableContentTypes?.insert("text/plain") return instance &#125;() // 定义请求完成的回调的别名 typealias httptoolBack = (response:AnyObject?,error:NSError?)-&gt;() /// 请求数据 /// /// - parameter urlString: 请求地址 /// - parameter parameters: 请求参数 /// - parameter finished: 请求成功或者失败的回调 func request(method: RequsetMethod = .GET, urlString: String, parameters: AnyObject?, finished:httptoolBack)&#123; // 定义请求成功的闭包 let success = &#123; (dataTask: NSURLSessionDataTask, responseObject: AnyObject?) -&gt; Void in finished(response: responseObject, error: nil) &#125; // 定义请求失败的闭包 let failure = &#123; (dataTask: NSURLSessionDataTask?, error: NSError) -&gt; Void in finished(response: nil, error: error) &#125; if method == .GET &#123; GET(urlString, parameters: parameters, progress: nil, success: success, failure: failure) &#125;else&#123; POST(urlString, parameters: parameters, progress: nil, success: success, failure: failure) &#125; &#125; /// 发送请求(上传文件) func requestWithData(data: NSData, name: String, urlString: String, parameters: AnyObject?, finished:httptoolBack) &#123; // 定义请求成功的闭包 let success = &#123; (dataTask: NSURLSessionDataTask, responseObject: AnyObject?) -&gt; Void in finished(response: responseObject, error: nil) &#125; // 定义请求失败的闭包 let failure = &#123; (dataTask: NSURLSessionDataTask?, error: NSError) -&gt; Void in finished(response: nil, error: error) &#125; POST(urlString, parameters: parameters, constructingBodyWithBlock: &#123; (formData) -&gt; Void in formData.appendPartWithFileData(data, name: name, fileName: "aa", mimeType: "application/octet-stream") &#125;, progress: nil, success: success, failure: failure) &#125; &#125; 调用方法let urlString = "http://192.168.3.7:8080/FreshFun/homepage.do" //创建httpTool 实例 let HttpRequest = SPFNetWorkManager.sharedTools //发送GET请求 HttpRequest.request(RequsetMethod.GET, urlString: urlString, parameters:nil ) &#123; (response, error) in print(response) &#125; 数据Optional(&#123; goodsMoney = "22.00"; "goods_des" = "\U9999\U8549\U8089333"; "goods_img" = "/image/2016/9/8/1473340021432.png"; "goods_name" = BananaMeat; id = 4; marketMoney = "31.43"; &#125;）]]></content>
      <categories>
        <category>Swift</category>
        <category>Network</category>
        <category>AFNetworking</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Lib-SnapKit-自动布局]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FLib%2FSnapKit-%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[https://www.jianshu.com/p/2bad53a2a180]]></content>
      <categories>
        <category>Swift</category>
        <category>Lib</category>
        <category>SnapKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Lib-Kingfisher-图片加载库]]></title>
    <url>%2F2017%2F12%2F13%2FSwift%2FLib%2FKingfisher-%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/djh996064549/article/details/71085679]]></content>
      <categories>
        <category>Swift</category>
        <category>Lib</category>
        <category>Kingfisher</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Lib-SSKeychain-数据本地化方式之一]]></title>
    <url>%2F2017%2F12%2F13%2FOC%2FLib%2FOC-Lib-SSKeychain-%E6%95%B0%E6%8D%AE%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%96%B9%E5%BC%8F%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[keychain与userdefaults keychain 将数据加密后存储在本地,更安全.路径:Library/Application Support/iPhone Simulator/模拟器版本/Library/Keychains/ 当你删除APP后,keychain存储的数据不会删除 userdefaults 数据以明文的形式保存在.plist文件中.路径:Library/Application Support/iPhone Simulator/模拟器版本/Applications/应用对应的数字/Library/Preference/.plist文件 当你删除APP后,user defaults存储的数据会随着APP而删掉 流程 导入 pod &apos;SSKeychain&apos; 实现 #import &quot;ViewController.h&quot;#import &lt;SSKeychain.h&gt;#import &lt;SSKeychainQuery.h&gt;//应用名称(保证唯一性)#define ServiceName @&quot;com.zx.tec.SSKeychainTest&quot;//账号#define Account @&quot;test2&quot;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [superviewDidLoad]; /** * SSKeychain 是一种本地存储方式不会因为程序卸载而清除 用于存储私密 及唯一 的标示 * * 五个方法:(用到两个) * + (NSArray *)allAccounts; * + (NSArray *)accountsForService:(NSString *)serviceName; * + (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account; * + (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account; * + (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account; */ #pragma mark - 开始使用 SSKeychain //获取uuid(如果想获取唯一标示,存储以 uuid为密码存储 下次登陆直接读取检测是否安装) //CFUUIDRef uuid = CFUUIDCreate(NULL); //assert(uuid != NULL); //CFStringRef uuidStr = CFUUIDCreateString(NULL, uuid); // NSLog(@&quot;%@~~%@&quot;, uuidStr, [NSString stringWithFormat:@&quot;%@&quot;, uuidStr]); /** * + (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;//获取指定 serviceName和 account 的密码 * * + (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;//存储指定 serviceName和 account 的密码 * */ NSString *passWord = @&quot;123456&quot;; if (![SSKeychainpasswordForService:ServiceNameaccount:Account]) &#123;//查看本地是否存储指定 serviceName和 account 的密码 //如果没设置密码则设定密码 并存储 [SSKeychainsetPassword:passWord forService:ServiceNameaccount:Account]; //打印密码信息 NSString *retrieveuuid = [SSKeychainpasswordForService:ServiceNameaccount:Account]; NSLog(@&quot;SSKeychain存储显示:未安装过:%@&quot;, retrieveuuid); &#125;else&#123; //曾经安装过则直接能打印出密码信息(即使删除了程序再次安装也会打印密码信息) 区别于 NSUSerDefault NSString *retrieveuuid = [SSKeychainpasswordForService:ServiceNameaccount:Account]; NSLog(@&quot;SSKeychain存储显示 :已安装过:%@&quot;, retrieveuuid); &#125;#warning 区别于 NSUSerDefault (删除应用程序后存储的数据就会消失) if (![[NSUserDefaultsstandardUserDefaults]boolForKey:@&quot;TestOne&quot;]) &#123; [[NSUserDefaultsstandardUserDefaults]setBool:YESforKey:@&quot;TestOne&quot;]; NSLog(@&quot;NSUSerDefault存储显示:未安装&quot;); &#125;else&#123; NSLog(@&quot;NSUSerDefault存储显示:安装过&quot;); &#125;&#125;]]></content>
      <categories>
        <category>iOS</category>
        <category>Lib</category>
        <category>SSKeychain</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-Symbolicatecrash分析Crash文件]]></title>
    <url>%2F2017%2F12%2F12%2FOC%2FFunc%2FiOS-Func-Symbolicatecrash%E5%88%86%E6%9E%90crash%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[没有集成发送崩溃报告功能导出 所有崩溃记录都会记录在设备上，没有集成让用户发送崩溃报告功能的i，要获得crash文件就必须先连上崩溃过的机器 打开Xcode---&gt;选择Window -&gt; Devices，选择你自己的机器，然后点击View Device Logs，打开小窗口，这是机器上至目前为止存的所有app的崩溃信息了如果是好久没看过这个信息，打开后还要读取好久才能完全读完，总之，找到你的app最后一次崩溃记录，右键导出 导出来的.crash文件，上半部分都是一些基本信息（基本没用），重点看下崩溃部分的记录 找到你上次发布的ipa（如果实在没有了就再从Archives里导出来一个，但一定要保证是你上次发布用的那个），右键 -&gt; 打开方式 -&gt; 归档实用工具(就是解压缩)，然后把Payload文件夹下的.app文件也扔到刚刚的crash文件夹里接下来还需要dSYM文件，还是在Archives里，找到发布用的那个，右键Show in Finder 然后对文件夹中的这个.xcarchive文件右键，显示包内容，就可以看到一个名为dSYMs的文件夹，把里面的.dSYM文件拷出来，还是放到桌面的crash文件夹里 symbolicatecrash是一个隐藏工具 /Applications/Xcode8.1.app/Contents/SharedFrameworks/DTDeviceKitBase.framework/Versions/A/Resources/symbolicatecrash 终端中输入命令搜索： $ find /Applications/Xcode8.1.app -name symbolicatecrash -type f 这个路径拷贝一下，然后粘到Finder的“前往文件夹”下，前往，就可以看到symbolicatecrash工具了，现在把它也拷到桌面的crash文件夹里。至此，crash文件夹里现在有4个文件了，分别是.app, .crash, .dSYM, symbolicatecrash。接下来就是用终端敲命令，生成更易分析的crash 首先用cd命令进入到crash文件夹下，然后输入以下命令 $ ./symbolicatecrash /Users/xxxx/Desktop/crash/InOrder.crash /Users/xxxx/Desktop/crash/InOrder.app.dSYM &gt; Control_symbol.crash 上述命令中，”xxxx”和”InOrder”请自行替换成对应的名称。运行，这时候终端可能会报错Error: “DEVELOPER_DIR” is not defined at /usr/local/bin/symbolicatecrash line 53. 这时候在终端中再输入如下（Xcode6.1.app依然是要替换成实际名称） $ export DEVELOPER_DIR=&quot;/Applications/Xcode8.1.app/Contents/Developer&quot; 然后再跑一下刚刚的那个命令，这时候看一下桌面的crash文件夹下就会多出一个名为“Control_symbol.crash”的文件，这就是可定位问题的crash文件了，我们打开看一下 现在红框里原来的那些乱七八糟的东西已经“翻译”成了崩溃在具体的哪一个.m文件的哪一行。下面就是进行合理的猜想和调试了，比如我的崩溃就是因为这个第三方时间选择控件使用截取字符串的形式来获得时间，像09:23 PM就被固定的拆成了时、分、上下午标识3段，结果用户使用24小时制的时候，时间就成了21:23，没了上下午标识，array[2]超出下标妥妥的闪退。想想我脑洞也是蛮大的，这种问题原因都被猜到了]]></content>
      <categories>
        <category>iOS</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Func</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-AccessControl-open]]></title>
    <url>%2F2017%2F12%2F11%2FSwift%2FGrammar%2FAccessControl-open%2F</url>
    <content type="text"><![CDATA[open open弥补public语义上的不足 pubic 现在的pubic有两层含义： ①这个元素可以在其他作用域被访问 ②这个元素可以在其他作用域被继承或者override 继承问题继承 继承是一件危险的事情尤其对于一个framework或者module的设计者而言在自身的module内，类或者属性对于作者而言是清晰的，能否被继承或者override都是可控的,但是对于使用它的人，有时会希望传达出这个类或者属性不应该被继承或者修改,这个对应的就是 final final 问题在于在标记之后，在任何地方都不能override而对于lib的设计者而言，希望得到的是在module内可以被override在被import到其他地方后其他用户使用的时候不能被override 这就是open产生的初衷通过open和public标记区别一个元素在其他module中是只能被访问还是可以被override ##举例分析 ModuleA 这个类在ModuleA的范围外是不能被继承的，只能被访问 public class NonSubclassableParentClass &#123; public func foo() &#123;&#125; // 这是错误的写法，因为class已经不能被继承 // 所以他的方法的访问权限不能大于类的访问权限 open func bar() &#123;&#125; // final的含义保持不变 public final func baz() &#123;&#125;&#125; // 在ModuleA的范围外可以被继承open class SubclassableParentClass &#123; // 这个属性在ModuleA的范围外不能被override public var size : Int // 这个方法在ModuleA的范围外不能被override public func foo() &#123;&#125; // 这个方法在任何地方都可以被override open func bar() &#123;&#125; ///final的含义保持不变 public final func baz() &#123;&#125;&#125;/// final的含义保持不变public final class FinalClass &#123; &#125;/// ModuleB:import ModuleA// 这个写法是错误的，编译会失败// 因为NonSubclassableParentClass类访问权限标记的是public，只能被访问不能被继承class SubclassA : NonSubclassableParentClass &#123; &#125;// 这样写法可以通过，因为SubclassableParentClass访问权限为 `open`.class SubclassB : SubclassableParentClass &#123; // 这样写也会编译失败 // 因为这个方法在SubclassableParentClass 中的权限为public，不是`open'. override func foo() &#123; &#125; // 这个方法因为在SubclassableParentClass中标记为open，所以可以这样写 // 这里不需要再声明为open，因为这个类是internal的 override func bar() &#123; &#125;&#125;open class SubclassC : SubclassableParentClass &#123; // 这种写法会编译失败，因为这个类已经标记为open // 这个方法override是一个open的方法，则也需要表明访问权限 override func bar() &#123; &#125; &#125;open class SubclassD : SubclassableParentClass &#123; // 正确的写法，方法也需要标记为open open override func bar() &#123; &#125; &#125;open class SubclassE : SubclassableParentClass &#123; // 也可以显式的指出这个方法不能在被override public final override func bar() &#123; &#125; &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>AccessControl</tag>
        <tag>open</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-AccessControl-private/filePrivate访问控制-私有]]></title>
    <url>%2F2017%2F12%2F11%2FSwift%2FGrammar%2FAccessControl-private%3AfilePrivate%2F</url>
    <content type="text"><![CDATA[private 在原有的swift中的private 并非真正的私有一个变量定义为private，在同一个文件中的其他类依然是可以访问到的在使用extension的时候很明显 class User &#123; private var name = "private"&#125;extension User&#123; var accessPrivate: String &#123; return name &#125;&#125; 带来了两个问题： 标记为private时，意为真的私有还是文件内可共享 如果意图为真正的私有时，必须保证这个类或者结构体在一个单独的文件里。否则可能同文件里其他的代码访问到 fileprivate 在swift 3中，新增加 fileprivate 来显式的表明，这个元素的访问权限为 文件内私有 过去的private对应现在的fileprivate 现在的private则是真正的私有，离开了这个类或者结构体的作用域外面就无法访问]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>AccessControl</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>AccessControl</tag>
        <tag>fileprivate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-RequiredInit必要初始化器]]></title>
    <url>%2F2017%2F12%2F11%2FSwift%2FGrammar%2FRequiredInit%E5%BF%85%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8%2F</url>
    <content type="text"><![CDATA[必要初始化器 重写类的时候经常提示要添加代码 required init?(coder aDecoder: NSCoder) &#123; fatalError("init(coder:) has not been implemented") &#125; 必要初始化器，这种情况一般会出现在继承了遵守NSCoding protocol的类，比如UIView系列的类、UIViewController系列的类 为什么一定要添加 这是NSCoding protocol定义的，遵守了NSCoding protoaol的所有类必须继承只是有的情况会隐式继承，而有的情况下需要显示实现 什么情况下要显示添加： 当我们在子类定义了指定初始化器(包括自定义和重写父类指定初始化器)，那么必须显示实现required init?(coder aDecoder: NSCoder)，而其他情况下则会隐式继承，可不用理会。 什么情况下会调用： 当使用storyboard实现界面的时候，程序会调用这个初始化器。注意要去掉fatalError，fatalError的意思是无条件停止执行并打印。在obj-c中可以通过下面代码实现 NSException *exception = [NSException exceptionWithName:@"HotTeaException" reason:@"The tea is too hot" userInfo:nil]; @throw exception; 举例分析普通子类 通常情况下，一说到required修饰符，最先想到的应该就是普通类（class）的init()方法 class MyClass &#123; var str:String init(str:String) &#123; self.str = str &#125;&#125; 定义一个MyClass的子类（subclass）并实例化这个子类 在实例化MySubClass时，其实是继承了它父类MyClass的init()方法class MySubClass:MyClass &#123; &#125;var MySubClass(str:"Hello Swift") 子类的初始化方法 子类中添加一个init()方法在init()方法前加上override修饰符，表示MySubClass重写了其父类的init()方法，然后还要调用父类的init()方法，并将参数一并传给父类的方法 class MySubClass:MyClass &#123; override init(str:String) &#123; super.init(str:str) &#125; &#125;var MySubClass(str:"Hello Swift" 当子类的初始化方法参数类型与父类的初始化方法参数类型不同时，我们就不必在子类的初始化方法前加override修饰符了，但是要把子类初始化方法的参数类型转换为符合父类初始化方法的参数类型，然后传给父类的初始化方法 lass MyClass &#123; var str:String init(str:String) &#123; self.str = str &#125;&#125;class MySubClass:MyClass&#123; init(i:Int) &#123; super.init(str:String(i)) &#125;&#125;MySubClass(i: 10) 给父类的init()方法加上required修饰符class MyClass &#123; var str:String required init(str:String) &#123; self.str = str &#125;&#125;class MySubClass:MyClass&#123; init(i:Int) &#123; super.init(str:String(i)) &#125; // 编译错误&#125;MySubClass(i: 10) 因为我们没有实现父类中要去必须要实现的方法 class MyClass &#123; var str:String required init(str:String) &#123; self.str = str &#125;&#125;class MySubClass:MyClass&#123; required init(str:String) &#123; super.init(str: str) &#125; init(i:Int) &#123; super.init(str:String(i)) &#125; &#125;MySubClass(i: 10) 子类需要添加异于父类的初始化方法时，必须先要实现父类中使用required修饰符修饰过的初始化方法，并且也要使用required修饰符而不是override如果子类中不需要添加任何初始化方法，我们则可以忽略父类的required初始化方法： class MyClass &#123; var str:String required init(str:String) &#123; self.str = str &#125;&#125;class MySubClass:MyClass&#123; //编译器不会报错，因为如果子类没有任何初始化方法时，Swift会默认使用父类的初始化方法You do not have to provide an explicit implementation of a required initializer if you can satisfy the requirement with an inherited initialiser.&#125;MySubClass(str: "hello swift") required修饰符的使用规则 required修饰符只能用于修饰类初始化方法 当子类含有异于父类的初始化方法时（初始化方法参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override 当子类没有初始化方法时，可以不用实现父类的required初始化方法 总结： 如果代码实现界面，那么我们只要根据编译器提示添加必要初始化器后，就不用理会，我们创建界面的工作可以在自定义的初始化器里实现。 补充：let vc = UIViewController()方式初始化类UIViewController类视乎只有两个初始化器，一个是必要初始化器init?(coder aDecoder: NSCoder)，一个是指定初始化器init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?)，那么为什么我们可以用let vc = UIViewController()这种方式初始化类呢？原因可能是这个初始化方式是来自uikit,也就是调用了Object-c下的UIViewController初始化方法，是object-c bridge过来的]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>RequiredInit</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>RequiredInit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-4.0更新]]></title>
    <url>%2F2017%2F12%2F11%2FSwift%2FGrammar%2F4-0%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[用系统方法setValuesForKeys()赋值问题 (swift4) 在swift3中，编译器自动推断@objc，换句话说，它自动添加@objc在swift4中，编译器不再自动推断，你必须显式添加@objc @objc var content = ""swift 4.0 版本要在前面加@objc 还有一种更简单的方法，不必一个一个属性的添加,下面这种写法 @objcMembersclass Test &#123;&#125; setValuesForKeys()奔溃(swift4) @objc解决了单个属性的问题，一个属性的值是数组字典，用setValuesForKeys() 程序奔溃，xcode9.0.1提示如下 [__NSCFConstantString count]: unrecognized selector sent to instance 0x102cb3290 造成崩溃是因为该字段如果为空 用了空串来占位，造成数据类型不一致而崩溃。这个在swift3中没有问题]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>Swift4.0</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>Swift4.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Guard-关键字/守护]]></title>
    <url>%2F2017%2F12%2F11%2FSwift%2FGrammar%2F%E5%85%B3%E9%94%AE%E5%AD%97-Guard-%E5%AE%88%E6%8A%A4%2F</url>
    <content type="text"><![CDATA[guard语句 guard语句判断其后的表达式布尔值为false时，才会执行之后代码块里的代码，如果为true，则跳过整个guard语句guard语句只会有一个代码块，if语句可以if else多个代码块类似 OC里的Continue func checkup(person: [String: String!]) &#123; // 检查身份证，如果身份证没带，则不能进入考场 guard let id = person["id"] else &#123; print("没有身份证，不能进入考场!") return &#125; // 检查准考证，如果准考证没带，则不能进入考场 guard let examNumber = person["examNumber"] else &#123; print("没有准考证，不能进入考场!") return &#125; // 身份证和准考证齐全，方可进入考场 print("您的身份证号为:\(id)，准考证号为:\(examNumber)。请进入考场!") &#125; checkup(["id": "123456"]) // 没有准考证，不能进入考场!checkup(["examNumber": "654321"]) // 没有身份证，不能进入考场!checkup(["id": "123456", "examNumber": "654321"]) // 您的身份证号为:123456，准考证号为:654321。请进入考场! 上述代码中的第一个guard语句用于检查身份证，如果检查到身份证没带，也就是表达式为false时，执行大括号里的代码，并返回。第二个guard语句则检查准考证。如果两证齐全，则执行最后一个打印语句，上面的两个guard语句大括号内的代码都不会执行，因为他们表达式的布尔值都是true。这里值得注意的是，id和examNumber可以在guard语句之外使用，也就是说当guard对其表达式进行验证后，id和examNumber可在整个方法的作用域中使用，并且是解包后的 if else语句 用if else实现的方法显然不如guard实现的那么精准。而且id和examNumber的作用域只限在if的第一个大括号内，超出这个作用域编译就会报错 func checkupUseIf(person: [String: String!]) &#123; if let id = person["id"], let examNumber = person["examNumber"] &#123; print("您的身份证号为:\(id)，准考证号为:\(examNumber)。请进入考场！") &#125; else &#123; print("证件不齐全，不能进入考场!") &#125; print("您的身份证号为:\(id)，准考证号为:\(examNumber)") // 报异常 &#125; checkupUseIf(["id": "123456"]) // 证件不齐全，不能进入考场!checkupUseIf(["examNumber": "654321"]) // 证件不齐全，不能进入考场!checkupUseIf(["id": "123456", "examNumber": "654321"]) // 您的身份证号为:123456，准考证号为:654321。请进入考场!]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>Guard</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>Guard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Inheritance-类继承]]></title>
    <url>%2F2017%2F12%2F10%2FSwift%2FGrammar%2FInheritance-%E7%B1%BB%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[Inheritance-类继承-简介 继承性是面向语言特征之一swift的类继承只能发生生在类上，不能发生在枚举和结构体上swift中一个类可以继承另一个类的方法、属性、下标等特征子类 父类（超类）子类继承父类后，可重写父类的方法、属性、下标等单继承，但可遵从多个协议，多重继承可以通过遵从多个协议实现 案例 场景：面向对象的程序员岳克奎，在编程过程中需要描述和处理个人信息定义类Person class Person&#123; var name:String var age :Int func desription()-&gt;String&#123; return "\(name)年龄是：\(age)岁" &#125; init() &#123; name = "" age = 1 &#125; &#125; 场景：1天后岳克奎遇到新需求，需描述和处理学生的信息，于是定义了一个新的类Student class Student&#123; var name:String var age :Int var school: String func desription() -&gt; String &#123; return "\(name)年龄是：\(age)岁" &#125; init() &#123; name = "" age = 1 school = "" &#125;&#125; 继承方式写 class Student:Person&#123; var school: String //子类新增 override init() &#123; //重写父类 构造函数 school = "" // 注意 school 和 super.init() 顺序 super.init() name = "" age = 6 &#125; &#125; 构造函数的调用规则修改上面案例//Person class Person&#123; var name:String var age :Int func desription()-&gt;String&#123; return "\(name)年龄是：\(age)岁" &#125; convenience init () &#123; // ① 便利构造函数 self.init (name: "岳克奎") self.age = 99 &#125; convenience init (name: String) &#123; // ② 便利构造函数 self.init(name:name,age:18) &#125; init(name: String,age: Int) &#123; // ③ 指定构造函数 self.name = name self.age = age &#125; &#125; class Student:Person&#123; var school: String init(name: String, age: Int,school: String ) &#123; // ④ 指定构造函数 self.school = school super.init(name: name, age: age) &#125; convenience override init(name: String, age: Int) &#123; // ⑤ 便利构造函数 self.init (name: name, age: age, school: "许昌学院") &#125; &#125; let oneStudent = Student() print("学生： \(oneStudent.desription())")//学生： 岳克奎年龄是：99岁 构造函数之间的调用形成构造函数链 swift限制构造函数之间代理调用规则3条： 1.指定构造函数必须调用其直接父类的指定构造函数 Student中的 ④ 指定函数调用Person中③ 指定构造函数 2.便利构造函数必须调用同一类中定义的其他构造函数 Student 中的 ⑤ 便利构造函数 调用 同一类中 ④号构造函数，Person中的 ① 便利构造函数调用同一类中的 ② 便利构造函数，Person中的 ② 便利构造函数 调用同一类中的 ③ 指定构造函数 3.便利构造函数必须最终以调用一个指定构造函数结束 Student 中的 ⑤ 便利构造函数 调用 同一类中 ④号构造函数， Person中的 ② 便利构造函数 调用同一类中的 ③ 指定构造函数 构造过程安全检查类的构造的两个阶段 分析图：书Page 200页 1.分配内存 ---&gt;初始化子类存储属性---&gt;沿构造函数链向上初始父类存储属性 到达构造函数链顶部，出书画全部的父类存储属性2.修改属性 ---&gt; 调用方法]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>Inheritance</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>Inheritance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Character字符]]></title>
    <url>%2F2017%2F12%2F08%2FSwift%2FGrammar%2FCharacter%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[字符 swift 采用Unicode编码 一个字符可以用字符本身，也可以用Unicode编码 Unicode编码 C 和 OC等，字符放在(‘)之间的 Swift （””）双引号 Unicode编码可以有 单、双、四字节编码表现形式 \u{} n为1-8个16尽职数 let andSign1:Character = "&amp;" //用字符本print(andSign1) // &amp;let andSign2:Character = "\u&#123;26&#125;" //用Unicode编码print(andSign2) // &amp; Swift字符类型是Character。声明let/var如果省略Character类型声明,自动推段是字符串，”&amp;”默认是字符串类型 转义符 字符表示 Uicode编码 说明 \t \u{0009} 水平制表符tab \n \u{000a} 换行 \r \u{000d} 回车 \” \u{0022} 双引号 \’ \u{0027} 单引号 \ \u{005c} 反斜线 //转义符 let specialCharTab1 = "Yue\tKekui" print("specialCharTab1:\(specialCharTab1)")]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Lazy-懒加载]]></title>
    <url>%2F2017%2F12%2F08%2FSwift%2FGrammar%2FLazy-%E6%87%92%E5%8A%A0%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[惰性初始化 懒加载本质上是一个 闭包懒加载会在第一次访问的时候执行, 闭包执行结束后, 会把结果保存在 属性 中后续调用, 直接返回 属性 的内容懒加载的属性会分配空间, 存储值只要调用过一次, 懒加载后面的闭包再也不会执行了延迟加载, 减少内存的消耗,初始化并且分配空间, 会提前创建可以解除解包的烦恼被设置为 nil, 懒加载也不会再次执行懒加载的代码只会在第一次调用的时候, 执行闭包, 然后将闭包的结果保存在 的属性中Swift中，有两种方式来惰性初始化 class DemoLabel: UILabel &#123; //模型 ---&gt; 给视图设置模型, 由视图自己根据模型的数据显示内容 var person: Student? &#123; // 就是替代 OC 中重写 setter 方法 , 区别: 再也不需要考虑 _成员变量 = 值, OC 中如果是 copy 属性, 应该 _成员变量 = [值 copy] didSet&#123; // 此时 name 属性已经有值, 可以直接使用设置 UI 内容 text = person?.name &#125; &#125;&#125;class ViewController: UIViewController &#123; var label: DemoLabel? /* &#123;&#125; 包装代码 () 执行代码 日常开发: 1. 闭包中的智能提示不好 2. 闭包中如果出现 self. 还需要注意循环引用 */ lazy var label2 = &#123; () -&gt; DemoLabel in let l = DemoLabel() // 设置 Label 的属性... return l &#125;() // 注意: 一旦 label 被设置为 nil, 懒加载也不会再次执行 // 懒加载的代码只会在第一次调用的时候, 执行闭包, 然后将闭包的结果保存在 label 的属性中 private lazy var label3: UILabel? = UILabel() override func viewDidLoad() &#123; super.viewDidLoad() // 设置 UI setupUI() label3?.text = "hello" label3?.sizeToFit() print(label3 as Any) label3 = nil print(label3 as Any) &#125; private func setupUI() &#123; // 1. swvf控件 label = DemoLabel() // ! 解包, 为了参与计算, addSubView 用 subViews 数组记录控件, 数组中不允许加入 nil // ? 可选解包, 调用方法, 如果为 nil, 不调用方法, 但是不能参与计算 view.addSubview(label!) label?.text = "hello" label?.sizeToFit() label?.center = view.center &#125; override func didReceiveMemoryWarning() &#123; // Swift 中一定注意不要主动清理视图或者控件// 因为懒加载不会再次创建 &#125;&#125; 简单表达式lazy var first = NSArray(objects: "1","2") ##闭包 不要忘记最后的小括号，只有加了小括号，必包才会在掉用的时候立刻执行要类型声明lazy var second:String，这样Xcode会进行类型检 lazy var second:String = &#123; return "second" &#125;() //&#123;&#125; 包装代码 () 执行代码 惰性初始化的使用场景①属性本身依赖于外部因素才能初始化 completeURL表示完整的URL，这个变量依赖于自身的url是否含有http://前缀 class Demo&#123; var url:NSString lazy var completeURL:NSString = &#123; [unowned self] in if self.url.hasPrefix("http://")&#123; return self.url &#125;else&#123; return "http://".stringByAppendingString(self.url) &#125; &#125;() init(url:NSString)&#123; self.url = url &#125;&#125; ②属性需要复杂计算，消耗大量CPUlazy var second:Int = &#123; var sum = 0 for i in 1...100000&#123; sum += i &#125; return sum &#125;() ③属性不确定是否会使用到 官网的例子，注意，对于Manager来说，使用的时候，可能导入，也可能不倒入数据。从硬盘读取数据的代价是很大的，不导入数据的时候，不要初始化 class DataImporter &#123; /* DataImporter is a class to import data from an external file. The class is assumed to take a non-trivial amount of time to initialize. */ var fileName = "data.txt" // the DataImporter class would provide data importing functionality here&#125;class DataManager &#123; lazy var importer = DataImporter() var data = [String]() // the DataManager class would provide data management functionality here&#125;let manager = DataManager()manager.data.append("Some data")manager.data.append("Some more data") ④定制化的初始化 有些初始化只需要初始化一次，在变量定义的地方初始化，有助于代码维护 lazy var dataArray:NSMutableArray = &#123; var array = NSMutableArray() for i in 1...100&#123; array.addObject(NSNumber(integer: i)) &#125; return array &#125;()]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>Lazy</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>Lazy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Override重写]]></title>
    <url>%2F2017%2F12%2F08%2FSwift%2FGrammar%2FOverride-%E9%87%8D%E5%86%99%2F</url>
    <content type="text"><![CDATA[定义一个类 定义可继承的基础类nameStr： 人名abilityInt ： 能力值 class People&#123; var nameStr: String var abilityInt: Int func des() -&gt; String &#123; return "\(nameStr)的能力值\(abilityInt)" &#125; init() &#123; nameStr = "YueKekui" abilityInt = 0 &#125;&#125; 重写父类方法重写init initnationalityStr:新加国籍 class ChinesePeople:People&#123; var nationalityStr = "中国🇨🇳" override init() &#123; super.init() nameStr = "ChenJian" abilityInt = 666 //self.nameStr = "LuGaygay" //self.abilityInt = 8888 //继承了父类的属性，因此nameStr、 self.nameStr的属性 &#125; override func des()-&gt;String&#123; return super.des() + "他是\(nationalityStr)人" &#125;&#125; 打印let onePeople = ChinesePeople.init()print( onePeople.des()) // ChenJian的能力值666他是中国🇨🇳人 重写属性 子类并不知道继承来的属性是储值型还是算值型，它只知道继承来的属性有一个名字和类型，所以在重写属性时必须把它的名字和类型都写出来储值属性可以重写为算值属性只读可以重写为读写；读写不能重写为只读不想重写getter，可以直接返回super.Someproperty Get/Setclass AmericanPeople: ChinesePeople &#123; // override var nationalityStr = "美国🇺🇸"////重写了父类的属性nationalityStr，因此self和super的nationalityStr是两个不同的属性 override var nationalityStr:String &#123; get &#123; return super.nationalityStr &#125; set &#123; super.nationalityStr = "美国🇺🇸" &#125; &#125;&#125; 打印let secondPeople = AmericanPeople.init() secondPeople.nationalityStr = "注意重写set get的返回" print(secondPeople.des()) // ChenJian的能力值666他是美国🇺🇸人 重写属性观察器 可以为继承来的变量储值属性添加属性观察器可以值重写didSet或willSet didSetclass AustraliansPeople: People &#123; var richInt = 1 override var abilityInt: Int&#123; didSet&#123; richInt = Int(abilityInt*2)+2; &#125; &#125; //重写打印方法 override func des() -&gt; String &#123; return super.des()+"财富指标\(richInt)" &#125;&#125; 打印let thirdPeople = AustraliansPeople.init() thirdPeople.abilityInt = 5 print(thirdPeople.des()) //YueKekui的能力值5财富指标12 防止重写 通过把方法、属性或下标标记为final来防止它们被重写在扩展中，添加到类里的方法、属性或下标也可以在扩展的定义里标记为final可以在class前添加final来将整个定义为不能重写，这样的类是不可继承的]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITableView]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FUITableView%2F</url>
    <content type="text"><![CDATA[UITableView声明tableView:UITableView变量var kSize=UIScreen.main.bounds;var _tableView:UITableView! //tableViewvar data :[(String,String)] = [("寥寥","有点绿"),("卢Gaygay","有点Gay"),("222","2---2"),("333","3--3")] //数据源 声明tableView的数据源的代理协议class ViewController: UIViewController,UITableViewDataSource,UITableViewDelegate &#123; MARK: 设置tableViewfunc makeTableView() &#123; _tableView = UITableView.init(frame: CGRect(x: 0.0, y: 64, width: kSize.width, height: kSize.height-64), style:.plain) self.view.addSubview(_tableView); // 添加tableView _tableView.dataSource = self; _tableView.delegate = self; _tableView.showsVerticalScrollIndicator = false _tableView.showsHorizontalScrollIndicator = false _tableView.tableFooterView = UIView() //tableFooter&#125; MARK: 实现tableView.dataSource协议中方法MARK: 行func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; return data.count;&#125; MARK: Cellfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123; var cell = tableView.dequeueReusableCell(withIdentifier: "陈建") if cell == nil &#123; cell = UITableViewCell(style:UITableViewCellStyle.default,reuseIdentifier:"陈建") &#125; let btn:UIButton = UIButton.init(type:UIButtonType.custom) btn.frame = CGRect(x:UIScreen.main.bounds.width - 100, y:10, width:80, height:50) btn.backgroundColor = UIColor.red; btn.setTitle("btn标题", for: UIControlState.normal) btn.setTitleColor(UIColor.blue, for: UIControlState.normal) btn.tag = indexPath.row btn.addTarget(self, action:#selector(clickBtnAction), for: .touchUpInside) cell?.textLabel?.text = data[indexPath.row].0; cell?.contentView.addSubview(btn); cell?.accessoryType=UITableViewCellAccessoryType.disclosureIndicator return cell!&#125; MARK: cell- 高度func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat &#123; return 66;&#125; 头部高度func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat &#123; return 0.01&#125; 底部高度func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -&gt; CGFloat &#123; return 0.01&#125; 选中cell时触发public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)&#123; print("indexPath.row = SelectRow 第\(indexPath.row)行")&#125; 取消选中cell时public func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath)&#123; print("indexPath.row = DeselectRow 第\(indexPath.row)行")&#125; 允许编辑cellfunc tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -&gt; Bool &#123; return true&#125; 右滑触发删除按钮func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -&gt; UITableViewCellEditingStyle &#123; return UITableViewCellEditingStyle.init(rawValue: 1)!&#125; 点击删除cell时触发func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) &#123; print("indexPath.row = editingStyle第\(indexPath.row)行")&#125; 点击btn的方法 func clickBtnAction (sender:UIButton)&#123; print("点击了 btn") &#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITableView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITableView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-Error-AFN]]></title>
    <url>%2F2017%2F12%2F07%2FOC%2FCode%2FOC-Code-Error-AFN%2F</url>
    <content type="text"><![CDATA[不接受返回类型 解决方案： AFURLResponseSerialization.m中，228行左右把 这句： self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;, nil];修改为：self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;,@&quot;text/html&quot;, nil];在进行网络请求时出现-1016 是因为只支持text/json，application/json，text/javascript 3840错误 Error Domain=NSCocoaErrorDomain Code=3840 &quot;Invalid value around character 64.&quot; UserInfo=&#123;NSDebugDescription=Invalid value around character 64.&#125;服务器没有返回json数据]]></content>
      <categories>
        <category>OC</category>
        <category>Error</category>
        <category>AFN</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Error</tag>
        <tag>AFN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-网络状况侦测]]></title>
    <url>%2F2017%2F12%2F07%2FOC%2FFunc%2FiOS-Func-%E7%BD%91%E7%BB%9C%E7%8A%B6%E5%86%B5%E4%BE%A6%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[官方示例程序 将Reachability.h 和 Reachability.m 加到自己的项目中并引用 SystemConfiguration.framework 网络的几种状态// the network state of the device for Reachability 2.0.typedef enum &#123; NotReachable = 0, //无连接 ReachableViaWiFi, //使用3G/GPRS网络 ReachableViaWWAN //使用WiFi网络&#125; NetworkStatus; 运用 #import "ViewController.h"#import "Reachability.h"@interface ViewController ()@property (nonatomic, strong) UIAlertController *alertVC;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib. // 创建网络探测对象 Reachability *reach = [Reachability reachabilityWithHostName:@"www.baidu.com"]; // 想通知中心注册通知 [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(networkChange:) name:kReachabilityChangedNotification object:nil]; // 开启通知监控 [reach startNotifier]; &#125;// 网络状况发生改变后，执行该方法- (void)networkChange:(NSNotification *)noti &#123; self.alertVC = [UIAlertController alertControllerWithTitle:@"网络提示" message:@"当前网络状况有变更" preferredStyle:UIAlertControllerStyleAlert]; UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; [_alertVC dismissViewControllerAnimated:YES completion:nil]; &#125;]; [_alertVC addAction:action1]; Reachability * reach = [noti object]; // 判断当前网络是否可达，可达则继续后边的判断：通过哪种途径到达，不可达，直接返回，不再执行后边的代码 if ([reach isReachable]) &#123; NSLog(@"网络可达"); &#125; else &#123; NSLog(@"网络有故障"); _alertVC.message = @"当前网络有故障"; [self presentViewController:_alertVC animated:YES completion:nil]; return; &#125; if ([reach isReachableViaWiFi]) &#123; NSLog(@"通过WIFI到达"); _alertVC.message = @"当前网络是无线网,为您加载高清资源"; [self presentViewController:_alertVC animated:YES completion:nil]; &#125; else if ([reach isReachableViaWWAN]) &#123; NSLog(@"通过基站到达"); _alertVC.message = @"当前网络是流量，正在为您节省流量"; [self presentViewController:_alertVC animated:YES completion:nil]; &#125; else &#123; NSLog(@"通过其他到达"); _alertVC.message = @"当前使用未知网络"; [self presentViewController:_alertVC animated:YES completion:nil]; &#125;&#125;- (void)didReceiveMemoryWarning &#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIWebView/WKWebView]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FSwift-UIKit-UIWebView-WKWebView%2F</url>
    <content type="text"><![CDATA[UIWebView UIWebView功能强大，除了能够显示页面之外，还能显示HTML语言，CSS，PPT，Word等等，其用法也简单 创建let webView = UIWebView.init(frame:self.view.frame) ##添加self.view.addSubview(webView) 加载网页webView.loadRequest(NSURLRequest(url:NSURL.init(string:"http://www.jianshu.com/u/1acf2b5a2f69") as! URL) as URLRequest) 脚本注入let jsPath = NSBundle.mainBundle().pathForResource("app", ofType: "js") 获取到脚本中的内容var jsString :String = try! String(contentsOfFile: jsPath!, encoding: 4)//将获得的文本内容后面的\n替换为空的字符串jsString = jsString.stringByReplacingOccurrencesOfString("\n", withString: "") 触发脚本webView.stringByEvaluatingJavaScriptFromString(jsString as String) webView.scalesPageToFit 有点时候我们加载的网页页面比较大的话 是无法的完全显示在webView上，这个时候我们需要调节webView的scalesPageToFit属性来实现页面适应webView区域的效果 webView.scalesPageToFit = true dataDetectorTypes 我们可以通过设置webView的dataDetectorTypes属性来识别出网页上的电话号码，超链接，邮箱等一些特殊信息，在我们对其进行相关操作的时候可以出发关联事件 webView.dataDetectorTypes = .address//dataDetectorTypes包含以下类型：public struct UIDataDetectorTypes : OptionSet &#123; public init(rawValue: UInt) public static var phoneNumber: UIDataDetectorTypes &#123; get &#125; // Phone number detection public static var link: UIDataDetectorTypes &#123; get &#125; // URL detection @available(iOS 4.0, *) public static var address: UIDataDetectorTypes &#123; get &#125; // Street address detection @available(iOS 4.0, *) public static var calendarEvent: UIDataDetectorTypes &#123; get &#125; // Event detection @available(iOS 10.0, *) public static var shipmentTrackingNumber: UIDataDetectorTypes &#123; get &#125; // Shipment tracking number detection @available(iOS 10.0, *) public static var flightNumber: UIDataDetectorTypes &#123; get &#125; // Flight number detection @available(iOS 10.0, *) public static var lookupSuggestion: UIDataDetectorTypes &#123; get &#125; // Information users may want to look up public static var all: UIDataDetectorTypes &#123; get &#125; // Enable all types, including types that may be added later&#125; UIWebView在加载网页的时候有一些对应的状态，我们可以进行检测：首先实现其代理：UIWebViewDelegate然后设置其代理对象： webView.delegate = self; 实现代理方法： public protocol UIWebViewDelegate : NSObjectProtocol &#123;//链接地址发生改变的时候调用 @available(iOS 2.0, *) optional public func webView(_ webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType) -&gt; Bool//开始加载 @available(iOS 2.0, *) optional public func webViewDidStartLoad(_ webView: UIWebView)//完成加载 @available(iOS 2.0, *) optional public func webViewDidFinishLoad(_ webView: UIWebView)//加载失败 @available(iOS 2.0, *) optional public func webView(_ webView: UIWebView, didFailLoadWithError error: Error)&#125; 可以对webView加载状态进行控制，比如：停止加载，继续加载等，其设置方法为： //重新加载- (void)reload;//停止加载- (void)stopLoading;//返回- (void)goBack;//前往- (void)goForward; 以下是UIWebView对于HTML语言，本地文件等信息的加载： //加载HTML文本- (void)loadHTMLString:(NSString *)string baseURL:(nullable NSURL *)baseURL;//加载Data类型- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL;//实现与JS的交互- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script; WKWebView 使用方法 //创建let wkWebView = WKWebView()//设置位置和大小wkWebView.frame = self.view.frame;//创建的时候就设置位置和大小/* public init(frame: CGRect, configuration: WKWebViewConfiguration)*/let webview = WKWebView(frame: CGRectMake(0, 0, self.view.frame.width, self.view.frame.height))//添加self.view.addSubview(wkWebView)//请求/* open func load(_ request: URLRequest) -&gt; WKNavigation?*/wkWebView.load(NSURLRequest(url: NSURL(string:"http://www.baidu.com") as! URL) as URLRequest) WKWebView的代理方法：WKNavigationDelegate通过WKNavigationDelegate提供的代理方法，我们可以追踪WKWebView加载的过程 /页面开始加载时调用 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)// 页面加载失败时调用 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)// 当内容开始返回时调用 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!)// 页面加载完成之后调用 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) 页面跳转的代理方法有三种，分为（收到跳转与决定是否跳转两种） // 接收到服务器跳转请求之后调用 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!)// 在发送请求之前，决定是否跳转 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Swift.Void)// 在收到响应后，决定是否跳转 @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping (WKNavigationResponsePolicy) -&gt; Swift.Void)//web内容视图被终止的时候触发 @available(iOS 9.0, *) optional public func webViewWebContentProcessDidTerminate(_ webView: WKWebView) WKUIDelegate / 创建一个新的WebView @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, createWebViewWith configuration: WKWebViewConfiguration, for navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures) -&gt; WKWebView? web界面的三种提示框（警告框、确认框、输入框）分别对应三种代理方法 /** * web界面中有弹出警告框时调用 * @param webView 实现该代理的webview * @param message 警告框中的内容 * @param frame 主窗口 * @param completionHandler 警告框消失调用 */ @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping () -&gt; Swift.Void)/** * web界面中有弹出确认框时调用 * @param webView 实现该代理的webview * @param message 确认框中的内容 * @param frame 主窗口 * @param completionHandler 确认框消失调用 */ @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, runJavaScriptConfirmPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping (Bool) -&gt; Swift.Void)/** * web界面中有弹出输入框时调用 * @param webView 实现该代理的webview * @param message 输入框中的内容 * @param frame 主窗口 * @param completionHandler 输入框消失调用 */ @available(iOS 8.0, *) optional public func webView(_ webView: WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: String, defaultText: String?, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping (String?) -&gt; Swift.Void) WKScriptMessageHandler @available(iOS 8.0, *) public func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) 这个方法是WKscriptMessageHandler协议中必须实现的方法，是提高App与web端交互的关键，它可以直接将接收到的JS脚本转为OC或Swift对象获取网页标题需要遵守WKNavigationDelegate协议并设置：webview.navigationDelegate = self网页加载完的时候我们能获取网页的标题，所以这个步骤应该写在网页状态加载完成的方法里面： func webView(webView: WKWebView, didFinishNavigation navigation: WKNavigation!) &#123; //print(self.webview.title) &#125; 获取当前网页的url func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction:WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt;Void) &#123; var urlString:NSString! = navigationAction.request.URL?.absoluteStringdecisionHandler(WKNavigationActionPolicy.Allow)//一定要加上这一句代码不然会出异常 &#125; 前进，后退，停止。。。WKWebView想UIWebView一样，可以获取一些状态，以及进行对应操作 open func reload()//重新加载open func stopLoading()//停止加载 open func goBack()//返回open func goForward()//前进 //能不能后退 前往 加载open var canGoBack: Bool &#123; get &#125;open var canGoForward: Bool &#123; get &#125;open var isLoading: Bool &#123; get &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIWebView/WKWebView</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIImageView]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FUIImageView%2F</url>
    <content type="text"><![CDATA[UIImageView创建的时候直接设置图片let imageView = UIImageView(image:UIImage(named:"girl")) 先创建出对象再设置图片let imageView1 = UIImageView()imageView1.image = UIImage(named:"girl") 图片获取 从文件目录中获取图片 let path = Bundle.main.path(forResource:"girl", ofType: "png")let newImage = UIImage(contentsOfFile: path!) 网络地址获取图片 let url = URL(string:"http://image.cnpp.cn/upload/images/20160905/09380421552_400x300.jpg")let data = try! Data(contentsOf: url!)let smallImage = UIImage(data: data)//imageView1.image = smallImagelet imageView1 = UIImageView(image:smallImage) 图片显示填充样式imageView1.contentMode = UIViewContentMode.scaleAspectFit 对于UIImageView的图片填充样式有多种public enum UIViewContentMode : Int &#123;case scaleToFillcase scaleAspectFit // contents scaled to fit with fixed aspect. remainder is transparentcase scaleAspectFill // contents scaled to fill with fixed aspect. some portion of content may be clipped.case redraw // redraw on bounds change (calls -setNeedsDisplay)case center // contents remain same size. positioned adjusted.case topcase bottomcase leftcase rightcase topLeftcase topRightcase bottomLeftcase bottomRight&#125; 分组图片轮展 UIImageView中有设置多张图片一块展示的功能，类似于幻灯片的自动播放。其实现过程如下： //设置图片数组imageView1.animationImages = [UIImage(named:"2")!,UIImage(named:"3")!]//所有图片展示完一遍的总时长imageView1.animationDuration = 2//开始imageView1.startAnimating()//结束imageView1.stopAnimating() 添加点击事件 UIImageView和UILabel类似，其用户交互默认关闭，我们要给其添加点击事件，需要打开其用户交互 imageView1.isUserInteractionEnabled = truelet tapGestureRecognizer = UITapGestureRecognizer(target: self, action:#selector(ViewController.tapGestureRecognizer(sender:)))imageView1.addGestureRecognizer(tapGestureRecognizer)func tapGestureRecognizer(sender:UITapGestureRecognizer) &#123; //code&#125; 属性设置 //边框设置imageView.layer.borderColor = UIColor.redColor().CGColorimageView.layer.borderWidth = 2//圆角的设置imageView.layer.cornerRadius = 150imageView.layer.masksToBounds = trueUIImageView继承UIView，很多常见的属性在此就不列举。。]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIImageView</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIImageView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISegmentedControl-分段选择控件]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FUISegmentedControl-%E5%88%86%E6%AE%B5%E9%80%89%E6%8B%A9%E6%8E%A7%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[UISegmentedControl 继承自UIControl 分段选项显示###初始化数据源 let items = ["见哥1","见哥2",UIImage(named:"1")!] as [Any] 初始化对象let segmentedControl = UISegmentedControl(items:items) 设置位置segmentedControl.center = self.view.center 当前选中下标segmentedControl.selectedSegmentIndex = 1 ##添加事件 segmentedControl.addTarget(self, action: #selector(segmentedControlChanged), for: UIControlEvents.valueChanged) 添加self.view.addSubview(segmentedControl) 选择点击后的事件func segmentedControlChanged(sender:UISegmentedControl) &#123; print(sender.selectedSegmentIndex) print(sender.titleForSegment(at: sender.selectedSegmentIndex))&#125; 添加删除选项 UISegmentedControl每个选项的宽度在默认情况下会根据选项的个数自动分配，而个数在初始化控件之后可以添加和删除 添加图片选项segmentedControl.insertSegment(with: UIImage(named:"2"), at: 0, animated: true) 添加文字选项segmentedControl.insertSegment(withTitle: "见哥0", at: 1, animated: true) 移除制定下标的选项segmentedControl.removeSegment(at: 1, animated: true) 移出所有segmentsegment.removeAllSegments() 颜色设定segmentedControl.tintColor = UIColor.red 获取颜色var segmentColor = segment.tintColor 显示文字修改segmented.setTitle("swfit", forSegmentAt:1) 获取某一个下标下的标题var title = segment.titleForSegmentAtIndex(1) 修改选项图片segmented.setImage(UIImage(named:"icon"), forSegmentAt:2) 获取某一个下标下得图片var image = segment.imageForSegmentAtIndex(2) 修改选项内容偏移位置segmented.setContentOffset(CGSize(width:10, height:7), forSegmentAt:1) 宽度 UISegmentedControl每个选项的宽度在默认情况下会根据选项的个数自动分配，但是有时候根据项目情况的需要，我们也是可以手动来进行设置/获取的。 设置指定下标选项的宽度segmentedControl.setWidth(10, forSegmentAt: 1) 获取某一个下标segment的宽度var width = segment.widthForSegmentAtIndex(2) 是否根据segment的内容改变segment的宽度segment.apportionsSegmentWidthsByContent = true ###momentary属性 分段选择控件在点击之后一直处于选中状态，除非点击其他分段，才恢复。 momentary属性用来设置是否一直保持选中状态，当设置为YES时，点击选中，但一会就是恢复到正常状态segment.momentary = true]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISegmentedControl</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISegmentedControl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UISwitch]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FUISwitch%2F</url>
    <content type="text"><![CDATA[UISwitch 继承自UIControl UISwitch的大小是确定的不能进行修改 51*31let switchOne = UISwitch(frame:CGRect(x:10.0, y:100.0, width:0.0,height: 0.0))self.view.addSubview(switchOne)switchOne.backgroundColor = UIColor .yellow; 设置打开状态背景颜色switchOne.onTintColor = UIColor.brown 设置关闭状态的背景颜色switchOne.tintColor = UIColor.orange 开关快的颜色switchOne.thumbTintColor = UIColor.red 设置开关状态switchOne.setOn(true, animated: true) 添加按钮事件switchOne.addTarget(self, action: #selector(ViewController.switchOneValueChanged(sender:)), for: UIControlEvents.valueChanged) 状态改变之后的执行方法func switchOneValueChanged(sender:UISwitch) &#123; print("我是一个帅哥，你信不？value=%d",sender.isOn)&#125;switchOne.onImage = UIImage(named:"1")switchOne.offImage = UIImage(named:"2")]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISwitch</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISwitch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIStepper]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FUIStepper%2F</url>
    <content type="text"><![CDATA[UIStepper创建+framelet stepper = UIStepper()stepper.center = self.view.center 设置最大和最小值stepper.maximumValue = 10stepper.minimumValue = 1 当前值stepper.value = 1 每次变化的单位stepper.stepValue = 1 按住的时候连续变化stepper.isContinuous = true 是否循环 当增长到最大值的时候再从新开始stepper.wraps = true 改变事件添加stepper.addTarget(self, action:#selector(ViewController.stepperChanged(stepper:)), for: UIControlEvents.valueChanged)func stepperChanged(stepper:UIStepper) &#123; print("我是一个帅哥，你信不？value=%d",stepper.value)&#125;self.view.addSubview(stepper) 设置颜色stepper.tintColor = UIColor.green 设置imgstepper.setDecrementImage(UIImage(named:"1"), for: .normal)stepper.setIncrementImage(UIImage(named:"1"), for: .normal)]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIStepper</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UIStepper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift—UIKit-UISlider]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FUISlider%2F</url>
    <content type="text"><![CDATA[UISlider创建+framelet slider = UISlider()slider.frame = CGRect(x: 50, y: 100, width: 200, height: 50) ##最小/大值 slider.minimumValue = 0slider.maximumValue = 1 当前值（在取值范围之内的位置）slider.value = 0.5 ##按钮最小/大端图片slider.minimumValueImage = UIImage(named:"SSS")slider.maximumValueImage = UIImage(named:"DDD") 不同状态之下，圆点显示图片slider.setThumbImage(UIImage(named:""), for: .normal)slider.setThumbImage(UIImage(named:""), for: .highlighted)slider.setThumbImage(UIImage(named:""), for: .disabled)slider.setThumbImage(UIImage(named:""), for: .selected) ##设置圆点的颜色 slider.thumbTintColor = UIColor.red 设置划过和没有划过颜色（圆点左/右）slider.minimumTrackTintColor = UIColor.yellowslider.maximumTrackTintColor = UIColor.brown 改变事件 滑块滑动停止后才触发ValueChanged事件 slider.isContinuous = falseslider.addTarget(self, action: #selector(ViewController.change(slider:)), for: UIControlEvents.valueChanged)slider.addTarget(self, action: #selector(ViewController.sliderDragUp(sender:)), for: UIControlEvents.touchUpInside)func change(slider:UISlider) &#123; print("slider.value = %d",slider.value)&#125;func sliderDragUp(sender: UISlider) &#123; print("value:(sender.value)")&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UISlider</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UISlider</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UITextField]]></title>
    <url>%2F2017%2F12%2F07%2FSwift%2FUIKit%2FSwift-UIKit-UITextField%2F</url>
    <content type="text"><![CDATA[文本输入框 创建+frame let textField = UITextField(frame: CGRect(x:10, y:60, width:200, height:30))// let textField = UITextField()// textField.frame = CGRect(x:20,y:30,width:100,height:30) 设置边框样式为圆角矩形 textField.borderStyle = UITextBorderStyle.roundedRectself.view.addSubview(textField) 文本输入框的边框样式 public enum UITextBorderStyle : Int &#123; case none 无边框 case line 直线边框 case bezel 圆角矩形边框 case roundedRect 边线+阴影&#125; 文本输入框的提示文字 textField.placeholder = "请输入相关信息" 文字大小超过文本框长度时自动缩小字号，而不是隐藏显示省略号 textField.adjustsFontSizeToFitWidth=true //当文字超出文本框宽度时，自动调整文字大小textField.minimumFontSize=14 //最小可缩小的字号 水平/垂直对齐方式 /** 水平对齐 **/textField.textAlignment = .right //水平右对齐textField.textAlignment = .center //水平居中对齐textField.textAlignment = .left //水平左对齐 /** 垂直对齐 **/textField.contentVerticalAlignment = .top //垂直向上对齐textField.contentVerticalAlignment = .center //垂直居中对齐textField.contentVerticalAlignment = .bottom //垂直向下对齐 背景图片设置 textField.borderStyle = .none //先要去除边框样式textField.background = UIImage(named:"background1") 清除按钮（输入框内右侧小叉） textField.clearButtonMode = .whileEditing //编辑时出现清除按钮textField.clearButtonMode = .unlessEditing //编辑时不出现，编辑后才出现清除按钮textField.clearButtonMode = .always //一直显示清除按钮 键盘类型 Default： 系统默认的虚拟键盘ASCII Capable： 显示英文字母的虚拟键盘Numbers and Punctuation：显示数字和标点的虚拟键盘URL： 显示便于输入url网址的虚拟键盘Number Pad： 显示便于输入数字的虚拟键盘Phone Pad： 显示便于拨号呼叫的虚拟键盘Name Phone Pad： 显示便于聊天拨号的虚拟键盘Email Address： 显示便于输入Email的虚拟键盘Decimal Pad： 显示用于输入数字和小数点的虚拟键盘Twitter： 显示方便些Twitter的虚拟键盘Web Search： 显示便于在网页上书写的虚拟键盘 设置文本框关联的键盘 textField.keyboardType = UIKeyboardType.numberPad 使文本框失去焦点，并收回键盘 textField.resignFirstResponder() 设置键盘return键的样式 extField.returnKeyType = UIReturnKeyType.done //表示完成输入textField.returnKeyType = UIReturnKeyType.go //表示完成输入，同时会跳到另一页textField.returnKeyType = UIReturnKeyType.search //表示搜索textField.returnKeyType = UIReturnKeyType.join //表示注册用户或添加数据textField.returnKeyType = UIReturnKeyType.next //表示继续下一步textField.returnKeyType = UIReturnKeyType.send //表示发送 键盘return键的响应 import UIKitclass ViewController: UIViewController,UITextFieldDelegate &#123; override func viewDidLoad() &#123; super.viewDidLoad() let textField = UITextField(frame: CGRect(x:10,y:160,width:200,height:30)) //设置边框样式为圆角矩形 textField.borderStyle = UITextBorderStyle.roundedRect textField.returnKeyType = UIReturnKeyType.done textField.delegate=self self.view.addSubview(textField) &#125; func textFieldShouldReturn(_ textField: UITextField) -&gt; Bool &#123; //收起键盘 textField.resignFirstResponder() //打印出文本框中的值 print(textField.text) return true; &#125;&#125; 输入/显示文本字体的颜色 textField.textColor = UIColor.cyan 文本框的字体大小设置 //text.font = [UIFont fontWithName:@"Arial" size:20.0f]; //设置输入框内容的字体样式和大小textField.font = UIFont.systemFont(ofSize: 14) 文本输入框的代理设置（遵守UITextFieldDelegate协议） class ViewController: UIViewController,UITextFieldDelegate &#123;textField.delegate = self 输入框的背景颜色 text.backgroundColor = [UIColor whiteColor]//设置输入框的背景颜色，此时设置为白色 如果使用了自定义的背景图片边框会被忽略掉 ~~~ 输入框中一开始就有的文字 text.text = @"文字"; 是否自动纠错 text.autocorrectionType = UITextAutocorrectionTypeNo 几种选择样式typedef enum &#123; UITextAutocorrectionTypeDefault, 默认 UITextAutocorrectionTypeNo, 不自动纠错 UITextAutocorrectionTypeYes, 自动纠错&#125; UITextAutocorrectionType; 再次编辑就清空 text.clearsOnBeginEditing = YES 首字母是否自动大 text.autocapitalizationType = UITextAutocapitalizationTypeNone;typedef enum &#123; UITextAutocapitalizationTypeNone, 不自动大写 UITextAutocapitalizationTypeWords, 单词首字母大写 UITextAutocapitalizationTypeSentences, 句子的首字母大写 UITextAutocapitalizationTypeAllCharacters, 所有字母都大写&#125; UITextAutocapitalizationType; 键盘外观 textView.keyboardAppearance=UIKeyboardAppearanceDefault typedef enum &#123; UIKeyboardAppearanceDefault， 默认外观，浅灰色 UIKeyboardAppearanceAlert， 深灰 石墨色&#125; UIReturnKeyType; 最右侧加图片是以下代码（左侧类似） UIImageView *image=[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"right.png"]] //text.rightView=image;text.rightViewMode = UITextFieldViewModeAlwaystypedef enum &#123; UITextFieldViewModeNever, UITextFieldViewModeWhileEditing, UITextFieldViewModeUnlessEditing, UITextFieldViewModeAlways&#125; UITextFieldViewMode; 重写绘制行为除了UITextField对象的风格选项，你还可以定制化UITextField对象，为他添加许多不同的重写方法，来改变文本字段的显示行为。这些方法都会返回一个CGRect结构，制定了文本字段每个部件的边界范围。以下方法都可以重写 – textRectForBounds: //重写来重置文字区域– drawTextInRect: //改变绘文字属性.重写时调用super可以按默认图形属性绘制,若自己完全重写绘制函数，就不用调用super了.– placeholderRectForBounds: //重写来重置占位符区域– drawPlaceholderInRect: //重写改变绘制占位符属性.重写时调用super可以按默认图形属性绘制,若自己完全重写绘制函数，就不用调用super了.– borderRectForBounds: //重写来重置边缘区域– editingRectForBounds: //重写来重置编辑区域– clearButtonRectForBounds: //重写来重置clearButton位置,改变size可能导致button的图片失真– leftViewRectForBounds:– rightViewRectForBounds: 委托方法 (BOOL)textFieldShouldBeginEditing:(UITextField *)textField&#123;//返回一个BOOL值，指定是否循序文本字段开始编辑return YES;&#125;(void)textFieldDidBeginEditing:(UITextField *)textField&#123;//开始编辑时触发，文本字段将成为first responder&#125;(BOOL)textFieldShouldEndEditing:(UITextField *)textField&#123;//返回BOOL值，指定是否允许文本字段结束编辑，当编辑结束，文本字段会让出first responder//要想在用户结束编辑时阻止文本字段消失，可以返回NO//这对一些文本字段必须始终保持活跃状态的程序很有用，比如即时消息return NO;&#125;(BOOL)textField:(UITextField*)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123;//当用户使用自动更正功能，把输入的文字修改为推荐的文字时，就会调用这个方法。//这对于想要加入撤销选项的应用程序特别有用//可以跟踪字段内所做的最后一次修改，也可以对所有编辑做日志记录,用作审计用途。//要防止文字被改变可以返回NO//这个方法的参数中有一个NSRange对象，指明了被改变文字的位置，建议修改的文本也在其中return YES;&#125;(BOOL)textFieldShouldClear:(UITextField *)textField&#123;//返回一个BOOL值指明是否允许根据用户请求清除内容//可以设置在特定条件下才允许清除内容return YES;&#125;-(BOOL)textFieldShouldReturn:(UITextField *)textField&#123;//返回一个BOOL值，指明是否允许在按下回车键时结束编辑//如果允许要调用resignFirstResponder 方法，这回导致结束编辑，而键盘会被收起[textField resignFirstResponder];//查一下resign这个单词的意思就明白这个方法了return YES;&#125; 通知 UITextField派生自UIControl，所以UIControl类中的通知系统在文本字段中也可以使用。除了UIControl类的标准事件，你还可以使用下列UITextField类特有的事件UITextFieldTextDidBeginEditingNotificationUITextFieldTextDidChangeNotificationUITextFieldTextDidEndEditingNotification当文本字段退出编辑模式时触发。通知的object属性存储了最终文本。因为文本字段要使用键盘输入文字，所以下面这些事件发生时，也会发送动作通知UIKeyboardWillShowNotification //键盘显示之前发送UIKeyboardDidShowNotification //键盘显示之后发送UIKeyboardWillHideNotification //键盘隐藏之前发送UIKeyboardDidHideNotification //键盘隐藏之后发送//添加通知方法NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector("textFiledEditChanged:"), name: UITextFieldTextDidChangeNotification, object: textfield) 限制只能输入特定的字符 -(BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123;NSCharacterSet *cs;cs = [[NSCharacterSet characterSetWithCharactersInString:NUMBERS]invertedSet];NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs]componentsJoinedByString:@""];//按cs分离出数组,数组按@""分离出字符串BOOL canChange = [string isEqualToString:filtered];return canChange;&#125;上面这个NUMBERS是一个宏，可以在文件顶部定义：define NUMBERS @”0123456789\n”如果你要限制输入英文和数字的话，就可以把这个定义为：define kAlphaNum @”ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789″ 限制只能输入一定长度的字符 (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string;&#123; //string就是此时输入的那个字符 textField就是此时正在输入的那个输入框 返回YES就是可以改变输入框的值 NO相反if ([string isEqualToString:@"\n"]) //按会车可以改变&#123;return YES;&#125;NSString * toBeString = [textField.text stringByReplacingCharactersInRange:range withString:string];//得到输入框的内容if (self.myTextField == textField) //判断是否时我们想要限定的那个输入框&#123;if ([toBeString length] &gt; 20) &#123; //如果输入框内容大于20则弹出警告textField.text = [toBeString substringToIndex:20];UIAlertView *alert = [[[UIAlertView alloc] initWithTitle:nil message:@"超过最大字数不能输入了" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil] autorelease];[alert show];return NO;&#125;&#125;return YES;&#125;//设置能不能进行编辑/用户交互的开关textfield.enabled = truetextfield.userInteractionEnabled = true//设置圆角属性textField.layer.cornerRadius = 10.0textField.layer.masksToBounds = true//自定义输入源控件let inputview = UIButton(frame: CGRectMake(0.0, 0.0, CGRectGetWidth(self.view.bounds), 100.0))inputview.setImage(UIImage(named: "normalImage"), forState: UIControlState.Normal)inputview.backgroundColor = UIColor.lightGrayColor()inputview.addTarget(self, action: Selector("click:"), forControlEvents: UIControlEvents.TouchUpInside)textfield.inputView = inputview// 自定义输入源控件副视图let accessoryview = UIView(frame: CGRectMake(0.0, 0.0, CGRectGetWidth(self.view.bounds), 40.0))accessoryview.backgroundColor = UIColor.greenColor()let accessoryLeft = UIButton(frame: CGRectMake(10.0, 10.0, 60.0, 20.0))accessoryview.addSubview(accessoryLeft)accessoryLeft.setTitle("取消", forState: UIControlState.Normal)accessoryLeft.backgroundColor = UIColor.orangeColor()accessoryLeft.addTarget(self, action: Selector("leftClick:"), forControlEvents: UIControlEvents.TouchUpInside)let accessoryRight = UIButton(frame: CGRectMake((CGRectGetWidth(accessoryview.bounds) - 10.0 - 60.0), 10.0, 60.0, 20.0))accessoryview.addSubview(accessoryRight)accessoryRight.setTitle("确定", forState: UIControlState.Normal)accessoryRight.backgroundColor = UIColor.orangeColor()accessoryRight.addTarget(self, action: Selector("rightClick:"), forControlEvents: UIControlEvents.TouchUpInside)textfield.inputAccessoryView = accessoryview// 自定义输入源控件时响应事件// MARK: - clickfunc click(button:UIButton)&#123;self.view.endEditing(true)&#125;//MARK: - left/right clickfunc leftClick(button:UIButton)&#123;print("取消")&#125;func rightClick(button:UIButton)&#123;self.view.endEditing(true)print("确定")&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UITextField</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UITextField</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UIButton]]></title>
    <url>%2F2017%2F12%2F06%2FSwift%2FUIKit%2FUIButton%2F</url>
    <content type="text"><![CDATA[UIButton UIButton继承自UIControl 创建btnlet btn: UIButton = UIButton() //没有样式//let btns:UIButton =UIButton(type: UIButtonType)//有样式//let button = UIButton(frame:CGRect(x:10, y:150, width:100, height:30))//简化创建方式self.view.addSubview(button) UIButtonType有以下类型public enum UIButtonType : Int &#123; case custom // no button type @available(iOS 7.0, *) case system // standard system button case detailDisclosure case infoLight case infoDark case contactAdd public static var roundedRect: UIButtonType &#123; get &#125; // Deprecated, use UIButtonTypeSystem instead&#125;//使用let btn: UIButton = UIButton(type: .Custom) UIButton设置字内容和颜色 UIButton所对应的状态有几种 /** Normal (默认状态) Highlighted （高亮状态）点击按钮不放 Disabled （使能状态）就是是否可用状态--&gt;禁用的状态才会显现 Selected （选中状态）通过selected属性设置 */ /显示文字button1.setTitle("普通状态", for: .normal)button1.setTitle("高粱状态", for: .highlighted)button1.setTitle("禁用状态", for: .disabled)//显示文字颜色button1.setTitleColor(UIColor.red, for: .normal)button1.setTitleColor(UIColor.blue, for: .highlighted)button1.setTitleColor(UIColor.cyan, for: .selected)button1.setTitleColor(UIColor.cyan, for: .disabled)//阴影文字颜色设置button1.setTitleShadowColor(UIColor.cyan, for: .normal)button1.setTitleShadowColor(UIColor.green, for: .highlighted)button1.setTitleShadowColor(UIColor.brown, for: .disabled)button1.setTitleShadowColor(UIColor.darkGray, for: .selected) UIButton设置背景颜色和背景图片 //背景颜色button2.backgroundColor = UIColor.orange//背景图片 button4.setBackgroundImage(UIImage(named:"XXX"), for: .normal) UIButton设置字体大小button.titleLabel?.font = UIFont.systemFont(ofSize: 12) 禁用UIButton button.isEnabled = falsebutton.isEnabled = true 设置圆角 button.layer.cornerRadius = 5button.layer.masksToBounds = true 设置边框宽度/颜色 button.layer.borderWidth = 2button.layer.borderColor = UIColor.red.cgColor 设置背景图片为圆角 buttonImage.setImage(UIImage(named:"1") , forState: UIControlState.Normal)//设置背景图片为圆角buttonImage.imageView?.layer.cornerRadius = 50默认情况下按钮会被渲染成单一颜色；系统蓝button.setImage(UIImage(named:"icon1"),forState:.Normal) //设置图标button.adjustsImageWhenHighlighted=false //使触摸模式下按钮也不会变暗（半透明）button.adjustsImageWhenDisabled=false //使禁用模式下按钮也不会变暗（半透明）也可以设置成保留图标原来的颜色let iconImage = UIImage(named:"icon2")?.withRenderingMode(.alwaysOriginal)button.setImage(iconImage, for:.normal) //设置图标button.adjustsImageWhenHighlighted = false //使触摸模式下按钮也不会变暗（半透明）button.adjustsImageWhenDisabled = false //使禁用模式下按钮也不会变暗（半透明） UIButton上图片和文字调整 UIButton上添加图片和文字，有时需要我们调整,方向为逆时针方向，上、左、下、右依次去设置的 btn.imageEdgeInsets =UIEdgeInsetsMake(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)btn.titleEdgeInsets =UIEdgeInsetsMake(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat) //创建一个图片一个文字的按钮 let btn2: UIButton = UIButton(type: .Custom) btn2.frame = CGRectMake(50, 100, 120, 35) btn2.setImage(UIImage(named: "1"), forState: .Normal) btn2.backgroundColor = UIColor.blackColor() btn2.titleLabel?.font = UIFont.systemFontOfSize(20) btn2.imageView?.contentMode = UIViewContentMode.ScaleAspectFit btn2.setTitle("图片按钮", forState: .Normal) //偏移量，分别为上下左右 btn2.imageEdgeInsets = UIEdgeInsetsMake(0, -50, 0, 0) btn2.titleEdgeInsets = UIEdgeInsetsMake(0, -80, 0, 5) btn2.setTitleColor(UIColor.whiteColor(), forState: .Normal) btn2.adjustsImageWhenHighlighted = false self.view.addSubview(btn2) 添加按钮的点击事件 按钮的触摸时间有以下类型 touchDown：单点触摸按下事件，点触屏幕touchDownRepeat：多点触摸按下事件，点触计数大于1，按下第2、3或第4根手指的时候touchDragInside：触摸在控件内拖动时touchDragOutside：触摸在控件外拖动时touchDragEnter：触摸从控件之外拖动到内部时touchDragExit：触摸从控件内部拖动到外部时touchUpInside：在控件之内触摸并抬起事件touchUpOutside：在控件之外触摸抬起事件touchCancel：触摸取消事件，即一次触摸因为放上太多手指而被取消，或者电话打断 button1.addTarget(self,action:#selector(methodName), for: .touchUpInside)button1.addTarget(self, action:#selector(someMethod(button:)), for:.touchUpInside)//上 func methodName() &#123; print("tapped") &#125;//下 func someMethod(button:UIButton) &#123; print("你是谁啊，其实就是一个按钮") &#125; 按钮文字过长时候的显示处理 修改 button 按钮中 titleLabel 的 lineBreakMode 属性，便可以调整按钮在文字超长的情况下如何显示，以及是否换行 let button = UIButton(frame:CGRect(x:20, y:50, width:130, height:50))button.setTitle("这个是一长长长长长长长长长长的文字", for:.normal) //普通状态下的文字button.setTitleColor(UIColor.white, for: .normal) //普通状态下文字的颜色button.titleLabel?.lineBreakMode = .byTruncatingTailbutton.backgroundColor = UIColor.orangeself.view.addSubview(button) NSLineBreakMode样式可供选择，API的介绍也是简单明 public enum NSLineBreakMode : Int &#123; case byWordWrapping // Wrap at word boundaries, default case byCharWrapping // Wrap at character boundaries case byClipping // Simply clip case byTruncatingHead // Truncate at head of line: "...wxyz" case byTruncatingTail // Truncate at tail of line: "abcd..." case byTruncatingMiddle // Truncate middle of line: "ab...yz"&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UIButton</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>UIButton</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-UILabel]]></title>
    <url>%2F2017%2F12%2F06%2FSwift%2FUIKit%2FUILabel%2F</url>
    <content type="text"><![CDATA[lab 创建&amp;&amp; 设置frame let lab = UILabel(frame:CGRect(x:10,y:100,width:self.view.frame.size.width - 40,height:200)) 或 let lab = UILabel()lab.frame = CGRect(x:10,y:100,width:self.view.frame.size.width - 40,height:200) 添加父层 self.view.addSubview(lab); 显示文本内容 lab.text = "chen jian !" 设置bg颜色 lab.backgroundColor = UIColor.green 文字颜色 lab.textColor = UIColor.white 文字对齐方式 lab.textAlignment = NSTextAlignment.left 高亮文字颜色 lab.highlightedTextColor = UIColor.cyan 阴影颜色 lab.shadowColor = UIColor.black 阴影偏移位置 lab.shadowOffset = CGSize(width:-5,height:5) 设置圆角 lab.layer.cornerRadius = 20lab.layer.masksToBounds = true 边框的宽度和颜色 lab.layer.borderColor = UIColor.green.cgColorlab.layer.borderWidth = 2 文字类型/大小 lab.font = UIFont.boldSystemFont(ofSize: 20) //加粗类型lab.font = UIFont.systemFont(ofSize: 20) //文字大小lab.font = UIFont.italicSystemFont(ofSize: 20)//斜体类型lab.font = UIFont(name:"您好",size:50) //大小和文字一起设置 显示de样式 lab.lineBreakMode = NSLineBreakMode.byCharWrapping // NSParagraphStyle@available(iOS 6.0, *)public enum NSLineBreakMode : Int &#123;case byWordWrapping // Wrap at word boundaries, defaultcase byCharWrapping // Wrap at character boundariescase byClipping // Simply clipcase byTruncatingHead // Truncate at head of line: "...wxyz"case byTruncatingTail // Truncate at tail of line: "abcd..."case byTruncatingMiddle // Truncate middle of line: "ab...yz"&#125; 多行de显示 lab.numberOfLines = 2 //最多显示2行lab.numberOfLines = 0 // 默认没有行数显示lab.numberOfLines = 1 //只能显示一行 自动调整文字de大小 lab.adjustsFontSizeToFitWidth = true 富文本设置 //创建对象let attributeString = NSMutableAttributedString(string:"Welcome to Swift! Welcome to Swift! Welcome to Swift! Welcome to Swift!")//设置字体大小/字体类型attributeString.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 16)!, range: NSMakeRange(0, 6))//设置背景颜色 attributeString.addAttribute(NSForegroundColorAttributeName, value: UIColor.red, range: NSMakeRange(0, 3)) //设置文档背景色 attributeString.addAttribute(NSBackgroundColorDocumentAttribute, value: UIColor.lightGray, range: NSMakeRange(10, 10))//设置下划线attributeString.addAttribute(NSUnderlineStyleAttributeName, value:NSUnderlineStyle.StyleSingle.rawValue, range: NSMakeRange(5,12)) testLable.attributedText = attributeString; 文本高度计算 extension NSString &#123; func textSizeWithFont(font: UIFont, constrainedToSize size:CGSize) -&gt; CGSize &#123; var textSize:CGSize! if CGSizeEqualToSize(size, CGSizeZero) &#123; let attributes = NSDictionary(object: font, forKey: NSFontAttributeName) textSize = self.sizeWithAttributes(attributes) &#125; else &#123; let option = NSStringDrawingOptions.UsesLineFragmentOrigin let attributes = NSDictionary(object: font, forKey: NSFontAttributeName) let stringRect = self.boundingRectWithSize(size, options: option, attributes: attributes, context: nil) textSize = stringRect.size &#125; return textSize &#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>UILabel</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>UILabel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-UIKit-AppDelegate项目入口]]></title>
    <url>%2F2017%2F12%2F06%2FSwift%2FUIKit%2FAppDelegate%E9%A1%B9%E7%9B%AE%E5%85%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[AppDelegate.swift //import是导入文件的/库的关键字//UIKit是iOS中所有的控件的所在库文件import UIKit@UIApplicationMain //调用了OC中的UIApplicationMain函数;//UIApplicationMain是IOS应用程序的入口//UIApplacationMain:1.创建了一个UIApplication对象,代表当前应用程序.作用是用来检测当前应用程序状态的改变// 2.创建一个遵守UIApplicationDelegate的协议的子类对象作为UIApplication的代理,作用是处理应用程序状态的改变(创建AppDelegate对象并且设置为UIApplication对象的代理)class AppDelegate: UIResponder, UIApplicationDelegate &#123; //属性: var window: UIWindow? //方法: //一.当应用程序已经启动成功后,会自动调用这个方法 func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool &#123; // Override point for customization after application launch. //1.在这个方法中来搭建应用程序中的所有的界面 //2.获取应用程序需要展示的数据 //3.使用界面展示数据 //注意:如果不再做这个方法中去创建window,那么程序会通过Main.stroyboard去创建应用程序的界面 print("程序启动成功") return true &#125; //二.当应用程序将要成为非活跃状态的时候会自动调用这个方法. //活跃状态:程序在屏幕上可见 //非活跃状态:程序没有显示在屏幕上(按home键进入后台,来电打断,在当前应用程序中打开其他的应用程序) func applicationWillResignActive(application: UIApplication) &#123; //按下home键:command + shift + h //在这个方法中一般去暂停视频/音频播放;游戏需要暂停;保存数据 print("将要成为非活跃状态") &#125; //三.应用程序已经进入后台的时候会自动调用 //进入后台:按home键 func applicationDidEnterBackground(application: UIApplication) &#123; print("进入后台") &#125; //四.应用程序将要进入前台的时候会自动调用 //进入前台: func applicationWillEnterForeground(application: UIApplication) &#123; print("将要进入前台") &#125; //五.应用程序已经变成活跃状态的时候会自动调用 //1.程序启动成功后 //2.程序从后台重新进入前台 //3.来电打断结束... func applicationDidBecomeActive(application: UIApplication) &#123; print("已经变成活跃状态") &#125; //六.应用程序将要终止的时候会调用这个方法 func applicationWillTerminate(application: UIApplication) &#123; print("应用程序将要终止") &#125;&#125; ViewController.swift class ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() //UIView:是IOS中所有视图(控件)直接/间接的父类;所以UIView的属性和方法,对于其他类型的视图都有效 //视图:在屏幕上能看到的所有的东西都属于视图 //一.创建UIView的对象 let redView = UIView.init() //想要将视图展示在屏幕上的两个必要条件 //1.必须设置坐标的大小(默认坐标是(0,0),大小(0,0,)) //2.将视图添加到已经展示在屏幕上的视图上 //二.设置frame属性(由坐标(x,y)和大小(width,height)两个部分组成) redView.frame = CGRect(x: 10, y: 10, width: 100, height: 100) //IOS中所有的结构体都有一个对应的Make方法用来快速的创建一个结构体变量 redView.frame = CGRectMake(10, 10, 100, 100) //三.将视图添加到界面上 self.view.addSubview(redView) //四.设置背景颜色 //视图的背景颜色默认是透明色 //颜色的创建方式: //1.通过类型方法创建指定颜色 // redView.backgroundColor = UIColor.redColor() //通过三原色来创建颜色 //CGFloat就是UI中的浮点型 //参数1,2,3:红,绿,蓝的值(0~1)-(0/255~255/255) //参数4:透明度 //redView.backgroundColor = UIColor(red: 149/255.0, green: 106/255.0, blue: 55/255.0, alpha: 1) //设置不同程度的灰色 //redView.backgroundColor = UIColor(white: 0.2, alpha: 1) //练习:创建一个黄色的矩形,显示在红色视图的中心位置,大小(50,50) //方式1: //创建视图对象并且设置frame属性 /* let yellowView = UIView.init() yellowView.frame = CGRectMake(35, 35, 50, 50) //添加到界面上 self.view.addSubview(yellowView) //设置背景颜色 yellowView.backgroundColor = UIColor.yellowColor() */ //方式2: let yellowView = UIView(frame: CGRectMake(25,25,50,50)) redView.addSubview(yellowView) yellowView.backgroundColor = UIColor.yellowColor() //GET:计算视图的坐标的时候,注意相对性.当前视图被添加到那个视图上,那么当前视图的坐标就是相对于谁来算的 &#125;&#125; 视图对象的基本属性 mport UIKitclass ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() //创建一个视图对象 let redView = UIView.init() //添加到界面上 self.view.addSubview(redView) //设置背景颜色 redView.backgroundColor = UIColor.redColor() //1.frame(坐标和大小) redView.frame = CGRectMake(100, 100, 100, 100) //2.center(中心点坐标) //通过frame和确定视图的中心点坐标 print(redView.center) print(redView.frame) redView.center = CGPointMake(200, 200) print(redView.frame) //3.bounds(坐标和大小) //默认情况下bounds的坐标(0,0),大小和视图的frame大小一样 print(redView.bounds) //了解: //如果改变bounds的大小,不改变center的坐标,改变frame的坐标和大小 /* redView.bounds = CGRectMake(0, 0, 200, 200) print(redView.frame) print("center\(redView.center)") */ //如果改变bounds的坐标,不影响当前视图的位置.但是影响添加到当前视图上的子视图的坐标,不建议修改bounds redView.bounds = CGRectMake(0, 0, 100, 100) let yellowView = UIView.init(frame:CGRectMake(10, 10, 40, 40)) yellowView.backgroundColor = UIColor.yellowColor() redView.addSubview(yellowView) //4.transform(形变) // 当前视图发生形变,那么添加到当前视图上的所有的视图会跟着一起形变 //1). 缩放 //参数1:x方向上的缩放比例 //参数2:y方向上的缩放比例 redView.transform = CGAffineTransformMakeScale(0.5, 0.5) //2).旋转 //参数:旋转角度(圆周率对应的角度) redView.transform = CGAffineTransformMakeRotation(CGFloat(M_PI_4)) //3).平移 //参数1:在x方向上平移的距离 //参数2:在y方向上平移的距离 redView.transform = CGAffineTransformMakeTranslation(0, 300) //4).多个形变同时进行 //在另外一个形变的前提下旋转 //参数1:另外一个形变 //在拥有缩放这个形变的前提下旋转(既可以缩放又可以旋转) redView.transform = CGAffineTransformRotate(CGAffineTransformMakeScale(0.5, 0.5), CGFloat(M_PI_4 / 2)) //在另外一个形变的前提下平移(既可以缩放和旋转又可以平移) redView.transform = CGAffineTransformTranslate(redView.transform, 0, 100) //既可以平移又可以缩放 redView.transform = CGAffineTransformScale(CGAffineTransformMakeTranslation(100, 0), 0.5, 2) //组合两个形变 //旋转形变 let rotate = CGAffineTransformMakeRotation(0.2) //平移形变 let transLation = CGAffineTransformMakeTranslation(100, 100) //将旋转形变和平移形变组合 redView.transform = CGAffineTransformConcat(rotate, transLation) &#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>UIKit</category>
        <category>AppDelegate</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>Swift</tag>
        <tag>AppDelegate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-基础运算]]></title>
    <url>%2F2017%2F12%2F06%2FSwift%2FGrammar%2F%E5%9F%BA%E7%A1%80%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[语法打印print("Hello,Word!") 定义变量和常量 let/var在同一行代码中 不用书写分号 let myCount = 11 //定义一个常量为myCount = 11 常量是不可改变的量var myVariable = 22myVariable = 33 //定义一个变量为myVariable = 22 然后改变它的值,将33赋给myVariable。现在myVariable的值为33。 字符串插值打印 符串插值的是在print的过程中，将你定义的常量或变量插入你要输出的字符串中 print("ChenJian,\(myCount)!")print("YueKekui!\(myVariable)") 类型推断 在swift中 如果可以的话 尽可能省略类型标记，让swift自己推断类型 关于Swift中类型int，float，double相关的 Double(three) 和C语言的强制转换有很大区别Double(three) swift 中是将three这个数据的值取出来，从新定义一个Double类型的变量，并将Three的值赋这个变量 let three = 3let pointOneFourOneFiveNine = 0.14159let pi = Double(three) + pointOneFourOneFiveNine 元组 元组是用一个变量或常量，保存多项数据 let http404Error = (404, "Not Found")// http404Error is of type (Int, String), and equals (404, "Not Found") 下划线的意思 忽略这一项 let (justTheStatusCode, _) = http404Errorprint("The status code is \(justTheStatusCode)")// Prints "The status code is 404 运算符 运算符 可以分为一元运算符，二元运算符，三元运算符 一元运算符 数字前面代表数字正负的正负号是唯一的一元运算符 -8,-14,+8(正数我们一般省略前面的正号写为：8) 二元运算符 赋值运算符 let b = 10var a = 5a = b// a is now equal to 10 关系运算符 1 == 1 2 != 1 2 &gt; 1 1 &lt; 2 1 &gt;= 1 2 &lt;= 1 算术运算符：加减乘除取余 1 + 2 // equals 35 - 3 // equals 22 * 3 // equals 610.0 / 2.5 // equals 4.0 9 % 2 // equals 1 三元运算符 //让c 取a 和b中较小的值let a =5 , b=10let c = a &lt; b ? a : b//问号前面是一个产生Bool类型的变量，常量或表达式 Parentheses 圆括号的作用 可以使用圆括号改变运算顺序 ，如果不清楚运算的执行程序也可以直接使用圆括号来改变运算顺序 容器类型-数组 数组是一个有序的集合数组的第一个元素的下标是从0开始的 而不是1 var threeDoubles = [Double](count: 3, repeatedValue: 0.0)var array1 = [Int]()var array2: [Int] = []var array3 = [99,12,34,156,7]var array4 = [Int](count: 100, repeatedValue: 1)var arrayString1 = [String]()var arrayString2: [String] = []var arrayString3 = ["abc","def","ghi","apple","orange"]var arrayString4 = [String](count: 100, repeatedValue: "") 两个数组可以相加 var anotherThreeDoubles = [Double](count: 3, repeatedValue: 2.5)// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5] var sixDoubles = threeDoubles + anotherThreeDoubles// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2. 向数组中添加元素的方法 shoppingList.append("Flour")//可以使用append这个函数shoppingList += ["Baking Powder"]// shoppingList now contains 4 itemsshoppingList += ["Chocolate Spread", "Cheese", "Butter"]//也可以用+=向数组中添加一个或多个元素 对数组进行遍历（迭代） let shoppingList = ["Six egg","Milk","Flour","Baking Powder","Bananas"]for item in shoppingList &#123; print(item)&#125;for (index, value) in shoppingList.enumerate() &#123; print("Item \(index + 1): \(value)")&#125;// Item 1: Six eggs// Item 2: Milk// Item 3: Flour// Item 4: Baking Powder// Item 5: Bananas”作者：芒果微笑链接：http://www.jianshu.com/p/8e8ff60121c4來源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 控制流程##顺序结构 ,程序按正常顺序执行。 ##分支结构 ##循环结构 //循环 //第一种循环import Foundationvar i = 1while i &lt;= 10 &#123; print("\(i)") print("Hello, World!") i += 1//i++&#125; //第二种循环 这种循环和上一种循环主要的区别是 --repeat循环至少执行一次var i = 1repeat&#123; print("\(i).Hello,Word") i += 1&#125;while i &lt;= 100 //第三种循环for i in 1...10&#123; print("\(i).Hello,World!")&#125;// 不想用循环变量 i可以使用 _ 来省略i 猜数字 题目要求：书写一段Swift代码实现，随机出现一个1-100的数字，让用户猜这个数字是几，每次提示用户猜的数字是比实际数字大还是小，直到用户猜中为止 let answer = Int(arc4random_uniform(100)) + 1var thyAnswer:Intvar counter = 0repeat&#123; counter += 1 print("请输入你猜的数字：",terminator:"") thyAnswer = inputInt() if thyAnswer &gt; answer&#123; print("猜小一点") &#125; else if thyAnswer &lt; answer&#123; print("猜大一点") &#125; else&#123; print("恭喜你猜对了！您一共猜了\(counter)次") &#125;&#125;while thyAnswer != answerif counter &gt; 7&#123; print("你的智商该充值了！！！")&#125; 得出1-100的素数 //得出1-100的素数func isPrime(n: Int) -&gt; Bool&#123; var i = 2 while i &lt;= Int(sqrt(Double(n)))&#123; if n % i == 0&#123; return false &#125; i += 1 &#125; //如果上面的循环没有返回false 就说明在2到n开根号之间没有n的因子 因此返回true 表示n是素数 return true&#125;for n in 1...100&#123; if isPrime(n)&#123; print(n) &#125;&#125; 百钱白鸡 题目要求：现在有100块钱，公鸡5块一只，母鸡3块一只，小鸡1块三只，现在要用这100块买100只鸡，问公鸡，母鸡，小鸡各有多少只？ for x in 0...20&#123; for y in 0...33&#123; let z = 100 - x - y if 5 * x + 3 * y + z / 3 == 100 &amp;&amp; z % 3 == 0 &#123; print("公鸡：\(x),母鸡:\(y),小鸡\(z)") &#125; &#125;&#125;// GET:穷举法（穷尽所有的可能性直到正确答案 摇色子游戏 题目要求：现有两人，一个玩家，一个庄家。玩家摇两个色子，如果第一次摇到7，11点玩家胜，摇到2，3，12庄家胜，摇到其他点数记住这个点数并继续摇下一次；以后每次玩家摇色子的点数和第一次记住的点数相同玩家胜，摇到7点庄家胜。用swift代码实现以上要求 func roll() -&gt; Int&#123; return Int(arc4random_uniform(6)) + 1&#125;var money = 1000repeat&#123; print("玩家总资产:￥\(money)元") var debt:Int repeat&#123; print("请下注:",terminator:"") debt = inputInt() &#125;while debt &lt;= 0 || debt &gt; money var needsGoOn = false let fristPoint = roll() + roll() print("玩家摇出了\(fristPoint)") switch fristPoint&#123; case 7,11: money += debt print("玩家胜!!!") case 2,3,12: money -= debt print("庄家胜!!!") default: needsGoOn = true //游戏继续 &#125; while needsGoOn&#123; let currentPoint = roll() + roll() print("玩家摇出了\(currentPoint)") if currentPoint == 7 &#123; money -= debt print("庄家胜!!!") needsGoOn = false &#125; else if currentPoint == fristPoint&#123; money += debt print("玩家胜!!!") needsGoOn = false &#125; &#125;&#125;while money &gt; 0print("你破产了！！！！") 排序选择 题目要求：一个数组中无序的数字，使用简单选择排序法排序。ps：简单选择排序:每次从剩下元素中找最小的元素放到对应的位置 var array = [27,45,78,58,44,89,12,5]for i in 0..&lt;array.count - 1&#123; var mindex = i for j in i+1..&lt;array.count&#123; if array[j] &lt; array[mindex]&#123; mindex = j &#125; &#125;(array[i],array[mindex]) = (array[mindex],array[i])&#125;print(array) 冒泡排序 题目要求：一个数组中无序的数字，使用冒泡排序法排序。ps:冒泡排序：两个数字排序将大的数字排在后面 var array = [27,45,78,58,44,89,12,5]for i in 0..&lt;array.count - 1&#123; var swapped = false for j in 0..&lt;array.count - 1 - i&#123; if array[j] &gt; array[j+1]&#123; (array[j],array[j+1]) = (array[j+1],array[j]) swapped = true &#125; &#125; if swapped == false // if !swapped &#123; break &#125;&#125;print(array) 字典和集合 //字典(存放键值对组合的容器)//字典中的每个元素都是由两部分构成,冒号前面的是键，冒号后面的是值var dict:[String:String] = ["abacus":"算盘","abnormal":"异常的","hello":"你好","good":"好的"]//print 前面的键 就会输出后面的值//但是print 后面的值 不会输出前面的键print(dict["hello"]!)print(dict["abcxyz"])print(dict["你好"])// 添加元素dict["shit"] = "狗屎"dict["delicious"] = "好吃的"print(dict)// 删除元素 dict.removeValueForKey("hello") //第一种dict["hello"] = nil //第二种print(dict)print(dict["hello"])// 修改元素dict["shit"] = "牛粪"print(dict)// 遍历字典中所有的值for value in dict.values &#123; print(value)&#125;// 遍历字典中所有的键for key in dict.keys &#123; print("\(key) ---&gt; \(dict[key])")&#125;// 直接通过一个元组获得字典中的键和值(原始类型)for (key, value) in dict &#123; print("\(key) ---&gt; \(value)")&#125; 集合 集合中两个值相同的元素，会合并到一起 var a: Set&lt;Int&gt; = [1, 2, 3, 1, 2, 5]a.insert(100) // 添加元素a.remove(2) // 删除元素print(a)var b: Set&lt;Int&gt; = [3, 5, 7, 9, 11]print(b)print(a.intersect(b)) // 交集(a和b都有的元素)print(a.union(b)) // 并集(a和b的所有元素)print(a.subtract(b)) // 差集(a有b没有的元素)print(a == b)print(b.isSubsetOf(a))let c: Set&lt;Int&gt; = [1, 3]print(c.isSubsetOf(a)) // 判断c是不是a的子集print(a.isSupersetOf(c)) // 判断a是不是c的超集let d: Set&lt;Int&gt; = [2, 1000, 10000]print(a.isDisjointWith(d)) // 判断两个集合是否相交 函数 函数我认为是swift语言中最重要的章节之一。定义函数的关键词为func // 函数的参数名// 函数名(外部参数名 内部参数名: 类型, 外部参数名 内部参数名: 类型)// 如果不写外部参数名那么内部参数名也是外部参数名// 可以使用_来作为外部参数名表示省略外部参数名func myMin(a x: Int, b y: Int) -&gt; Int &#123; return x &lt; y ? x : y&#125;// 调用函数的时候要写函数的外部参数名print(myMin(a: 3, b: 5))// 定义函数// func 函数名(参数列表) -&gt; 返回类型 &#123; 函数的执行体 &#125;// Swift中函数的参数可以设定默认值// 如果调用函数的时候没有给该参数赋值就直接使用默认值func sayHello(personName: String, alreadyGreeted: Bool = false) -&gt; String &#123; // let greeting = "Hello, " + personName + "!" // 如果函数的返回类型不是Void 那么函数中一定有return语句 // return greeting // personName = "王小锤" // 编译错误 if alreadyGreeted &#123; return "怎么又是你, " + personName + "!" &#125; else &#123; return "你好, " + personName + "!" &#125;&#125;// 调用函数// 函数名(参数值)// 调用Swift的函数时, 在默认情况下从第二个参数开始需要写参数名print(sayHello("王大锤", alreadyGreeted: true))// 如果没有给第二个参数赋值那么就直接使用默认值falselet str = sayHello("Jack")print(str)// Swift中函数的参数列表可以是可变参数列表(参数的个数是任意多个)func sum(nums: Int...) -&gt; Int &#123; var total = 0 for num in nums &#123; total += num &#125; return total&#125;print(sum())print(sum(999))print(sum(1, 2, 3))print(sum(90, 82, 37, 68, 55, 11, 99))// 可以使用元组(tuple)让函数一次返回多条数据func minMax(array: [Int]) -&gt; (min: Int, max: Int)? &#123; if array.count == 0 &#123; return nil &#125; var currentMin = array[0] var currentMax = array[0] for value in array[1..&lt;array.count] &#123; if value &lt; currentMin &#123; currentMin = value &#125; else if value &gt; currentMax &#123; currentMax = value &#125; &#125; return (currentMin, currentMax)&#125;if let b = minMax([23, 45, 99, 68, 72, 12, 55]) &#123; print(b.min) // print(b.0) print(b.max) // print(b.1)&#125;else &#123; print("数组中没有元素!!!")&#125;func swap(inout a: Int, inout _ b: Int) -&gt; Void &#123; (a, b) = (b, a)// let temp = a// a = b// b = temp&#125;var a = 300, b = 500swap(&amp;a, &amp;b)print("a = \(a)")print("b = \(b)")// inout - 输入输出参数(不仅将数据传入函数还要从函数中取出数据)func createX(inout x: Int) &#123; x = 1000&#125;var x = 1// inout类型的参数前要加上&amp;符号createX(&amp;x)print(x) // 设计一个函数根据系统时间返回不同的问候语func sayHello(name: String) -&gt; String &#123; let date = NSDate() let cal = NSCalendar.currentCalendar() let hour = cal.component(.Hour, fromDate: date)//这三句代码的意思为：第一句 获取当前系统时间 //第二句是 当前历法//第三句是 当前小时 var greeting: String switch hour &#123; case 0...6: // 不同的分支可以有重叠的部分 greeting = "滚去碎觉了" // fallthrough // 继续执行下一个case case 4...10: // 匹配了一个分支之后不再匹配其他的分支 greeting = "早起的鸟儿有虫吃" case 11...13: greeting = "中午好" case 14...18: greeting = "下午好" default: greeting = "晚上好" &#125; return name + ", " + greeting + "!"&#125;print(sayHello("小刚"))// 设计一个函数传入两个正整数m和n, 计算从m加到n的和func sum(m: Int, _ n: Int) -&gt; Int &#123; let (a, b) = m &gt; n ? (n, m) : (m, n) var value = 0 for i in a...b &#123; value += i &#125; return value&#125;print(sum(1, 100))print(sum(5, -4))print(sum(-1, -5)) 调用苹果自身的Api，进行程序应用开发调用苹果的指纹识别，开发一个带有指纹识别的支付功能的app class ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() let errPointer = NSErrorPointer() let ctx = LAContext() // 判断设备是否支持指纹识别 if ctx.canEvaluatePolicy(.DeviceOwnerAuthenticationWithBiometrics, error: errPointer) &#123; // z = f(x, g(y)) // Swift中允许将一个函数作为另一个函数的参数 // evalutePolicy方法的第三个参数是一个函数 // 该函数有两个参数没有返回值 // 给该参数传参时可以在花括号中写一个匿名函数传进去 // 该匿名函数通常也称之为闭包(closure) ctx.evaluatePolicy(.DeviceOwnerAuthenticationWithBiometrics, localizedReason: "请输入指纹进行支付", reply: &#123; (isOK, err) -&gt; Void in if isOK &#123; print("支付成功!!!") &#125; else &#123; print("指纹验证失败, 请输入支付密码") &#125; &#125;) &#125; else &#123; print("你的设备不支持指纹识别") &#125; &#125;&#125; 闭包 闭包也称：匿名函数 意思是没有名字的函数闭包由来：在swift中函数也是一种类型这也就意味着函数可以作为变量或常量的类型同理函数也可以作为另一个函数和参数或返回值 func sum(a: Int, _ b: Int) -&gt; Int &#123; return a + b&#125;func mul(a: Int, _ b: Int) -&gt; Int &#123; return a * b&#125;func foo(array: [Int], fn: (Int, Int) -&gt; Int) -&gt; Int &#123; var sum = array[0] for x in array[1..&lt;array.count] &#123; sum = fn(sum, x) &#125; return sum&#125; 由于在swift中能省则省的原则和传统就将调用函数做了以下几步写法省略 let a = [1, 2, 3, 4, 5]// 当调用foo函数时第二个参数可以传什么?// 1. 所有自定义的(Int, Int) -&gt; Int类型的函数print(foo(a, fn: sum))// 2. 传入已有的二元运算符: +-*/%(因为运算符也是函数)print(foo(a, fn: +))// 3. 传入匿名函数(闭包)// 3.1 完整的闭包写法print(foo(a, fn: &#123; (a, b) -&gt; Int in return a + b&#125;))// 3.2 省略掉类型和不必要的括号print(foo(a, fn: &#123; a, b in a + b &#125;))// 3.3 省略参数名print(foo(a, fn: &#123; $0 + $1 &#125;))// 3.4 尾随闭包print(foo(a) &#123; (a, b) -&gt; Int in return a + b&#125;)print(foo(a) &#123; $0 + $1 &#125;) 需要注意的是：如果函数的最后一个参数是闭包可以写成尾随闭包的形式也就是将闭包放到函数参数的圆括号外面写在一对花括号中如果函数后面有尾随闭包且函数的圆括号中没有参数那么函数的圆括号也可以省略(仅限于有尾随闭包的场景）例如 var array = ["game", "abacus", "hello", "cat", "good", "internationalization", "chaos", "dislike", "zealot", "young"]// array.sortInPlace(&gt;)array.sortInPlace(&#123; $0 &gt; $1 &#125;)array.sortInPlace() &#123; $0 &gt; $1 &#125;array.sortInPlace &#123; $0 &gt; $1 &#125; //这就是尾随闭包的最简写法 数组最重要的三个功能 1.过滤 2.映射 3.缩减 let array = [23, 37, 96, 55, 40, 92, 68, 88]// 1. 过滤let newArray1 = array.filter &#123; $0 &gt; 50 &#125; //找到数组中比50大的数输出出来print(newArray1)let newArray2 = array.filter &#123; $0 % 2 == 0 &#125; //找到数组中得偶数print(newArray2)// 2. 映射let newArray3 = array.map &#123; $0 * $0 &#125; //将数组中的每个数平方print(newArray3)let newArray4 = array.map &#123; sqrt(Double($0)) &#125; //将数组中得每个数开根号print(newArray4)// 3. 缩减let result1 = array.reduce(0, combine: +)// 将数组中的每个数想加print(result1)let result2 = array.reduce(1, combine: *)//将数组中的每个数相乘print(result2)let result3 = array.reduce(array[0]) &#123; //取数组中最大的数 $1 &gt; $0 ? $1 : $0&#125;print(result3)let strArray = ["I", "love", "you"]let result4 = strArray.reduce("") &#123; $0 + " " + $1 &#125;//将数组中的三个元素合为一个print(result4) 类 类和上文提到的函数 紧密相关类是一类事物 而对象是这类事物中具体的实例 步骤1: 定义类(如果你要用的类苹果已经提供了就直接进入第2步) 定义类就可以创建出新的类型 学生类class Student &#123; // 变量定义到类的外面就叫变量 - variable // 变量定义到类的里面就叫属性 - property // 数据抽象 - 找到和学生相关的属性(找名词) var name: String var age: Int // 初始化方法(构造方法/构造器) - constructor init(name: String, age: Int) &#123; self.name = name self.age = age &#125; // 函数写到类的外面就叫函数 - function // 函数写到类的里面就叫方法 - method // 行为抽象 - 找到和学生相关的方法(找动词) func eat() &#123; print("\(name)正在吃饭.") &#125; func study(courseName: String) &#123; print("\(name)正在学习\(courseName).") &#125; func watchJapaneseAV() &#123; if age &gt;= 18 &#123; print("\(name)正在动作片.") &#125; else &#123; print("亲爱的\(name), 我们推荐你观看《熊出没》") &#125; &#125;&#125;// 步骤2: 创建对象(调用初始化方法)let stu1 = Student(name: "小刚", age: 35)// 步骤3: 给对象发消息(通过给对象发消息来解决问题)stu1.eat()stu1.study("Swift程序设计")stu1.watchJapaneseAV()let stu2 = Student(name: "王大锤", age: 15)stu2.eat()stu2.study("中国近代史")stu2.watchJapaneseAV() 下面定义一个圆的类类里面有求圆的面积和周长的方法（函数） // 0. 发现类// - 在对问题的描述中找名词和动词// - 名词会成为类或者类中的属性 动词会成为类中的方法// 1. 定义类// - 数据抽象(属性)// - 行为抽象(方法)// - 初始化方法// 访问修饰符// - public (公开)// - internal (内部的) - 默认// - private (私有)class Circle &#123; // stored property // 存储属性(保存和圆相关的数据的属性) var center: Point var radius: Double init(center: Point, radius: Double) &#123; self.center = center self.radius = radius &#125; // 通常获得某个计算出的值的方法都可以设计成计算属性 // computational property // 计算属性(通过对存储属性做运算得到的属性) var perimeter: Double &#123; // 圆的周长是一个只读属性 // 所以此处只有get&#123;&#125;没有set&#123;&#125; get &#123; return 2 * M_PI * radius &#125; &#125; var area: Double &#123; get &#123; return M_PI * radius * radius &#125; &#125;&#125;注意：运算符重载```swift//运算符重载（为自定义的类型定义运算符）func +(one: Fraction, two: Fraction) -&gt; Fraction &#123; return one.add(two)&#125;func -(one: Fraction, two: Fraction) -&gt; Fraction &#123; return one.sub(two)&#125;func *(one: Fraction, two: Fraction) -&gt; Fraction &#123; return one.mul(two)&#125;func /(one: Fraction, two: Fraction) -&gt; Fraction &#123; return one.div(two)&#125; 继承 // 继承: 从已有的类创建新类的过程// 提供继承信息的称为父类(超类/基类)// 得到继承信息的称为子类(派生类/衍生类)// 通常子类除了得到父类的继承信息还会增加一些自己特有的东西// 所以子类的能力一定比父类更强大// 继承的意义在于子类可以复用父类的代码并且增强系统现有的功能class Teacher: Person &#123; var title: String init(name: String, age: Int, gender: Gender, title: String) &#123; self.title = title super.init(name: name, age: age, gender: gender) &#125; func teach(courseName: String) &#123; print("\(name)\(title)正在教\(courseName).") &#125;&#125;//父类和子类关系let p1 = Person(name: "王大锤", age: 25, gender: .Male)p1.eat()// 可以将子类型的对象赋值给父类型的变量(因为子类跟父类之间是IS-A关系)// 学生是人, 老师是人, 所以学生和老师的对象可以赋值给人类型的变量let p2: Person = Student(name: "张尼玛", age: 18, gender: .Female, major: "计算机科学与技术")p2.eat()// 如果要将父类型的变量转换成子类型需要用as运算符进行类型转换// 如果能够确认父类型的变量中就是某种子类型的对象可以用as!进行转换// 如果不确定父类型的变量中是哪种子类型可以用as?尝试转换(p2 as! Student).study("Swift程序设计")if let temp = p2 as? Teacher &#123; temp.teach("Java")&#125;else &#123; print("\(p2.name)不是老师!!!")&#125;let p3: Person = Teacher(name: "骆昊", age: 35, gender: .Male, title: "叫兽")p3.eat() 多态 同样的对象类型(pet类型)接受了相同的消息(调用了相同的方法)但是做了不同的事情 这就是多态(polymorphism)例如：猫(cat)继承它的父类动物(pet) / Cat和Pet之间是IS-A关系(继承)class Cat: Pet &#123; var hairColor: String? // 父类有的方法子类可以重新实现 这个过程叫方法重写 // 需要在方法前添加override关键字 // 重写有时也被称为置换/覆盖/覆写 override func play() &#123; super.play() print("\(nickname)正在玩毛线球.") &#125; override func shout() &#123; print("\(nickname): 喵喵喵……") &#125; func catchTheMouse() &#123; print("\(nickname)正在抓老鼠.") &#125;&#125; 对父类的方法可以重新实现， 这个过程叫方法重写这是实现多态的重要步骤之一！下面是实现多态的第二个步骤： let petsArray = [ Cat(nickname:"加菲",gender: .Male,age:2), Dog(nickname: "吉娃娃", gender: .Male, age: 3, isLarge: false), Dog(nickname: "大黄", gender: .FeMale, age: 2, isLarge: true), Mistress(nickname: "小花",gender: .FeMale,age:16)]for pet in petsArray&#123; pet.eat() // 同样的对象类型(pet类型)接受了相同的消息(调用了相同的方法) // 但是做了不同的事情 这就是多态(polymorphism) // 实现多态的关键步骤： // 1.方法的重写(子类在继承父类的过程中对父类已有的方法进行重写,而且不同的子类给出各自不同的实现版本) // 2.对象造型(将子类对象当成父类型来使用) pet.play() pet.shout() // 如果dog是属于pet中 如果dog是Dog类型就可以调用keepTheDoor这个特有的方法 if let dog = pet as? Dog&#123; dog.keepTheDoor() &#125; else if let cat = pet as? Cat&#123; cat.catchTheMouse() &#125; else if let mistress = pet as? Mistress&#123; mistress.makeTrouble() &#125;&#125;//枚举enum Gender&#123; case Male case FeMale &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-网速实时显示]]></title>
    <url>%2F2017%2F12%2F06%2FOC%2FFunc%2FiOS-Func-%E7%BD%91%E9%80%9F%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[原理：通过函数getifaddrs来得到系统网络接口的信息，网络接口的信息, 包含在if_data字段中, 有很多信息, 但我现在只关心ifi_ibytes, ifi_obytes, 应该就是接收到的字节数和发送的字节数, 加起来就是流量了. 还发现, 接口的名字, 有en, pdp_ip, lo等几种形式, en应该是wifi, pdp_ip大概是3g或者gprs, lo是环回接口, 通过名字区分可以分别统计 #include &lt;ifaddrs.h&gt;#include &lt;sys/socket.h&gt;#include &lt;net/if.h&gt;+ (long long) getInterfaceBytes&#123; struct ifaddrs *ifa_list = 0, *ifa; if (getifaddrs(&amp;ifa_list) == -1) &#123; return 0; &#125; uint32_t iBytes = 0; uint32_t oBytes = 0; for (ifa = ifa_list; ifa; ifa = ifa-&gt;ifa_next) &#123; if (AF_LINK != ifa-&gt;ifa_addr-&gt;sa_family) continue; if (!(ifa-&gt;ifa_flags &amp; IFF_UP) &amp;&amp; !(ifa-&gt;ifa_flags &amp; IFF_RUNNING)) continue; if (ifa-&gt;ifa_data == 0) continue; /* Not a loopback device. */ if (strncmp(ifa-&gt;ifa_name, "lo", 2)) &#123; struct if_data *if_data = (struct if_data *)ifa-&gt;ifa_data; iBytes += if_data-&gt;ifi_ibytes; oBytes += if_data-&gt;ifi_obytes; &#125; &#125; freeifaddrs(ifa_list); NSLog(@"\n[getInterfaceBytes-Total]%d,%d",iBytes,oBytes); return iBytes + oBytes;&#125; 资料01]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-内存泄漏问题]]></title>
    <url>%2F2017%2F12%2F06%2FOC%2FFunc%2FiOS-Func-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[AFHTTP 内存泄漏问题 AFHTTP 框架的通病。这个问题很常见，也最好解决，网上也有不少的解决方案主流的解决方案就是使用单例。定义一个单例对象 SessionManager： @interface SessionManager : NSObject@property(nonatomic,strong)AFHTTPSessionManager *manager;+(SessionManager *)share;@end@implementation SessionManager+(SessionManager *)share&#123; static SessionManager *shareObj = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; shareObj = [[SessionManager alloc] init]; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; /** 设置超时*/ [manager.requestSerializer willChangeValueForKey:@"timeoutInterval"]; manager.requestSerializer.timeoutInterval = 10; [manager.requestSerializer didChangeValueForKey:@"timeoutInterval"]; shareObj.manager = manager; &#125;); return shareObj;&#125;@end 使用SessionManager AFHTTPSessionManager* manager = [SessionManager share].manager;manager.requestSerializer = [AFHTTPRequestSerializer new];…… 环信 UI 框架中的内存泄漏问题 环信框架中，有一个对 UIViewController 的扩展（Category） :UIViewController+HUD，它对 MBHUD 进行了二次封装，通过它可以使你的 MBHUD 的调用变得更简单，比如显示一个 HUD 你可以这样： [self showHudInView:self.view hint:@""]; 但是这个方法中有一个严重的内存泄漏问题。当你在一个 View Controller 中多次显示 HUD 之后（比如反复下拉刷新表格），用视图调试器查看 UIView，你会发现视图树中显示了多个 HUD 对象。也就是说每次 showHudInView 之后都会重新生成一个新的 HUD，而原来的 HUD 虽然被隐藏了，但它们在内存中仍然是持续存在的。每次 showHudInView 调用大概会导致 400-500 k 的内存泄漏。如果你反复刷新表格（比如 5 分钟或更长）直到内存撑爆，app 崩溃解决的方法很简单，在 showHudInView 方法中加入一句： HUD.removeFromSuperViewOnHide = YES; O-C 块中对 self 强引用导致的内存泄漏问题 在 View Controller 类的 O-C 块中，如果你直接引用了 self，则会导致 View Controller 被强引用（因为块的参数都是以 copy 引用的，会导致 retained count 加 1）。这样，当 View Controller 被 pop 出导航控制器栈后不会被释放，导致内存泄漏。这个泄漏就比较严重了，少则几百 K,多则几兆 一个比较明显的例子就是 MJRefresh。在 View Controller 中，如果我们想支持下拉刷新，通常会这样使用 MJRefresh： self.tableView.mj_header=[MJRefreshNormalHeader headerWithRefreshingBlock:^&#123; [self.tableView.mj_header endRefreshing]; currentPage = 1; [self loadNoticeList:1 success:^(NSArray&lt;CampusNoticeModel *&gt; *data) &#123; [self.models removeAllObjects]; [self.models addObjectsFromArray:data]; [self.tableView reloadData]; &#125; failure:^(NSString *msg) &#123; &#125;]; &#125;]; 注意，O-C 块中对 View Controller 进行了强引用，比如：self.tableView 和 self.models。原则上，当我们在 O-C 块中引用 self 时，应当使用弱引用，比如上面的代码应当改为： __weak __typeof(self) weakSelf=self; self.tableView.mj_header=[MJRefreshNormalHeader headerWithRefreshingBlock:^&#123; [weakSelf.tableView.mj_header endRefreshing]; currentPage = 1; [weakSelf loadNoticeList:1 success:^(NSArray&lt;CampusNoticeModel *&gt; *data) &#123; [weakSelf.models removeAllObjects]; [weakSelf.models addObjectsFromArray:data]; [weakSelf.tableView reloadData]; &#125; failure:^(NSString *msg) &#123; &#125;]; &#125;]; 也就是将 OC 块中所有的 self 改成 weakSelf。这里有一个例外，如果引用的是实例变量而不是属性，原则上是不需要 weakSelf 的。比如 currentPage 在 View Controller 中是以实例变量形式定义的（也就是说没有用 @property 进行声明），那么我们不需要通过 weakSelf 来进行引用但是，如果你在项目中使用 MLeaksFinder 来检测内存泄漏时，MLeaksFinder 仍然会认为 O-C 块中对 currentPage 的引用存在问题。因此，为了让 MLeaksFinder 彻底“闭上嘴”，我们最好也将 currentPage 修改为属性（使用 @property 声明），然后将 O-C 块中的引用方式修改为：weakSelf.currentPage CADisplayLink 导致的内存泄漏 在使用 CADisplayLink 时，如果不释放 CADisplayLink，很容易出现内存泄漏。以自定义 UIView 为例，我们会使用定时器进行某些自定义的绘图和动画操作。这时我们会用到 CADisplayLink displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(animateDashboard:)]; 当我们需要开启定时器时，可以将它添加到 runloop： [displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes]; 但是 displayLink 会持有 UIView 对象，导致 UIView 永远不会被释放。因此我们需要在一个适当的时机释放 displayLink，比如在 CADisplayLink 的 action 方法中根据一定的条件来 invalidate 它： -(void)animateDashboard:(CADisplayLink *)sender&#123; if( endValue &lt;= self.value)&#123;// 到达终点值，停止动画 ...... [displayLink invalidate]; ...... &#125;else&#123; ...... &#125;&#125; 另外，CADisplayLink 最好不要复用。也就是说，每次启动 CADisplayLink 时都重新初始化并将它添加到 runloop，而每次停止动画时都 invalidate： -(void)animating&#123; if(_stopped == YES)&#123; displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(blink:)]; [displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes]; _stopped = NO; [self setNeedsDisplay]; &#125;&#125;-(void)stopAnimating&#123; if(_stopped == NO)&#123; [displayLink invalidate]; _stopped = YES; &#125;&#125; reloadRowsAtIndexPaths 导致的内存泄漏 UITableView 的 reloadRowsAtIndexPaths 的行为非常奇怪，在刷新 cell 时，它并不会重用原有的 cell，而是重新创建新的 cell 覆盖在原来的 cell 上，这会导致额外的内存开销。当重复多次调用 reloadRowsAtIndexPaths 之后，你可以在视图调试器中看下效果：无论你用不用 beginUpdates/endUpdates，结果都是一样。解决的办法目前只有一个，不要用 reloadRowsAtIndexPaths，而是使用 reloadData，当然会有一点性能上的代价，但也是没有办法的事情 定时器导致的内存泄漏问题 有时候 NSTimer （尤其是 repeated 为 YES 时）会导致内存泄漏问题。因为定时器是在另外一个线程中运行的，当界面消失后，定时器仍然还在运行，如果在定时器任务中引用了 UI 元素，则这些视图都会被强引用，从而导致界面消失后 view 无法释放，导致内存泄漏。因此，如果在你的 UIViewController 中使用了定时器，一定要记得在 viewWillDisappear 方法中 invalidate 它 addScriptMessageHandler 导致的内存泄漏 WKUserContentController 的 addScriptMessageHandler 方法会导致一个对 handler 对象的强引用，从而导致 handler （通常是 webView 所在的 ViewController）不会被释放，于是内存泄漏。解决的办法是 removeScriptMessageHandlerForName。根据官方文档，当你 addScriptMessageHandler 之后，需要在不再需要 handler 时，需要调用 removeScriptMessageHandlerForName 解除 handler 的强引用。问题在于，“当你不在需要它的时候”到底是什么时候？我们一般会在 viewDidLoad 中 addScriptMessageHandler，按道理应该在 dealloc 中 removeScriptMessageHandlerForName。但由于内存都已经泄漏了，ViewContoller 的 dealloc 根本不会调用，这个方法是无效的。解决的办法有两个，一个是将 addScriptMessageHandler 放到 viewDidAppear 中执行，那么我们就可以在 viewDidDisappler 中 removeScriptMessageHandlerForName 了。另一个方法是将 handler 弱引用。这需要新建一个类，创建一个弱引用的属性，用这个属性来包装 handler 对象： @interface WeakScriptMessageDelegate : NSObject&lt;WKScriptMessageHandler&gt;// 1@property (nonatomic, weak) id&lt;WKScriptMessageHandler&gt; scriptDelegate;- (instancetype)initWithDelegate:(id&lt;WKScriptMessageHandler&gt;)scriptDelegate;@end@implementation WeakScriptMessageDelegate- (instancetype)initWithDelegate:(id&lt;WKScriptMessageHandler&gt;)scriptDelegate&#123; self = [super init]; if (self) &#123; _scriptDelegate = scriptDelegate; &#125; return self;&#125;// 2- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123; [self.scriptDelegate userContentController:userContentController didReceiveScriptMessage:message];&#125;@end 这个属性就是用来弱引用 handler 的属性，它保存了一个对 handler 的弱引用。类型是 id，因为 addScriptMessageHandler 方法需要一个 WKScriptMessageHandler 对象作为参数 这个对象对 WKScriptMessageHandler 进行了封装，它同样实现了 WKScriptMessageHandler 协议，这个协议中有一个唯一的方法需要实现，即 userContentController 方法。在方法内部，我们可以直接调用 handler 的同名方法实现（因为二者的行为是一致的） 使用 / 将 handler 转换成一个若引用的 handler,从而避免内存泄漏WeakScriptMessageDelegate* weakHandler = [[WeakScriptMessageDelegate alloc] initWithDelegate:handler];[webView.configuration.userContentController addScriptMessageHandler:weakHandler name:methodName]; MLeaksFinder 内存泄漏问题多种多样，它们经常以出乎人意料的形式存在，我们无法以一种固定的模式来判断 app 中存在的内存泄漏问题。我们常常需要使用多个工具和手段来检查 app 中的内存问题，比如可以用 Xcode 的 Analyze 工具对代码进行静态语法分析，用 Instrument 的 Leaks/Allocations 工具进行动态内存检查分析，用视图调试器查看 UI 问题等等。 但我们还可以用许多第三方内存泄漏检测框架，比如：MLeaksFinder 和 HeapInspector-for-iOS，尤其是前者（后者目前会导致 App “冻死”的问题，作者还在解决这个问题）。 MLeaksFinder 是一个专门用于检测 UI 类内存泄漏的工具，我们可以利用它来检测 UIViewController 和 UIView 中未 dealloc 的 subview。 它的使用非常简单，直接 pod MLeaksFinder，然后找到 MLeaksFinder.h 头文件，将其中的 MEMORY_LEAKS_FINDER_ENABLED 宏和 MEMORY_LEAKS_FINDER_RETAIN_CYCLE_ENABLED 宏打开（设置为 1）就可以了。 编译运行 app，测试各种操作，切换到不同的 view controller，当 MLeaksFinder 发现内存泄漏会弹出一个 alert（同时控制台会有输出），告诉你哪个类和 UIView 中存在内存泄漏（以及循环持有）]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-NSSet]]></title>
    <url>%2F2017%2F12%2F06%2FOC%2FGrammar%2FiOS-NSSet%2F</url>
    <content type="text"><![CDATA[NSSet初始化 NSSet是无序的注意:这个是最为重要的功能 NSSet中不能够存储重复的数据,可以用它来去除重复的值 NSString * str1 = @"one"; NSString * str2 = @"two"; NSString * str3 = @"three"; NSSet * set = [[NSSet alloc] initWithObjects:str1,str2,str3,str1, nil]; 这样其实在set中指存储了 @“one”,@“two”,@“three” set.count 值为3[set containsObject:str1]; 是否包含str1 遍历NSEnumerator * enumerator = [set objectEnumerator]; NSString * value; while (value = [enumerator nextObject]) &#123; NSLog(@"value %@",value); &#125; 可变集合NSMutableSet 创建一个可变集合 NSMutableSet * muSet = [[NSMutableSet alloc] init]; 增加值 [muSet addObject:str1]; 删除 [muSet removeObject:str1]; 删除所有 [muSet removeAllObjects]; 集合之间相互转换 NSArray 转换成 NSMutableArray NSArray * array = @[@"one",@"two",@"three"];NSMutableArray * muArray = [NSMutableArray arrayWithArray:array]; NSDictionary 转换成 NSMutableDictionary NSDictionary * dic = @&#123;@"one":@"1",@"two":@"2"&#125;;NSMutableDictionary * muDic = [NSMutableDictionary dictionaryWithDictionary:dic]; NSSet 转换成 NSMutableSet NSSet * set = [[NSSet alloc] initWithObjects:@"one",@"two", nil];NSMutableSet *muSet = [NSMutableSet setWithSet:set]; NSArray 转换成NSSetNSMutableSet * muSet2 = [NSMutableSet setWithArray:array]; NSDictionary 转化成NSArrayNSArray * keys = [dic allKeys];NSArray * values = [dic allValues]; 字符串转换成数组NSString * str = @"aa.bb.cc";NSArray * strArray =[str componentsSeparatedByString:@“."];]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
        <category>NSSet</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>UIKit</tag>
        <tag>NSSet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-NSDictionary-字典]]></title>
    <url>%2F2017%2F12%2F06%2FOC%2FGrammar%2FiOS-NSDictionary-%E5%AD%97%E5%85%B8%2F</url>
    <content type="text"><![CDATA[#初始化 创建字段,不可变的 NSDictionary * dic = [NSDictionary dictionaryWithObjectsAndKeys:@"s",@"name", nil]; 快捷创建方式 NSDictionary * dic2 = @&#123; @"one":@"1",@"two":@"2"&#125;;dic2.count 获得字典长度 遍历NSArray * keys = [dic3 allKeys]; for (int i = 0; i &lt; keys.count; i++) &#123; NSString * key = [keys objectAtIndex:i]; //如果你的字典中存储的多种不同的类型,那么最好用id类型去接受它 id obj = [dic3 objectForKey:key]; NSLog(@"obj %@",obj); &#125; 枚举器 NSEnumerator * enumerator = [dic3 objectEnumerator];id value;while (value = [enumerator nextObject]) &#123; NSLog(@"value %@",value);&#125; 可变字典NSMutableDictionary 创建一个可变长度字典 NSMutableDictionary * muDic = [[NSMutableDictionary alloc] initWithCapacity:0]; 向字典中村如数据 [muDic setObject:@"1" forKey:@"one"]; 删除 [muDic removeObjectForKey:@“one"]; 全部删除 [muDic removeAllObjects];]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
        <category>NSDictionary</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>UIKit</tag>
        <tag>NSDictionary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-NSArray-数组]]></title>
    <url>%2F2017%2F12%2F06%2FOC%2FGrammar%2FiOS-UIKit-NSArray-%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[初始化、取值等基础操作 NSArray 是不可变数组,一旦创建完成就不能够对数组进行,添加,删除等操作 NSArray * array = [[NSArray alloc] init]; NSArray * array1 = [NSArray arrayWithObjects:@"one",@"two",@"three", nil]; ``` &gt;在创建一个NSArray的时候最后一个元素一定是nil 不要把nil存到数组中，会导致数据丢失&gt;数组实际上存储的时对象的地址,同样也可以存储数组的地址```objectivec NSArray * a1 = [[NSArray alloc] initWithObjects:@"one",@"two",@"three", nil]; NSArray * a2 = [[NSArray alloc] initWithObjects:@"1",@"2",@"3", nil]; NSArray * a3 = [[NSArray alloc] initWithObjects:a1,a2, nil];``` &gt;创建数组的快捷方式```objectivec NSArray * array = @[@"a",@"b",@"c"]; 快速获得一个数组中的元素 NSString * str = array[0]; [array objectAtIndex:0]; 数组的index从0开始 [array count] 获得元素个数[array containsObject:p1] 判断数组中是否包含某个对象 遍历数组 普通的for循环 for (int i = 0; i &lt; array.count; i++)&#123; NSString * str = array[i]; NSLog(@"array[%d] = %@",i,str);&#125; 使用增强for循环的方式遍历数组 for (NSString * str in array)&#123; NSLog(@"str = %@",str);&#125; 枚举器 NSArray * array = @[@"one",@"two",@"three"];NSEnumerator * enumerator = [array objectEnumerator];NSString * value;while (value = [enumerator nextObject]) &#123; NSLog(@"enum str %@",value);&#125; 数组排序 使用sortedArrayUsingSelector [array sortedArrayUsingSelector:@selector(compare:)] 使用block方式排序 array2 = [array2 sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) &#123; /* NSComparisonResult result = [obj1 compare:obj2]; return result; */ //obj1 compare obj2 就是正序排序 //return [obj1 compare:obj2]; //obj2 compare obj1 就是倒序排序 return [obj2 compare:obj1]; &#125;]; 如果你向给你自己定义的对象排序,必须根据某一个属性来排序,如果你向给你自己定义的对象排序,必须根据某一个属性来排序,sortDescriptorWithKey 参数要的就是你对象中,要依据哪个属性来排序,你就把哪个 属性的名字当成key传入ascending YES表示正序 NO表示倒叙 NSSortDescriptor * d1 = [NSSortDescriptor sortDescriptorWithKey:@"age" ascending:NO]; NSSortDescriptor * d2 = [NSSortDescriptor sortDescriptorWithKey:@"year" ascending:NO]; ``` &gt;如果你要使用多个属性进行排序,默认在前面的NSSortDescriptor优先级比较高```objectivec NSArray * description = @[d2,d1]; array3 = [array3 sortedArrayUsingDescriptors:description]; 可变数组NSMutableArray 创建可变数组 NSMutableArray * array = [[NSMutableArray alloc] initWithCapacity:0]; 使用addObject 动态给数组中增加元素 [array addObject:@“one"]; 数组中可以存储,同一个对象多次指定对象插入的位置 [array insertObject:str1 atIndex:2]; 删除 会通过对象,删除数组中所有的同一个地址的对象 [array removeObject:str1]; 通过索引的方式删除对象,超出了数组的count值,那么就会导致异常 index beyond bounds [array removeObjectAtIndex:0];[array removeAllObjects];]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-AccessControl-访问控制]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FAccessControl-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[AccessControl访问控制 Swift和C++，Java一样，也有访问控制的概念。通过访问权限的控制，我们可以对外隐藏内部的代码细节，防止修改。Swift的访问控制是基于模块（modules）和源文件（source file） Swift的模块概念是这样的： 1、一个App bundle，或者一个framework都可以看成一个独立的module。 你可以使用import来引入别的module到你的module中来。当你将你的代码打包成一个framework，这个framework就是一个module。里面的所有的东西都是属于这个framework，无论你将这个framework引入到别的framework或app中。 2、一个源文件里面虽然可以定义多个类，但是建议一般一个源文件建立一个类。 Swift的访问权限有：open，public，internal，fileprivate，private 1、public 这个权限允许同一个module内部的所有源代码访问，同时允许其他引入了该module的module使用。总的来说就是全开放 2、internal 这个权限允许同一个module内部的所有源代码访问，不允许其他module使用。 3、private 这个权限仅允许同一个source file的代码访问。 Swift的默认访问权限是internal。 public是最高访问权限，而private是最低访问权限。 Swift的权限编程原则： 一、高权限的东西不能包含在低权限的东西里面。 举例： 1、说就是一个public的类型不能定义在一个声明为internal的类型里面。 2、方法的权限不能高于参数和范围值的权限。否则会导致这个方法没法使用。 二、单一app中 一般就用默认的internal就行了。如果你想对其他源文件隐藏，可以使用private。 三、framework中 对于要提供给外边使用的属性，方法。必须使用public权限。其他的可以默认使用internal。如果相对framework里面的其他源文件隐藏，可以使用private。 四、单元测试中 单元测试和我们编写的代码属于不同的module，所以测试模块一般只能访问到public的东西。但是在引入要测试的模块的时候可以加上@testable，这样测试模块就可以访问了。然后要允许被测试的单元可以测试 public class SomePublicClass &#123;&#125; internal class SomeInternalClass &#123;&#125; private class SomePrivateClass &#123;&#125; public var somePublicVariable = 0 internal let someInternalConstant = 0 private func somePrivateFunction() &#123;&#125; 给类型定义访问权限的时候，会影响到类型里面的成员（属性，方法，下标，构造器） 1、将一个类型定义为private后，它里面的成员都是private的。 2、将一个类型定义为public或internal后，它里面的成员还是internal的。如果要某个成员变为public，必须在该成员里面加上public。 Tuple Tuple的访问权限由tuple成员里面访问权限最小那个决定。 方法 方法的访问权限由方法的参数和返回值中最小权限的那个决定。当方法的权限是private的时候，方法的前面要加上private关键字。 枚举类 枚举类型的成员变量的访问权限决定于枚举类型。例如你定义了一个public的枚举类型，那么它里面的case成员都是public的，不允许单独给每个case成员定义访问权限。case成员的raw vlaue的值的权限必须大于等于枚举类的访问权限。 内部类 定义在private类型里面的内部类是private权限；定义在public或internal类型里面的内部类默认是internal类型。如果想要定义在public类型里面的内部类变为public的话，需要自己显式给内部类加上public。 子类 子类不能比父类具有更高的访问权限。但是可以重写父类当前能访问到的父类成员，而且可以重写成更高权限的成员 public class A &#123; private func someMethod() &#123;&#125; &#125; internal class B: A &#123; override internal func someMethod() &#123; super.someMethod() &#125; &#125; 里再补充一点，如果父类是public类的，继承之后不加权限修饰符的话，那么这个子类是internal的属性，常量，变量和下标的访问权限不能超过它所属的类型的权限 getter和setter方法 这两个方法的访问权限默认和属性的是一样的。但是可以修改setter的权限，可以将setter的权限修改得比属性的权限低，但是不能比属性的权限高 public class Animal &#123; public internal(set) var age: Int = 0 &#125; 构造器 构造器的权限不能大于它所属类型的权限。除了标志有require的构造器之外，这种构造器的权限必须和它所属的类的权限相同。构造器参数的权限不能低于构造器。 默认构造器 默认构造器的默认权限和类型权限一样。但是如果类型是public，那么默认构造器还是internal的，想要public的无参构造器必须自己实现。对于结构体的memberwise构造器，想要public的，也要自己实现。 协议 协议的需求的权限和协议权限是一样的，协议是public的，那么需求也是public的。继承的协议的权限最多只能有父类的权限。例如：不能继承一个internal的协议为一个public协议。 协议的一致性 类型可以实现比自己访问权限低的协议。比如，可以定义一个public的类，它可以实现一个internal的类，并且只能在定义了该协议的模块中使用。实现了协议的类访问权限是它本身和采用协议中的最低访问权限。也就是说如果一个类是public的级别，实现的是internal的协议，那么采用这个协议之后，该类的访问权限也是internal的。如果你采用了协议，那么实现协议方法之后，该方法的访问权限遵循协议的访问级别。例如：一个public的类，采用了internal的协议之后，那么该类的实现协议的方法至少也是internal的。 扩展 扩展的默认访问权限由所扩展类型的访问权限决定。 如果你扩展了一个public的类型，那么扩展的成员的默认访问权限就是internal。如果扩展一个private类型，那么扩展的默认访问权限就是private。当然可以自己给扩展自定义访问权限。但是权限不能超过所扩展的类型。另外可以自己给扩展成员再自定义权限。如果你是用扩展来实现协议，那么这个扩展不允许自定义权限，它的权限由协议的权限决定。 泛型 泛型分为泛型类型和泛型方法泛型类型的权限是 泛型类型和泛型参数 之间最小的那个权限。泛型方法的权限是 泛型方法和泛型参数 之间最小的那个权限。 类型别名 每个类型别名都可以看做是对类型的访问权限的定义。但是类型别名的权限必须小于或等于要别名的类型。比如一个private的类型别名可以为private，public，internal的类型进行别名；但是一个public的类型别名不能为internal和private的类型进行别名。]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>AccessControl</category>
      </categories>
      <tags>
        <tag>Grammar</tag>
        <tag>Swift</tag>
        <tag>AccessControl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Generics-泛型]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FGenerics-%E6%B3%9B%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[泛型 接受其它函数作为参数的函数有时被称为高阶函数泛型函数 写一个函数的时，一般都会指明参数的类型一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值如果想要声明一个变量参数，可以在前面加上var，这样就可以改变这个参数的值 //此时这个id值可以在函数中改变 func getName(var id:String)......... 一般默认的参数传递都是传值调用的，而不是传引用。所以传入的参数在函数内改变，并不影响原来的那个参数。传入的只是这个参数的副本下面两个实现交换变量的函数 func swapTwoInts( a:inout Int, b:inout Int)&#123; let t = a // 0 a = b // 100 b = t // 0&#125;var x = 0,y = 100print("x = \(x) ;y = \(y)")//打印x = 0 ;y = 100//交换变量的函数swapTwoInts(a: &amp;x, b: &amp;y)print("x = \(x) ;y = \(y)")x = 100 ;y = 0 上面的只是限于交换整形。但是如果我们相对Double或Float类型，甚至是任何类型的数据实现交换的功能，我们都要分别写一个函数。这是无比麻烦的 所以有了泛型这个概念，泛型就是模糊的类型函数的功能实现和具体类型没关系的时候，就可以使用泛型(感觉类似OC的 id 类型)将上面实现两个变量交换的功能用一个方法完成，这个方法可以用于不同的数据类型swapTwoInts 理解为一个函数族,类型参数 T 的每个选择都会确定一个新函数,该函数接受一个T型数组和一个 T -&gt; T类型的函数作为参数,并返回一个[T]类型的数组 func swapTwoInts&lt;T&gt;( a: inout T, _ b: inout T)&#123; let t = a a = b b = t&#125;var x = 8.12,y = 100.1print("x = \(x) ;y = \(y)") //x = 8.12 ;y = 100.1swapTwoInts( a: &amp;x, &amp;y)print("x = \(x) ;y = \(y)") //x = 100.1 ;y = 8.12问题：x = 8 y = 100.1 发生错误，整数和浮点型数如何写交换方法？？？ 主要的语法就是上面的，这个T就是代表某个类型，但是没有指明具体是哪种类型。而且这个T，可以换成你希望的标示符，只要不是关键字。并且一般要求单词的首字母要大写，比如Element、Value等。而且能指定多个类型，见下面的类型约束 泛型的函数调用方法和普通函数是一样的下面创建了两个Animal实例，然后使用刚刚定义的函数交换数据。 class Animal&#123; var life = 0&#125;var cat = Animal()cat.life = 1var dog = Animal()dog.life = 2swapTwoInts(cat.life, dog.life) //报错！！ 方面交换方法不能交换。。醉了print(cat.life) print(dog.life) 泛型举例分析 参考 // mapfunc map&lt;Element,T&gt;(xs:[Element],transfom:(Element) -&gt;T)-&gt;[T]&#123; var result :[T] = [] for x in xs&#123; result.append(transfom(x)) &#125; return result &#125;func genericComputeArray&lt;T&gt;(xs: [Int], transfom: (Int) -&gt; T) -&gt; [T] &#123; return map(xs: xs, transfom: transfom) &#125;这块 不是很理解 顶层函数和扩展写一个函数,它接受一个给定的整型数组,通过计算得到并返回一个新数组。要求：新数组各项为原数组中对应的整型数据加一。for 循环能实现 泛型类型 定义一个类型，但是它可以对不同类型的数据进行操作比如Array和Dictionary这两个集合结构体，他们可以装不同类型的数据，这就是泛型类型 官方文档展示一个泛型类型的栈，使用Array来实现 struct Stack&lt;Element&gt; &#123; var items = [Element]() mutating func push(item: Element) &#123; items.append(item) &#125; mutating func pop() -&gt; Element &#123; return items.removeLast() &#125; &#125; 然后在创建这种泛型类型实例的时候，我们必须指定所属的类型 var stackOfStrings = Stack&lt;String&gt;() stackOfStrings.push("uno") 泛型约束 我们可以对泛型进行约束，让他们必须遵守某些协议，官方文档语法如下 func someFunction&lt;T: SomeClass, U: SomeProtocol&gt;(someT: T, someU: U) &#123; // function body goes here &#125; 同时还可以添加where约束符再对泛型进行限制 func someFunction&lt;T: SomeClass, U: SomeProtocol where T.someItem == U, U.someItem: SomeClass2&gt;(someT: T, someU: U) &#123; // function body goes here &#125; 关联类型 在定义协议的时候，我们可能需要定义一个或多个类型作为我们协议的一部分。而这些类型是不确定的，只有到具体的类实现协议的时候才能确定，这个时候我们可以使用关联类型来实现。所谓的关联类型就是一个占位符，等到具体实现协议的时候才知道它具体是什么类型。官方例子如下 protocol Container &#123; typealias ItemType mutating func append(item: ItemType) var count: Int &#123; get &#125; subscript(i: Int) -&gt; ItemType &#123; get &#125; &#125; 然后在实现协议的时候，我们可以指定ItemType具体是什么类型 struct IntStack: Container &#123; // original IntStack implementation var items = [Int]() mutating func push(item: Int) &#123; items.append(item) &#125; mutating func pop() -&gt; Int &#123; return items.removeLast() &#125; // conformance to the Container protocol typealias ItemType = Int mutating func append(item: Int) &#123; self.push(item) &#125; var count: Int &#123; return items.count &#125; subscript(i: Int) -&gt; Int &#123; return items[i] &#125; &#125; &gt;同时又因为有Swift的类型判断机制，所以我们在实现了协议的其他方法之后，编译器会自动判断关联类型是什么，不需要我们显式地指定。所以上面代码指定关联类型为Int的那行可以删去。 泛型OC是不支持的，但是java支持。使用泛型能给编程带来很大的便利]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Extension扩展]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FExtension%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[Extension扩展 Swift中的扩展就是OC中的分类。但是这里的扩展可以对类、结构体、枚举类进行添加。使用扩展，我们可以在不接触源代码的前提下，对已有的代码进行功能上的添加。 Swift中的扩展提供的一些功能： 1、添加计算属性或类计算属性，但是不能添加存储属性。 2、添加实例方法或类别方法。但是不能覆盖已经存在的方法。 3、定义新的构造器。 4、定义和使用新的嵌套类。 5、令已经存在的类型遵守协议。 假设我们已经有了一个Animal类，但是不能得到它的源代码 class Animal &#123; var life: Int = 0 var height: Double = 0 &#125; 我们利用扩展，对Animal添加一个计算属性和方法、构造器还有嵌套类。 当然也可以添加下标，但这里不演示了 extension Animal &#123; //扩展计算属性 var lifeYear : Double &#123; return Double(self.life) / 365 &#125; //扩展构造器 convenience init(life: Int, height: Double) &#123; self.init() self.life = life self.height = height &#125; //扩展方法 func makeSound() -&gt; String &#123; return "I can live \(lifeYear) years" &#125; // 扩展嵌套类 enum Size &#123; case Big, Small, SuperSmall &#125; // 扩展一个使用嵌套类的计算属性 var size: Size &#123; switch height &#123; case let h where h &gt; 10: return .Big case let h where h &gt; 0.1: return .Small default: return .SuperSmall &#125; &#125; &#125; var a = Animal(life: 3365 * 7, height: 0.001) print(a.size) // SuperSmall print(a.lifeYear) // 7.0 print(a.makeSound()) // I can live 7.0 years 面代码需要注意的是扩展构造器的时候，在构造器的时候讲过，在扩展中添加构造器是不会影响默认构造器的产生。不能添加原来已有的构造器。另外在类扩展里面，是不给添加指定构造器或析构器，只能添加便利构造器。在便利构造器中，要先调用原来的构造器来初始化类后，才能对类进行访问。 扩展还有一个作用就是让类遵守协议。这部分留到协议里面讲下面将以前将过的麻烦的String类型做一个扩展，使得方便截串和获取长度 extension String &#123; //获取字符串长度 var length: Int &#123; return self.characters.count &#125; //获取部分字符串，如果不在范围内，返回nil。如果end大于字符串长度，那么截取到最后 subscript (start: Int, end: Int) -&gt; String? &#123; if start &gt; self.length || start &lt; 0 || start &gt; end &#123; return nil &#125; let begin = self.startIndex.advancedBy(start) var terminal: Index if end &gt;= length &#123; terminal = self.startIndex.advancedBy(length) &#125; else &#123; terminal = self.startIndex.advancedBy(end + 1) &#125; let range = Range(start: begin, end: terminal) return self.substringWithRange(range) &#125; //获取某个字符，如果不在范围内，返回nil subscript (index: Int) -&gt; Character? &#123; if index &gt; self.length - 1 || index &lt; 0 &#123; return nil &#125; return self[self.startIndex.advancedBy(index)] &#125; &#125; 然后就可以这样截串 var s = "哈0123456789" print(s.length) // 11 print(s[0,2]) // Optional("哈01") print(s[9]) // Optional("8")]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Error-Handling错误处理]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FError-Handling-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[Swift-错误 Swift提供了一套完整的错误抛出-捕获-处理机制Swift采用Error协议来表示错误类型，通过do-try-catch的方式来处理可能会抛出异常的代码 Optional 可选值表示一个值要么有值，要么是nil。在Swift中，Optional是用enum写的， public enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral &#123; case none case some(Wrapped) //...&#125; 当发生错误的时候，返回一个可选值是常见的处理方式。但是，这种方式的有一个很明显的缺点 调用者不清楚为什么失败 不好进行相关的处理 Error协议与throws Error是一个空的协议，用来表示错误类型 NSError和CFError都遵循了这个协议 在Swfit中，枚举是一个特别适合用来处理Error的数据类型。首先定义一个类Person表示人 enum Sex&#123; case male case female&#125;class Person&#123; let sex:Sex var money:CGFloat init(sex:Sex ,money:CGFloat) &#123; self.sex = sex self.money = money &#125;&#125; Person可以结婚，结婚的时候会发生一些错误，比如钱不够，比如性别不对，用枚举来表示 enum MarryError : Error&#123; case lackMoney case wrongSex&#125; 方法的实现如下 extension Person&#123; func marry(with another: Person) throws -&gt; Bool&#123; guard self.sex != another.sex else&#123; throw MarryError.wrongSex &#125; guard self.money + another.money &gt; 100000 else &#123; throw MarryError.lackMoney &#125; return true &#125;&#125; 一个带有throws关键字的函数，调用的时候有两种方式选择 ①❶使用 do-try-catch 代码块 let tom = Person(sex: .male, money: 100000)let jack = Person(sex: .male, money: 100000)do&#123; try tom.marry(with: jack)&#125;catch MarryError.wrongSex &#123; print("Two Person have same sex")&#125;catch MarryError.lackMoney&#123; print("Oh, they do not have enough moeny")&#125;catch let error&#123; print(error)&#125; ❷不需要区分每一个Error，也可以这么调用 do&#123; try tom.marry(with: jack)&#125;catch let error&#123; print(error)&#125; ②使用 try?，对于有返回值的throws函数，使用try?会把结果转换为可选值 let tom = Person(sex: .male, money: 100000)let jack = Person(sex: .male, money: 100000)if let result = try? tom.marry(with: jack)&#123;//成功&#125;else&#123; print("Error happen")&#125; defer关键字 defer关键字用来处理类似Ojective C中@try-@catch-@finally中，@finally的作用比如，打开文件，如果抛出错误的话，我们总希望关闭这个文件句柄 func contents(of filePath:String) throws -&gt; String&#123; let file = open(filePath,O_RDWR) defer &#123; close(file) &#125; //...&#125;defer代码块的内容在退出作用域之前会被执行 关于defer的注意 多个defer会按照逆序的方式执行。 当你的程序遇到严重错误，比如fatalError,或者强制解析nil，或者segfaults的时候，defer的代码块并不会执行。 rethrow rethrow关键字在高阶函数中比较常见，所谓高阶函数，就是一个函数的参数或者返回值是函数类型最常见的比如，Sequence协议map方法比如： let array = [1,2,3]let result = array.map&#123;$0 * 2&#125; 由于map函数传入的是一个闭包，这个闭包可能会抛出错误由参数抛出的错误最后会向上传递给map函数 enum MapError : Error&#123; case invalid&#125;func customMapper(input:Int) throws -&gt; Int&#123; if input &lt; 10&#123; throw MapError.invalid &#125; return input + 1&#125;let array = [1,2,3]let result = array.map(customMapper) 这样是编译不通过的调用的时候需要：按照上文提到的throws关键字的路子来 do &#123; let result = try array.map(customMapper)&#125; catch let error&#123;&#125; 这就是rethrows关键字的精髓所在rethrows 关键字表示当参数闭包标记为throws的时候，函数本身为throws。如果参数闭包不会抛出错误，则函数也不会通过这个关键字，你不必每次都进行try-catch Result类型 一个函数执行要么成功，要么失败。成功的时候我们希望返回数据，失败的时候我们希望得到错误信息，这就是Result类型，一个典型的Result类型如下： enum Result&lt;T&gt;&#123; case success(T) case failure(error:Error)&#125; 通过Result类型，不再需要可选值或者do-try-catch来包裹你的代码用Result类型对上述marry函数进行重写 extension Person&#123; func marry(with another: Person) -&gt; Result&lt;Bool&gt;&#123; guard self.sex != another.sex else&#123; return .failure(error: MarryError.wrongSex) &#125; guard self.money + another.money &gt; 100000 else &#123; return .failure(error: MarryError.lackMoney) &#125; return .success(true) &#125;&#125; 然后，这么调用 let tom = Person(sex: .male, money: 100000) let jack = Person(sex: .male, money: 100000) let result = tom.marry(with: jack) switch result &#123; case let .success(value): print(value) case let .failure(error): print(error)&#125; Result链 Swift中有可选链，来处理多个可选值的连续调用。同样的，我们也可以为Result类型来添加链式调用： 如果上一个调用结果是.success, 则继续调用下一个 如果上一个调用结果是.failure, 则传递failure给下一个 用extension来实现 extension Result&#123; func flatMap&lt;V&gt;(transform:(T) throws -&gt; (V)) rethrows -&gt; Result&lt;V&gt;&#123; switch self &#123; case let .failure(error): return .failure(error: error) case let .success(data): return .success(try transform(data)) &#125; &#125;&#125; 于是，可以这么调用 resut.flatMap(&#123;//转换1&#125;).flatMap(//转换2)... 一旦失败，中间有一次flatMap转换失败，则之后的转换逻辑都不会执行进阶：Result类型在Swift版本的Promise中大行其道，可以参见PromiseKit的源码，promise让异步处理变得优雅 assert/precondition Swift也有断言支持在Swfit中，断言是一个函数断言仅在Debug模式下进行检查，帮助开发者发现代码中的问题 func assert(_ condition: @autoclosure () -&gt; Bool, _ message: @autoclosure () -&gt; String = default, file: StaticString = #file, line: UInt = #line) 如果需要在Relase模式下也进行检查，则使用precondition func precondition(_ condition: @autoclosure () -&gt; Bool, _ message: @autoclosure () -&gt; String = default, file: StaticString = #file, line: UInt = #line) 桥接到Objective C 使用NSError来处理错误的的Objective 方法 //NSFileManager- (BOOL)removeItemAtURL:(NSURL *)URL error:(NSError * _Nullable *)error; 在Swift中会被自动的转换成 func removeItem(at URL: URL) throws 但是，纯Swfit的Error桥接的Objective C的时候，会有一些问题因为NSError需要 domain和code等详细信息可以让Swift的Error实现CustomNSError协议，来提供这些需要的信息 enum MarryError : Error&#123; case lackMoney case wrongSex&#125;extension MarryError : CustomNSError&#123; static let errorDomain = "com.person.marryError" var erroCode:Int&#123; switch self &#123; case .lackMoney: return -100001 case .wrongSex: return -100002 &#125; &#125; var errorUserInfo:[String:Any]&#123; return [:] &#125;&#125; 相关的，还有两个协议LocalizedError和RecoverableError Swift的错误处理是用来处理运行时错误的 当错误发生时，你可以选择抓错误，或者继续往上抛出错误。当一个运行时错误最终没办法处理的时候，程序就会崩溃。 Swift中有一个空的协议用来给用户自定义错误。一般使用枚举类实现这个协议来自定义错误。如下 enum ComputerError: ErrorType &#123; case NoGameError case MemoryError case HardDiskError &#125; 这里定义了三种error。当你要抛出一个error的时候，使用throw关键字。如下 throw ComputerError.NoGameError 可以抛出错误的函数的定义 func canThrowErrors() throws -&gt; String func cannotThrowErrors() -&gt; String 利用上面的语法，我们定义一个Computer类，这个类有一个playGame方法，它会在某些情况下抛出错误 class Computer &#123; var memory = 1024 var hardDisk = 4000 var games = [ "War3": Requirement(memory: 512, HardDisk: 1500), "LOL": Requirement(memory: 1500, HardDisk: 3000), "My World": Requirement(memory: 256, HardDisk: 500)] func playGame(gameName: String) throws -&gt; Bool&#123; guard let game = self.games[gameName] else &#123; throw ComputerError.NoGameError &#125; guard game.HardDisk &lt; self.hardDisk else &#123; throw ComputerError.HardDiskError &#125; guard game.memory &lt; self.memory else &#123; throw ComputerError.MemoryError &#125; return true &#125; &#125; 注意一点的是，如果你要调用能抛出错误的函数的时候，必须使用try、try?或者try!关键字在前面，如下 try myPC.playGame("War4") //这句会因为没有War4这个游戏而抛出NoGameError错误 下面是处理错误的部分。当调用一个可以抛出错误的方法的时候，一般有三种处理方法。第一种是调用者继续向上抛出这个错误。这种情况下，这个调用者也必须是一个可以抛出错误的函数。如果最后没处理这个错误，那么程序崩溃。第二种是使用do…catch语句对错误进行处理。第三种是使用try?或try!调用会抛出错误的函数 第一种方法举例，再定义一个Person类，它的play方法里面调用了Computer的playGame方法，然后继续抛出这个错误 class Person &#123; var pc = Computer() func play() throws &#123; try self.pc.playGame("SC2") &#125; &#125; 第二种方法举例，使用do…catch语句处理。在do范围里面，我们可以调用会产生错误的方法。接着的catch语句可以接上要处理的错误类型 class Person &#123; var pc = Computer() func play() &#123; do &#123; try self.pc.playGame("LOL") print("have fun") &#125; catch ComputerError.NoGameError &#123; print("NoGameError") &#125; catch ComputerError.MemoryError &#123; print("MemoryError") &#125; catch ComputerError.HardDiskError &#123; print("HardDiskError") &#125; catch &#123; print("other error",error) &#125; &#125; &#125; 值得注意的是最后一个catch。这里并没有加上要处理的错误。这的catch会捕捉所有类型的错误。另外还有一个问题，如果不加上这个捕捉所有类型的catch语句。调用playGame的那句会报错说catch没有穷尽会抛出的错误。但是我只有三个错误，照理来讲应该是已经穷尽的了。不知道是Swift的问题，还是我代码哪里有问题。但如果把这个调用放到main.swift中去，也是只使用3个catch，就不会报错。搞不懂。我现在的处理方式是把这个play方法继续写成一个可以抛出错误的方法。只处理自定义的三种错误。其他错误往上抛 class Person &#123; var pc = Computer() func play() throws &#123; do &#123; try self.pc.playGame("LOL") print("have fun") &#125; catch ComputerError.NoGameError &#123; print("NoGameError") &#125; catch ComputerError.MemoryError&#123; print("MemoryError") &#125; catch ComputerError.HardDiskError &#123; print("HardDiskError") &#125; &#125; &#125; 第三种是使用try?或try!调用会抛出错误的函数。在官方文档里面，它原意是使用try?去处理一个会抛出错误的方法的返回值，如果这个方法抛出错误，那么会得到nil。如果没有错误，那么将函数返回值包装成可选类型后返回 var myPC = Computer() var result = try? myPC.playGame("War3") //这里playGame没有抛出错误，所以返回了Bool可选类型，值为true ry!的区别是它默认调用方法是不会报错的，如果调用的方法报错，那么会得到运行时错误。即使你将这个try!写到了一个会抛出错误的方法里面，它也不会向上抛出这个错误。而是直接崩溃。 try? 、try! 和try 三者的区别： try在一个会抛出错误的方法里面，它会把产生的错误交由catch处理或者向上抛出。 try?是出错的时候返回一个nil，屏蔽错误。没错的话，将结果包装成一个可选类型返回。 try!是在没错的情况下返回函数返回值。出错的情况下直接崩溃。错误不会再交给catch处理或者向上抛出。 所以如果在do catch里面将try改为try?或者try!，那么会有一个警告说catch永远不会执行。 defer语句 熟悉java的朋友应该知道finally语句。这个是在try..catch里面无论是否有错误，在退出try..catch范围的时候，最后都会执行finally范围内的代码。一般是用来做一些诸如关闭文件的工作。因为无论出不出错，最后都必须关闭打开的文件。Swift也弄了一个defer语句，同样也是想在最后做这样的一些事情。但是这个defer远远没有finally那么好用。先来开开defer的语法。学过java的朋友知道finally只能用在try..catch里面。但是defer可以不用在do..catch里面。并且defer里面不能用return、break或者抛出错误的语句。 下面是一个没有用在do..catch中的例子 func readFile() &#123; defer &#123; print("Close file") &#125; print("Open file") print("Deal with file") &#125; readFile() //打印 //Open file //Deal with file //Close file 留意上面的打印顺序，可以看出defer中的语句是在最后才执行的。单从这里看，和设计初衷一致：在最后面才执行。但是一旦将这个defer用到do..catch里面，你就会觉得很恶心。我们先来看一个和我们想象中一致的代码，首先改写上面用到的Person类。我们的原意是这样的：Person的play方法调用了Computer的会产生错误的playGame方法。我们定义了一个result的可选变量，用于接收playGame方法的返回值。在退出do..catch的时候，会调用defer语句。我们在里面判断result是否为nil。然后输出心情。 class Person &#123; var pc = Computer() func play() throws &#123; do &#123; var result: Bool? defer &#123; if result != nil &#123; print("have fun") &#125; else &#123; print("sad") &#125; &#125; result = try self.pc.playGame("LOL") print("playGame") &#125; catch ComputerError.NoGameError &#123; print("NoGameError") &#125; catch ComputerError.MemoryError&#123; print("MemoryError") &#125; catch ComputerError.HardDiskError &#123; print("HardDiskError") &#125; &#125; &#125; 然后我们执行下面代码，因为默认的Computer类的hardDisk不足。所以会报MemoryError错误 var p = Person() try p.play() //打印 //sad //MemoryError 注意打印顺序，可以看出defer是先与catch执行的。这个和java的finally是不一样的。finally是在catch执行完后执行。其次是playGame没有打印，说明报错之后的语句不会执行。如果playGame的参数是“War3”，那么程序不会报错。输出是 playGame have fun 从以上来看，似乎还是符合我们的原意。但是当你把defer的位置改改，变为下面这样 class Person &#123; var pc = Computer() func play() throws &#123; do &#123; var result: Bool? result = try self.pc.playGame("LOL") defer &#123; if result != nil &#123; print("have fun") &#125; else &#123; print("sad") &#125; &#125; print("playGame") &#125; catch ComputerError.NoGameError &#123; print("NoGameError") &#125; catch ComputerError.MemoryError&#123; print("MemoryError") &#125; catch ComputerError.HardDiskError &#123; print("HardDiskError") &#125; &#125; &#125; 你会发现输出只有一个MemoryError。也就是说当定义defer前面的语句报错之后，defer得不到执行。这样就要求这个defer必须写在一个合理的位置才行。 另外如果我们再改改上面的代码，使用try! 你会发现输出只有一个MemoryError。也就是说当定义defer前面的语句报错之后，defer得不到执行。这样就要求这个defer必须写在一个合理的位置才行。另外如果我们再改改上面的代码，使用try! 这时候什么都没有打印，程序直接崩溃掉了。这个defer的初衷完全不同。Swift的错误处理也是近几个版本才出现的。估计以后会继续改进]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>Error</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Optional Chaining-可选链]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2F%E5%8F%AF%E9%80%89%E9%93%BE%2F</url>
    <content type="text"><![CDATA[可选链（Optional Chaining 回顾一下可选类型，当你要使用可选类型的时候，首先必须要对其进行解包。但是存在一个问题就是，如果对一个为nil的可选类型进行强制解包的话，那么会产生运行时错误。第一种解决办法就是使用if语句先判断这个可选类型是否为nil，然后在访问其属性或方法。但是十分繁琐。考虑一下这个可选类型里面访问的属性还是可选类型的情况吧，多几层的时候，if的层数惨不忍睹。一个很好的解决办法就是利用可选链（Optional Chaining）语法很简单，把中间需要解包的可选类型的强制解包符号!替换成？ 伪代码例子 if let 可选链返回值的解包 = 可选类型1?.可选类型2?.返回可选类型的方法1?.可选类型3 &#123; //&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;可选链返回值&lt;/span&gt;不为nil &#125; else &#123; //&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;可选链返回值&lt;/span&gt;为nil &#125; 解释： 首先检测可选类型1是否为nil，如果不会nil，那么解包。 然后检查可选类型1的属性——可选类型2是否为nil，不为nil，解包。 然后调用可选类型2的一个方法。这个方法会返回一个可选类型.成这个可选类型为可选类型A吧。 然后再对这个可选类型A进行判断，如果不为nil，解包。 最后利用if语句对可选类型A的属性——可选类型3进行判断处理 意点： 1、如果前面的每一次判断有一个为nil了。那么这个可选链直接返回nil，不会再对后面的可选链进行处理。 2、可选链返回的类型是可选链中最后一个类型对应的可选类型。假设上面伪代码中最后一个可选类型3改为一个非可选类型3（比如Int），那么这个链返回的是其对应的可选类型Int? 3、可选链最后不能再用?进行解包，必须用!。但是用!就会产生当可选类型为nil时报错的情况。所以为了判断是否为nil，只能用if 上面的伪代码是访问可选类型的例子。对于给可选链赋值的例子的伪代码如下 可选类型1?.可选类型2?.返回可选类型的方法1?.类型3 = 赋值 //这句中的类型3可以是可选类型也可以是非可选类型。赋值成功与否都不会报错。 //借助if语句判断是否赋值成功 if (可选类型1?.可选类型2?.返回可选类型的方法1?.可选类型3 = 赋值 ) != nil &#123; //&lt;span style="color:#ff0000;"&gt;注意if中赋值语句的返回值是Void?&lt;/span&gt; //赋值成功 &#125; else &#123; //赋值失败 &#125; 例子 class CPU &#123; var name: String? func getClockSpeed() -&gt; Double? &#123; if self.name != nil &#123; return 1.2 &#125; else &#123; return nil &#125; &#125; &#125; class Computer &#123; var cpu: CPU? &#125; var c = Computer() print(c.cpu?.name = "fef") //这句可选链的类型是Void?，打印 nil print(c.cpu?.name) //这句可选链的类型是String?，打印 nil c.cpu = CPU() print(c.cpu?.getClockSpeed()?.isZero) //这句可选链的类型是Bool? ,打印 nil print(c.cpu?.name = "Intel") //这句可选链的类型是Void?，打印 Optional(()) print(c.cpu?.name) //这句可选链类型是String?，打印 Optional("Intel") print(c.cpu?.getClockSpeed()?.isZero) //这句可选链的类型是Bool? ,打印 Optional(false)]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-ARC-自动引用计数]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FARC-%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[ARC 自动引用计数Swift引入ARC 对于类实例，它可能存在被多个变量引用的情况如果在还有变量引用的情况下释放了改实例的话，那么其他变量再尝试访问这个实例的方法或属性的时候，程序就会崩溃。所以必须确保在以后都没有变量使用这个实例的情况下，才能去释放这个实例对于值类型（结构体等），因为不存在多个变量对应一个实例的情况，所以不会有上述问题为了解决这个问题，Swift使用自动引用计数(ARC)来管理内存。它只对引用类型起作用，对于值类型不起作用 引用计数的概念 当你给一个创建一个类实例，并且把这个类实例赋值给某个变量或常量的时候，那么这个变量或常量就“拥有”这个实例，我们称为有了一个“强引用”。所谓的引用计数，就是这个实例被多少个常量或变量强引用了 class Apple &#123; deinit&#123; print("deinit") &#125; &#125; var a:Apple! = Apple() 上面这最后一句代码就是变量a对一个Apple类的实例有了一个强引用。这时候这个实例的引用计数为1。因为类实例是引用类型，所以你可以把这个引用传递给其他的常量或变量 var b = a let v = a 这时候这个实例就被三个变量或常量所引用，这个时候它的引用计数为3.当你把其中的b设为nil的时候，引用计数就会变为2.当该实例的引用计数变为0的时候，这个实例就会被销毁，销毁的时候就会调用它的deinit方法。注：因为上面用了常量，所以不能手动把常量设为nil，只能等这个常量离开作用域后被系统自动销毁。(如果你是在main.swift的全局中定义这些变量或常量的话，因为在main执行完之后才会释放这些变量或常量，所以不会打印deinit。但是你可以把他们放到一个函数里面，然后在main.swift里面调用这个函数。当这个函数执行完之后，这些变量或常量就会被释放。) 自动引用计数的规： 1、赋值给不加修饰符的常量和变量的时候，实例的引用计数加1。 2、当一个变量设为nil，或者变量(常量)离开作用域的时候，这个常量或变量所引用实例的引用计数减1。 3、当一个实例的引用计数为0的时候，它就会被销毁。 但是上面看似简单的规则也会有很多问题。比如下面的循环引用问题。 先定义两个类，一个Telephone类和一个Person类。Telephone类有一个Person类的属性，Person类里面有一个Telephone类的属性 class Telephone &#123; var person: Person? deinit&#123; print("Telephone deinit") &#125; &#125; class Person &#123; var telephone: Telephone? deinit&#123; print("Person deinit") &#125; &#125; 定义一个Person类的实例和一个Telephone类的实例。并对他们赋值 var person = Person() var telephone = Telephone() person.telephone = telephone telephone.person = person 下面分析一下Person实例和Telephone实例的引用计数。 在定义Person实例的时候，赋值给了变量person，所以第一句代码后，Person实例的引用计数为1。同样第二句代码后，Telephone实例的引用计数也为1。 然后第三句代码把telephone赋值给了person.telephone。也就是person.telephone也对这个Telephone实例有了强引用，这时候Telephone实例的引用计数为2。 同样，第四局过后，Person实例的引用计数也为2。 现在的状态是一个Person实例强引用了一个Telephone实例，这个Telephone实例又强引用了这个Person实例。你强引用我，我强引用你。这样就成了一个循环引用。 接着执行下面代码，person变量和telephone变量释放对实例的强引用 person = nil telephone = nil 但是Person实例中的telephone属性仍然强引用着Telephone实例。同样的Telephone实例的person属性也引用着Person实例。所以Person实例和Telephone实例的引用计数都为1。但此时我们已经没办法再访问Person和Telephone的实例了。同时又因为他们的引用计数都为1，系统也不会释放他们。这样就造成了内存泄露。 为了解决这种循环引用的问题，办法就是截断这个循环。第一种笨笨的解决方法就是在你把person或telephone变量设为nil之前，把person.telephone或telephone.person设为nil。这样就手动切断了循环引用。而通用的解决方法就是引用一个新概念——弱引用（Weak Reference）弱引用和强引用最大区别就是：当你把一个实例赋值给一个弱引用变量的时候，这个变量的引用计数不会加1。为了实现这一点，在定义变量的时候在最前面加上weak关键字。下面我们重新定义Person类和Telephone类 class Telephone &#123; weak var person: Person? //把这个变量定义为了一个弱引用变量 deinit&#123; print("Telephone deinit") &#125; &#125; class Person &#123; var telephone: Telephone? deinit&#123; print("Person deinit") &#125; &#125; 然后我们再次调用下面的代码 var person: Person? = Person() var telephone: Telephone? = Telephone() person!.telephone = telephone telephone!.person = person //第4句 person = nil // 执行完这句后打印 Person deinit telephone = nil // 执行完这句后打印 Telephone deinit 因为Telephone类里面的person属性是弱引用的，所以执行完了第4句之后，Telephone实例被telephone变量和person.telephone实例所引用，引用计数为2。而Person实例只被person变量所引用，引用计数为1. 当执行完person = nil 之后，person的引用计数就变为了0， 这个时候系统就会释放Person实例，这个过程中，person.telephone也会被释放，所以会导致Telephone实例的引用计数减1，变为1。 当执行完telephone = nil 之后，Telephone实例的引用计数变为0。系统释放Telephone实例。 关于这个弱引用再补充几点 第一、当一个弱引用变量所引用的实例被释放的时候，这个弱引用变量会被自动置为nil。 第二、因为第一条的内容，所以弱引用只能对变量使用，并且必须是可选类型。 第三、如果你在创建实例的时候就把它复制给一个弱引用变量，因为弱引用变量不会增加这个实例的引用计数，所以这个实例创建后立马就会被销毁。 第四、如果你将一个已经赋值的弱引用变量赋值给一个强引用变量(常量)，那么这个实例的引用计数会加1。 Unowned Reference Unowned Reference和弱引用一样，不会对实例产生强引用。区别在于Unowned Reference假设它所指向的实例总是有值的。所以Unowned Reference一般不会设置为可选类型。但缺点就是当Unowned Reference所指向的实例被释放的时候，Unowned Reference变量不会自动置为nil。 语法就是将weak关键字替换为unowned。但一个变量永远不会为nil的时候，建议使用unowned修饰。 循环引用第二种情况——闭包循环引用 在闭包的时候我们说过，闭包是引用类型，且会捕获值。设想，你把一个闭包声明为一个类的属性的时候，这个类的实例拥有了对这个闭包的强引用。此时如果你在这个闭包里面访问了这个类的其他属性(self.someProperty)或者方法(self.someMethod)的话。那么这个闭包就会捕获所访问的属性或方法，统称&quot;捕获了self&quot;。在访问实例的属性或方法的时候，必须使用self.的方式。Swift此意在提醒你可能会产生循环引用。 那么这时候又是一个循环引用了，self引用闭包，闭包引用self。导致这个实例永远不会被释放。 下面定义一个有闭包的Person类 class Person &#123; var name: String? lazy var printName: Void-&gt;Void = &#123; print(self.name) &#125; init(name: String)&#123; self.name = name; &#125; deinit&#123; print(&quot;Person deinit&quot;) &#125; &#125; 这个闭包我们声明为了lazy类型，因为如果你想要在闭包里面访问到self的话，必须是在类初始化之后才行。而一般的属性是在类初始化的最开头阶段初始化的，所以不加lazy的闭包不能访问self关键字。上面的代码很明显闭包和类实例已经可能会产生循环引用了。为什么说可能呢？因为如果你一直没用到闭包的话，那么这个闭包就不会被初始化，所以也不会产生闭包对self的强引用，也就谈不上循环引用了。 所以如果仅仅执行下面代码 var p: Person? = Person(name: "Kate") p = nil //打印出 Person deinit 但是如果执行下面代码 var p: Person? = Person(name: &quot;Kate&quot;) p?.printName() p = nil //打印出 Optional(&quot;Kate&quot;) 这时候因为循环引用导致Person实例不会被释放。解决这个循环引用同样有两种方式。 第一种是在不需要这个实例的时候，将这个可能会引起循环引用的闭包设为nil。 第二种是利用闭包的捕获列表。下面是第二种方法的介绍 下面是语法定义例子，分别是有参数和没参数的闭包。在这种情况下，闭包对捕获的self不会产生强引用。（题外话，在OC中是通过定义另外一个对self的弱引用变量，然后将这个弱引用变量传递给block来实现的。） //有参数的情况 lazy var printName: ((String)-&gt;Void)? = &#123; [unowned self] (say: String) -&gt; Void in print(say,self.name) &#125; //没参数的情况 lazy var printName2: (Void-&gt;Void)? = &#123; [weak self] in print(self!.name) &#125; 这里就是用两个关键字weak和unowned将self修饰。weak和unowned的区别和之前所讲的是一样的。]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
      <tags>
        <tag>ARC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-UIButton-Img和Title位置]]></title>
    <url>%2F2017%2F12%2F01%2FOC%2FKit%2FUIButton-Img%E5%92%8CTitle%E4%BD%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[iOS-UI-UIButton-Img和Title位置 UIButton 的image title 的位置都是可以调整的，具体如何调整可以按照下面的步骤 设置内容的水平垂直位置self.contentVerticalAlignment = UIControlContentVerticalAlignmentTop;self.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft; self指的是UIButton对象，这是继承自UIButon的方法里面或者给UIButton添加扩展方法里面。通过这样的设置可以使得imageView显示在UIButton对象的左上角，titleLabel显示在imageView的右边 调整imageView居中CGFloat btn_width = self.frame.size.width;self.imageEdgeInsets = UIEdgeInsetsMake(10, (btn_width - self.imageView.frame.size.width)/2, 0, 0); 调整 titleLabel居中CGFloat btn_width = self.frame.size.width;self.titleEdgeInsets = UIEdgeInsetsMake(self.imageView.frame.size.height + vSpace+10, - self.imageView.frame.size.width+(btn_width/2-self.titleLabel.frame.size.width/2), 0, 0); 通过减去 imageView的宽度使titleLabel处在左上角，让后将label移植中心。经过以上三步就可以使imageView 、titleLabelLabel 居中，其它的显示形式一样可以参照以上的设置。 整理成了方法， 不需要每次都写 - (void) setImageAndTitleCenterWithVerticalGapSpace:(CGFloat) vSpace imageTopSpace:(CGFloat) iSpace &#123; self.contentVerticalAlignment = UIControlContentVerticalAlignmentTop; self.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft; CGFloat btn_width = self.frame.size.width; CGFloat iTop = iSpace; self.imageEdgeInsets = UIEdgeInsetsMake(iTop, (btn_width - self.imageView.frame.size.width)/2, 0, 0);// self.titleEdgeInsets = UIEdgeInsetsMake(self.imageView.frame.size.height + vSpace+iTop, - self.imageView.frame.size.width+(btn_width/2-self.titleLabel.frame.size.width/2), 0, 0);// 使用中发现对于label的width取值不准确，遂通过计算一次获取，准确 CGSize size = [self.titleLabel sizeThatFits:CGSizeMake(CGRectGetWidth(self.frame), CGRectGetHeight(self.frame))]; self.titleEdgeInsets = UIEdgeInsetsMake(CGRectGetHeight(self.imageView.frame)+ vSpace + iTop, - CGRectGetWidth(self.imageView.frame) + (CGRectGetWidth(self.frame) - size.width)/2, 0, 0);&#125; vSpace imageView与titleLabel垂直间隔 iSpace imageView 距离 top的间隔]]></content>
      <categories>
        <category>OC</category>
        <category>UIKit</category>
        <category>UIButton</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Initialization初始化&Deinitialization析构]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FInitialization%E5%88%9D%E5%A7%8B%E5%8C%96-%E6%9E%90%E6%9E%84%2F</url>
    <content type="text"><![CDATA[Initialization 初始化初始化 初始化，是当创建一个类、结构体、枚举类的时，完成存储属性的值的初始化，和其他一些初始化工作。准备好这个实例以供使用反过来，当一个实例不再使用的时候，由析构过程释放这个实例所占用资源完成初始化工作的一个方法一般称为初始化方法、构造器(Initializer)、构造方法等等Swift中的构造器不需返回值，只是完成初始化工作。 类或结构体在创建的时候必须保证存储属性有初始化值 目的的实现可以通过在定义属性的时候给存储属性添加上默认值，也可以在构造器中赋值。并且在这两种情况中都不会触发属性的观察器。官方文档建议我们在一个存储属性通常具有同一个初始值的时候，使用属性定义的方式添加初始值。 下面是这两种方法的代码class Animal &#123; var life: Int = 0 var height: Double init()&#123; height = 0 &#125; &#125; 这里的init()方法就是构造器。注意它是不带func关键字的。而且也没有返回值。以前创建一个实例的时候，都是使用“类名()”的形式，这其实就是调用了这个构造器。但是当时我们并没有写这个构造器，这是因为当一个类没有其他构造器的时候，编译器会自动生成这个默认的构造器。但是一旦有了其他的构造器，那么系统就不会再默认生成这个构造器。你也就再不能用“类名()”这种创建方法了。当然，当有其他构造器的时候，你也可以手动添加这个默认的构造器。 自定义构造器 可以定义构造器，可以传入自定义的参数列表来初始化类。自定义的构造器的外部参数名规则和方法不太一样，构造器的每一个参数都会生成和局部参数名一样的外部参数名。如果不想要外部参数名，还是可以用下划线取消 class Animal &#123; var life: Int = 0 var height: Double init()&#123; //注意，当有其他构造器的时候，系统不会再生成这个构造器，必须手动写出来 height = 0 &#125; init(life: Int, height: Double) &#123; self.life = life self.height = height &#125; &#125; //可以这样使用自定义的构造器 var a = Animal(life: 29, height: 1.2) 再次提醒，当有类定义里面有自定义构造器的时候，不会再自动生成默认构造器。并且对于结构体也再不会自动生成遍历属性的构造器。但是你可以将你自己的构造器写在扩展里面，这样就不会影响默认构造器的自动生成 构造器委托（Initializer Delegation） 构造器委托，就是在一个构造器里面调用另外一个构造器，这样可以减少多余的代码。在构造器里面使用self.init语法来调用另外一个构造器，且这个语法只能在构造器里面使用。构造器委托在值类型（结构体和枚举类）和类直接是不太一样的。因为类需要考虑到继承问题。先来看值类型的构造器委托。这个很简单，调用另外一个构造器就行了。下面的例子虽然有点脱裤子放屁的感觉，但。。就是举个例子而已 struct Apple &#123; var totalPrice: Double init(totalPrice: Double) &#123; self.totalPrice = totalPrice &#125; init(kg: Double, pricePerKg: Double) &#123; let totalPrice = kg * pricePerKg self.init(totalPrice: totalPrice) //调用另外一个构造器 &#125; &#125; 类的继承和初始化 因为类可以继承，所以它的初始化规则就变得比结构体要复杂多了。首先，类的构造器分为指定构造器（Designated Initializer） 和 便利构造器 （Convenience Initializer）一个类通常具有很少数量（一般只有1个）的指定构造器。但是必须最少具有一个。便利构造器是用来调用指定构造器完成初始化工作的。一个类可以不具有遍历构造器。两种构造器的语法 //指定构造器 init(parameters) &#123; statements &#125; //便利构造器 convenience init(parameters) &#123; statements &#125; 类的构造器委托规则： 1、一个指定构造器必须调用它的直接父类的指定构造器 2、一个便利构造器必须调用同一个类的另外的构造器 3、一个便利构造器必须最终以调用指定构造器结束。 规则2和3连起来就是说，一个便利构造器可能会调用了另外一个便利构造器，然后这个构造器又调用了另外一个便利构造器….但是这个链的最后的一个便利构造器必须是调用指定构造器。下面附上官方的图片。在图片上可以看到，三条规则总结起来就是：指定构造器往上调用，便利构造器平行调用且终结在指定构造器。 类的初始化分为两阶段第一阶段 1、一个指定构造器或便利构造器被调用 2、分配类实例所需的内存，但是内存没有初始化 3、这个类的指定构造器确保该类引入的新的存储属性都初始化。（因为便利构造器最终会到指定构造器）。 4、然后这个构造器调用父类的指定构造器完成和第三步同样的工作。 5、直到继承链的最顶部分。 6、这时候有的存储属性都有初始值了。 第二阶段 1、从继承链的最顶部分出发。每个指定构造器具有了修改实例的权利。并且可以调用实例方法。 2、最后，这个初始化链条里面的便利构造器都具有了修改实例的权利。 遵循上面两个阶段的步骤，避免了当在初始化链后面的构造器修改了属性之后，又被前面的构造器修改属性的可能性。避免了使用没有经过初始化的属性的可能性。 为了确保两个阶段步骤的实施。编译器有4条检测规则，这四条规则决定了你在构造器里面某些代码的顺序。 1、在调用父类构造器之前，必须确保子类引入的新属性已经得到初始化。 2、子类必须在调用了父类的构造器之后，才能访问继承的属性。 3、便利构造器必须在调用了其他构造器之后，才能访问属性或调用实例方法。 4、在完成第一阶段之前（其实就是完成初始化本类定义的新属性，调用父类构造器），构造器不能调用实例方法，不能访问属性的值，不能把self当做值访问。但是可以用self.属性名的方式给属性赋值。 下面可以看看分别违反每个规则的例子 class Animal &#123; var life: Int var height: Double init(getLife: Int, getHeight: Double) &#123; self.life = getLife self.height = getHeight &#125; &#125; class Dog: Animal &#123; var name: String init()&#123; super.init(getLife: 2, getHeight: 2.0) //这句报错，违反第一条，必须先将本类引入的属性初始化才能调用父类构造器 self.name = "Larry" //所以这一句必须写在前面才没错 &#125; init(name: String, getLife: Int, getHeight: Double)&#123; self.name = name self.life = 1 //这句报错，违反第二条，必须调用了父类构造器之后才能访问继承的属性。 super.init(getLife: getLife, getHeight: getHeight) //这句必须放在第二句之前才没错 &#125; convenience init(getLife: Int) &#123; self.name = "Larry" //这句报错，违反第三条，便利构造器里面必须调用了其他构造器之后才能访问属性 self.init() //这句应该放在前面 &#125; init(getName: String) &#123; self.name = getName Dog.sayHello() self.printName() //这句报错，违反第四条，必须完成了阶段1才能调用实例方法或访问属性 super.init(getLife: 21, getHeight: 2.3) //这句应该放在前面 &#125; func printName()&#123; print(self.name) &#125; static func sayHello()&#123; print("hello") &#125; &#125; 属性观察器 以前说过，属性观察器在构造器里面给属性赋值的时候是不会被调用的。但是这个只针对于本类定义的属性。对于继承而来的属性，当已经经过父类的构造器完成初始化后，如果在子类里面修改了继承属性的值，那么就会触发父类观察器，如果你在子类里面也覆盖了这个观察器，那么子类和父类的观察器都会被调用 另外再看 class Animal &#123; var life: Int = 0 &#123; willSet&#123; print("animial life newValue \(newValue)") &#125; &#125; init(getlife: Int)&#123; print("animal life init \(self.life)") self.life = 1 print("animal life after assign \(self.life)") &#125; &#125; 如果我们调用下面的语句 var a = Animal(getlife: 3) //打印 //animal life init 0 //animal life after assign 1 注意一点，我们在init里面第一句已经用到了self。根据编译器规则第四条，不允许在属性没有初始化的前进行访问。从上面代码通过编译来看，这里编译器已经将属性初始化为定义时候的值了。如果你将定义时候的默认值删去，那么第一句就会报错Swift默认是不继承父类的构造器的。如果你想要和父类一样的构造器，那么必须自己写。如果你写的构造器（不管是指定还是便利）和父类的指定构造器一样，那么这个构造器前必须加上override关键字。如果你写的构造器和父类的便利构造器一样，那么不用加override，因为子类永远不能直接调用父类的便利构造器。但是在某些情况下，子类可以自动继承父类构造器。前提条件：子类新引入的属性都必须具有默认值 规则1：如果子类没有定义任何的指定构造器。那么子类自动继承父类所有的指定构造器。 规则2：如果子类实现了父类所有的指定构造器（可以通过规则1继承而来，也可以通过重写而来），那么子类自动继承父类所有的便利构造器。 例子 class Animal &#123; var life: Int var height: Double convenience init(getLife: Int)&#123; self.init(getLife: getLife, getHeight: 0.0) &#125; init(getLife: Int, getHeight: Double) &#123; self.life = getLife self.height = getHeight &#125; &#125; class Dog: Animal &#123; var name: String = "Larry" // override init(getLife: Int, getHeight: Double)&#123; // super.init(getLife: getLife, getHeight:getHeight) // &#125; &#125; 无论上面Dog类里面注释的代码是否打开，Dog都继承了Animal的所有构造器 Failable Initializers可失败的构造器 Swift中有个概念，就是创建实例的时候如果条件不符合，可以返回一个nil对象。这类可以返回nil的构造器叫做可失败的构造器。语法是在init的前面加上一个？。当条件不满足的时候，你可以用 return nil结束构造方法。那么这时候得到的实例其实是一个nil，这里也说明了，可失败构造器返回的是可选类型。其实之前也说过，Swift的构造器是不需要返回值的。所以你成功的时候不需要写return什么东东。 值类型的可失败构造器下面是structure的 struct Apple &#123; var pricePerKg: Double init?(pricePerKg: Double)&#123; if pricePerKg &lt; 0 &#123; return nil &#125; self.pricePerKg = pricePerKg &#125; &#125; print(Apple(pricePerKg: 2)) print(Apple(pricePerKg: -2)) //打印 //Optional(SwiftTest.Apple(pricePerKg: 2.0)) //nil 接下来是枚举类的 enum FruitSet &#123; case apple, orange, banana init?(symbol: Character)&#123; switch symbol &#123; case &quot;a&quot;,&quot;A&quot; : self = .apple case &quot;o&quot;,&quot;O&quot; : self = .orange case &quot;b&quot;,&quot;B&quot; : self = .banana default : return nil &#125; &#125; &#125; print(FruitSet(symbol: &quot;a&quot;)) print(FruitSet(symbol: &quot;e&quot;)) //打印 //Optional(SwiftTest.FruitSet.apple) //nil 对应有默认值的枚举类，会自动生成一个init?(rawValue:)的构造器。如下 enum FruitSet : Character&#123; case apple = "a", orange = "o", banana = "b" &#125; print(FruitSet(rawValue: "a")) print(FruitSet(rawValue: "e")) 类的可失败构造器 有一个规则，就是必须在本类所有的属性（包括继承的）都赋值之后才可以返回nil class Apple &#123; var pricePerKg: Double init?(pricePerKg: Double)&#123; if pricePerKg &lt; 0 &#123; return nil //这句报错，所以你必须先初始化其他属性值 &#125; self.pricePerKg = pricePerKg &#125; &#125; 可失败初始化的传递过程 一个可失败的构造器可以调用其他的构造器，无论是可失败的还是不会失败的。 但是一个不可失败的构造器不能去调用一个可失败的构造器。如果去调用父类的可失败构造器，虽然用解包可以解决，但是一旦父类的可失败构造器返回了nil，那么程序直接崩溃 class Fruit &#123; var name: String init?(name: String)&#123; self.name = name if name.isEmpty &#123; return nil &#125; &#125; &#125; class Apple: Fruit &#123; var pricePerKg: Double init(pricePerKg: Double)&#123; self.pricePerKg = pricePerKg super.init(name: "")! //利用解包调用了父类的可失败构造器，但是因为这样父类会返回一个nil，所以程序在这行会崩溃 &#125; convenience init?()&#123; self.init(pricePerKg: 3) &#125; &#125; var i = Apple(pricePerKg: 3) 同样的，可失败的构造器也可以被重写，你可以重写为不可失败的构造器。但是不可失败的构造器不能覆盖为可失败的构造器。你可以用!代替?来实现可失败构造器，那么这样得到的实例会自动解包。当然，存在nil报错的问题。记得处理。 必须构造器（Required Initializers） 在构造器前面加上required关键字就行了。这样的构造器要求子类必须重写。子类重写这个构造器的时候，也必须加上required关键字。要求子类的子类也要重写这个构造器。写了required后不用写override关键字。写了会有警告。 给属性默认值时使用闭包或函数 func getprice()-&gt;Double &#123; return 1 &#125; class Apple &#123; var pricePerKg: Double = getprice() var name = &#123; return "apple" &#125;() //留意这对小括号，没有的话那就是给属性赋值一个闭包了。 &#125; var a = Apple() print(a.pricePerKg,a.name) 析构器 析构器，就是在一个实例再也不用到时候调用的方法。析构器里面完成一些清理工作或保存数据等等。析构器是系统自动调用的，不允许自行调用。 语法 deinit &#123; // perform the deinitialization &#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Inheritance-类继承基本用法]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FInheritance-%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[类继承.&gt;继承是类独有的，结构体和枚举类都不具有这个功能。继承就好像子承父业一样，一个继承的类（称为子类subClass）可以获得被继承的类（称为父类superClass）的属性，方法和其他特性。 子类可以重写父类的方法，也可以添加自己的属性，还可以为继承而来的属性添加观察器（对继承而来的存储和计算属性都可以） 基类 一个不继承自任何类的类称为基类。在Swift中，是没有共同的终极父类的。oc和java都是有终级父类的 定义一个Animal基类 class Animal &#123; var life : Int = 0 var description: String&#123; return "An animal with a life of \(life)" &#125; func makeSounds() &#123; &#125; &#125; 继承语法 &lt;span style="color:#ff0000;"&gt;class Dog: Animal&lt;/span&gt; &#123; var name : String = "larry" &#125; 上面的Dog类继承自Animal类，并且添加了自己的name属性。我们可以修改一下dog继承的属性，然后打印一下 var dog = Dog() dog.life = 10 print("dog's life is",dog.life) //dog's life is 10 覆盖（override）父类属性 对于继承而来的存储属性或者计算属性，我们可以通过重写这个属性的getter和setter方法来实现覆盖。下面是几条规则： 1、当你重写了setter方法的时候，一定要重写getter方法。但是可以只重写getter方法。 2、覆盖属性的时候，属性名和类型都必须和继承的属性一致才算覆盖。并且前面要加上override关键字。 3、你可以将继承的只读属性重写为读写属性，但是不能将继承的读写属性重写为只读属性。 下面重写Animal的description属性 class Dog: Animal &#123; var name : String = "larry" override var description: String &#123; get&#123; return "It's a dog with the name of \(name)" &#125; &#125; &#125; 覆盖属性观察器 规则： 1、不能对继承的常量，或者只读属性添加属性观察器 2、不能同时对一个继承属性同时添加属性观察器和setter方法。因为setter方法已经可以提供属性观察器的功能。 3、即使覆盖了之后，如果父类的该属性有观察器，那么当值修改的时候，父类的观察器也会被调用 class Dog: Animal &#123; var name : String = "larry" override var life: Int &#123; didSet&#123; print("The dog's life is \(life)") &#125; &#125; override var description: String &#123; get&#123; return "It's a dog with the name of \(name)" &#125; &#125; &#125; 覆盖父类方法 同样的，加上override后，重写父类方法就可以 override func makeSounds() &#123; print("wang! wang!") &#125; 防止覆盖用final关键字去修饰就可以了。比如final var，final func， final class func， final subscript]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>Inheritance</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Subscripts-下标]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FSubscripts-%E4%B8%8B%E6%A0%87%2F</url>
    <content type="text"><![CDATA[下标 所谓的下标，就是[]在Array和Dictionary的时候就已经接触过了。它其实算一种特殊的方法，利用下标，我们可以将属性的getter和setter写在一起。而且还可以提供另外的一些功能。String截串的时候无比麻烦,利用下标和扩展（Extension）封装后变得很简单。这个在讲到扩展的时候在写出来吧。下标语法 subscript(index: Int) -&gt; Int &#123; get &#123; // return an appropriate subscript value here &#125; set(newValue) &#123; // perform a suitable setting action here &#125; &#125; 当然可以和计算属性一样将setter删去，变为只读。下面举一个使用例子。假设在买橙子。下标表示你要买多少斤，下标能返回总共价格。 当对下标赋值的时候，表示买那么多斤的时候总共花了多少钱。然后修改了橙子的单价.下标不止一个变量，还可以有多个变量。变量也可以是不同的类型 class Orange &#123; var pricePerKg: Double = 3 subscript(kg: Double, str: String) -&gt; Double &#123; get&#123; print(str) return kg * pricePerKg &#125; set&#123; print(str) self.pricePerKg = newValue / kg &#125; &#125; &#125; var o = Orange() print("price of 10kg orange ",o[10,"buy 10 kg orange"]) o[100,"buy 100kg orange"] = 250 print("price per kg when buying 100kg orange ",o.pricePerKg) //打印 //buy 10 kg orange //price of 10kg orange 30.0 //buy 100kg orange //price per kg when buying 100kg orange 2.5]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Method-方法]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FMethod-%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Method 方法 其实就是函数，只不过方法是属于某个类、结构体、枚举类的函数方法的定义和函数一样。调用通过点语法实现。注意，方法和属性不能同名。但是类型方法可以和实例方法重名 Instance Methods实例方法 class Video &#123; func play(videoName: String) &#123; print("Now play",videoName) &#125; &#125; var v = Video() v.play("\"monkey king\"") //打印 Now play "monkey king" 在实例方法里面具有 self 属性，该属性就是指这个实例本身。学习过java或OC的应该很熟悉。就是用来当参数名和属性名一样的时候，用来区分究竟是哪个变量。 class Video &#123; var videoName: String? func play(videoName: String) &#123; self.videoName = videoName print("Now play",videoName) &#125; &#125; var v = Video() v.play("\"monkey king\"") print(v.videoName!) //打印 //Now play "monkey king" //"monkey king" 如果是对于结构体，因为它是值传递，所以一般方法里面如果和上面一样尝试修改存储属性的值的话，是不允许的。直接报错。如果需要修改，那么可以在方法前面加上mutating关键字changeVideo方法将整个self都赋值了一个新实例。因为枚举类是不存在存储属性的，所以没有上面修改属性的情况。但是self关键字还是有的 struct Video &#123; var videoName: String? mutating func play(videoName: String) &#123; self.videoName = videoName print("Now play",videoName) &#125; mutating func changeVideo(newVideo: String)&#123; self = Video(videoName: newVideo) &#125; &#125; var v = Video() v.play("\"monkey king\"") v.changeVideo("misson impossible") print(v.videoName!) //打印 //Now play "monkey king" //misson impossible Type Methods类型方法 这个和类型属性一样，加上static或class就行了。class允许子类覆盖父类方法 struct Video &#123; var videoName: String? static var playTime: Int = 0 mutating func play(videoName: String) &#123; self.videoName = videoName //这里是self指的是Video的实例 print("Now play",videoName) Video.playTime++ &#125; mutating func changeVideo(newVideo: String)&#123; self = Video(videoName: newVideo) &#125; static func showPlayTime()&#123; print(self.playTime) //注意这里的self是指Video这个结构体，而不是实例 &#125; &#125; var v = Video() Video.showPlayTime() v.play("\"monkey king\"") Video.showPlayTime() //打印 //0 //Now play "monkey king" //1 注意，调用类型方法只能通过类名的点语法来实现，不能通过实例的点语法。这点和类型属性是一样的。 关于这个类型方法，需要注意里面的self和实例方法里面的self指向的不是用一个东西，前者是指类型本身，后者是指类型的实例。 所以在类型方法和实例方法里面访问类型变量和实例变量也有不同。在实例方法里面访问类型变量，需要加上类型前缀。 在类型方法里面访问类型变量，可以加上类型前缀，用self，或者不加前缀。在类型方法里面是不能访问实例变量的]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Properties-属性]]></title>
    <url>%2F2017%2F12%2F01%2FSwift%2FGrammar%2FProperties-%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[Properties Swift中，属性大致分为两种，存储属性+计算属性 Stored Properties存储属性 存储属性:能保存数据的属性。枚举类、结构体、类都具有存储属性存储属性可以设为var 或let。分别对应常量和变量 struct CPU &#123; var clockSpeed = 1.0 //变量 let coreNum = 2 //常量 &#125; 计算属性就是它本身不保存数据，而是通过处理其他的数据得到返回值。 结构体和类才具有计算属性然后我们初始化一个CPU实例，但是这个实例我们设置为常量。这样会导致一个后果：对应值传递的结构体，当实例是常量的时候，即使存储属性是变量，也不能修改里面属性的值 let cpu = CPU(clockSpeed: 3.2) //注意到这个初始化方法只有一个参数，因为我们设置了coreNum为常量，并且给了初始值，所以构造方法会发生变化 cpu.clockSpeed = 3.3 //这句会报错 然而对于引用传递的类来讲，即使实例是常量，里面设置为变量的存储属性还是可以更改值的 class Telephone &#123; var cpu = CPU() var screenSize: Int? var price: Int? &#125; let myTelephont = Telephone() myTelephont.screenSize = 4 懒加载存储属性Swift需要保证一个类或结构体或枚举类在初始化之后，所以的存储属性都必须有初始值（除开可选类型）。所以当实例初始化完成以后，所以的存储属性都初始化了。但是有些时候某些存储属性不一定会用到，所以我们可以把这些存储属性设置为lazy存储属性。那么它在要用到的时候才会进行初始化。lazy存储属性只能是变量。而且在多线程调用的时候，如果lazy属性没有初始化，那么不能保证只会初始化一次 struct CPU &#123; lazy var clockSpeed = 1.0 let coreNum = 2 &#125; let cpu = CPU() //这时候clockSpeed还是为nil Computed Properties 计算属性 故名思议，它本身不保存数据，只是用其他数据得到返回值，或者当设置它的时候修改其他数据。下面的例子利用存储属性得到apple的总价。或者修改总价的时候修改重量 struct Apple &#123; let pricePerKg = 6.0 var weight: Double var totalPrice: Double &#123; get &#123; return pricePerKg * weight &#125; set(newTotalPrice) &#123; weight = newTotalPrice / pricePerKg &#125; &#125; &#125; var apple = Apple(weight: 2.0) print(apple.totalPrice) //12.0 apple.totalPrice = 6.0 print(apple.weight) //1.0 算属性的setter方法新值自带一个默认名 newValue，所以上面的定义可以改为 struct Apple &#123; let pricePerKg = 6.0 var weight: Double var totalPrice: Double &#123; get &#123; return pricePerKg * weight &#125; set &#123; weight = newValue / pricePerKg &#125; &#125; &#125; 可以将计算属性的setter去掉，那么这个计算数据就变成了只读的。这时候还可以省去get关键字 struct Apple &#123; let pricePerKg = 6.0 var weight: Double var totalPrice: Double &#123; return pricePerKg * weight &#125; &#125; 不要在计算属性的setter和getter里面获取该计算属性，这样会导致循环调用 Property Observers属性观察器 有了属性观察器，我们可以在属性被修改的时候做一些事情。注意的是对于非继承而来的计算属性，没有必要设置属性观察器，因为直接可以在计算属性的setter定义中完成这项功能。 属性观察器有两个方法willSet 在属性将要赋值的时候调用，这时候属性的值还没改变didSet在属性值被赋值完的时候就会调用。（即使是赋值和原来值一样的值）这时候属性的值已经改变。willSet方法里面会传递新值过来，你可以自己定义这个新值的名称，如果不定义，会具有默认值newValuedidSet方法里面会传递属性的旧值过来，你可以自己定义这个旧值的名称，如果不定义，会具有默认值oldValue。如果你在didSet方法里面又对这个存储属性赋值，那么这个值会覆盖掉刚刚赋值的值。且不会导致循环调用。比如下面例子里面，当pricePerKg小于3的时候，会把它改为3 struct Apple &#123; var pricePerKg = 6.0 &#123; willSet(priceNewValue)&#123; print("In willSet, priceNewValue=",priceNewValue) print("In willSet, pricePerKg=",pricePerKg) &#125; didSet&#123; print("In didSet, oldValue=",oldValue) print("In didSet, pricePerKg=",pricePerKg) if pricePerKg &lt; 3 &#123; pricePerKg = 3 &#125; &#125; &#125; var weight: Double var totalPrice: Double &#123; get &#123; return pricePerKg * weight &#125; set &#123; weight = newValue / pricePerKg &#125; &#125; &#125; var apple = Apple(pricePerKg: 6.0, weight: 1.0) apple.pricePerKg = 2.0 print("apple.pricePerKg=",apple.pricePerKg) /* 输出 In willSet, priceNewValue= 2.0 In willSet, pricePerKg= 6.0 In didSet, oldValue= 6.0 In didSet, pricePerKg= 2.0 apple.pricePerKg= 3.0 */ Global and Local Variables全局变量和局部变量 所谓的局部变量，就是定义在函数、方法、闭包、类型上下文里面的变量。全局变量就是定义在函数、方法、闭包、类型上下文之外的变量。局部变量和全局变量都称为存储变量。在全局和局部范围内，都可以定义计算变量，或者为存储变量定义观察器 var apple = Apple(pricePerKg: 6.0, weight: 1.0) &#123; //为apple变量定义观察器 willSet &#123; print("newApple",newValue) &#125; didSet&#123; print("oldApple",oldValue) &#125; &#125; apple = Apple(pricePerKg: 6.0, weight: 2.0) var c: Double &#123; //定义一个计算变量 get&#123; return 9 &#125; set &#123; print("In setter,",newValue) &#125; &#125; c = 2 print(c) /* newApple Apple(pricePerKg: 6.0, weight: 2.0) oldApple Apple(pricePerKg: 6.0, weight: 1.0) In setter, 2.0 9.0 */ 官方文档说全局变量常量都是懒加载，局部变量常量都不是懒加载 Type Properties类型属性 所谓的类型属性，就是这个属性是属于这个类型的，即使这个类型由多个实例，也只会有一个类型变量。 类型属性是懒加载的，而且必须在定义的时候给初始值。 一般是用static来定义类型属性。特别的，对应类的计算类型属性，还可以用class关键字定义，这样可以使得子类可以覆盖它。 注意类型属性访问的时候用的是类名，不能使用实例来访问 struct SomeStructure &#123; static var storedTypeProperty = "Some value." static var computedTypeProperty: Int &#123; return 1 &#125; &#125; enum SomeEnumeration &#123; static var storedTypeProperty = "Some value." static var computedTypeProperty: Int &#123; return 6 &#125; &#125; class SomeClass &#123; static var storedTypeProperty = "Some value." static var computedTypeProperty: Int &#123; return 27 &#125; class var overrideableComputedTypeProperty: Int &#123; return 107 &#125; &#125; print(SomeStructure.storedTypeProperty) // prints "Some value." SomeStructure.storedTypeProperty = "Another value." print(SomeStructure.storedTypeProperty) // prints "Another value." print(SomeEnumeration.computedTypeProperty) // prints "6" print(SomeClass.computedTypeProperty) // prints "27"]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-图片的解压缩]]></title>
    <url>%2F2017%2F11%2F30%2FOC%2FFunc%2FiOS-Func-%E5%9B%BE%E7%89%87%E7%9A%84%E8%A7%A3%E5%8E%8B%E7%BC%A9%2F</url>
    <content type="text"><![CDATA[http://blog.leichunfeng.com/atom.xml]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-GCD-多线程编程GCD]]></title>
    <url>%2F2017%2F11%2F30%2FOC%2FGrammar%2FiOS-GCD-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8BGCD%2F</url>
    <content type="text"><![CDATA[http://blog.mogoal.com/2016/09/12/grand-central-dispatch/]]></content>
      <categories>
        <category>iOS</category>
        <category>GCD</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC-Code上架配置文档]]></title>
    <url>%2F2017%2F11%2F29%2FOC%2FCode%2FOC_Code_%E4%B8%8A%E6%9E%B6%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[#第三方服务平台对接 辈出设计登录，分享 ##阿里云(直播类一般需要，不需要跳过) -（https://www.aliyun.com购买一年只要10个月的费用，oss和 slb 是按流量收费，请保证账户有余额）500并发 一月 账号：xxxxx密码：xxxxx ##腾讯云(直播类一般需要，不需要跳过) 腾讯云请使用qq或qq邮箱注册（https://www.qcloud.com账户需充值）差认证账号：xxxxxx密码：xxxxxxSdkAppId ：1314xxxxaccountType ：1314xxxx 短信平台 iOS 只要注意短信可用即可 QQ登录的功能（open.qq.com） 登录的APP ID：xxxxAPP KEY：xxxxx app上的腾讯地图 app上的腾讯地图key信息（HYPERLINK “http://lbs.qq.com/index.html&quot;http://lbs.qq.com/index.html）您的腾讯地图的 key：xxxxx账号：xxxx密码：xxx App新浪微博登 App新浪微博登录信息（ HYPERLINK “http://open.weibo.com/development/mobile“ http://open.weibo.com/development/mobile）App Key： xxxx不要微博APP secret：xxxx账号： xxxx密码： xxxx 微信开放平台 HYPERLINK “https://open.weixin.qq.com/“ https://open.weixin.qq.com/您的微信的APP ID：xxxxxAPP secret：8xxxxx账号：xxx密码：xxxx 开通微信支付(Beichoo暂时不需要) 开通微信支付（直播需要文网文）：用于观众支付（具体操作步骤请参考售后文档-后台需要配置的地方-微信支付文档）并留意和保留相关邮箱，等交付后台后填写到后台的资金管理-支付接口列表-微信支付。 注：最后确认分享到朋友圈、发送给朋友、微信登录和微信支付（直播需要文网文）的接口都已经获得。 企业微信公众号的服务号信息 您的微信公众号名称：xxxxxx开通微信支付：用于主播提现（具体操作步骤请参考售后文档-后台需要配置的地方-微信提现文档）并留意和保留相关邮箱，等交付后台后填写到后台的资金管理-支付接口列表-微信提现。开通企业付款到用户 ##企业支付宝申请/签约及app支付申请（直播需要文网文） 企业支付宝申请、签约及app支付申请（直播需要文网文）您的支付宝账号： XXXXXX ##友盟账户信息 HYPERLINK “http://www.umeng.com“ http://www.umeng.com账号：xxxxxx密码: xxxxx #苹果开发者账号 苹果开发者账号：738816656@qq.com（具体找相关人要）密码：xxxxxxxx如有有内购银行卡卡号：6236 6818 2000 3886 174开户行： 中国建设银行持卡人姓名：岳克奎12位识别码（打电话问银行）：105391004150 app名称和BID app名国内发布APP，名字是中文 在项目info文件里边，把Bundle display name 填写一个中文名字，Localization native development regior 选择中国。如果刚才提到的两个都没有，自己手动添加即可 Bundle identifier 命名规范 命名规范，且具有唯一性，因为在发布时候，描述证书要匹配当前id。一般采用com/cn +公司名+项目名，例如com.jindong.jd注：在申请QQ、微信、地图、微博等第三方所需填写的包名均要与此包名统一，如果不统一就会导致各功能无法正常使用 Version 格式： 1.1.1 最好写3位 Build: 格式： 1 （写整数 1，2，3，4，5即可） Clean 通知全员提交代码 预先跑一边，自测，然后，clean工程，僵尸模式，断点统统清楚 Edit Scheme 必须改为 Release 开发环境 FFConfig.h服务器接口 #define APP_ENVIRONMENT_EDITION 0 0 上线 （不准Mac跑去测，必须打包TestFlight方式） 1 开发 2 测试 3 stage 服务器版本目前0.1版本 #define API_VERSION @&quot;/bc/0.1/&quot; Push Notification 务必打开 平时这个不要关了！！！ Applinks 开启H5跳转App App 信息 iTunesConnect:https://itunesconnect.apple.com/login iTunesConnect点击—&gt;登录 根据运营会给 多套 关键字，副标题，多种语言环境为了在构建版本里，多加几套关键字 构建版本截图 发布时 来传]]></content>
      <categories>
        <category>iOS</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-基本使用]]></title>
    <url>%2F2017%2F11%2F29%2FGit%2FGit-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[基本使用初始化仓库 创建普通仓库 $ git init 创建裸仓库，这里面许多git命令不能使用，切换分支都不可用，一般用来当远程仓库 $ git --bare init 别名 使用config alias.命令进行，添加–global参数后可以对全局git的config文件进行配置 $ git config --global alias.st status 一个很吊的配置，让你的git变得更好看，摘自 $ git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot; 本地的一些命令 配置信息 $ git config user.name &quot;名字&quot; git config user.email &quot;email&quot; branch分支相关命令 $ git branch -a //显示所有分支 git branch 分支名字 //如果该分支不存在，就会新建 git branch --delete 分支名字 //删除分支 add将本目录下的文件都添加到暂缓区，准备提交用 $ git add . commit 提交 $ git commit -m &quot;注释&quot; merge这个命令会将本分支merge别处的分支。 $ git merge merge过来的分支 远程命令 添加远程仓库 $ git remote add &lt;远程主机名&gt; url push，命令格式： &amp; git push 远程主机名 本地分支:远程分支 举个例子下面命令将本地分支a，push到远程主机origin的a_remote上，如果远程主机里面没有a_remote分支，那么就会创建一个这名字的分支。 $ git push origin a:a_remote 注意：如果没有远程分支的名字，那么将会在远程仓库建立一个同名的分支。如果没有本地名字，就像 :a_remote，这就相当于传了一个空的分支给远程， 那么会删除掉远程仓库的这个分支。 pull这个命令会将本地和远程分支进行merge，如果出现冲突，需要自己解决。 命令格式： $ git push 远程主机名 远程分支:本地分支 例子在此，将远程主机的 $ git pull orgin a_remote:a 发生冲突的时候，如果需要丢弃本地工作，那么使用 $ git reset --hard branch相关的远程命令将远程分支和本地分支相关联 git branch --track 本地分支 远程主机/远程分支 //在创建本地分支的时候指定它所关联的远程分支 git branch --set-upstream-to 远程主机/远程分支 //将当前分支关联远程分支 fetch这个命令将远程的分支fetch下来，然后可以将这些fetch下来的分支和本地分支进行合并 git fetch 主机名 git fetch -p 主机名 //fetch完成后，删除本地仍存在，但是远程不存在的分支关联 下面的命令将本地分支绑定远程分支，但好像并没什么用，push的时候如果不输入远程分支名字，那么还是会新建一个和本地分支同名的远程分支。 git branch --set-upstream-to origin/aa_remote stash在进行pull的时候，经常会遇到 error: Your local changes to the following files would be overwritten by merge: xxx/xxx/xxx.java Please, commit your changes or stash them before you can merge. Aborting 这里要么将你当前的工作commit一下，要么就可以使用stash命令。先用stash命令缓存当前工作，然后pull，pull后再用stash pop还原之前的工作 $ git pull ... file foobar not up to date, cannot merge. $ git stash $ git pull $ git stash pop 另外的情况就是：你在工作的时候，突然被老板要求去改别的东西，你也可以用stash把当前的工作缓存起来。改完别的东西后再回来继续工作。 其他 $... hack hack hack ... $ git stash $ edit emergency fix $ git commit -a -m &quot;Fix in a hurry&quot; $ git stash pop # ... continue hacking ... 最后一些坑 1、初始化的仓库要先commit一下才能新建分支 2、如果远程仓库在使用这个分支，那么不能提交到这个分支上去，除非建立bare仓库，但是bare仓库不能使用git命令。]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Classes/Structures类和结构体]]></title>
    <url>%2F2017%2F11%2F29%2FSwift%2FGrammar%2FClasses-Structures%E7%B1%BB%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%2F</url>
    <content type="text"><![CDATA[类和结构体简叙述 Swift中，类和结构体是很相近的。所有下面类和结构体的实例都统称为实例。不再单独为类的实例称为对象。和C或OC，不同，swift的类只写在一个文件里面。这点和java一样。 类和结构体的共同点： 1、能定义属性用来存储值 2、能定义方法实现功能 3、能定义下标来得到值 4、具有初始化构造器初始化实例 5、能被扩展 6、能实现协议 类比结构体多出来的特点： 1、能被继承 2、能在运行时使用类型转换判断一个实例是否为某个类 3、具有析构器 4、引用计数可以大于1，使得可以有多个引用指向同一个类的实例（注明：结构体是值传递，所有没有引用计数） 下面定义一个类和结构体，这里先提一下，类的每个属性都给了默认值，除了可选类型之外。这个是swift要求的，以后文章会详细讲到。 struct CPU { var clockSpeed = 1.0 var coreNum = 4 } class Telephone { var cpu = CPU() // CPU()是CPU结构体的默认构造器。它生成一个CPU实例，以后构造器的文章详细讲这方面内容 var screenSize = 5.0 var price: Int? }然后定义他们的实例 var myTelephone = Telephone() var newCPU = CPU()注意结构体是值传递，而类是引用传递。下面的代码清楚说明了这个特点。 var myTelephone = Telephone()var newCPU = CPU() print(myTelephone.cpu.clockSpeed) //1.0 swift使用点语法来获得属性 newCPU.clockSpeed = 2.0 myTelephone.cpu = newCPU //给myTelephone一个新的CPU print(myTelephone.cpu.clockSpeed) //2.0 newCPU.clockSpeed = 2.2 print(myTelephone.cpu.clockSpeed) //2.0 赋值后修改newCPU并不影响myTelephone里面的CPU var cpu = myTelephone.cpu //取出一份CPU，但是是值传递 cpu.clockSpeed = 3.0 print(myTelephone.cpu.clockSpeed) //2.0 所以修改取出的cpu不影响myTelephone里面的 var yourTelephone = myTelephone // 定义一个yourTelephone，它指向myTelephone的同一个实例 yourTelephone.screenSize = 6.0 print(myTelephone.screenSize) //6.0 修改yourTelephone会影响myTelephoneArray，String，Dictionary都是值传递。这个和OC是不一样的。值得注意。 结构体自带一个遍历所有属性的构造器，但是类没有。 var cpu2 = CPU(clockSpeed: 3.3, coreNum: 8) 操作符 === 和 !=====用来判断两个变量是否指向同一个类的实例。如果是返回true。 !==反之。指向不同实例，返回true。 而 == 是判断两个实例是否“相等”，这个相等的条件可以有类的定义者自己决定。]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Garmmar-Enumerations枚举类]]></title>
    <url>%2F2017%2F11%2F29%2F520%2F</url>
    <content type="text"><![CDATA[枚举类 Swift中的枚举和C中的枚举不一样,枚举类而不是枚举类型,它是值传递在C中，枚举类型中的每一项都整形然而在Swift中，你不必为每一项赋值。定义的时候所用的名字就是用来枚举的。当然也可以为枚举成员赋值，这个赋值不单单是整形，可以是Charater，String，浮点数。 定义一个枚举类型注意首字母已经大写分行或一行，用逗号分隔 enum Nameset&#123;case LuGaygaycase LiaoliaoCase Ykk&#125;或 enum Nameset&#123;case LuGaygay, Liaoliao,Ykk &#125; 定义一个枚举变量var myName = Nameset.Ykk或myName = .Ykk Associated Value 用来给每一个枚举成员再定义一个补充值 品的条形码和二维码。条形码是由一串数字组成的，这个数字分为了4个部分。而二维码其实是用一串很长的字符来编码的。如果要把二位码和条形码封装成为一个枚举类型，为了更好地区别二者，我们可以加上associated value，定义如下 enum Barcode &#123; case UPCA(Int, Int, Int, Int) //条形码 case QRCode(String) //二维码 &#125; 定义Barcode变量，同是添加上associated value var productBarcode = Barcode.UPCA(8, 85909, 51226, 3) productBarcode = .QRCode("ABCDEFGHIJKLMNOP") 注意的一点是，如果你定义了associated value，那么在定义变量的时候就和前面的NameSet不太一样了。看下面的两句代码b1是Barcode类型b2是(String) -&gt; Barcode类型，一个函数类型 var b1 = Barcode.UPCA(8, 85909, 51226, 3) var b2 = Barcode.QRCode ``` &gt;以下戴拿 错误 不能将 Barcode类型是值赋给 (String)-&gt;Barcode.这里就可以看出了，其实Barcode.QRCode(String:)是一个构造函数，这里再次验证了swift中的枚举是一个类```swift b2 = Barcode.QRCode("fef") //error NameSet里面可以直接用.Tom之类来赋值,估计是定义associated value的时候，相当于把该枚举成员从一个值变为了构造方法。 switch语句来处理枚举类 用swift强大的switch语句来处理枚举类，除了一般的枚举成员之外，对于带associated value 的成员，我们还可以得到associated value enum NameSet &#123; //重新定义一个简单的枚举类 case Lucy case otherName(String) &#125; var myName = NameSet.Lucy myName = .otherName("Alexs") switch myName &#123; case .Lucy: print(myName) case .otherName(var inputName): //使用括号解包出associated value print(inputName) //只有这句会打印出 Alexs &#125; 修改一下上面的switch如下打印的是otherName switch myName &#123; case .Lucy: print(myName) case .otherName: print("otherName") case .otherName(var inputName): print(inputName) &#125; //打印的是otherName 里可以看出，switch里面的.otherName和声明枚举变量时候的不同，这里已经是值NameSet的值了。而且上面的Switch也会有警告说最后一个case永远不能执行。括号只是用来解包出associated value，而不是构造方法为了验证这一点，再改改上面代码 var myName = NameSet.Lucy switch myName &#123; case .Lucy(let name): print(name) case .otherName: print("otherName") case .otherName(var inputName): print(inputName) &#125; //打印你会发现这里打印了 ()，因为解包Lucy没有得到值 switch语句，之前说过只有穷尽枚举的时候才不需要default选项。上面的例子中因为把NameSet里面所有可能都枚举了，所以不需要default选项 Raw Value 这个就是对每一项枚举成员绑定一个值，好比是C里面的枚举成员都是一个整形如果需要Raw Value，必须在声明枚举类的时候加上raw value 的类型 enum ASCIIControlCharacter: Character &#123; case Tab = "\t" case LineFeed = "\n" case CarriageReturn = "\r" &#125; 和C有默认的raw value一样，swift的枚举类也有默认的raw value但是不是任何类型的raw value 都有默认值假如你raw value的类型是Character，那么就不存在默认raw value，每个枚举成员的默认值都必须由你自己定义如果类型是Int，那么默认值第一个是0，后面的一项都前一项加1.看下面例子就明白了 enum NameSet: Int&#123; case Lucy //0 case Tom = 3 //3 case Kate //4 case Angle = 66 //66 case Alex //67 &#125; 如果类型是String，那么默认值就是你的枚举成员的名字 enum NameSet: String&#123; case Lucy //Lucy case Tom = "T" //T case Kate //Kate &#125; 如果有raw value，就可以用raw value来定义枚举变量 var myName = NameSet(rawValue: "Lucy") //注意这里返回的是一个可选类型，因为这个构造方法是一个可失败的构造方法。具体看后面的类构造的文章。 print(myName!.rawValue) //这里我就没用if做判断了，直接强制解包 递归enum就是在enum的枚举成员的associated value声明为本枚举类,然后使用递归函数。在声明associated value为自己枚举类的时候，需要加上indirect关键字。这个关键字可以加在每个case的前面，也可以加在enum的前面。后一种方法对里面所有的case都起效。但是并不要求所有case都有本枚举类作为associated value indirect enum ArithmeticExpression &#123; //使用第二种indirect。定义了一个数学表达式。 case Number(Int) case Addition(ArithmeticExpression, ArithmeticExpression) case Multiplication(ArithmeticExpression, ArithmeticExpression) &#125; func evaluate(expression: ArithmeticExpression) -&gt; Int &#123; //这个函数运算表达式 switch expression &#123; case .Number(let value): return value case .Addition(let left, let right): return evaluate(left) + evaluate(right) case .Multiplication(let left, let right): return evaluate(left) * evaluate(right) &#125; &#125; // evaluate (5 + 4) * 2 let five = ArithmeticExpression.Number(5) let four = ArithmeticExpression.Number(4) let sum = ArithmeticExpression.Addition(five, four) let product = ArithmeticExpression.Multiplication(sum, ArithmeticExpression.Number(2)) print(evaluate(product)) // prints "18"]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Closures闭包]]></title>
    <url>%2F2017%2F11%2F27%2FSwift%2FGrammar%2FClosures%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[闭包 闭包可以看做是匿名的函数 回想一下函数作为参数的情况定义一个函数，它最后的参数是一个函数类型 func doMath(first: Int, second: Int, mathFunc: (Int, Int) -&gt; Int) &#123; print("mathFunc =",mathFunc(first,second))&#125; 定义一个函数，它有两个整形参数，并有一个整形返回值 func add(first: Int, _ second: Int) -&gt; Int&#123; return first + second 调用第一个函数，将第二个函数作为参数传入 doMath(1, second: 3, mathFunc: add) 打印 mathFunc = 4 如果我们想用doMath实现两个数相减的方法，那么必须再写定义一个sub函数，然后将其作为参数传入。这样在功能多了之后会显得很麻烦，一堆函数，而所以有了闭包这个概念 闭包的语法&#123; (参数列表) -&gt; 返回类型 in //闭包体&#125; 有了闭包，我们可以将上面的代码改为 定义一个函数，它最后的参数是一个函数类型 func doMath(f:Int,s:Int,mathFunc:(Int,Int)-&gt;)&#123; print("mathFunc = ",mathunc(first,second)) &#125; 调用 doMath(1, second: 3, mathFunc: &#123;(f: Int, s: Int) -&gt; Int in return f + s&#125;) 还是很麻烦是吧？ 别忘了 Swift有类型推断功能，所以我们可以继续简化上面的闭包部分代码 doMath(1, second: 3, mathFunc: &#123;f, s in return f + s&#125;) 对应只有一行代码的闭包，return关键字还可以省略 doMath(1, second: 3, mathFunc: &#123;f, s in f + s &#125;) 此外，闭包对参数提供了默认名字，依次为 $0,$1,$2….所以上面的闭包仍可以简化 doMath(1, second: 3, mathFunc: &#123;$0 + $1 &#125;) 对于闭包在参数列表最后一项的情况，可以将闭包写到小括号外部，并且可以省略掉外部参数名 doMath(1, second: 3)&#123; var f = $0 + 1 return f + $1&#125; Autoclosures 姑且叫自动打包吧。用大括号括起来就好，编译器自动判断这个大括号里面的是什么返回类型。但是有时候不准确，需要自己写。下面是这个概念的解释，其实也是一种定义闭包变量的方法 var t = &#123; return 1&#125;print(t()) 定义了一个Void-&gt;Void类型的闭包。因为没有参数，所以可以省略参数列表和in关键字。如果有参数的话，就不能省略in关键字。 var b: Void-&gt;Int = &#123; //定义了一个类型为 Void-&gt;Int的闭包 var i = 1 i++ print(i) return i&#125; 因为闭包其实就是函数，调用这个闭包就和调用函数一样。但是有区别的就是闭包都是没有外部外部参数名，调用的时候不要把内部参数名但做外部参数名使用。 有时候函数需要传递一个闭包的时候，可以在调用的时候使用大括号将一段代码生成为闭包 var b: Void-&gt;Int = &#123; var i = 1 return i&#125;func doClosures(c: Void-&gt;Void) &#123; c()&#125;doClosures(&#123;b()&#125;) //虽然b是一个Void-&gt;Int的闭包，但是其调用再封装之后变为了Void-&gt;Void的闭包doClosures(&#123; var i = 3 i++ print(i)&#125;) 此外，可以在函数参数列表里面使用@autoclosure关键字，这样就不用使用大括号封装了。但是对于多句的代码情况不行（上面的第二种），有时候自动封装也会出错，比如用上面的第一种情况，它把b()看做了Int，然后报错。需要将返回类型重新定义一下 var b: Void-&gt;Void = &#123; var i = 1 i++ print(i)// return i&#125;func doClosures(@autoclosure c: Void-&gt;Void) &#123; //或者不改b的类型，将这里的c的类型改为 Void-&gt;Int也可以 c()&#125;doClosures(b()) 如果想要自动封装的闭包可以在doClosures函数的作用域以外使用，那么加上escaping关键字。这个关键字只能用在@autoclosure后面 var b: Void-&gt;Void = &#123; var i = 1 i++ print(i)&#125;var t: (Void-&gt;Void)?func doClosures(@autoclosure(escaping) c: Void-&gt;Void) &#123; c() t = c //将自动封装的c赋值给外部变量t&#125;doClosures(b())t!() 闭包的值捕获在生成一个闭包的时候，闭包会将它用到的参数和变量都保存一份。提醒一下，其实闭包就是函数 func giveMeFunc2(step: Int) -&gt; (Void -&gt; Int)? &#123; var total = 0 func add() -&gt; Int &#123; total += step; return total &#125; return add&#125; 上面的函数里面生成了嵌套函数，通过输入不同的符号，返回不同的函数。这里有两个变量需要注意，一个是total，一个是step。当生成嵌套函数的时候，嵌套函数会将这两个变量都copy一份，然后保存起来。下面是对上面代码的一个使用 上面的函数里面生成了嵌套函数，通过输入不同的符号，返回不同的函数。这里有两个变量需要注意，一个是total，一个是step。当生成嵌套函数的时候，嵌套函数会将这两个变量都copy一份，然后保存起来。下面是对上面代码的一个使用 可以看到，f1和f2的total和step是不会相互干涉的。 再来看看这个值捕获的时间，看下面代码。这里可以看到，值捕获是发生在返回之前。这个和OC的block是一样的 func giveMeFunc2(step: Int) -&gt; (Void -&gt; Int)? &#123; var total = 0 func add() -&gt; Int &#123; total += step; return total &#125; print("before +100",add()) // total = 0 total += 100 print("after +100",add()) // total = 100 return add&#125;var f1 = giveMeFunc2(1)! //得到一个函数，它会将传入的参数累加，并且每次调用都会加上一次stepprint("f1=",f1()) // 103print("f1=",f1()) // 104 看到这里，可能大家会以为这个值捕获和OC的block差不多，但是其实差远了。这个值捕获的时间很有区别。这里明显的一点就是我们在函数内部改变外部变量total的时候，没有加任何修饰符，OC里面必须加上__block，要么就是对全局变量进行修改。 我们先看一段OC代码 int t =1;int(^b)() = ^() &#123; return t; &#125;;t = 3;NSLog(@"%d",b()); //输出1，理由就不多说了。假如我们把t改为__block。那么将会输出3。改为static同样的效果。__block int t =1;int(^b)() = ^() &#123; return t; &#125;;t = 3;NSLog(@"%d",b()); //3 来看OC和swift中两段很类似的代码 //OCtypedef int(^BLOCK)(void);BLOCK OCFunc (int step) &#123; __block int total = 0; BLOCK b = ^() &#123; total +=step; return total; &#125;; step = 100; NSLog(@&quot;before +100,%d&quot;,b()); //1 total +=100; NSLog(@&quot;after +100,%d&quot;,b()); //102 return b;&#125;//在main方法里面调用BLOCK b = OCFunc(1);NSLog(@&quot;%d&quot;,b()); // 103NSLog(@&quot;%d&quot;,b()); // 104 func swiftFunc(var step: Int) -&gt; Void -&gt; Int&#123; var total = 0 let b: Void -&gt; Int = &#123; Void in total += step; return total &#125; step = 100; print("before +100,",b()) // 100 total+=100 // total = 200 print("after +100,",b()) //300 return b&#125;let d = swiftFunc(1)print("d=",d()) //400print("d=",d()) //500 这里可以看到，OC中的step在block定义的时候就绑定了，后面在更改step的值也不影响block。但是在swift中，step仍然是可以改变的，直到step离开作用域后，闭包才将其捕获。 如果要OC中产生同样的效果，只需定义一个block变量，如下。可以这么看，Swift中的变量默认都是block的 //OCtypedef int(^BLOCK)(void);BLOCK OCFunc (int step) &#123; __block int total = 0; __block int step2 = step; BLOCK b = ^() &#123; total +=step2; return total; &#125;; step2 = 100; NSLog(@"before +100,%d",b()); //100 total +=100; NSLog(@"after +100,%d",b()); //300 return b;&#125;//在main方法里面调用BLOCK b = OCFunc(1);NSLog(@"%d",b()); //400NSLog(@"%d",b()); //500 这个值捕获和OC的block一样，也会产生循环引用问题。OC里面是使用__weak来解决，这里差不多，它可以在参数列表前面加上捕获列表，并且对捕获类别的参数进行权限控制，附上一个官方例子，以后写ARC的时候详细讲 lazy var someClosure: (Int, String) -&gt; String = &#123; [unowned self, weak delegate = self.delegate!] (index: Int, stringToProcess: String) -&gt; String in // closure body goes here&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-流程控制语句]]></title>
    <url>%2F2017%2F11%2F24%2FSwift%2FGrammar%2F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[if else语句 if语句if语句和其他语言中的使用是一样的，只是语法稍有不同首先,是不用括号其次,是即使是if后面只有一条语句，也必须加上大括号 var array1 = ["a","b","c"]if array1.count &gt; 1 &#123; print("array1 is not empty") //这句会打印出来&#125; else &#123; print("array1 is empty")&#125; f语句可以用来检测可选类型是否为空 var str : String?if let s = str &#123; print("str is not nil")&#125; else &#123; print("str is nil") //这句会打印&#125; for 语句 已经移除 for var index = 0; index &lt; 3; index++ &#123; //已经移除 print(index)&#125; for-in 语句 尤其是用来遍历集合 for index in 1...3 &#123; print(index)&#125; 上面的只能是每次加1，但是现在可能有需求每次增加的不是1，所以现在有了这个 for tickMark in stride(from: 0, to: 60, by: 5) &#123; print(tickMark) // 打印 (0, 5, 10, 15 ... 45, 50, 55)&#125; while语句和 repeat-while语句 把括号去掉就行了 var index = 3while index &gt; 0 &#123; index-- print(index)&#125;index = 3repeat &#123; index-- print(index)&#125; while index &gt; 0 Break和continue这个用法和C差不多Switch语句 Swift里面的Switch语句不仅可以判断整形，而且还可以判断各种类型。注意的是执行了一个case后是不会继续往下面执行的，也就是不用添加break语句。相反如果你想要继续往下执行，你必须在这个case最后加上Fallthrough。另外就是default，对于不是枚举类型的变量，defalut必须加上。枚举类型的变量在完全枚举的时候才可以省略default var str = "a"switch str &#123; case "a": print("a") //这句会打印 fallthrough case "b": print("b") //这句会打印 case "c": print("c") //不会打印 default: print("nil") //不会打印&#125; switch里面一个case可以对应多个选项，每个选项之间用逗号分开。这个用法是用来实现c里面的某个选项里面没有执行代码的情况。Swift不允许某个选项里面没有可执行的代码 var str = "s"switch str &#123;case "a","s": print("a") //只打印这句default: print("nil")&#125; case里面也可以是一个范围，在每个case之间的范围有重叠的话，只会匹配第一个 var i = 2switch i &#123;case 1...10: print("1-10") //只打印这句case 9..&lt;20: print("10-20") //因为匹配了第一句，所以这句不会再匹配default: print("other")&#125; 对Tuple 的匹配你可以匹配Tuple的两个值，也可以只匹配一个值，还可以匹配范围 //下面case的条件都是可以匹配的，把前面的case注释掉的话就会匹配下一个case。var tuple = (2,1)switch tuple &#123;case (2,1): print("(2,1)") //因为自动添加break的机制，所以不会往下走case (let x,1): //可以用变量来自由化其中一个值，只需要另外一个值匹配了，就会匹配这个。如果你不关注x的值，你也可以把x换为_ print("x = \(x)")case (-1...3,0...4): print("(-1~3,0~4)")default : print("other")&#125; Where语句在switch中 where可以用来进一步对case添加约束 var tuple = (2,1)switch tuple &#123;case var (x,y) where x == y: //这里用var 和 let 区别在于能不能在case里面修改解包的x，y值。但是即使修改也不会影响原来的tuple print("x == y")case let (_,x) where x == 4: print("x == 4")case var (x,y) where x != y: //匹配了这个case print("x != y") //打印 x != y x = 1 print(x) //打印 1default : print("other")&#125;print(tuple) //打印 （2，1） Labeled Statements 这个labeled statements就像goto语句，但是跳转比较有限，只能用于循环里面。虽然switch也可以加上去，但是并没有用 var tuple = (2,1)second:for _ in 0... &#123; frist : switch tuple &#123; //这个first并没有什么用 case var (x,y) where x == y: //这里用var 和 let 区别在于能不能在case里面修改解包的x，y值。但是即使修改也不会影响原来的tuple print("x == y") break second case var (x,y) where x != y: //匹配了这个case print("x != y") //打印 x != y tuple = (1,1) continue second default : print("other") &#125;&#125;//上面的for循环依次打印了 x != y x == y//注意下面的second，虽然前面也定义了，但是不会冲突。循环内的跳转只能针对循环second:repeat &#123; //对于while也是可以用。 frist : switch tuple &#123; //这个first并没有什么用 case var (x,y) where x == y: //这里用var 和 let 区别在于能不能在case里面修改解包的x，y值。但是即使修改也不会影响原来的tuple print("x == y") break second case var (x,y) where x != y: //匹配了这个case print("x != y") //打印 x != y tuple = (1,1) continue second default : print("other") &#125;&#125; while true//while循环只打印了 x == y，因为Tuple已经被修改为(1,1) Assertion和Preconditionassert(_:_:file:line:) 判断一个情况是否为true，不为true直接停止程序 assertionFailure(_:file:line:) Swift现在多了一个Preconditions，区别文档上说的是开发时候用Assertions，生产用Preconditions。(Assertions help you find mistakes and incorrect assumptions during development, and preconditions help you detect issues in production. ) precondition(_:_:file:line:) preconditionFailure(_:file:line:) 文档上有两段话： If you compile in unchecked mode (-Ounchecked), preconditions are not checked. The compiler assumes that preconditions are always true, and it optimizes your code accordingly. However, the fatalError(:file:line:) function always halts execution, regardless of optimization settings.You can use the fatalError(:file:line:) function during prototyping and early development to create stubs for functionality that hasn’t been implemented yet, by writing fatalError(“Unimplemented”) as the stub implementation. Because fatal errors are never optimized out, unlike assertions or preconditions, you can be sure that execution always halts if it encounters a stub implementation.但是没找到这个-Ounchecked模式，到时有一个选项是disable_safty_checks。这个选项的关闭和Swift_OPTIMIZATION_LEVEL的模式有关系。如果你选择的是 -Onone，那么不管disable_safty_checks的值，都会检测precondition和assert。但是如果开启了优化，那么assert就再不检测，而precondition就会根据是否关闭安全检测来执行 guard语句 这个和assertions差不多，都是用来做判断的，不过这个要自己加上处理。用来在条件不满足的情况下跳出方法或循环 var i = 1while true &#123; guard i &gt; 1 else &#123; print("i &lt;= 1") break //else里面必须加上break或return &#125;&#125; available 用来判断是否可以使用某个版本API if #available (iOS 8, OSX 10.10, *) &#123; //括号里面表示的是最低的版本。这个*必须有，代表其他平台&#125; else &#123;&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-集合类型]]></title>
    <url>%2F2017%2F11%2F24%2FSwift%2FGrammar%2F%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[集合类型 集合类分为array、dictionary、set每个集合都有一个isEmpty属性来判断这个集合是否为空 Array 创建array的四种方法 var array1 = ["a","b","c"] //包含 a b c 三个字符串var array2 = Array&lt;Int&gt;() //空array，这里一定要指明元素类型var array3 = [String]() //空arrayvar array4 = Array(repeating:2.4, count:3) //包含3个double变量，值都为1.3var array5 = [Double](repeating:2.4, count:3) //包含3个double变量，值都为1.3 获取array的某个元素,直接用下标 var value = array1[9] 清空数组 array1.removeAll()array1 = []; 清空某个元素 remove(at:) 清空某个范围的元素 array.removeSubrange(1..&lt;arr.endIndex)// 这里会移除从1开始，但是不包括end的元素，但是endIndex是指向最后一个元素的后一个元素的，所以会从index为1的元素开始，删除后面全部。array[1...2] = [] //这里将范围1-2的元素都清空了,注意一点，如果数组越界的话，会产生运行时错误 向array添加元素 //使用append()方法array1.append("A") //向array1的末尾添加一个 A，现在只有一个 A 元素//使用运算符号array3 += ["d","e"] //array3从空数组变为包含 d e 两个字符串var array5 = array1 + array3 + ["last"] //array5包含 A d e last, 4个元素//使用insert方法array5.insert("first", at: 0) //array5包含 first A d e last, 5个元素 改变array元素 array5[0] = "newBe"array5[1...3] = ["1","2","3"] 遍历数组for item in array5 &#123; print(item)&#125;for (index,item) in array5.enumerated() &#123; print(index,item)&#125; Set Set 创建set里面的元素都必须实现hashable。因为区分set里面的元素的根本就是判断两个元素的hash值是否相等。swift基本类型都实现了hashable var emptySet = Set&lt;Character&gt;() //建立一个空set，必须指明内容的类型var nameSet : Set&lt;String&gt; = ["Tom","Lucy","Aaron"] //使用初始数据建立set 移除Set removeAll()，这个方法还可以传一个boolean参数，表示是否保持空间，传ture的话表示保持 移除一个元素有两种办法 var index = nameSet.index(of:"Tom")nameSet.remove(at:index!) //因为indexOf返回的是可选类型，所以这里要解包nameSet.remove("Tom") //这种和上面的是等价的 遍历Set for name in nameSet.sorted() &#123; //这里的sorted()可以不用，这里用来排序 print(name)&#125; 包含某个元素 Set和Array都有一个contains方法来判断 Set操作包括了求交集，并集，“减集”，“异或集”官方代码 let oddDigits: Set = [1, 3, 5, 7, 9]let evenDigits: Set = [0, 2, 4, 6, 8]let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]oddDigits.union(evenDigits).sort()// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]oddDigits.intersection(evenDigits).sort()// []oddDigits.subtracting(singleDigitPrimeNumbers).sort()// [1, 9]oddDigits.symmetricDifference(singleDigitPrimeNumbers).sort()// [1, 2, 9] Set关系 isSubset(of:) 判断一个set是否为另外一个set的子setisSuperset(of:) 判断一个set是否为另外一个set的父setisStrictSubset(of:) 和 isStrictSuperset(of:) 意思和上面的一样，只是这两个方法不能存在相等的情况。isDisjoint(with:) 判断两个set是否没有共同元素，没有的话返回true Dictionary 创建Dictionar var dict1 : [String:Int] = ["a":1,"b":2,"c":3]var dict = ["a":1,"b":2,"c":3, 3:"d"] as [AnyHashable : Any] //注意这个没声明类型的，因为key和value里面都有不同的类型，所以需要将二者都强转为AnyHashable，但是如果key（value）类型只有一种的话，那么就会转为那种类型。var dict2 = [Int:String]()var dict3 = Dictionary&lt;String,Int&gt;() 添加/修改/删除dictionarydictionary也提供了removeAll，removeAtIndex之类的方法使用和Set是一样的，就不写了。下面是dictionary特有的 dict[5] = "f" //添加一个键值对 5: "f"dict[5] = 5 //修改key为5的值为5dict[5] = nil //删除key为5的键值对dict[6] = nil //对不存在的键值对赋nil不会报错dict2 = [:] //清空所有 新增了一个更改和删除的方法，可以获得更新和删除前的旧值(可选类型)。如果这个值以前不存在，那么返回nil let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") let removedValue = airports.removeValue(forKey: "DUB") 遍历dictionary for (key,name) in dict &#123; print(key,name,separator:":")&#125;var keys = dict1.keys.sort();for key in keys &#123; print(key,dict[key]!)&#125;]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-String-Character]]></title>
    <url>%2F2017%2F11%2F24%2FSwift%2FGrammar%2FString-%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[StringString 的定义 字符串是有序的字符集合，或者叫文本String 是字符串类型。单个字，Character是字符类型2个字符串可以用 + 链接通过字符插值可以合成一个长字符串 public struct String &#123; public init() // An empty `String`&#125; 字符串创建和空判断 字符串字面量，包含双引号的值 var str = "Yue ke kui" 创建空串 var yue = ""或var yue = String() //结构体方式创建var ke = " "yue.isEmpty // 判断字符串是否为空ke.isEmpty // 不为空。有空格 使用三个引号来创建一段话的string开始的三个引号的第一行后面的空格都会忽略，但是第二行的空格不会 let quotation = """The White Rabbit put on his spectacles. "Where shall I begin,please your Majesty?" he asked."Begin at the beginning," the King said gravely, "and go ontill you come to the end; then stop."""" 可修改字符串 Swift 3.0 用 var 和 let 来判断字符串是否可以被修改(类似OC可变字符串)let修饰 不可变字符串 不能拼接追加等var修饰 可变字符串var variableString = "Hello"variableString += "Swift 3.0";print(variableString);//打印HelloSwift 3.0 Character 字符 创建一个Character，必须显式声明类型 var c1:Character = "c" //注意是 双引号var c2 = "c" //c2被认为是String类型var c3 = 'c' //编译错误// Character可以赋值为Unicodelet eAcute: Character = "\u&#123;E9&#125;" // é// 挨个 取 字符let string = "Swift";var arrays = string.characters;for charactor in arrays&#123; print(charactor);&#125;//一次打印 S w i f t 字符串是值类型 改变String，这个语法和java一样的，不过内存管理层面已经是不同的对象字符串是值类型: 创建了一个新的字符串，那么当其进行常量、变量赋值操作，或在函数/方法中传递时，会进行值拷贝。在实际编译时，Swift 编译器会优化字符串的使用，使实际的复制只发生在绝对必要的情况下，这意味着您将字符串作为值类型的同时可以获得极高的性能 var str:String = "first"var c1:Character = "c" //注意是双引号var c2 = "c" //c2被认为是String类型str += "sceond" //str变为firstsceond,此时的str和之前的str内存地址不同str += c2 //str变为firstc,此时的str和之前的str内存地址不同str.appendContentsOf("second") // 和使用+=是一样的str.appendContentsOf(c2) //和使用+=是一样的str.append(c1); //添加Character的方法 遍历String字符var str:String = "first"for c in str.characters &#123; print(c)&#125; ------ 或for index in str.characters.indices &#123; print(str[index])&#125; 获取String长度var s = "dfe"print(s.count) //3 swift里面有extended grapheme clusters(An extended grapheme cluster is a sequence of one or more Unicode scalars that (when combined) produce a single human-readable character.) 也就是几个Unicode字符组合成一个人类可以识别的字符。 当string里面添加了characters后，count不一定会增加。string的count不一定和NSString的length一致。(The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode extended grapheme clusters within the string.) 运算符+其他方式，赋值 符附字符尾部 append // 通过加法运算符（+）相加在一起（或称“连接”）创建一个新的字符串 let string1 = "chen"; let string2 = "jian"; let string3 = string1 + string2; print("string3 is \(string3)"); // chen jian//通过加法赋值运算符 (+=) 将一个字符串添加到一个已经存在字符串变量上var variablestring = "da shen chen jian";variablestring += string2;print("variablestring is \(variablestring)");// da shen chen jianjian // 用append()方法将一个字符附加到一个字符串变量的尾部 variablestring.append(" !"); print("variablestring is \(variablestring)"); // da shen chen jianjian ! String的Index 不像java里面的Index直接就是一个数字 String的Index是在不同的extension中定义的。 获得String里面的某个字符的过程let greeting = "Guten Tag!"greeting[greeting.startIndex]// Ggreeting[greeting.index(before: greeting.endIndex)]// !greeting[greeting.index(after: greeting.startIndex)]// ulet index = greeting.index(greeting.startIndex, offsetBy: 7)greeting[index]// a 插入和移除字符var welcome = "hello"welcome.insert("!", at: welcome.endIndex)// welcome now equals "hello!"welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))// welcome now equals "hello there!"welcome.remove(at: welcome.index(before: welcome.endIndex))// welcome now equals "hello there"let range = welcome.index(welcome.endIndex, offsetBy: -6)..&lt;welcome.endIndexwelcome.removeSubrange(range)// welcome now equals "hello" 截串 Swift引入了一个SubString类，用来截串 let greeting = "Hello, world!"let index = greeting.index(of: ",") ?? greeting.endIndexlet beginning = greeting[..&lt;index]// beginning is "Hello"但是注意SubString可能会用到原来string的内存。官方建议是短时间使用，如果想要长时间保持，需要转为String// Convert the result to a String for long-term storage.let newString = String(beginning) 将String转换为NSString，然后调用NSString的截串方法 var str = "123456789"var ns = (str as NSString).substringWithRange(NSMakeRange(1, 4))print(ns) //输出 2345 xtension来扩展String(最简单)mport Foundationextension String &#123; //获取部分字符串，如果不在范围内，返回nil.如果end大于字符串长度，那么截取到最后 subscript (start: Int, end: Int) -&gt; String? &#123; if start &gt; self.count || start &lt; 0 || start &gt; end &#123; return nil &#125; let begin = self.index(self.startIndex, offsetBy: start) var terminal: Index if end &gt;= length &#123; terminal = self.index(self.startIndex, offsetBy: count) &#125; else &#123; terminal = self.index(self.startIndex, offsetBy: end + 1) &#125; let range = (begin ..&lt; terminal) return self.substring(with: range) &#125; //获取某个字符，如果不在范围内，返回nil subscript (index: Int) -&gt; Character? &#123; if index &gt; self.count - 1 || index &lt; 0 &#123; return nil &#125; return self[self.index(self.startIndex, offsetBy: index)] &#125;&#125; 计算字符数量 如果想要获得一个字符串中Character值的数量，可以使用字符串的characters属性的count属性 let calculstring = "chenjian"; print("calculstring has \(calculstring.characters.count) charactor");//输出结果 calculstring has 8 charactor 访问字符串 let visitString = "Hello Swift";//获取第一个字符print("visitString 的第一个字符 :\(visitString[visitString.startIndex])");// 这里输出 visitString 的第一个字符 :H//获取最后一个字符print("visitString 的最后一个字符 :\(visitString[visitString.index(before: visitString.endIndex)])");// 这里输出 visitString 的最后一个字符 :t//获取下第二个字符print("visitString 的第二个字符 : \(visitString[visitString.index(after: visitString.startIndex)])")// 这里输出 visitString 的第二个字符 : e// 通过偏移量获取索引 第一个字符 往后偏移 4个单位(不包括起始位置) （备注： 如果你把字符串当数组来理解，你会发现 0 就在数组的自四个位置）let index = visitString.index(visitString.startIndex, offsetBy: 4);print("\(visitString[index])");// 这里输出 o// 使用 characters 属性的 indices 属性会创建一个包含全部索引的范围(Range)，用来在一个字符串中访问单个字符for index in visitString.characters.indices&#123; print("通过下标得到每一个字符:\(visitString[index])");&#125;// 这里输出/*通过下标得到每一个字符:H通过下标得到每一个字符:e通过下标得到每一个字符:l通过下标得到每一个字符:l通过下标得到每一个字符:o通过下标得到每一个字符: 通过下标得到每一个字符:S通过下标得到每一个字符:w通过下标得到每一个字符:i通过下标得到每一个字符:f通过下标得到每一个字符:t*/ 大小写转化let changeString = "hello";print("\(changeString.uppercased())") //转化成大写print("\(changeString.lowercased())") // 转化成小写 插入 调用 insert(_:at:) 方法可以在一个字符串的指定索引插入一个字符，调用 insert(contentsOf:at:) 方法可以在一个字符串的指定索引插入一个段字符串 //插入单个字符var welocome = "hello";welocome.insert("!", at: welocome.endIndex);print("welocome = \(welocome)");//welocome = hello!//插入一段字符串到某个位置 contentsOf ： "字符串".characters 固定语法welocome.insert(contentsOf: "there".characters, at: welocome.index(before: welocome.endIndex));print("welocome = \(welocome)");//welocome = hello there! 删除 调用 remove(at:) 方法可以在一个字符串的指定索引删除一个字符 welocome.remove(at: welocome.index(before: welocome.endIndex));print("welocome = \(welocome)");//welocome = hello there// 调用 removeSubrange(_:) 方法可以在一个字符串的指定索引删除一个子字符串。let range = welocome.index(welocome.startIndex,offsetBy:6)..&lt;welocome.endIndex;welocome.removeSubrange(range);print("welocome = \(welocome)");// welocome = hello//指定位置删除welocome.remove(at: welocome.index(before: welocome.endIndex));print(welocome);//hello 比较字符串 字符串/字符可以用等于操作符(==)和不等于操作符(!=) let quotation = "We're a lot alike, you and I."let sameQuotation = "We're a lot alike, you and I."if quotation == sameQuotation&#123; print("相等");&#125;// 前缀相等let preString01 = "date";if preString01.hasPrefix("da")&#123; print("preString01 前缀有da");&#125;// 后缀相等if preString01.hasSuffix("te")&#123; print("preString01 后缀有te");&#125; 注意 不能将一个字符串或者字符添加到一个已经存在的字符变量上，因为字符变量只能包含一个字符 特殊字符 字符串字面量可以包含以下特殊字符：转义字符\0(空字符)、(反斜线)、\t(水平制表符)、\n(换行符)、\r(回车符)、\”(双引号)、\’(单引号)]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
        <category>String</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-嵌套类型&类型转换]]></title>
    <url>%2F2017%2F11%2F24%2FSwift%2FGrammar%2F%E5%B5%8C%E5%A5%97%E7%B1%BB%E5%9E%8B%26%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[嵌套类型(Nested Types) 这个概念就是把一个类（结构体、枚举类）的定义放到一个类类（结构体、枚举类）的里面。这个嵌套可以随便嵌套。可以在结构体里面定义类，类里面定义枚举类，枚举类里面定义结构体等等。随便一个没意思的例子，访问方法也给出来了。使用点语法就可以了 enum A &#123; struct B &#123; var num = 1 class Q &#123; &#125; class C &#123; var cc = 2 enum AA &#123; case d,e &#125; class CCC &#123; &#125; &#125; &#125; &#125; print(A.B.C.AA.d) //d print(A.B.C().cc) //2 类型判断符 is 用is可以用来判断一个实例是否是某个类或是某个类是子类。返回一个Bool值。十分简单，看例子 class Fruit &#123; &#125; class Apple : Fruit&#123; func eatApple() &#123; print("ear apple") &#125; &#125; class Pear: Fruit &#123; func eatPear() &#123; print("eat pear") &#125; &#125; var array = [Fruit(),Apple(),Pear()] for item in array &#123; print(item is Apple) &#125; //打印 //false //true //false var f = Fruit() var a = Apple() var p = Pear() print(a is Apple) //警告说 肯定返回 true print(a is Fruit) //警告说 肯定返回 true print(p is Apple) //警告说 肯定返回 false print(f is Apple) //打印false 类型下转换符as? 和 as! ，下转换判断符as 这as? as! 两个运算符可以将一个实例尝试转换为另外一个类的实例。一般是用在将一个父类变量的转换为一个子类变量。比如下面代码 var fruit: Fruit = Pear() 先来开开这句代码，我们把一个变量声明为了Fruit类型，但是赋值的时候给的却是Fruit的子类Pear。这个时候并不会报错。这种用一个父类类型的变量指向一个子类的做法称为多态。多态在面向对象编程里面有很重要的作用。这里不展开讲。因为fruit变量声明为了Fruit类型，即使它实际引用的实例是Pear类，但是现在还是不能通过它来调用Pear类引入的属性或方法。尽管这个实例确实是拥有这些属性和方法。为了去访问这些存在的属性和方法，我们就要采用类型下转换，将这个fruit的变量转换为一个pear的变量。 var pear = fruit as? Pear 上面的代码使用as?，尝试将这个fruit转为一个Pear类型的变量。这里因为fruit引用的实例就是Pear，所以是可以转换成功。成功后返回了一个Pear的可选类型给变量pear。但是如果转换失败，返回的是一个nil。比如你尝试将一个Apple实例转换为一个Pear，或者将一个Fruit实例转换为它的子类都会失败。 补充一点，如果对上面的fruit变量使用is判断是否是Pear类，返回的是true。as!和as?的区别就是强制解包了。学了那么多，应该可以猜到。最后在介绍这个比较诡异的as之前，看看Any和AnyObject这两个类型。 Any代表任何类型的实例，包括了函数类型。 AnyObject代表任何类的实例。 现在介绍as的用法，现在只发现as能用在switch中，用来判断变量是否是某个类型 func f1() -&gt; Int&#123; return 1 &#125; var b = &#123;var i=0; i++&#125; var array: [Any] = [f1,b,fruit,Fruit(), Apple(), Pear(), Animal(), (2,3), (4,5)] for (index, item) in array.enumerate() &#123; switch item &#123; case let item2 as Apple : print("index\(index) is \(item2)") case is Pear: print("index\(index) is pear") case let (2,y) as (Int, Int) where y &gt; 2: print("index\(index) is tuple y =",y) case is (Int,Int): print("index\(index) is (Int,Int) ",item) case let f as Void-&gt;Void: print("index\(index) is Void-&gt;Void ",item) default: print("index\(index) is default",item) &#125; &#125; //打印 //index0 is default (Function) //index1 is Void-&gt;Void (Function) //index2 is pear //index3 is default SwiftTest.Fruit //index4 is SwiftTest.Apple //index5 is pear //index6 is default SwiftTest.Animal //index7 is tuple y = 3 //index8 is (Int,Int) (4, 5) 你会发现其实，is 和 as 的效果是一样的。as比is多的就是将一个tuple可以再次解包出元素，并且再次匹配元素，同时还可以加上where做判断。比如上面的第三个case语句。会判断这个item是否是(Int,Inte)类型，然后解包tuple，判断第一个元素是否为2，如果是2，还会判断第二个元素是否大于2.只有这三个条件都符合才会匹配这个case]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Protocol协议]]></title>
    <url>%2F2017%2F11%2F24%2FSwift%2FGrammar%2FProtocol%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[ProtocolPOP 面向协议的编程 面向协议的编程的核心是抽象（Abstraction）和简化（Simplicity）协议的高级使用是协议的延展协议(protocol) + 结构体(struct) &gt; 类(class) 面向对象与面向协议比较 面向对象是一个很古老的软件开发模式，通过类来实现 面向协议是苹果在 swift 中主推的，通过协议和结构体，可以代替类 Swift 中的很多对象都改成了结构体和协议 并不是所有的类都可以被协议+结构体替代，但大多数是可以被替换的 面向协议使代码更加灵活，类似于组件化开发，符合工厂方法模式实例比较：给一个类添加额外的方法 通过继承 创建一个继承类的子类，在子类中添加方法，以后使用子类即可获取这个方法通过协议 为这个方法定义一个协议，哪个类需要实现这个方法，协议即可 使用继承的缺点 通过继承添加的方法，不一定每个子类都会使用，使代码冗余 拥有太多的子类，使类冗余 对于父类的方法太过依赖，当父类的方法更改后，影响子类的重载方法 协议 协议 规定了用来实现某一特定功能所必须的 方法和 属性。用于统一方法和属性的名称，而不实现任何功能任意能够满足协议要求的类型被称为遵循(conform)这个协议。类，结构体、枚举类型(协议的遵守者) 都可以遵循协议，并提供具体实现来完成协议定义的方法和功能 协议的语法格式 协议的高级使用是协议的延展以及和结构体配合 为议添加属性, 属性为可读或可写 protocol SomeProtocol &#123; // 协议内容 var name: String &#123;get set&#125; var age: Int &#123; set get &#125;&#125; 定义一个接受协议的结构体 struct SomeModel: SomeProtocol&#123; var name:String = "" var age: Int = 0 var isYue: Bool = false init(with dict:[String:Any])&#123; self.name = (dict["name"]as?String)??"" self.age = (dict["age"]as?Int)??0 self.isYue = (dict["isYue"]as?Bool)??false &#125; &#125; 对协议进行延展 extension SomeProtocol&#123; mutating func test ()&#123; self.name = "Hello Jianjian !" &#125;&#125; 协议的协议 protocol oneProtocol: SomeProtocol &#123; var date: Date &#123; set get &#125;&#125; 遵循某(多)个协议 要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分遵循多个协议时，各协议之间用逗号,分隔 struct SomeStructure: FirstProtocol, AnotherProtocol &#123; // 结构体内容&#125; 如果类在遵循协议的同时拥有父类，应该将 父类名 放在 协议名 之前，以逗号分隔 class OneClass: OneSuperClass, OneProtocol, TwoProtocol &#123; // 类的内容&#125; 对属性的规定 协议 用于指定特定的实例属性或类属性 协议能够要求其遵守者必须含有一些特定名称和类型的实例属性(instance property)或类属性 (type property)，也能够要求属性的(设置权限)settable 和(访问权限)gettable，还必须指明是只读的还是可读可写的但它不要求属性是存储型属性(stored property)还是计算型属性(calculate property)协议中的通常用var来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。 protocol SomeProtocol &#123; var age : Int &#123; get set &#125; var money: Int &#123; get &#125;&#125; 用类来实现协议时，使用class关键字来表示该属性为类成员用结构体或枚举实现协议时，则使用static关键字来表示 protocol SomeProtocol &#123; class var someTypeProperty: Int &#123; get set &#125;&#125; SomeProtocol协议含有fullName属性。因此其遵循者必须含有一个名为oneName，类型为String的可读属性Person结构体含有一个名为oneName的存储型属性，完整的遵循了协议。(若协议未被完整遵循，编译时则会报错) protocol SomeProtocol &#123;var oneName: String &#123; get &#125;&#125; struct Person: SomeProtocol&#123; var oneName: String &#125; let john = Person(oneName: “Chen jianjian”) //john. oneName 为 “Chen jianjian” Startship类遵循了SomeProtocol协议Starship类将oneName实现为可读的计算型属性它的每一个实例都有一个名为name的必备属性和一个名为prefix的可选属性当prefix存在时，将prefix插入到name之前来为Starship构建oneName class Starship: SomeProtocol &#123; var prefix: String? var name: String init(name: String, prefix: String? = nil ) &#123; self.anme = name self.prefix = prefix&#125;var oneName: String &#123; return (prefix ? prefix ! + ” ” : ” “) + name&#125;&#125;var ncc1701 = Starship(name: “Enterprise”, prefix: “USS”)// ncc1701. oneName == “USS Enterprise” protocol classa &#123; var marks: Int &#123; get set &#125; var result: Bool &#123; get &#125; func attendance() -&gt; String func markssecured() -&gt; String&#125;protocol classb: classa &#123; var present: Bool &#123; get set &#125; var subject: String &#123; get set &#125; var stname: String &#123; get set &#125;&#125;class classc: classb &#123; var marks = 96 let result = true var present = false var subject = "Swift 协议" var stname = "Protocols" func attendance() -&gt; String &#123; return "The \(stname) has secured 99% attendance" &#125; func markssecured() -&gt; String &#123; return "\(stname) has scored \(marks)" &#125;&#125;let studdet = classc()studdet.stname = "Swift"studdet.marks = 98studdet.markssecured()print(studdet.marks)print(studdet.result)print(studdet.present)print(studdet.subject)print(studdet.stname)以上程序执行输出结果为98truefalseSwift 协议Swift 对 Mutating 方法的规定 有时需要在方法中改变它的实例。例如：值类型（结构体，枚举）的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值 protocol daysofaweek &#123; mutating func show()&#125;enum days: daysofaweek &#123; case sun, mon, tue, wed, thurs, fri, sat mutating func show() &#123; switch self &#123; case .sun: self = .sun print("Sunday") case .mon: self = .mon print("Monday") case .tue: self = .tue print("Tuesday") case .wed: self = .wed print("Wednesday") case .thurs: self = .thurs print("Wednesday") case .fri: self = .fri print("Wednesday") case .sat: self = .sat print("Saturday") default: print("NO Such Day") &#125; &#125;&#125;var res = days.wedres.show()程序执行输出结果为：Wednesday 对构造器的规定 协议可以要求它的遵循者实现指定的构造器。像书写普通的构造器那样，在协议的定义里写下构造器的声明，但不需要写花括号和构造器的实体，语法如下： protocol SomeProtocol &#123; init(someParameter: Int)&#125; 实例 protocol tcpprotocol &#123; init(aprot: Int)&#125; 协议构造器规定在类中的实现 你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上”required”修饰符： class SomeClass: SomeProtocol &#123; required init(someParameter: Int) &#123; // 构造器实现 &#125;&#125;protocol tcpprotocol &#123; init(aprot: Int)&#125;class tcpClass: tcpprotocol &#123; required init(aprot: Int) &#123; &#125;&#125; 施用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符： protocol tcpprotocol &#123; init(no1: Int)&#125;class mainClass &#123; var no1: Int // 局部变量 init(no1: Int) &#123; self.no1 = no1 // 初始化 &#125;&#125;class subClass: mainClass, tcpprotocol &#123; var no2: Int init(no1: Int, no2 : Int) &#123; self.no2 = no2 super.init(no1:no1) &#125; // 因为遵循协议，需要加上"required"; 因为继承自父类，需要加上"override" required override convenience init(no1: Int) &#123; self.init(no1:no1, no2:0) &#125;&#125;let res = mainClass(no1: 20)let show = subClass(no1: 30, no2: 50)print("res is: \(res.no1)")print("res is: \(show.no1)")print("res is: \(show.no2)")以上程序执行输出结果为：res is: 20res is: 30res is: 50 协议类型 尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用协议可以像其他普通类型一样使用，使用场景: 作为函数、方法或构造器中的参数类型或返回值类型 作为常量、变量或属性的类型 作为数组、字典或其他容器中的元素类型 实例 protocol Generator &#123; associatedtype members func next() -&gt; members?&#125;var items = [10,20,30].makeIterator()while let x = items.next() &#123; print(x)&#125;for lists in [1,2,3].map( &#123;i in i*5&#125;) &#123; print(lists)&#125;print([100,200,300])print([1,2,3].map(&#123;i in i*10&#125;))以上程序执行输出结果为：10203051015[100, 200, 300][10, 20, 30] 在扩展中添加协议成员 可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。 protocol AgeClasificationProtocol &#123; var age: Int &#123; get &#125; func agetype() -&gt; String&#125;class Person &#123; let firstname: String let lastname: String var age: Int init(firstname: String, lastname: String) &#123; self.firstname = firstname self.lastname = lastname self.age = 10 &#125;&#125;extension Person : AgeClasificationProtocol &#123; func fullname() -&gt; String &#123; var c: String c = firstname + " " + lastname return c &#125; func agetype() -&gt; String &#123; switch age &#123; case 0...2: return "Baby" case 2...12: return "Child" case 13...19: return "Teenager" case let x where x &gt; 65: return "Elderly" default: return "Normal" &#125; &#125;&#125; 协议的继承协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。协议的继承语法与类的继承相似，多个被继承的协议间用逗号分隔： protocol InheritingProtocol: SomeProtocol, AnotherProtocol &#123; // 协议定义&#125; 实例 protocol Classa &#123; var no1: Int &#123; get set &#125; func calc(sum: Int)&#125;protocol Result &#123; func print(target: Classa)&#125;class Student2: Result &#123; func print(target: Classa) &#123; target.calc(1) &#125;&#125;class Classb: Result &#123; func print(target: Classa) &#123; target.calc(5) &#125;&#125;class Student: Classa &#123; var no1: Int = 10 func calc(sum: Int) &#123; no1 -= sum print("学生尝试 \(sum) 次通过") if no1 &lt;= 0 &#123; print("学生缺席考试") &#125; &#125;&#125;class Player &#123; var stmark: Result! init(stmark: Result) &#123; self.stmark = stmark &#125; func print(target: Classa) &#123; stmark.print(target) &#125;&#125;var marks = Player(stmark: Student2())var marksec = Student()marks.print(marksec)marks.print(marksec)marks.print(marksec)marks.stmark = Classb()marks.print(marksec)marks.print(marksec)marks.print(marksec)以上程序执行输出结果为：学生尝试 1 次通过学生尝试 1 次通过学生尝试 1 次通过学生尝试 5 次通过学生尝试 5 次通过学生缺席考试学生尝试 5 次通过学生缺席考试 类专属协议你可以在协议的继承列表中,通过添加class关键字,限制协议只能适配到类（class）类型。该class关键字必须是第一个出现在协议的继承列表中，其后，才是其他继承协议。格式如下： protocol SomeClassOnlyProtocol: class, SomeInheritedProtocol &#123; // 协议定义&#125; 实例 protocol TcpProtocol &#123; init(no1: Int)&#125;class MainClass &#123; var no1: Int // 局部变量 init(no1: Int) &#123; self.no1 = no1 // 初始化 &#125;&#125;class SubClass: MainClass, TcpProtocol &#123; var no2: Int init(no1: Int, no2 : Int) &#123; self.no2 = no2 super.init(no1:no1) &#125; // 因为遵循协议，需要加上"required"; 因为继承自父类，需要加上"override" required override convenience init(no1: Int) &#123; self.init(no1:no1, no2:0) &#125;&#125;let res = MainClass(no1: 20)let show = SubClass(no1: 30, no2: 50)print("res is: \(res.no1)")print("res is: \(show.no1)")print("res is: \(show.no2)")以上程序执行输出结果为：res is: 20res is: 30res is: 50 九、协议合成Swift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。语法格式如下： protocol Stname &#123; var name: String &#123; get &#125;&#125;protocol Stage &#123; var age: Int &#123; get &#125;&#125;struct Person: Stname, Stage &#123; var name: String var age: Int&#125;func show(celebrator: Stname &amp; Stage) &#123; print(&quot;\(celebrator.name) is \(celebrator.age) years old&quot;)&#125;let studname = Person(name: &quot;Priya&quot;, age: 21)print(studname)let stud = Person(name: &quot;Rehan&quot;, age: 29)print(stud)let student = Person(name: &quot;Roshan&quot;, age: 19)print(student)以上程序执行输出结果为：Person(name: &quot;Priya&quot;, age: 21)Person(name: &quot;Rehan&quot;, age: 29)Person(name: &quot;Roshan&quot;, age: 19) 检验协议的一致性 使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。 is操作符用来检查实例是否遵循了某个协议。 as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。 as用以强制向下转型，如果强转失败，会引起运行时错误。 实例 下面的例子定义了一个 HasArea 的协议，要求有一个Double类型可读的 area： protocol HasArea &#123; var area: Double &#123; get &#125;&#125;// 定义了Circle类，都遵循了HasArea协议class Circle: HasArea &#123; let pi = 3.1415927 var radius: Double var area: Double &#123; return pi * radius * radius &#125; init(radius: Double) &#123; self.radius = radius &#125;&#125;// 定义了Country类，都遵循了HasArea协议class Country: HasArea &#123; var area: Double init(area: Double) &#123; self.area = area &#125;&#125;// Animal是一个没有实现HasArea协议的类class Animal &#123; var legs: Int init(legs: Int) &#123; self.legs = legs &#125;&#125;let objects: [AnyObject] = [ Circle(radius: 2.0), Country(area: 243_610), Animal(legs: 4)]for object in objects &#123; // 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议 if let objectWithArea = object as? HasArea &#123; print("面积为 \(objectWithArea.area)") &#125; else &#123; print("没有面积") &#125;&#125;以上程序执行输出结果为：面积为 12.5663708面积为 243610.0没有面积 Demo]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Document-Develpe文档]]></title>
    <url>%2F2017%2F11%2F23%2F1%2F</url>
    <content type="text"><![CDATA[swift4苹果开发者中心 swift 语法基础 Swift学习 Swift部分资料 第三方 第三方02 这个人博客整理的很好 swift框架大全 swift开发博客很好滴 lib GitHub上Swift开源项目 RxSwift一篇不错的文章 swif.gg里 小青那个牛逼货的一些学习RxSwift资料]]></content>
      <categories>
        <category>Swift</category>
        <category>Document</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Lib-YYKit-YYmodel]]></title>
    <url>%2F2017%2F11%2F23%2FOC%2FLib%2FOC-Lib-YYKit-YYmodel%2F</url>
    <content type="text"></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>YYKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Blog-配置]]></title>
    <url>%2F2017%2F11%2F23%2FBlog%2FBlog-%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[博客配置01博客配置02 RxSwift]]></content>
      <categories>
        <category>Blog</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Blog-配置]]></title>
    <url>%2F2017%2F11%2F23%2FBlog%2FABCD%2F</url>
    <content type="text"><![CDATA[#KVO实现原理 1.KVO是基于runtime机制实现的2.某个类的属性对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的setter 方法。派生类在被重写的setter方法内实现真正的通知机制4如果原类为Person，那么生成的派生类名为NSKVONotifying_Person5.键值观察通知依赖于NSObject 的两个方法: willChangeValueForKey: 和 didChangevlueForKey:；在一个被观察属性发生改变之前， willChangeValueForKey:一定会被调用，这就 会记录旧的值。而当改变发生后，didChangeValueForKey:会被调用，继而 observeValueForKey:ofObject:change:context: 也会被调用 为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别代理是使用weak来修饰的 1.使用weak是为了避免循环引用2.当使用weak修饰的属性，当对象释放的时候，系统会对属性赋值nil,object-c有个特性就是对nil对象发送消息也就是调用方法，不会cash。 delegate和 dataSource,都是可以使用require和optional来修饰的代理和Block的区别 相同点：代理和Block大多是我们都可以用来做倒序传值的。我们都得注意避免循环引用。不然我们去使用代理还是Block的时候，都需要判断它们是否实现不同点：代理使用weak修饰，代理必须先声明方法。当我们调用代理的时候要判断是否已经实现。block：使用的是copy来修饰，block保存的是一段代码，其实也就是一个函数。并且可以自动捕捉自动变量，如果想修改此自动变量，还必须使用__block修饰。 属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？ 属性是描述类的特征，也就是具备什么特性 三个部分，带下划线的成员变量，get、setter方法 默认关键字： readwrite，assign, atomic; 基本类型NSInteger, BOOL, int, 等 针对引用类型默认:strong, readwrite, atomic （例如：NSString, NSArray, NSDictory等） dynamic修饰的属性，其getter和setter方法编译器是不会自动帮你生成。必须自己是实现的 synthesize 修饰的属性，其getter和setter方法编译器是会自动帮你生成，不必自己实现。且指定与属性相对应的成员变量 默认关键字基本数据： atomic,readwrite,assign OC 对象: atomic,readwrite,strong NSString为什么要用copy关键字strong只是让创建的对象引用计数器+1，并返回当前对象的内容地向的内存地址是相同的,是一份内容因为A指向的内存地址和B指向的内存地址是不相同的，是两份内容 令自己所写的对象具有拷贝功能如果想让自己的类具备copy方法，并返回不可变类型，必须遵循nscopying协议，并且实现 (id)copyWithZone:(NSZone )zone如果让自己的类具备mutableCopy方法，并且放回可变类型，必须遵守NSMutableCopying，并实现- (id)mutableCopyWithZone:(nullable NSZone )zone注意：再此说的copy对应不可边类型和mutableCopy对应不可变类型方法，都是遵从系统规则而已。如果你想实现自己的规则，也是可以的。 nonatomic和atomic nonatomic:表示非原子，不安全，但是效率高。atomic：表示原子行，安全，但是效率低atomic：不能绝对保证线程的安全，当多线程同时访问的时候，会造成线程不安全。可以使用线程锁来保证线程的安全 线程间通信当使用dispath-async函数开辟线程执行任务的完成时，我们需要使用dispatch_async(dispatch_get_main_queue(), ^{ });函数会到主线程内刷新UI。并完成通信 如何使用队列来避免资源抢夺当我们使用多线程来访问同一个数据的时候，就有可能造成数据的不准确性。这个时候我么可以使用线程锁的来来绑定。也是可以使用串行队列来完成。如：fmdb就是使用FMDatabaseQueue，来解决多线程抢夺资源 #数据持久化的几个方案plist,存储字典，数组比较好用preference：偏好设置，实质也是plistNSKeyedArchiver：归档，可以存储对象sqlite：数据库，经常使用第三方来操作，也就是fmdbcoreData:也是数据库储存，苹果官方的 NSCache优于NSDictionary的几点 1.nscache 是可以自动释放内存的。2.nscache是线程安全的，我们可以在不同的线程中添加，删除和查询缓存中的对象。3.一个缓存对象不会拷贝key对象。 Block block：本质就是oc对象代码区，堆区、栈区（ARC情况下会自动拷贝到堆区，因此ARC下只能有两个地方：代码区、堆区）代码区：不访问栈区的变量（如局部变量），且不访问堆区的变量（alloc创建的对象），此时block存放在代码区堆区：访问了处于栈区的变量，或者堆区的变量，此时block存放在堆区。–需要注意实际是放在栈区，在ARC情况下会自动拷贝到堆区，如果不是ARC则存放在栈区，所在函数执行完毕就回释放，想再外面调用需要用copy指向它，这样就拷贝到了堆区，strong属性不会拷贝、会造成野指针错区 为什么在默认情况下无法修改被block捕获的变量？ __block都做了什么？默认情况下，block里面的变量，拷贝进去的是变量的值，而不是指向变量的内存的指针。当使用__block修饰后的变量，拷贝到block里面的就是指向变量的指针，所以我们就可以修改变量的值 Runtimeobjc在向一个对象发送消息,发生了什么 根据对象的isa指针找到类对象id，在查询类对象里面的methodLists方法函数列表，如果没有找到到，在沿着superClass,寻找父类，再在父类methodLists方法列表里面查询，最终找到SEL,根据id和SEL确认IMP（指针函数）,在发送消息 .什么时候会报unrecognized selector错误？iOS有哪些机制来避免走到这一步？能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么1.不能向编译后得到的类增加实例变量2.能向运行时创建的类中添加实例变量 runtime如何实现weak变量的自动置nilruntime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil]]></content>
      <categories>
        <category>Blog</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Tool-FastLane自动化发布工具+上传Bugly]]></title>
    <url>%2F2017%2F11%2F23%2FOC%2FGrammar%2FiOS-Tool-FastLane%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83%E5%B7%A5%E5%85%B7%2B%E4%B8%8A%E4%BC%A0Bugly%2F</url>
    <content type="text"><![CDATA[打包的流程 修改测试版本号 修改Build版本号 执行Archive 选择Adhoc导出IPA安装包文件 上传Bugly测试平台 分享测试链接二维码FastlaneFastlane本身包含两大模块，内核部分+ActionActionAction是Fastlane自动化流程中的最小执行单元，直观上来讲就是Fastfile脚本中的一个个命令，比如：git_pull，deliver，pod_install等等，而这些命令背后都对应其实是一个用Ruby编写的脚本 Fastlane 是一套用 Ruby 编写的 iOS 命令行工具集（后来也支持了 Android），主要组件包括： match / cert / sigh 协助管理代码签名 pem 自动生成 APNs 证书 scan 自动化测试 gym 自动化编译并打包生成签名的 .ipa 文件 snapshot / frameit 协助处理 iOS 屏幕快照 pilot 上传和管理 TestFlight deliver 将应用及其它信息上传到 App Store 而正是这些颗粒度极小的Action，根据自己需求组合成一个自动化的链条 安装 首先确保Xcode命令行工具是最新版本的 $ xcode-select --install 安装Fastlane: $ sudo gem install fastlane -NV 找到工程文件目录下执行 $ fastlane init 在执行“Your Apple ID” 这一步输入苹果开发者账号，fastlane 会自动获取工程文件名，目录等其他数据。这一步“Please confirm the above values”，确认信息，没问题则输入 y。然后，fastlane 会进行一系列的初始化操作，包括下载 App Store 上的元数据和截屏文件。等待初始化完成之后，工程目录下就多了一个 fastlane目录： $ cd fastlane &amp;&amp; lsAppfile Fastfile metadata report.xmlDeliverfile README.md screenshots 文件目录 metadata目录下存放整个元数据文件，包括关键词、版本更新日志、图标等. screenshots目录下存放应用截图 Appfile文件记录App的 bundle ID、Apple ID、Team ID三种信息. Fastfile脚本的核心执行文件.有几个默认的选项，可直接使用. report文件时每次执行fastlane时生成报告 安装fastlane成功后，首先拆解我们需要自动化的两个流程: 自动打包成Adhoc的安装包ipa文件 通过fastlane自动上传到bugly 自动化打包 自动化打包使用最多就是Fastlane中gym这个Action, 转为打包而生, 安装gym这个组件: $ sudo gem install gym cd项目根目录, 创建自动打包脚本: $ vim gym.sh 输入脚本内容: #!/bin/bash#计时SECONDS=0#假设脚本放置在与项目相同的路径下project_path=$(pwd)#取当前时间字符串添加到文件结尾now=$(date +"%Y_%m_%d_%H_%M_%S")#指定项目的scheme名称scheme="Xitu"#指定要打包的配置名configuration="Adhoc"#指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数export_method='ad-hoc'#指定项目地址workspace_path="$project_path/Xitu.xcworkspace"#指定输出路径output_path="project_path/APP"#指定输出归档文件地址archive_path="$output_path/Xitu$&#123;now&#125;.xcarchive"#指定输出ipa地址ipa_path="$output_path/Xitu$&#123;now&#125;.ipa"#指定输出ipa名称ipa_name="Xitu$&#123;now&#125;.ipa"#获取执行命令时的commit messagecommit_msg="$1"#输出设定的变量值echo "===workspace path: $&#123;workspace_path&#125;==="echo "===archive path: $&#123;archive_path&#125;==="echo "===ipa path: $&#123;ipa_path&#125;==="echo "===export method: $&#123;export_method&#125;==="echo "===commit msg: $1==="#先清空前一次buildgym --workspace $&#123;workspace_path&#125; --scheme $&#123;scheme&#125; --clean --configuration $&#123;configuration&#125; --archive_path $&#123;archive_path&#125; --export_method $&#123;export_method&#125; --output_directory $&#123;output_path&#125; --output_name $&#123;ipa_name&#125;#输出总用时echo "===Finished. Total time: $&#123;SECONDS&#125;s===" 把如上脚本中Xitu改成你的项目名称即可. 为脚本执行提升权限 $ chmod +x gym.sh 执行一下脚本看一下打包效果: $ ./gym.sh 经过572s，Adhoc版本的ipa文件打包成功，我们在项目根目录下找到App目录： =========================================== #上传Bugly fastlane中定义action$ fastlane new_action 这时命令行会要求你输入自定义action名字，直接以bugly上传文件命名 $ upload_app_to_bugly wei wan]]></content>
      <categories>
        <category>iOS</category>
        <category>Tool</category>
        <category>FastLane</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Code-优化项目]]></title>
    <url>%2F2017%2F11%2F23%2FOC%2FCode%2FOC-Code-%E4%BC%98%E5%8C%96%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[优化项目 结构与架构1.1 结构 这里说的结构大概有两点：1.文件目录分类 2.第三方库管理1.1.1 文件目录分类 为了方便管理，最好将Xcode中的项目展示目录与实际的存储目录保持一致此外，一般按业务模块分类,一级目录可以按照MVC格式，也可以按照业务模块划分用最普遍的Model View Controller架构举例]]></content>
      <categories>
        <category>OC</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-Bug管理工具]]></title>
    <url>%2F2017%2F11%2F22%2FOC%2FFunc%2FiOS-Func-Bug%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[#功能 非Crash Bug 在App内可截图添加描述并发送 Crash Bug 在App第二次启动时提取Crash log添加描述并发送 实现解释分析 bug 非Crash的Bug：字体不对、颜色不对、数据不对、布局不对 Crash Bug：系统Crash、处理signal场景交互 场景交互：发现非Crash Bug时候摇一摇手机，弹出邮件，图片带入邮件，点击发送即可。有Crash Bug的时候第二次启动App，弹出邮件，Crash log带入邮件，点击发送即可 使用 需要用到NSSetUncaughtExceptionHandler，MFMailComposeViewController，沙盒，NSFileManager实现截图的功能，考虑到并不是所有的页面都需要使用所以写在了分类里。需要用的时候直接引入头文件即可这三个方法分别在摇一摇的时候回调用，开始，需要，结束。他们的父类是UIResponsder在UIKit中 -(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event&#123;&#125;-(void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event&#123;&#125;-(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event&#123; [self screenShot];&#125;-(void)screenShot&#123; UIWindow *screen = [[UIApplication sharedApplication] keyWindow]; UIGraphicsBeginImageContext(screen.frame.size); [screen.layer renderInContext:UIGraphicsGetCurrentContext()]; UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsGetCurrentContext(); NSData *screenData = UIImagePNGRepresentation(image); [screenData writeToFile:[NSHomeDirectory() stringByAppendingPathComponent:@"Library/Caches"] atomically:YES]; &#125; 发送邮件的功能 发送邮件的功能，也写在了分类里面，需要用的时候引入即可 @interface UIViewController (send)&lt;MFMailComposeViewControllerDelegate&gt;//发送邮件的方法，传入标题，描述信息，data, 接收人-(void)sendMail:(MFMailComposeViewController*)mf andSubject:(NSString*)subject andMessageBody:(NSString*)message andData:(NSData*)data andRecipients:(NSArray*)recipients&#123; if([MFMailComposeViewController canSendMail])&#123; mf.mailComposeDelegate = self; [mf setSubject:subject]; [mf setToRecipients:recipients]; [mf addAttachmentData:data mimeType:@"image/jpeg" fileName:@"error"]; [mf setMessageBody:message isHTML:YES]; [self presentViewController:mf animated:YES completion:nil]; &#125;else&#123; [self alertView:@"不能调用邮箱" andDesc:@"请尝试下载App原生邮箱，并配置"]; &#125;&#125; MFMailComposeViewControllerDelegate的代理方法，可以在这个方法里面写一些回调-(void)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error&#123; switch (result) &#123; case MFMailComposeResultSent: [self alertView:@"发送成功" andDesc:nil]; self.success(); break; case MFMailComposeResultSaved: [self alertView:@"保存成功" andDesc:nil]; break; case MFMailComposeResultFailed: self.faild(); [self alertView:error.domain andDesc:[NSString stringWithFormat:@"%@",error.userInfo]]; break; case MFMailComposeResultCancelled: [self alertView:@"取消发送" andDesc:nil]; break; default: [self alertView:@"为什么不发送" andDesc:nil]; break; &#125; [self dismissViewControllerAnimated:YES completion:nil];&#125; 异常捕获这两个为函数方法，导入类名，直接可调用不用初始化void CrashExceptionHandler(void)&#123; NSSetUncaughtExceptionHandler(&amp;ExceptionLog);&#125;void ExceptionLog(NSException *exception)&#123; NSDate *date_current = [NSDate date]; NSDictionary *dictInfo = [[NSBundle mainBundle]infoDictionary]; NSString *name_App = [dictInfo objectForKey:@"CFBundleDisplayName"]; NSString *verson_App = [dictInfo objectForKey:@"CFBundleShortVersionString"]; NSString *build_App = [dictInfo objectForKey:@"CFBundleVersion"]; NSArray *ecp = exception.callStackSymbols; NSString *reason = [exception reason]; NSString *name = [exception name]; NSString *exceptionInfo = [NSString stringWithFormat: @"\n\n ******************************异常日志****************************** \n时间:%@\nApp名称:%@\nApp版本:%@\nBuild版本:%@\n异常名称:%@\n异常原因:%@\n堆栈信息:%@",date_current,name_App,verson_App,build_App,name,reason,ecp]; [CrashHandler saveLog:exceptionInfo andDate:date_current];#ifdef DEBUG NSLog(@"%@",exceptionInfo);#else#endif&#125;@implementation CrashHandler+(void)saveLog:(NSString *)crashLog andDate:(NSDate *)date&#123; NSString *path = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)objectAtIndex:0] stringByAppendingString:@"/Crash"]; if(![[NSFileManager defaultManager]fileExistsAtPath:path]) &#123; [[NSFileManager defaultManager]createDirectoryAtPath:path withIntermediateDirectories:YES attributes:nil error:nil]; &#125; NSString *logPath = [path stringByAppendingFormat:@"/%@.log",date]; [crashLog writeToFile:logPath atomically:YES encoding:NSUTF8StringEncoding error:nil];&#125;@end 检测Crash log 功能在App打开的第一个页面去调用就好-(void)crashLog { NSString *path = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)objectAtIndex:0] stringByAppendingString:@"/Crash"]; NSFileManager *mf = [NSFileManager defaultManager]; if(![mf fileExistsAtPath:path]) { return; } NSArray *array = [mf contentsOfDirectoryAtPath:path error:nil]; } Bug管理工具]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Crash日志]]></title>
    <url>%2F2017%2F11%2F22%2FOC%2FCode%2FOC-Code-Crash%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[获得crash日志产生/保存 程序崩溃时，系统会创建一份crash日志保存在设备上。 这份crash日志记录着应用程序崩溃时的信息，包含每个执行线程的栈调用信息（低内存闪退日志例外），对定位问题很有帮助 连接设备获取 可以连接设备，打开Xcode - Window - Organizer， 在左侧面板中选择Device Logs（可以选择具体设备的Device Logs或者Library下所有设备的Device Logs） 然后根据时间排序查看设备上的crash日志 已发布app通过iTunes Connect获取 可以通过iTunes Connect（Manage Your Applications - View Details - Crash Reports）获取用户的crash日志 不过这并不是100%有效的，而且大多数开发者并不依赖于此，因为这需要用户设备同意上传相关信息，详情可参见iOS: Providing Apple with diagnostics and usage information摘要 接入现有的crash收集工具获取通常接入现有的crash收集工具，或者自己编写一个进行自动化收集、解析和统计汇总 解析crash日志符号化解析 当获得一份crash日志时，需要将初始展示的十六进制地址等原始信息映射为源代码级别的方法名称和代码行数，使其对开发人员可读这个过程称为符号化解析。要成功地符号化解析一份crash日志，我们需要有对应的应用程序二进制文件以及符号（.dSYM）文件 -如果处于开发调试阶段，通常Xcode都能匹配到crash日志对应的二进制文件和符号文件，所以能够帮我们自动解析。 如果处于测试阶段，测试人员已经安装了不同的版本（比如alpha、beta版本），那么需要保存好对应版本的二进制文件和符号文件，以便在应用程序崩溃时对crash日志进行解析。对于这种场景下产生的crash日志，只需要将.crash文件、.app文件和.dSYM文件三者放在同一个目录下，然后将.crash文件拖放到Xcode - Window - Organizer中左侧面板Library下的Device Logs中，即可进行解析。 如果要提交发布，那么我们通常会先执行Clean，再Build，最后通过Product - Archive来打包。这样，Xcode会将二进制文件和符号文件归档在一起，可以通过Organizer中的Archives进行浏览 关于如何解析crash日志的讨论 分析crash日志 在分析一份crash日志之前，如果开发人员对于常见的错误类型有所了解，那定是极好的。 crash日志的产生来源于两种问题：违反iOS策略被干掉，以及自身的代码bug iOS策略低内存闪退 低内存闪退日志 前面提到大多数crash日志都包含着执行线程的栈调用信息 但是低内存闪退日志除外，这里就先看看低内存闪退日志是什么样的我们使用Xcode 5和iOS 7的设备模拟一次低内存闪退，然后通过Organizer查看产生的crash日志，可以发现Process和Type都为Unknown： 具体的日志内容如下 第一部分是崩溃信息，包括识别标识、软硬件信息和时间信息等。 第二部分是内存页分配信息，以及当前占用内存最多的进程，上图中为crashTypeDemo。 第三部分是具体的进程列表，描述着每个进程使用内存的情况以及当前状态。在较早的版本中可以在某些进程后面看到“jettisoned”字样，表明这些进程使用过多内存被终止了，而现在我们看到的是“vm-pageshortage”字样。 当iOS检测到内存过低时，它（的VM系统）会发出低内存警告通知，尝试回收一些内存；如果情况没有得到足够的改善，iOS会终止后台应用以回收更多内存；最后，如果内存还是不足，那么正在运行的应用可能会被终止掉。 所以，我们的应用应该合理地响应系统抛出来的低内存警告通知，对一些缓存数据和可重新创建的对象进行释放，同时要避免出现内存泄露等问题。 低内存闪退是由iOS策略决定终止应用程序运行的，同样基于iOS策略的还有Watchdog超时和用户强制退出 Watchdog超时 Apple的iOS Developer Library网站上，QA1693文档中描述了Watchdog机制，包括生效场景和表现。如果我们的应用程序对一些特定的UI事件（比如启动、挂起、恢复、结束）响应不及时，Watchdog会把我们的应用程序干掉，并生成一份响应的crash报告 这份crash报告的有趣之处在于异常代码：“0x8badf00d”，即“ate bad food” 如果说特定的UI事件比较抽象，那么用代码来直接描述的话，对应的就是（创建一个工程时Xcode自动生成的）UIApplicationDelegate的几个方法： 所以当遇到Watchdog日志时，可以检查下上图几个方法是否有比较重的阻塞UI的动作 QA1693举的例子是在主线程进行同步网络请求。如果我们是在公司的Wifi环境下使用则一切顺利，但当应用程序发布出去面向很大范围的用户，在各种网络环境下运行，则不可避免地会出现一片Watchdog超时报告。另一种可能出现问题的场景就是数据量比较大的情况下进行的数据库版本迁移（同样是在主线程上），这也是促使我写这篇总结的一个直接因素。 用户强制退出 一看到“用户强制退出”，首先可能想到的双击Home键，然后关闭应用程序。不过这种场景是不会产生crash日志的，因为双击Home键后，所有的应用程序都处于后台状态，而iOS随时都有可能关闭后台进程，所以这种场景没有crash日志。 另一种场景是用户同时按住电源键和Home键，让iPhone重启。这种场景会产生日志（仅验证过一次），但并不针对特定应用程序。 这里指的“用户强制退出”场景，是稍微比较复杂点的操作：先按住电源键，直到出现“滑动关机”的界面时，再按住Home键，这时候当前应用程序会被终止掉，并且产生一份相应事件的crash日志 通常，用户应该是遇到应用程序卡死，并且影响到了iOS响应，才会进行这样的操作——不过感觉这操作好高级，所以这样的crash日志应该比较少见 常见错误标识Exception codes上面“用户强制退出”的crash日志中的Exception Codes是“0xdeadfa11”，再上面“Watchdog超时”的crash日志中的Exception Codes是“0x8badf00d”，这些都是特有的Exception codes。根据官方文档描述，至少有以下几种特定异常代码： 0x8badf00d错误码：Watchdog超时，意为“ate bad food”。 0xdeadfa11错误码：用户强制退出，意为“dead fall”。 0xbaaaaaad错误码：用户按住Home键和音量键，获取当前内存状态，不代表崩溃。0xbad22222错误码：VoIP应用（因为太频繁？）被iOS干掉。 0xc00010ff错误码：因为太烫了被干掉，意为“cool off”。 0xdead10cc错误码：因为在后台时仍然占据系统资源（比如通讯录）被干掉，意为“dead lock” Exception types查看我们的crash分析报告邮件，会发现最经常遇到的错误类型是SEGV（Segmentation Violation，段违例），表明内存操作不当，比如访问一个没有权限的内存地址。当我们收到SIGSEGV信号时，可以往以下几个方面考虑：访问无效内存地址，比如访问Zombie对象；尝试往只读区域写数据；解引用空指针；使用未初始化的指针；栈溢出；此外，还有其它常见信号：SIGABRT：收到Abort信号，可能自身调用abort()或者收到外部发送过来的信号；SIGBUS：总线错误。与SIGSEGV不同的是，SIGSEGV访问的是无效地址（比如虚存映射不到物理内存），而SIGBUS访问的是有效地址，但总线访问异常（比如地址对齐问题）；SIGILL：尝试执行非法的指令，可能不被识别或者没有权限；SIGFPE：Floating Point Error，数学计算相关问题（可能不限于浮点计算），比如除零操作；SIGPIPE：管道另一端没有进程接手数据 代码bug此外，比较常见的崩溃基本都源于代码bug，比如数组越界、插空、多线程安全性、访问野指针、发送未实现的selector等。如果引入Core Data，则又有另外一些常见问题，不过这是另一个话题了。 遇到这些bug时，都有比较清楚的错误原因说明，比如“index 0 beyond bounds for empty array”等。需要稍微注意点的是多线程问题，当一时找不到解决思路时，不妨往多线程方面考虑下 iOS应用的crash日志的分析基础]]></content>
      <categories>
        <category>OC</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Code</tag>
        <tag>crash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-检测主线程卡顿的问题]]></title>
    <url>%2F2017%2F11%2F22%2FOC%2FFunc%2FiOS-Func-%E6%A3%80%E6%B5%8B%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[runloop - 检测方案 原文文档 CFRunLoopRunCFRunLoopRun源代码 核心方法CFRunLoopRun简化后的主要逻辑大概是这样的:NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿 int32_t __CFRunLoopRun()&#123; //通知即将进入runloop __CFRunLoopDoObservers(KCFRunLoopEntry); do &#123; // 通知将要处理timer和source __CFRunLoopDoObservers(kCFRunLoopBeforeTimers); __CFRunLoopDoObservers(kCFRunLoopBeforeSources); __CFRunLoopDoBlocks(); //处理非延迟的主线程调用 __CFRunLoopDoSource0(); //处理UIEvent事件 //GCD dispatch main queue CheckIfExistMessagesInMainDispatchQueue(); // 即将进入休眠 __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting); // 等待内核mach_msg事件 mach_port_t wakeUpPort = SleepAndWaitForWakingUpPorts(); // Zzz... // 从等待中醒来 __CFRunLoopDoObservers(kCFRunLoopAfterWaiting); // 处理因timer的唤醒 if (wakeUpPort == timerPort) __CFRunLoopDoTimers(); // 处理异步方法唤醒,如dispatch_async else if (wakeUpPort == mainDispatchQueuePort) __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__() // UI刷新,动画显示 else __CFRunLoopDoSource1(); // 再次确保是否有同步的方法需要调用 __CFRunLoopDoBlocks(); &#125; while (!stop &amp;&amp; !timeout); //通知即将退出runloop __CFRunLoopDoObservers(CFRunLoopExit);&#125; runloop 的状态typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123; kCFRunLoopEntry = (1UL &lt;&lt; 0), // 即将进入Loop kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1), // 即将处理 Timer kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠 kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6), // 刚从休眠中唤醒 kCFRunLoopExit = (1UL &lt;&lt; 7), // 即将退出Loop&#125;; 耗时进行判断 利用 kCFRunLoopBeforeSources 和 *kCFRunLoopAfterWaiting 这两个状态之间的耗时 进行判断:是否有太多事件处理导致出现了卡顿 AppDelegate+AppService 监听runloop的状态而写的回调函数 static void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info)&#123; PingConfig *object = (__bridge PingConfig*)info; // 记录状态值 object-&gt;activity = activity; // 发送信号 dispatch_semaphore_t semaphore = object-&gt;semaphore; dispatch_semaphore_signal(semaphore);&#125; AppDelegate 注册监听 PingConfig: 一个用来存储runloop的状态和信号量的自定义类，其中的结构如下 APP启动时我可以进入 registerObserver 方法，其中首先我创建一个记录信息的类PingConfig实例，然后创建一个信号，并且保存在这个PingConfig实例中(其实只是为了方便拿到 创建了一个观察者监测主线程的runloop,它会在主线程runloop状态切换时进行回调 开启一个子线程，并且在里面进行一个 while 循环，在 循环的开始处 wait 一个信号量，并且设置超时为 50毫秒，失败后会返回一个非0数，成功将会返回0，这时候线程会阻塞住等待一个信号的发出 如果runloop状态正常切换，那么就会进入回调函数，在回调函数中我们发出一个信号，并且记录当前状态到PingConfig实例中，下面的判断语句中发现为0，timeoutCount自动置为0，一切正常 当主线程出现卡顿，while循环中的信号量再次等待，但是回调函数没有触发，从而导致等待超时，返回一个非0数，进入判断句后，我们再次判断状态是否处于 kCFRunLoopBeforeSources 或 kCFRunLoopAfterWaiting，如果成立，timeoutCount+1 持续五次runloop不切换状态，说明runloop正在处理某个棘手的事件无法休息且不更新状态，这样while循环中的信号量超时会一直发生，超过5次后我们将断定主线程的卡顿并上传堆栈信息 - (void)registerObserver&#123; PingConfig *config = [PingConfig new]; // 创建信号 dispatch_semaphore_t semaphore = dispatch_semaphore_create(0); config-&gt;semaphore = semaphore; CFRunLoopObserverContext context = &#123;0,(__bridge void*)config,NULL,NULL&#125;; CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, &amp;runLoopObserverCallBack, &amp;context); CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes); __block uint8_t timeoutCount = 0; // 在子线程监控时长 dispatch_async(dispatch_get_global_queue(0, 0), ^&#123; while (YES) &#123; // 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms) long st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC)); if (st != 0) &#123;// NSLog(@"循环中--%ld",config-&gt;activity); if (config-&gt;activity==kCFRunLoopBeforeSources || config-&gt;activity==kCFRunLoopAfterWaiting) &#123; if (++timeoutCount &lt; 5)&#123; continue; &#125;else&#123; NSLog(@"卡顿了"); &#125; &#125; &#125; timeoutCount = 0; &#125; &#125;);&#125; PingConfig@interface PingConfig : NSObject&#123; @public CFRunLoopActivity activity; dispatch_semaphore_t semaphore;&#125;@end Other情况主线程卡顿主线程卡在界面尚未完全显示前 当主线程卡在界面尚未完全显示前，这个方案就检测不出来卡顿了，比如我将下面的代码放在B控制器中 dispatch_semaphore_t t = dispatch_semaphore_create(0); dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123; NSLog(@"----"); dispatch_semaphore_signal(t); &#125;); dispatch_semaphore_wait(t, DISPATCH_TIME_FOREVER); 上面是一段有问题的代码，将导致主线程的持续堵塞，如果我们在这段代码放在B控制器的ViewDidLoad方法中(ViewWillAppear同样) 运行后，当你希望push到B控制器时，项目将在上一个界面完全卡住，并且无法用上面的方案检测到，而且CPU及内存都显示正常 原因分析 由于runloop在处理完source0或者source1后，比如界面的跳转也是执行了方法，具体有没有用到source0这不重要，但是后面会紧接着进入准备睡眠(kCFRunLoopBeforeWaiting)的状态，然而此时线程的阻塞导致runloop的状态也被卡住无法切换，这样也就导致在那段检测代码中无法进入条件，从而检测不出来。 但是话说回来，APP在静止状态(保持休眠)和刚刚那种卡死状态都会使runloop维持在 kCFRunLoopBeforeWaiting状态，这样我们就无法在那段代码中增加判断来修复，因为无法知道到底是真的静止没有操作还是被阻塞住，我也没找到线程的阻塞状态属性，如果你发现这个属性，那么就可以使用那个属性来判断 检测方案dispatch_queue_t serialQueue = dispatch_queue_create("serial", DISPATCH_QUEUE_SERIAL); self.timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, serialQueue); dispatch_source_set_timer(self.timer, DISPATCH_TIME_NOW, 0.25 * NSEC_PER_SEC, 0); __block int8_t chokeCount = 0; dispatch_semaphore_t t2 = dispatch_semaphore_create(0); dispatch_source_set_event_handler(self.timer, ^&#123; if (config-&gt;activity == kCFRunLoopBeforeWaiting) &#123; static BOOL ex = YES; if (ex == NO) &#123; chokeCount ++; if (chokeCount &gt; 40) &#123; NSLog(@"差不多卡死了"); dispatch_suspend(self.timer); return ; &#125; NSLog(@"卡顿了"); return ; &#125; dispatch_async(dispatch_get_main_queue(), ^&#123; ex = YES; dispatch_semaphore_signal(t2); &#125;); BOOL su = dispatch_semaphore_wait(t2, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC)); if (su != 0) &#123; ex = NO; &#125;; &#125; &#125;); dispatch_resume(self.timer); 方案解释 开启一个异步队列，并且创建一个定时器，时间我设置的是0.25秒，具体时间随你自己，这个时间是用来检测卡死的持续时间 在定时器外面我也同样创建了一个用来同步的信号量，这个不解释了，不会的就去看一下信号量的使用方式。进入定时器的回调后，我设置了一个静态变量来记录主队列是否执行完成。 我们判断当前runloop的状态是否为kCFRunLoopBeforeWaiting，所以这个方案是用来弥补前面那个方案，如果主线程此时没有阻塞住，我们在这里向main Queue抛一个block，看它是否能够成功执行，如果成功执行，说明主线程没有阻塞住，如果已经被阻塞住，那我抛过去的block是肯定不会被执行的。 下面的代码就是一些辅助操作，当信号量超过50毫秒，抛给主线程的block没有执行，那么说明此时就有一些阻塞了，返回一个非0数，并设置 ex为NO，从而在下一次定时器回调到来时进行上报]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-Layer-Shadow阴影]]></title>
    <url>%2F2017%2F11%2F22%2FOC%2FKit%2FShadow%E9%98%B4%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[shadowColor:阴影颜色,可设置透明度等. shadowOffset:偏移量.,xy表示view左上角,width表示阴影与x的偏移量,height表示阴影与y值的偏移量 shadowOpacity = 0.4//阴影透明度,默认为0则看不到阴影.因此要看到阴影这个值必须大于0,shadowColor的透明度也要大于0 shadowRadius:5.模糊计算的半径,取平均值的半径,设置为0的话则为一个矩形块. 模糊度的解释:每一个像素取平均值,分母的取值范围,越大越模糊.感觉这篇文章讲的比较容易懂(http://www.dongcoder.com/detail-22914.html). 注意:如果clipsToBounds设置为YES,则阴影效果消失 let layer = view.layer layer.shadowColor = UIColor.black.cgColor//阴影颜色 layer.shadowOffset = CGSize(width: 10, height: 10)//width表示阴影与x的便宜量,height表示阴影与y值的偏移量 layer.shadowOpacity = 0.4//阴影透明度,默认为0则看不到阴影 layer.shadowRadius = 5; Go!]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
        <category>Layer</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>UIKit</tag>
        <tag>Layer</tag>
        <tag>Shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-RunTime-方法交换/拦截基础使用]]></title>
    <url>%2F2017%2F11%2F22%2FOC%2FGrammar%2FiOS-RunTime-%E6%96%B9%E6%B3%95%E4%BA%A4%E6%8D%A2-%E6%8B%A6%E6%88%AA%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[RunTime的消息机制参考链接 Objective-C的方法调用是属于消息传送的机制每个类都有一个isa的结构体指针在这个结构体里, 得到指定类的所有属性, 所有方法的列表, 也可以知父类是什么… 新建RTMsgModel RTMsgModel.h @interface RTMsgModel : NSObject- (void)ff_post;- (void)ff_getWithCount:(NSInteger)count; RTMsgModel.m - (void)ff_post&#123; NSLog(@&quot;被调用了: %@, 当前对象为: %@&quot;, NSStringFromClass([self class]), self);&#125;- (void)ff_getWithCount:(NSInteger)count&#123; NSLog(@&quot;被%ld人调用了&quot;, count);&#125; 测试消息机制//// ViewController.m// Runtime方法交换拦截//// Created by RN on 17/11/22.// Copyright © 2017年 YueKekui. All rights reserved.//#import &quot;ViewController.h&quot;#import &quot;RTMsgModel.h&quot;#import &lt;objc/message.h&gt;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self show_runTimeMsg];&#125;#pragma mark - RunTime的消息机制/** * @brief: RunTime的消息机制 * * * * @attention： Xcode 会自动屏蔽通过objc_msgSend创建对象, 我们可以去到工程里设置 * Build Setting -&gt; Enable Strict Checking of objc_msgSend Calls 改成No */- (void)show_runTimeMsg&#123; //1.objc_getClass Class getClass = objc_getClass(&quot;RTMsgModel&quot;); NSLog(@&quot;Get The Class is: %@&quot;, getClass); //2.objc_msgSend RTMsgModel *messageModel = objc_msgSend(getClass, @selector(alloc)); NSLog(@&quot;alloc Object: %@&quot;, messageModel); // 在不调用init方法, 可以通过发消息调用想用的方法, 这里调用没有在.h文件里声明的方法会警告该方法没有声明 objc_msgSend(messageModel, @selector(ff_post)); messageModel = objc_msgSend(messageModel, @selector(init)); NSLog(@&quot;init Object: %@&quot;, messageModel); objc_msgSend(messageModel, @selector(ff_post)); // 还有另外一种写法, 就是把所有东西都集合在一起, 也就是我们常用的[[NSObject alloc] init];的原型 RTMsgModel *messageModelTwo = objc_msgSend(objc_msgSend(objc_getClass(&quot;RTMsgModel&quot;), @selector(alloc)), @selector(init)); objc_msgSend(messageModelTwo, @selector(ff_getWithCount:), 5);&#125;@end 打印2017-11-22 12:36:16.232 Runtime方法交换拦截[21927:3962074] Get The Class is: RTMsgModel2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] alloc Object: &lt;RTMsgModel: 0x600000003680&gt;2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] 被调用了: RTMsgModel, 当前对象为: &lt;RTMsgModel: 0x600000003680&gt;2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] init Object: &lt;RTMsgModel: 0x600000003680&gt;2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] 被调用了: RTMsgModel, 当前对象为: &lt;RTMsgModel: 0x600000003680&gt;2017-11-22 12:36:16.233 Runtime方法交换拦截[21927:3962074] 被5人调用了 RunTime方法交换 建一个类RunTimeMethodModel.h #import &lt;Foundation/Foundation.h&gt;@interface RunTimeMethodModel : NSObject@property (nonatomic, copy) NSString *cl_height;@property (nonatomic, copy) NSString *cl_weight;- (NSString *)cl_height;- (NSString *)cl_weight;@end RunTimeMethodModel.m - (NSString *)cl_height &#123; return @&quot;我身高180&quot;;&#125;- (NSString *)cl_weight &#123; return @&quot;我体重280&quot;; &#125; 测试交换方法 执行方法交换 RunTimeMethodModel *methodModel = [[RunTimeMethodModel alloc] init]; NSLog(@&quot;身高: %@&quot;, methodModel.cl_height); NSLog(@&quot;体重: %@&quot;, methodModel.cl_weight); Method methodOne = class_getInstanceMethod([methodModel class], @selector(cl_height)); Method methodTwo = class_getInstanceMethod([methodModel class], @selector(cl_weight)); method_exchangeImplementations(methodOne, methodTwo); NSLog(@&quot;打印的内容: %@&quot;, [methodModel cl_height]); 打印身高: 我身高180体重: 我体重280 打印的内容: 我体重280 注意一点注意一点, 由于这里的ViewController会销毁, 但method_exchangeImplementations会一直存在, 再次进来的时候, 就会再次根据上次交换过的顺序再次交换 +load交换方法 +load交换方法+ (void)load &#123; Method methodOne = class_getInstanceMethod(self, @selector(cl_height)); Method methodTwo = class_getInstanceMethod(self, @selector(cl_weight)); method_exchangeImplementations(methodOne, methodTwo);&#125;- (NSString *)cl_height &#123; return @&quot;我身高180&quot;;&#125;- (NSString *)cl_weight &#123; return @&quot;我体重280&quot;;&#125; 打印 身高: 我体重280体重: 我身高180身高: 我体重280体重: 我身高180 +initialize交换方法 +load这个方法里的确是可以保证方法交换只有一次, 但这里有一个弊端, 就是当程序一运行就会执行这个方法交换了+load: 程序一开始就会去执行, 只执行一次.+initialize: 当类被初始化的时候会才会去执行, 该类只会执行一次. initializeclass_getInstanceMethod 获取实例方法method_exchangeImplementations 方法交换 + (void)initialize + &#123; Method methodOne = class_getInstanceMethod(self, @selector(cl_height)); Method methodTwo = class_getInstanceMethod(self, @selector(cl_weight)); method_exchangeImplementations(methodOne, methodTwo);&#125;- (NSString *)cl_height &#123; return @&quot;我身高180&quot;;&#125;- (NSString *)cl_weight &#123; return @&quot;我体重280&quot;;&#125; RunTime方法拦截 从刚刚我们就知道, 可以使用method_exchangeImplementations交换两个方法, 但只应用在本类, 现在我们来看看别的应 @implementation BaseModel- (void)cl_logBaseModel &#123; NSLog(@&quot;Base Model Log&quot;);&#125;@end@implementation InterceptModel- (void)cl_logInterceptModel &#123; NSLog(@&quot;Intercept You Method &quot;);&#125;@end 最终的实现 + (void)initialize &#123; Method mehtodOne = class_getInstanceMethod([BaseModel class], @selector(cl_logBaseModel)); Method mehtodTwo = class_getInstanceMethod([InterceptModel class], @selector(cl_logInterceptModel)); method_exchangeImplementations(mehtodOne, mehtodTwo);&#125;- (void)viewDidLoad &#123; [super viewDidLoad]; self.view.backgroundColor = [UIColor whiteColor]; BaseModel *baseModel = [[BaseModel alloc] init]; [baseModel cl_logBaseModel];&#125;。 打印结果发现方法是被InterceptModel这个类拦截, 并且替换了InterceptModel的方法 [InterceptModel cl_logInterceptModel] 第15行 Intercept You Method 类方法也可以交换和拦截 新增类方法 #import &quot;BaseModel.h&quot;@implementation BaseModel- (void)cl_logBaseModel &#123; NSLog(@&quot;Base Model Log&quot;);&#125;+ (void)cl_logBaseModelClass &#123; NSLog(@&quot;Base Model Class Log&quot;);&#125;@end-----------------------------------------------@implementation InterceptModel- (void)cl_logInterceptModel &#123; NSLog(@&quot;Intercept You Method &quot;);&#125;+ (void)cl_logInterceptModelClass &#123; NSLog(@&quot;Intercept Class You Method &quot;);&#125;@end 最终实现class_getInstanceMethod 获取类方法method_exchangeImplementations initialize class_getInstanceMethod 实例方法 class_getClassMethod 类方法 method_exchangeImplementations 交换方法 + (void)initialize &#123; // 拦截实例方法 Method mehtodOne = class_getInstanceMethod([BaseModel class], @selector(cl_logBaseModel)); Method mehtodTwo = class_getInstanceMethod([InterceptModel class], @selector(cl_logInterceptModel)); method_exchangeImplementations(mehtodOne, mehtodTwo); // 拦截类方法 Method classMehtodOne = class_getClassMethod([BaseModel class], @selector(cl_logBaseModelClass)); Method classMehtodTwo = class_getClassMethod([InterceptModel class], @selector(cl_logInterceptModelClass)); method_exchangeImplementations(classMehtodOne, classMehtodTwo);&#125; 执行 self.view.backgroundColor = [UIColor whiteColor];BaseModel *baseModel = [[BaseModel alloc] init];[baseModel cl_logBaseModel];[BaseModel cl_logBaseModelClass]; 打印 Intercept You Method Intercept Class You Method]]></content>
      <categories>
        <category>iOS</category>
        <category>RunTime</category>
      </categories>
      <tags>
        <tag>RunTime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-UIScrollView基础用法]]></title>
    <url>%2F2017%2F11%2F22%2FOC%2FKit%2FUIScrollView%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[属性- (void)viewDidLoad &#123; [super viewDidLoad]; _scrollView.backgroundColor = [UIColor redColor]; //设置contentSize（必须设置） _scrollView.contentSize = CGSizeMake(400, 667); //偏移量 _scrollView.contentOffset = CGPointMake(100, 0); //contentInset(在原有的基础上调整内容滚动区域的大小) //_scrollView.contentInset = UIEdgeInsetsMake(-100, 0, 0, 0); //锁定方向(当系统识别滚动方向的时候，会把另外一个方向锁定，如果识别不了，就不锁定方向) _scrollView.directionalLockEnabled = YES; //反弹效果(默认为yes) _scrollView.bounces = YES; //默认是no，假如是yes并且bounces是yes,甚至如果内容大小小于bounds的时候，允许垂直拖动 _scrollView.alwaysBounceVertical = YES; //分页（默认no） _scrollView.pagingEnabled = YES; //滚动(默认yes允许滚动) _scrollView.scrollEnabled = YES; //滚动条 //showsHorizontalScrollIndicator默认yes 显示 _scrollView.showsHorizontalScrollIndicator = NO; //滚动条滚动的范围(垂直滚动条滚动范围上下各缩小50) _scrollView.scrollIndicatorInsets = UIEdgeInsetsMake(50, 0, 50, 0); //样式 _scrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite; // Do any additional setup after loading the view, typically from a nib.&#125; 方法- (void)viewDidLoad &#123; [super viewDidLoad]; //创建并添加scrollView UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(100, 200, 200, 300)]; [self.view addSubview:scrollView]; scrollView.backgroundColor = [UIColor redColor]; //设置内容视图的大小 scrollView.contentSize = CGSizeMake(375, 667); //设置内容视图 UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 375, 667)]; imageView.image = [UIImage imageNamed:@&quot;new_feature_1&quot;]; [scrollView addSubview:imageView]; _imageView = imageView; //设置代理 scrollView.delegate = self; //[self performSelector:@selector(changeScrollViewContentOffSet:) withObject:scrollView afterDelay:3]; //设置缩放内容视图的缩放比例范围 scrollView.minimumZoomScale = 0.5; scrollView.maximumZoomScale = 1.5; //当缩放比例超出范围之后，是否有反弹效果（no:不会超出范围，yes:超出范围之后反弹） scrollView.bouncesZoom = YES; //属性设置滚动至顶部 //scrollView.scrollsToTop = YES; // Do any additional setup after loading the view, typically from a nib.&#125;-(void)changeScrollViewContentOffSet:(UIScrollView *)scrollView&#123; [scrollView setContentOffset:CGPointMake(0, 300) animated:YES];&#125;#if 0#pragma mark -UIScrollViewDelegate 滚动//当scrollView滚动的时候，不停调用（可以监听scrollView的contentOffset）- (void)scrollViewDidScroll:(UIScrollView *)scrollView&#123; //NSLog(@&quot;%@&quot;,NSStringFromCGPoint(scrollView.contentOffset)); //NSLog(@&quot;decelerating：%d&quot;,scrollView.decelerating); //NSLog(@&quot;dragging：%d&quot;,scrollView.dragging); //NSLog(@&quot;tracking:%d&quot;,scrollView.tracking); NSLog(@&quot;%s&quot;,__func__);&#125;//开始拖动的时候调用- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123; //NSLog(@&quot;tracking:%d&quot;,scrollView.tracking); NSLog(@&quot;%s&quot;,__func__);&#125;// called on finger up if the user dragged. velocity is in points/millisecond. targetContentOffset may be changed to adjust where the scroll view comes to rest//将要结束拖动- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset &#123;// NSLog(@&quot;velocity:%@&quot;,NSStringFromCGPoint(velocity));// NSLog(@&quot;targetContentOffset:%@&quot;,NSStringFromCGPoint(*targetContentOffset)); //强制设置scrollView的偏移量 //*targetContentOffset = CGPointMake(0, 200); NSLog(@&quot;%s&quot;,__func__);&#125;// 已经结束拖动- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate&#123; //NSLog(@&quot;dragging：%d&quot;,scrollView.dragging); NSLog(@&quot;%s&quot;,__func__);&#125;//将要开始减速- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView&#123; //NSLog(@&quot;decelerating：%d&quot;,scrollView.decelerating); NSLog(@&quot;%s&quot;,__func__);&#125;//减速完成（停止）- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView&#123; //NSLog(@&quot;contentOffset:%@&quot;,NSStringFromCGPoint(scrollView.contentOffset)); NSLog(@&quot;%s&quot;,__func__);&#125;// called when setContentOffset/scrollRectVisible:animated: finishes. not called if not animating- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView&#123; NSLog(@&quot;%s&quot;,__func__);&#125;#endif#pragma mark -UIScrollViewDelegate(缩放)//指定缩放视图- (nullable UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView&#123; NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming); return _imageView;&#125;//缩放之前调用- (void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view &#123; NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);&#125;//完成缩放- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view atScale:(CGFloat)scale&#123; NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);&#125;//缩放时调用- (void)scrollViewDidZoom:(UIScrollView *)scrollView&#123; NSLog(@&quot;%s,zooming:%d&quot;,__func__,scrollView.zooming);&#125;#pragma mark -UIScrollViewDelegate(滚动至顶部)//允许滚动至顶部- (BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView&#123; return YES;&#125;//已经滚动至顶部- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView&#123; NSLog(@&quot;加载新数据，刷新界面&quot;);&#125;]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
        <category>UIScrollView</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>UIKit</tag>
        <tag>UIScrollView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS_App跳转设置]]></title>
    <url>%2F2017%2F11%2F21%2FOC%2FFunc%2FiOS-Func-App%E8%B7%B3%E8%BD%AC%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[跳到更多设置界面除了跳到WiFi设置界面，能不能跳到其他的设置界面呢？比如：定位服务、FaceTime、音乐等等。都是可以的，一起来看看如何实现的 跳到这些界面的参数配置： ##定位服务 用户关闭了定位,APP里面提示打开定位服务点击到设置界面设置，直接跳到定位服务设置界面= //定位服务设置界面NSURL *url = [NSURL URLWithString:@&quot;prefs:root=LOCATION_SERVICES&quot;];if ([[UIApplication sharedApplication] canOpenURL:url])&#123; [[UIApplication sharedApplication] openURL:url];&#125; FaceTim//FaceTime设置界面NSURL *url = [NSURL URLWithString:@&quot;prefs:root=FACETIME&quot;];if ([[UIApplication sharedApplication] canOpenURL:url])&#123; [[UIApplication sharedApplication] openURL:url];&#125; 音乐//音乐设置界面NSURL *url = [NSURL URLWithString:@&quot;prefs:root=MUSIC&quot;];if ([[UIApplication sharedApplication] canOpenURL:url])&#123; [[UIApplication sharedApplication] openURL:url];&#125; 蓝牙设置界面//蓝牙设置界面NSURL *url = [NSURL URLWithString:@&quot;prefs:root=Bluetooth&quot;];if ([[UIApplication sharedApplication] canOpenURL:url])&#123; [[UIApplication sharedApplication] openURL:url];&#125; iCloud设置界面//iCloud设置界面NSURL *url = [NSURL URLWithString:@&quot;prefs:root=CASTLE&quot;];if ([[UIApplication sharedApplication] canOpenURL:url]&#123; [[UIApplication sharedApplication] openURL:url];&#125; other设置界面只需要prefs:root=后面的值即可可以跳到这些界面的参数配置：r About — prefs:root=General&amp;path=AboutAccessibility — prefs:root=General&amp;path=ACCESSIBILITYAirplane Mode On — prefs:root=AIRPLANE_MODEAuto-Lock — prefs:root=General&amp;path=AUTOLOCKBrightness — prefs:root=BrightnessBluetooth — prefs:root=General&amp;path=BluetoothDate &amp; Time — prefs:root=General&amp;path=DATE_AND_TIMEFaceTime — prefs:root=FACETIMEGeneral — prefs:root=GeneralKeyboard — prefs:root=General&amp;path=KeyboardiCloud — prefs:root=CASTLEiCloud Storage &amp; Backup — prefs:root=CASTLE&amp;path=STORAGE_AND_BACKUPInternational — prefs:root=General&amp;path=INTERNATIONALLocation Services — prefs:root=LOCATION_SERVICESMusic — prefs:root=MUSICMusic Equalizer — prefs:root=MUSIC&amp;path=EQMusic Volume Limit — prefs:root=MUSIC&amp;path=VolumeLimitNetwork — prefs:root=General&amp;path=NetworkNike + iPod — prefs:root=NIKE_PLUS_IPODNotes — prefs:root=NOTESNotification — prefs:root=NOTIFICATIONS_IDPhone — prefs:root=PhonePhotos — prefs:root=PhotosProfile — prefs:root=General&amp;path=ManagedConfigurationListReset — prefs:root=General&amp;path=ResetSafari — prefs:root=SafariSiri — prefs:root=General&amp;path=AssistantSounds — prefs:root=SoundsSoftware Update — prefs:root=General&amp;path=SOFTWARE_UPDATE_LINKStore — prefs:root=STORETwitter — prefs:root=TWITTERUsage — prefs:root=General&amp;path=USAGEVPN — prefs:root=General&amp;path=Network/VPNWallpaper — prefs:root=WallpaperWi-Fi — prefs:root=WIFI]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS_Safari跳转App]]></title>
    <url>%2F2017%2F11%2F21%2FOC%2FGrammar%2FiOS-Safari-%E8%B7%B3%E8%BD%ACApp%2F</url>
    <content type="text"><![CDATA[Safari跳转到App##App中定义一个URL协议 TARGETS -&gt; info -&gt; URL Types -&gt; 添加一个URL协议 URL Schemes字段就是你这个APP的特殊标示，indentifier:这个URL协议的标示。一个APP可以拥有多个URL协议下面的两个字段可为空。最后再运行一下你的APP。 浏览里访问打开Safari浏览器，在输入在地址栏输入：myapp://然后回车 Safari跳回到APP时传一些参数比如在Safari浏览器的地址了输入：myapp://myappTest，用下面的方法获取到该参数之后就看自己的操作了 在appdelegate.m文件中写下如下方法如果iOS版本低于9.0，会在下面方法接受到在地址栏输入的字符串- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation&#123; [[[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;sourceApplication-&gt;%@&quot;, [url absoluteString]] message:nil delegate:nil cancelButtonTitle:@&quot;ok&quot; otherButtonTitles:nil] show]; return YES;&#125;如果iOS版本是9.0及以上的，会在下面方法接受到在地址栏输入的字符串- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;NSString *,id&gt; *)options&#123; [[[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;openURL-&gt;%@&quot;, [url absoluteString]] message:nil delegate:nil cancelButtonTitle:@&quot;ok&quot; otherButtonTitles:nil] show]; return YES;&#125;]]></content>
      <categories>
        <category>iOS</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>Func</tag>
        <tag>跳转</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func- Universal Links通用链接]]></title>
    <url>%2F2017%2F11%2F21%2FOC%2FFunc%2FiOS-Func-%20Universal%20Links%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[Universal Links简介 iOS9之前 iOS9之前,对于从各种从浏览器,Safari、UIWebView或者 WKWebView中唤醒APP的需求,我们通常只能使用scheme.首先是app中注册某个scheme 在iOS 9以后 通过Universal Link，将App 与网页端建立连接桥，可以从Safari 或者其他前端浏览器来识别并唤醒App，甚至是微信环境下也可以冲破障碍 官方的说明文档–&gt; Universal Link的优点 唯一性: 不像自定义的scheme,因为它使用标准的http/https链接到你的web站点,所以它不会被其它的app所声明.另外,Custom URL scheme 因为是自定义的协议，所以在没有安装 app 的情况下是无法直接打开的，而 universal links 本身是一个 HTTP/HTTPS 链接，所以有更好的兼容性 安全: 当用户的手机上安装了你的app,那么iOS将去你的网站上去下载你上传上去的说明文件(这个说明文件声明了你的app可以打开哪些类型的http链接).因为只有你自己才能上传文件到你网站的根目录,所以你的网站和你的app之间的关联是安全的. 可变: 当用户手机上没有安装你的app的时候,Universal Links也能够工作.如果你愿意,在没有安装你的app的时候,用户点击链接,会在safari中展示你网站的内容. 简单: 一个URL链接,可以同时作用于网站和ap 私有 其它app可以在不需要知道你的app是否安装了的情况下和你的app相互通信 需求 分享页面中，我们经常会看到在页面的顶端或者底部遇到有【打开App】或者【下载App】这样的按钮。 比较友好的产品，会做设备识别，以及检测APP是否安装，来做打开或者下载App 的需求但是在微信中，这方面做的比较恶心，微信下面几乎是全面屏蔽了唤起原生App 的功能 Universal Link 实现条件 域名 有一个域名,且这个域名的网站需要支持https,然后拥有网站的上传到根目录的权限(这个权限是为了上传一个apple指定的文件) 支持Universal Links(通用链接) 创建一个json格式的命名为apple-app-site-association文件 注意这个文件必须没有后缀名,文件名必须为: apple-app-site-association &#123; "applinks": &#123; "apps": [], "details": [ &#123; "appID": "Prefix +点 +BundleID", "paths": [ "/html/1/*", "/*"], &#125;, ] &#125;&#125; Prefix 和 BundleID paths:根据 paths 键设定一个你的app支持的路径列表,只有这些指定的路径的链接,才能被app所处理,举个例子:如果你的网站是www.XXXX.com,你的path写的是”/support/“,那么当用户点击www.yohunl.com/support/myDoucument,就可以进入你的app了,相反www.yohunl.com/other 就不会.path是大小写敏感的! 号表示任意路径. 服务器服务器配置 准备独立域名一级域名，二级域名均可。SSL 证书 为服务器配置HTTPS 用的SSL 证书上传签名好的JSON 配置文件 新建JSON文件新建一个JSON文件，不需要后缀名，内容输入以下代码： appID:相关内容可以在Developer 中心找到相关的内容。如图，前半部分为Prefix 后半部分为ID，即你的App 的bundle id，两者通过.相连paths:用来唤醒App 所需要指定的JSON文件在服务器中的路径。用”/* “ 是根目录，而/html 则是指html目录下的注意：这里的AppID中前半部分，在App 转让主体后会改变，需重新更新填好后保存为apple-app-site-association 名，上传到域名指向的服务器根目录。 &#123; "applinks": &#123; "apps": [], "details": [ &#123; "appID": "5B5Q4xxxx.com.xxxx.xxxx", "paths": [ "/html/1/*", "/*"] &#125;, ] &#125;&#125; 上传传该文件apple-app-site-association 上传传该文件apple-app-site-association到你的域名所对应的网站的根目录下(其实也不一定是根目录,例如ghost博客站点,就没有根目录一说,它就需要放在相应的主题目录下) 这一步是为了苹果能从https://你的域名/apple-app-site-associationxh获取到你上传的apple-app-site-association文件.上传完后,自己先访问一下,看看是否能够获取到,用我的做例子,https://yohunl.com/apple-app-site-association ,当你点击这个链接,应该是下载apple-app-site-association文件.验证该文件是否合法,苹果为了方便开发者,提供了一个网页来验证我们编写的这个apple-app-site-association是否合法有效,验证网址,进入网站进行验证 App配置工程文件配置 在工程文件中，找到Targets - Capabilities - Associated Domains 将开关选为On，并添加你的域名， 格式为 applinks: + 后台给的域名.com applinks: + www.后台给的域名.com iOS移动端的代码- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler&#123; if ([userActivity.activityType isEqualToString:NSUserActivityTypeBrowsingWeb]) &#123; NSString *url = userActivity.webpageURL.description; // 这里可以通过拆分url 来传入参数，达到跳转原生页面的功能，如跳转某商品页 [UIApplication sharedApplication] openURL:webpageURL]; &#125; return YES;&#125; h5网页配置 h5网页中对需要唤起App 的按钮或者控件添加点击事件，事件的函数代码如下: function wakeUpApp()&#123; if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) &#123; var loadDateTime = new Date(); window.setTimeout(function() &#123; var timeOutDateTime = new Date(); if (timeOutDateTime - loadDateTime &lt; 5000) &#123; window.location.href = "http://a.app.qq.com/o/simple.jsp?pkgname=你的应用宝BundleID"; &#125; else &#123; window.close(); &#125; &#125;, 25); window.location.href = "https://yourdomainname.com/"; &#125; else if (navigator.userAgent.match(/android/i)) &#123; var state = null; try &#123; state = window.open("apps custom url schemes ", '_blank'); &#125; catch(e) &#123;&#125; if (state) &#123; window.close(); &#125; else &#123; window.location.href = "要跳转的页面URL"; &#125; &#125;&#125;]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MarkDomn语法]]></title>
    <url>%2F2017%2F11%2F21%2FMarkDown%2FMarkDown-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[目录效果生成目录* [1.语法示例](#1)* [1.1图片](#1.1) * [1.2换行](#1.2)* [1.3强调](#1.3) * 字体h1&gt;h2&gt;h3.... &lt;h2 id=&quot;1&quot;&gt;目录标题&lt;/h2&gt; 效果 1.h2比h1字体小 1.1图片 1.2换行 1.3强调 页面内跳转锚 放在 目的地定义一个锚(id)： 跳转markdown语法[点击跳转--&gt;](#index)]]></content>
      <categories>
        <category>Tool</category>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDomn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS_App_代码规范]]></title>
    <url>%2F2017%2F11%2F20%2FOC%2FCode%2FOC-Code-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[iOS编码规范http://blog.csdn.net/qq350116542/article/details/51195386#import%E8%A7%84%E8%8C%83 #命名 变量命名 首字母小写，驼峰法则UI控件（描述+控件类型） priceLabel或priceLab 注释也要写 最好对齐 @property (nonatomic, strong) UIButton *collectsImgView; //合集 - 图标@property (nonatomic, strong) UILabel *collectsThemeLab; //合集 - 主题@property (nonatomic, strong) UILabel *collectsAuthorLab; //合集 - 作者 方法命名 首字母小写，驼峰法则 public method 规则： 方法用途单词_方法 一般的方法 - (void)show_editBtnOnOneViewC:(OneViewC *)oneViewC editBtn:(UIButton *)editBtn.....跳转 push_更新数据 update_collectList删除数据 delete_collectList private method 规则：不加下划线 不需要and： nameStr:(NSstring)nameStr - (void)pushOnewViewC:(OnewViewC *)onewViewC - nameStr:(NSstring)nameStr &#123;&#125; 扩展或封装方法 规则：以FF或ff开头 FanFan简写 - (void)ff_editOnOneViewC:(oneViewC)oneViewC isOpen:(BOOL) isOpen 少用#define预处理指令，多用类型常量 预处理指令命名 （字母全大写，以”_”分割） #define NSString * APP_ROOT_DIR @"xxx" 常量命名 （字母全大写，”k”开头） static NSString * const kAPPROOTDIR = @"xxx"; 资源文件中变量命名 全小写，”“分割模块： 开发功能模块外 nav tab login refresh share hud common(公有)格式：“模块类别状态描述” 状态可不要目前版本我们以模块作为文件夹 ，后面的按照这个4个 personal_btn_un_select.pngpersonal_btn_name_pngnav_btn_left.pngnav_imgView_lright.pngtab_item_un_select.pngtab_item_select.png 能用糖衣语法的尽量用糖衣语法，使用时注意nil报错。NSMutableArray = @[].mutableCopy;NSString *name = dic[@"name"];NSArray *array= @[item1, item2]; 用前缀避免命名空间冲突。大多数的自定制，都需要用前缀比如创建有读界面 Have (文件夹) ViewC(文件夹) HaveReadViewC.h View HaveReadView.h Model HaveReadModel.h Cell HaveReadCell.h 委托Delegate的定义和使用放在对应类的.h文件中，命名为该类名+Delegate，//定义代理HaveReadViewCDelegate ==&gt;HaveReadViewC + DelegateHaveReadCellDelegate ==&gt; HaveReadCell + Delegate//声明@property (nonatomic, weak) id &lt;ArticleHeadTableUrlDelegate&gt; delegate;//必须加判断！！！if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(push_safariWithUrl:)]) &#123; [_delegate pushSafariWithUrl:XXXXX]; &#125; 注释使用清晰而协调的命名方式+适当注释/** * @beif: 执行push操作 （ 简单明了就可以） * * @prama: namestr 名称 * @prama: isOpen 是否打开 0 = 关闭 1= 打开 * * @discussion: 注意这个方法子啊使用时候XXXXXXXX 等等 * **/ viewC里区块划分 h文件顶部:类的作用 类的注意一些内容 /** 订阅合集 分2种 我的订阅 xxxx 他的订阅 xxx */ 代理 @protocol XXXXXDelegate &lt;NSObject&gt;@required@optional- (void)delete_nameOnOne:(类 *)one nameStr:(NSString *) nameStr .... 代码结构 //#pragma ------------------ LifeCycle生命周期 -----------------//#pragma ------------------ Setter- (void)setNameLab:(UILable *)nameLab &#123; _nameLab = nameLab; &#125;//#pragma ------------------ Getter- (UIButton *)nameBtn:(UIButton *) nameBtn&#123; if(!_ nameBtn)&#123; nameBtn = ... [self addSubView: nameBtn]; &#125; return nameBtn;&#125;//#pragma ------------------ Layout ------------------//#pragma - nameBtn//#pragma - nameBtn - action //布局- (void)layoutSubviews;//#pragma ------------------ Plubic Method ------------------- (void)update_newViewC....- (BOOL)delete_editBtn.....//#pragma ------------------ private Method ------------------- (void)updateNewViewC....- (BOOL)deleteEditBtn.....//#pragma mark ------------- API ------------------//#pragma mark ------------- 代理//#pragma ------------------ Cell ------------------/** * @brief: 设置cell * * @prama: tableView * @prama: model * @prama: indexPath * */+( PersonalSubscribeCell *)show_cellOfTableView:(UITableView *)tableView model:(PersonalSubscribeModel *)model indexPath:(NSIndexPath *)indexPath 编程习惯 一个原则：能不做的事情，尽量不做，尽量少唤醒CPU，绝不能在UI线程中做耗时操作（如网络请求，数据库读写，文件读写等） Copy、mutableCopy要注意其关联的元素是否支持for循环 不要在循环中创建引用类型变量for循环中，用局部变量替代“array.count” @autoreleasepool@autoreleasepool&#123; for（）&#123; @autoreleasepool&#123;&#125; &#125;&#125; 引用变量声明放在循环外面，可以避免在栈内存中创建过多引用变量UserInfo userInfo;// 避免循环中每次都要调用userList.count取值int size = userList.count;for (int i = 0; i &lt; size; i++) &#123; userInfo = userList[i]; // do something...&#125;// 推荐for (int i = 0, max = userList.count; i &lt; max; i++) &#123; userInfo = userList[i]; // do something...&#125; NSString 在不需要外部任意修改的情况下，全部用Copy Block Block内部需要使用外部类变量的时候,防止循环引用切忌在block体中使用_name这样的变量，请使用self.name otehr 由于Objective-C是类型不安全的，注意加强类型判断、数据越界判断等等原则上不建议拷贝代码，同一段代码拷贝3次，必须抽离出一个方法，统一调用所有的系统的宏，都不得在任意地方乱定义，统一在FFConfig文件夹下的头文件中定义，并写好注释ViewController中的代码要分结构，多用#pragma mark - Life Circle对代码进行分区，ViewController中的代码分区可分为Life Circle、Request、Private、Delegate、Lazy等等ViewController中的代码尽量不要超过500行，注意优化 API 一级界面，API考虑离线缓存如果你用一句话无法将一个方法的内容表述清楚的话，这往往就意味着API的名字需要改进了；例如：removeAtPoint:就会比remove要清晰很多 提交代码规范提交代码时的描述必须写，且简明扼要就可以 我们的目标是让每一位小伙伴都能欣赏我们的代码]]></content>
      <categories>
        <category>OC</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-Lib-SDWebImag加载高分辨率图问题]]></title>
    <url>%2F2017%2F11%2F20%2FOC%2FLib%2FSDWebImag%2FOC-Lib-SDWebImag%E5%8A%A0%E8%BD%BD%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87%E5%9B%BE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[SDWebImage_图片分辨率过高内存过高问题#高分辨率多图问题： 高分辨率图，导致内存飙升，卡顿，设置闪退,提示： Restore the connection to &quot;“XXX”的 iPod&quot; and run &quot;XXX&quot; again, or if &quot;XXX&quot; is still running, you can attach to it by selecting Debug &gt; Attach to Process &gt; XXX. 由于应用程序突然消耗了大量内存，然后再分配调度内存的时候，出现错误，致使系统将APP进程关闭。能够去查看一下是不是载入了大量的图片等等，或者哪里有消耗内存的地方改动一下。 分析SDWebimage， 1.判断本地是否有这张图2.二有的时候直接从本地取图片3.没有的时候去网络下载 if(imgStr.length&gt;0)&#123; [[SDImageCache sharedImageCache] queryDiskCacheForKey:imgStr done:^(UIImage *image, SDImageCacheType cacheType) &#123; if (image) &#123; [_oneImage setImage:image]; &#125;else&#123; [_oneImage sd_setImageWithURL:kNSUrl(imgStr) placeholderImage:IMGNAMED(@&quot;defaultAvatar2&quot;) options:SDWebImageRefreshCached completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) &#123; if (image) &#123; [[SDImageCache sharedImageCache] storeImage:image forKey:imgStr toDisk:YES]; &#125; &#125;]; &#125; &#125;];&#125; 内部会调用下面这个方法- (UIImage *)diskImageForKey:(NSString *)key &#123; NSData *data = [self diskImageDataBySearchingAllPathsForKey:key]; if (data) &#123; UIImage *image = [UIImage sd_imageWithData:data]; image = [self scaledImageForKey:key image:image]; image = [UIImage decodedImageWithImage:image]; return image; &#125; else &#123; return nil; &#125; &#125; UIImage *image = [UIImage sd_imageWithData:data];图片取出来的时候就已经巨大无比，占用了很大的内存，导致内存来不及释放就崩溃 解决UIImage+MultiFormat这个类里面添加如下压缩方法，+(UIImage *)compressImageWith:(UIImage *)image &#123; float imageWidth = image.size.width; float imageHeight = image.size.height; float width = 640; float height = image.size.height/(image.size.width/width); float widthScale = imageWidth /width; float heightScale = imageHeight /height; // 创建一个bitmap的context // 并把它设置成为当前正在使用的context UIGraphicsBeginImageContext(CGSizeMake(width, height)); if (widthScale &gt; heightScale) &#123; [image drawInRect:CGRectMake(0, 0, imageWidth /heightScale , height)]; &#125; else &#123; [image drawInRect:CGRectMake(0, 0, width , imageHeight /widthScale)]; &#125; // 从当前context中创建一个改变大小后的图片 UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext(); // 使当前的context出堆栈 UIGraphicsEndImageContext(); return newImage; &#125; 修改第三方方法#ifdef SD_WEBP else if ([imageContentType isEqualToString:@&quot;image/webp&quot;]) &#123; image = [UIImage sd_imageWithWebPData:data]; &#125; #endif else &#123; image = [[UIImage alloc] initWithData:data]; if (data.length/1024 &gt; 128) &#123; image = [self compressImageWith:image]; &#125; UIImageOrientation orientation = [self sd_imageOrientationFromImageData:data]; if (orientation != UIImageOrientationUp) &#123; image = [UIImage imageWithCGImage:image.CGImage scale:image.scale orientation:orientation]; &#125; 设置加载在SDWebImageDownloaderOperation的connectionDidFinishLoading方法里面的 UIImage *image = [UIImage sd_imageWithData:self.imageData]; //将等比压缩过的image在赋在转成data赋给self.imageData NSData *data = UIImageJPEGRepresentation(image, 1); self.imageData = [NSMutableData dataWithData:data]; 再配合 [[SDImageCache sharedImageCache] setValue:nil forKey:@&quot;memCache&quot;];（图片加载后使用）大功告成，亲测内存基本变化不大，自动释放也来得及]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>SDWebImage</category>
      </categories>
      <tags>
        <tag>SDWebImage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC-Func-配置启动图/图标]]></title>
    <url>%2F2017%2F11%2F20%2FOC%2FFunc%2FOC-Func-%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E5%9B%BE-%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[https://www.cnblogs.com/xiu619544553/p/5348678.html]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC-Func-检查项目是否使用IDFA]]></title>
    <url>%2F2017%2F11%2F20%2FOC%2FFunc%2F%E6%A3%80%E6%9F%A5%E9%A1%B9%E7%9B%AE%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8IDFA%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/chelongfei/article/details/51495862]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Func</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC -Lib-JSBadgeView数字角标]]></title>
    <url>%2F2017%2F11%2F14%2FOC%2FLib%2FJSBadgeView%2FOC-Lib-JSBadgeView%E6%95%B0%E5%AD%97%E8%A7%92%E6%A0%87%2F</url>
    <content type="text"><![CDATA[使用方法//在父控件上显示，//显示的位置TopRight self.badgeView = [[JSBadgeView alloc]initWithParentView:parentView alignment:JSBadgeViewAlignmentTopRight]; //位置 self.badgeView.badgePositionAdjustment = CGPointMake(-15, 10);//设置tag要辨别 self.badgeView.tag = 10086;//背景色self.badgeView.badgeBackgroundColor = [UIColor redColor]; //没有反光面self.badgeView.badgeOverlayColor = [UIColor clearColor]; //外圈的颜色，默认是白色 self.badgeView.badgeStrokeColor = [UIColor redColor]; 设置数字//1、用字符self.badgeView.badgeText = @&quot;1&quot;; //2、如果不显示就设置为空self.badgeView.badgeText = nil; //当更新数字时，最好刷新，不然由于frame固定的，数字为2位时，红圈变形 [self.badgeView setNeedsLayout];]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>JSBadgeView</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Lib</tag>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-UILaebl_Shadow文字阴影]]></title>
    <url>%2F2017%2F11%2F14%2FOC%2FKit%2FUILabel-Shadow%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[#方法1 设置UILabel中的shadowColor和shadowOffset属性 问题:阴影没有模糊效果，并且无法设置阴影的宽度等等，比较具有局限性 #方法2 NSShadow *shadow = [[NSShadow alloc]init]; shadow.shadowBlurRadius = 1; shadow.shadowOffset = CGSizeMake(0,1); shadow.shadowColor = [UIColor colorWithWhite:0 alpha:0.6]; NSAttributedString *attText = [[NSAttributedString alloc]initWithString:[NSString stringWithFormat:@&quot;%@浏览过&quot;,!model.read_num?@&quot;0&quot;:model.read_num] attributes:@&#123;NSShadowAttributeName:shadow&#125;]; cell.skimLab.attributedText = attText;]]></content>
      <categories>
        <category>OC</category>
        <category>UIKit</category>
        <category>UILabel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Runtime实践:占位图]]></title>
    <url>%2F2017%2F11%2F13%2FOC%2FGrammar%2FiOS-RunTime-%E5%8D%A0%E4%BD%8D%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[辈出有读 里代码]]></content>
      <categories>
        <category>iOS</category>
        <category>RunTime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-内存检测工具Analyze]]></title>
    <url>%2F2017%2F11%2F13%2FOC%2FFunc%2FiOS-Func-%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7Analyze%2F</url>
    <content type="text"><![CDATA[内存检测工具Analyze开启Analyzexcode----product-----Analyze(快捷键:Shift + Cmd + B) iOS的分析工具可以发现编译中的warning，内存泄漏隐患，甚至还可以检查出logic上的问题在自测阶段一定要解决Analyze发现的问题，可以避免出现严重的bug 常见问题 内存泄漏隐患提示 Potential Leak of an object allocated on line …… 数据赋值隐患提示 The left operand of …… is a garbage value 对象引用隐患提示 Reference-Counted object is used after it is released 具体问题重写UIViewController的生命周期方法没有调用父类的方法eg: The ‘viewWillAppear:’ instance method in UIViewController subclass ‘YourViewController’ is missing a [super viewWillAppear:] call &gt; -(void)viewWillAppear:(BOOL)animated&#123; [superviewWillAppear:YES]; //your code...&#125; 初始化的变量并没有被使用eg: value stored to ‘YourVariable’ is never read 变量多次初始化，其中的某些初始化的变量并没有使用过eg: value stored to ‘YourVariable’during its initialization is never read 重新父类的初始化方法时没有调用父类的初始化方法 错误代码示例： -(instancetype)initWithFrame:(CGRect)frame&#123; if(self== [superinitWithFrame:frame])&#123; &#125; return self;&#125; 先调用父类的初始化方法，再自定义处理 -(instancetype)initWithFrame:(CGRect)frame&#123; self = [superinitWithFrame:frame]; if (self) &#123; &#125; return self;&#125; 属性标明错误(strong,retain,assign)potential leak of an object 变量未初始化就使用The left operand of ‘+’ is a garbage value]]></content>
      <categories>
        <category>iOS</category>
        <category>Func</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>Func</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Func-异常捕获-堆栈信息的解析]]></title>
    <url>%2F2017%2F11%2F11%2FOC%2FFunc%2FiOS-Func-%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7-%E5%A0%86%E6%A0%88%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[堆栈信息的解析 最使用NSSetUncaughtExceptionHandler和signal方法捕获异常，并传到服务器，用来追踪线上app的异常信息捕获到的都是堆栈信息： 如何利用这些堆栈信息查看报错方法名和行数？ 异常信息 异常信息有三种类型 ①已标记错误位置的:信息已经很明确了，不用解析test 0x000000010bfddd8c -[ViewController viewDidLoad] + 8588 ②有模块地址的情况二进制库名（test）调用方法的地址（0x00000001018157dc）模块地址（0x100064000）+偏移地址（24844252） test 0x00000001018157dc 0x100064000 + 24844252 ③无模块地址的情况： test 0x00000001018157dc test + 24844252 dSYM符号表获取 xcode-&gt;window-&gt;organizer-&gt;右键你的应用 show finder-&gt;右键.xcarchive 显示包内容-&gt;dSYMs-&gt;test.app.dYSM atos命令 atos命令来符号化某个特定模块加载地址 $ atos [-arch 架构名] [-o 符号表] [-l 模块地址] [方法地址] 解析 使用终端，进到test.app.dYSM所在目录 ①如果是有模块地址的情况，运行： $ atos -arch arm64 -o test.app.dSYM/Contents/Resources/DWARF/test -l 0x100064000 0x00000001018157dc ②.如果是无模块地址的情况 ❶先将偏移地址转为16进制： 24844252 = 0x17B17DC ❷然后用方法的地址-偏移地址，得到的就是模块地址 0x00000001018157dc - 0x17B17DC = 0x100064000 ❸最后运行 $ atos -arch arm64 -o test.app.dSYM/Contents/Resources/DWARF/test -l 0x100064000 0x00000001018157dc iOS崩溃堆栈符号化http://blog.csdn.net/tencent_bugly/article/details/46275773 http://blog.csdn.net/reylen/article/details/50568440 https://www.cnblogs.com/1oo1/p/4462649.html]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git-项目仓库配置]]></title>
    <url>%2F2017%2F11%2F09%2FGit%2FGit-%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[https://www.jianshu.com/p/15f68b7cee9f http://blog.csdn.net/lqq200912408/article/details/50422184]]></content>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-Function函数]]></title>
    <url>%2F2017%2F02%2F05%2FSwift%2FGrammar%2FFunction%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[① 函数定义&amp;&amp;形式 Swift的函数和C的函数定义方式有区别，Swift将返回类型写在函数的最后 func函数名 (参数列表) -&gt; 返回值 &#123; //函数体&#125; 函数输入一个字符串，然后打印出这个字符串，并且返回一个字符串 //函数定义func printYourName (name: String)-&gt;String &#123; print(name) return "Hello, " + name&#125;var s = printYourName(name: "Tom") //函数调用print(s) //打印 Hello, Tom 函数返回值：函数返回值用-&gt;后跟类型说明符号函数的多返回值。可以用元组返回复合多值。当然也可以没有返回值复制代码一个函数没有返回值，那么从 -&gt; 返回值 这个部分可以省略 //函数定义func printYourName (name: String) &#123; print(name)&#125; 有多个参数 func printTwoString(firstString: String, secondString: String) &#123; print(firstString,secondString)&#125;printTwoString(firstString: "hello", secondString: "Kate") 函数参数默认为let类型的如果你想更改参数副本，那么你要显示使用var修饰当然也可以不需要参数的函数如果你像更改参数作为输入输出用inout,调用时候要用取地址符号&amp; func GetName(inout strName:String)&#123; strName += " hello" &#125;var strTest = "oo"GetName(&amp;strTest)println("\(strTest)") Function Argument Labels and Parameter Names 在函数定义时候，参数列表中使用的fristString和secondString称为参数(Parameter).但是参数包含了两个东西 1是Argument Label，它是在方法调用的时候写在参数值前面的参数标记，比如下面调用中的firstString和secondString printTwoString(firstString: "hello", secondString: "Kate") 2是Parameter Names，它只的是在方法体里面使用到的参数标志 printTwoString方法体里面print种使用到的firstString,secondString 默认情况下，Argument Label和Parameter Names是一样的。但是你也可以自定义Argument Label，方法是在Parameter Names前面加上另外一个字符串，并用空格相隔，如下，begin是自定义的Argument Label，然后调用的时候就需要使用begin来指定参数 func printTwoString(begin firstString: String, secondString: String) &#123; print(firstString,secondString)&#125;printTwoString(begin: "hello", secondString: "Kate") 使用print的时候没有加上任何的Argument Label。如果你不想要Argument Label，那么在定义方法的时候，将Argument Label的字符串写为下划线 _ func printTwoString(firstString: String, _ secondString: String) &#123; print(firstString,secondString)&#125;printTwoString(firstString: "hello", "Kate") //忽略了第二参数的外部参数名之后，这里就不能加上外部参数名了 参数默认值 可以给参数赋值默认值。具有默认值的参数，在调用的时候，可以不用给它赋值。好比print方法，它的原型是 print(_:separator:terminator:) 但是一般使用的时候都只传了一个字符串，原因就在于它后面的两个参数都是具有默认值的。给参数设置默认值的方法是在方法定义的时候，在参数的后面用 = 加上默认值。如下代码。官方文档建议我们把带默认值的参数放在参数列表的末尾，这样在调用的时候不至于混淆。但是其实可以对每个参数都赋值默认值。比如下面的例子 func printTwoString(firstString: String = "hello", secondString: String = "Lucy", thirdString: String = "end") &#123; print(firstString,secondString,thirdString)&#125;printTwoString( secondString:"two") //使用外部参数名指定要赋值的参数，其他参数使用默认值，输出 hello two end 值得注意的是，如果没有默认值的参数在调用的时候也没有给其赋值，那么会在编译的时候报错。如果你又把参数列表的Argument Label都去掉的话，那么在调用的时候，你给的参数将会从头开始匹配。如果参数类型不匹配的话，就会报错。当然，不建议大家这样做，因为会导致程序的可读性变差 可变参数列表func printStrings(strings: String...) &#123; print(strings)&#125;printStrings("1","2","3") //输出 ["1", "2", "3"] 通过输出我们可以看到，可变参数在函数体内是以数组的类型存在的。这点在官方文档上有说明 In-Out 参数 在默认的情况下，参数传递给方法后都是常量，也就是说不能在函数体里面对参数进行修改。这个常量是个形参，不是之前的实参 func add(first: Int, _ second: Int) -&gt; Int&#123; first = 2 //这句报错 return first + second&#125; 有一种情况，我们希望在方法里面改变实参的值，所以有了inout关键字，这个关键字不能对可变参数添加，同时加上了这个keyword之后，不能再添加 var let，也不能有默认值。然后调用的时候，这个参数必须传递一个变量，而不能是常量，并且在变量前加&amp; func add(first: inout Int, _ second: Int) -&gt; Int&#123; first = 2 return first + second&#125;var a = 1print("result = \(add(first: &amp;a, 3)), a = \(a) " )//输出 result = 5, a = 2 关于In-Out，这个实现原理是先将实参copy，然后在方法体内处理，方法结束的时候，再把copy覆盖回原来的实参。所以如果你在方法体里面去改变实参（通过某些方法获得），那么在方法结束的时候，你对实参的改变会被形参覆盖。建议不要在方法体里面操作InOut参数的实参。 关于InOut参数的捕获问题请参见官方文档 函数类型 函数也是一种类型。函数类型由函数定义决定 func add(first: inout Int, _ second: Int) -&gt; Int&#123; first = 2; return first + second&#125; 它的函数类型为 (inout Int, Int) -&gt; Int如果没有参数也没有返回值的函数，函数类型为 () -&gt; void，也可以写为 () -&gt; ()函数类型可以和基本类型一样，用来定义变量。继续利用上面定义的add函数 var mathFunc : (inout Int, Int) -&gt; Int = addvar f = 1;var s = 2;let result = mathFunc(&amp;f,s) //使用函数类型 函数类型可以用做参数或返回值，利用上面定义的mathFunc变量，可以有 func add(first: inout Int, _ second: Int) -&gt; Int&#123; first = 2; return first + second&#125;var mathFunc : (inout Int, Int) -&gt; Int = addfunc doMath(mathFunc: (inout Int, Int) -&gt; Int, first: inout Int, second: Int) &#123; print("mathFunc = \(mathFunc(&amp;first,second))") print("first = \(first)")&#125;var f = 1;var s = 2;doMath(mathFunc: mathFunc, first: &amp;f, second: 2)print("f = \(f)")//输出//mathFunc = 4//first=2//f=2 嵌套函数 在函数里面再定义函数。这个嵌套函数可以在函数内部调用，也可以作为返回值返回，使得它可以在其他范围内进行使用。例子如下//定义了add 和 sub 两个嵌套函数，然后用于返回。如果输入的不是”+“或”-“，那么返回一个nil。注意giveMeFunc返回的是一个函数类型的可选类型 func giveMeFunc(opt: Character) -&gt; ((Int, Int) -&gt; Int)? &#123; var method : ((Int, Int) -&gt; Int)? switch opt &#123; case "+" : func add(one: Int, _ two: Int) -&gt; Int &#123; return one + two &#125; method = add case "-" : func sub(one: Int, _ two: Int) -&gt; Int &#123; return one - two &#125; method = sub default : method = nil &#125; return method&#125;if let m = giveMeFunc(opt:"-") &#123; print(m(1, 2)) // 打印 -1, 留意一下，这里没有Argument Label。&#125; 操作符方法（Operator Methods） swift和C++一样，可以定义操作符函数。操作符指的是+，-，/，%，+=等等。一般我们这些操作符是给数字类型使用的。但是有了操作符函数之后，我们可以自定义这类符号的运算规则。下面是官方的示例 struct Vector2D &#123; var x = 0.0, y = 0.0&#125;extension Vector2D &#123; static func + (left: Vector2D, right: Vector2D) -&gt; Vector2D &#123; return Vector2D(x: left.x + right.x, y: left.y + right.y) &#125;&#125; 上面的例子定义了一个操作符函数 + ，这个操作符函数的参数列表里面有两个参数left和right。分别代表着+号左右两边的两个参数。通过这个函数，我们可以直接将两个Vector示例进行相加。如下： let vector = Vector2D(x: 3.0, y: 1.0)let anotherVector = Vector2D(x: 2.0, y: 4.0)let combinedVector = vector + anotherVector// combinedVector is a Vector2D instance with values of (5.0, 5.0) 除了这种要接受两个参数的操作符之外，还要一些只有一个参数的操作符，比如 -，++，–等等。但是这类操作符有两类：前缀（Prefix）和后缀（Postfix），比如–a，i++；这类操作符的定义要加上prefix或postfix关键字。语法如下 extension Vector2D &#123; static prefix func - (vector: Vector2D) -&gt; Vector2D &#123; return Vector2D(x: -vector.x, y: -vector.y) &#125;&#125; 上面定义了一个前缀的 - 操作符函数。用来将一个向量取反。后置操作符的关键字是postfix，中间操作符的关键字是infix 另外还有一种计算并赋值的操作符，比如++，+=等等。这类的操作符会对其中的一个操作对象进行操作后的赋值。所以必须将参数设置为inout extension Vector2D &#123; static func += (left: inout Vector2D, right: Vector2D) &#123; left = left + right &#125;&#125; 除了Swift已经定义的操作符之外，还可以自己定义操作符。比如下面定义了一个+++操作符 prefix operator +++ 上面的只是定义，我们还需要实现这个操作符所做的 extension Vector2D &#123; static prefix func +++ (vector: inout Vector2D) -&gt; Vector2D &#123; vector += vector return vector &#125;&#125; 但是这个自定义的操作符有一些规定。自定义的操作符可以由/, =, -, +, !, *, %, &lt;, &gt;, &amp;, |, ^, ?,~，和某些Unicode 字符开始，至于是哪些字符可以参考官网。点击网页，在网页最下面在这些字符之后，可以接上unicode字符。另外有一些禁止的规定：1.不能重写一个单单的 ? 号。（可以在字符里面加入?号）2.不能重写这些操作符 =, -&gt;, //, /, /, ., 但是可以重写两个或更多个点的操作符。 不能以这些字符开头 ?, &lt;， &amp;4.不能以这些字符结尾 ?， &gt;， ! 在定义的操作符的时候末尾的那对大括号是有用的。在数学上，加减乘除是有优先级和结合规则的。同样的，这里的操作符也是。我们可以在定义操作符的大括号里面定义这个操作符的优先级和结合规律 infix operator +-: AdditionPrecedenceextension Vector2D &#123; static func +- (left: Vector2D, right: Vector2D) -&gt; Vector2D &#123; return Vector2D(x: left.x + right.x, y: left.y - right.y) &#125;&#125; 上面例子定义的是一个中间的操作符，它的结合规则是向左结合。优先级是AdditionPrecedence组，这个参考下面的Precedence Group Declaration链接。前置操作符和后置操作符不能指定优先级，它们作用在同一个操作数，那么先执行后置操作符。 wen]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar-类和结构体]]></title>
    <url>%2F2017%2F02%2F02%2FSwift%2FGrammar%2FStruct%20%26%26%20Class%20%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[①定义 结构体struct struct SForm&#123; var iXX:Int = 99 var strHello:String = "dsf" func testFunc(iXX:Int)-&gt;Int&#123; return iXX+1 &#125;&#125; 类class class CTset&#123; var iAge:Int = 9 var strName:String = "xx" func testFunction(iAge:Int)-&gt;Int&#123; return iAge+1 &#125; func testFunctionName(strName:String)-&gt;String&#123; return "oo"+strName &#125;&#125; ②实例 结构体struct var structObj = SForm()structObj.iXX = 988let iRes = structObj.testFunc(4) 类class let clsObj = CTset()clsObj.iAge = 987let iRe:Int = clsObj.testFunction(32)let iStr:String = clsObj.testFunctionName("sdf") ③初始化 结构体有一个自动生成的初始化器新实例中各个属性的初始值可以通过属性的名称传递到成员逐一初始化器之中 var objFirst = SForm(iXX:983, strHello:&quot;hel&quot;)objFirst.iXX = 87let objSecond = SForm(iXX:94, strHello:&quot;hwxel&quot;)//objSecond.iXX = 876 error ④类型 结构体是值类型 var objFirst = SForm(iXX:983, strHello:"hel")var objSecond = objFirstobjSecond.iXX = 5775println("objFirst: \(objFirst.iXX) objSecond:\(objSecond.iXX)")输出：objFirst: 983 objSecond:5775 类是引用类型 let clsObj = CTset()clsObj.iAge = 987var clsObjEx:CTset = clsObjclsObjEx.iAge = 874println("\(clsObj.iAge) \(clsObjEx.iAge)")输出：clsObj: 874 clsObjEx: 874 ⑤运算 类的等价于运算 === 与 不等价于 !== 运算表示是否是引用到同一个类对象 let clsObj = CTset()clsObj.iAge = 987var clsObjEx:CTset = clsObjclsObjEx.iAge = 874if clsObj === clsObjEx &#123; println("obj same")&#125; 类和结构体区别结构体是值类型，结构体的赋值意味着拷贝行为的发生而类是引用类型 集合类型的赋值和拷贝行为swift的 数组 和 字典 都是以 值类型 传递的 字典的拷贝 当有字典实例的赋值或者是字典做参数的函数调用时候，字典即发生拷贝行为 字典的key和value的拷贝行为是依赖于她自身到底是引用属性还是值类型 dicSecond的值被更新，而dicFirst的值依然保持不变dicFirst和dicSecond是两个独立的字典它的key和value在赋值时候发生了拷贝，因为都是String类型。 var dicFirst:Dictionary = ["key1":"value1", "key2":"value2"]var dicSecond:Dictionary = dicFirstdicSecond["key1"] = "value1Update" 两个字典dicFirst 和 dicSecond分别为不同的字典，但它的值 clsObjFirst的地址却是同一个因为它是类类型，是引用传递 lass CTset&#123; var iAge:Int = 9 var strName:String = "xx" func testFunction(iAge:Int)-&gt;Int&#123; return iAge+1 &#125; func testFunctionName(strName:String)-&gt;String&#123; return "oo"+strName &#125;&#125;var clsObjFirst = CTset()clsObjFirst.iAge = 443var dicFirst:Dictionary = ["key1":clsObjFirst]var dicSecond:Dictionary = dicFirst 数组的赋值与拷贝 数组的拷贝行为只有在数组的长度发生变化的时候才会拷贝 当然数组里面的内容，是要遵循引用类型还是值类型的。 arrayFirst[0]和arraySecond[0] 都会被修改成 89因为数组长度没变化，所以没发生拷贝 var arrayFirst = [1, 33]var arraySecond = arrayFirstarraySecond[0] = 89 长度变化，arrayFirst拷贝，独立另外一个数组 var arrayFirst = [1, 33]var arraySecond = arrayFirstarrayFirst.append(222)//长度变化，arrayFirst拷贝，独立另外一个数组arrayFirst[0] = 99println("first:\(arrayFirst)\nsecond:\(arraySecond)")输出：first:[99, 33, 222]second:[1, 33] 在用多个变量(var)引用一个数组时候，可以用unshare()方法，强制拷贝数组 var arrayFirst = [1, 2]var arraySecond = arrayFirstvar arrayThird = arrayFirstarraySecond.unshare()//拷贝独立成另外个数组arrayThird.unshare()//拷贝独立成另外个数组arrayFirst[0] = 3arraySecond[0] = 4arrayThird[0]=5println("first:\(arrayFirst)\nsecond:\(arraySecond) \nthird:\(arrayThird)")输出：first:[3, 2]second:[4, 2] third:[5, 2] 数组等价于(===)和不等价于(!==)强制复制数组 通过copy强制复制数组，进行的是数组类容浅拷贝，并返回个新的数组引用 var arraySource = [1, 2, 3]var arrayCopy = arraySource.copy()arraySource[0] = 4arrayCopy[1] = 5println("source:\(arraySource)\n copy:\(arrayCopy)")输出：source:[4, 2, 3] copy:[1, 5, 3] more =========================================== 类和结构体对比类和结构体的共同点在于定义属性用于存储值定义方法用于提供功能定义附属脚本用于访问值定义构造器用于生成初始化值通过扩展以增加默认实现的功能实现协议以提供某种标准功能 与结构体相比，类有如下的附加功能继承允许一个类继承另一个类的特征类型转换允许在运行时检查和解释一个类实例的类型析构器允许一个类实例释放任何其所被分配的资源引用计数允许对一个类的多次引用 结构体总是通过被复制的方式在代码中传递，不使用引用计数 定义语法使用关键字class和struct表示类和结构体 每次定义一个新类或者结构体的时候，实际上你是定义了一个新的Swift类型因此使用UpperCamelCase这种方式来命名（如SomeClass和SomeStructure等），以便符合标准Swift类型的大写命名风格（如String，Int和Bool）相反的，请使用lowerCamelCase这种方式为属性和方法命名（如framerate和incrementCount），以便和类型名区分 struct Resolution &#123; var width = 0 var height = 0&#125;class VideoMode &#123; var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? // 可选类型，自动赋值为nil&#125; 类和结构实例 结构体和类都使用构造器语法来生成新的实例构造器语法的最简单形式是在结构体或者类的类型名称后跟随一对空括号，如Resolution()或VideoMode()通过这种方式所创建的类或者结构体实例，其属性均会被初始化为默认值属性都必须赋初值！否则编译报错，可选类型可不赋值，实际上默认赋值为nil struct Resolution &#123; var width = 0 var height = 0&#125;class VideoMode &#123; var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? // 可选类型，自动赋值为nil&#125;let r = Resolution()let v = VideoMode()print(r) // Resolution(width: 0, height: 0)print(v) // VideoModeprint(v.resolution) // Resolution(width: 0, height: 0)print(v.interlaced) // falseprint(v.frameRate) // 0.0print(v.name) // nil 属性访问 通过使用点语法（dot syntax），你可以访问实例的属性其语法规则是，实例名后面紧跟属性名，两者通过点号(.)连接也可以使用点语法访问子属性。也可以使用点语法为变量属性赋值 ```&gt;与Objective-C语言不同的是，Swift允许直接设置结构体属性的子属性，并不需要重新为整个resolution属性设置新值 struct Resolution { var width = 0 var height = 0} class VideoMode { var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? // 可选类型，自动赋值为nil} let v = VideoMode()print(v.resolution) // Resolution(width: 0, height: 0)v.resolution.width = 1920v.resolution.height = 1080print(v.resolution.width) // 1920# 结构体类型的成员逐一构造器&gt; 所有结构体都有一个自动生成的成员逐一构造器，用于初始化新结构体实例中成员的属性&gt; 新实例中各个属性的初始值可以通过属性的名称传递到成员逐一构造器之中&gt; 与结构体不同，类实例没有默认的成员逐一构造器```swiftstruct Resolution &#123; var width = 0 var height = 0&#125;var r = Resolution(width: 1920, height: 1080)print(r) // Resolution(width: 1920, height: 1080) 结构体和枚举是值类型 值类型被赋予给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝面我们已经大量使用了值类型。实际上，在 Swift中，所有的基本类型：整数（Integer）、浮点数（floating-point）、布尔值（Boolean）、字符串（string)、数组（array）和字典（dictionary），都是值类型，并且在底层都是以结构体的形式所实现。在Swift中，所有的结构体和枚举类型都是值类型。这意味着它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制 struct Resolution &#123; var width = 0 var height = 0&#125;var r = Resolution(width: 1920, height: 1080)print(r) // Resolution(width: 1920, height: 1080)var rr = rprint(rr) // Resolution(width: 1920, height: 1080)，两个完全独立的实例碰巧包含有相同的数值rr.width = 2048print(r) // Resolution(width: 1920, height: 1080)，由于r和rr相互独立，所以值不改变print(rr) // Resolution(width: 2048, height: 1080)enum CompassPoint &#123; case North, South, East, West&#125;var a = CompassPoint.Northvar b = aprint(b) // Southb = CompassPoint.Southprint(a) // Northprint(b) // South 类是引用类型 与值类型不同，引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，引用的是已存在的实例本身而不是其拷贝 struct Resolution &#123; var width = 0 var height = 0&#125;class VideoMode &#123; var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? // 可选类型，自动赋值为nil&#125;let a = VideoMode()a.frameRate = 25 // a是常量，但是可以修改属性，因为a本身没有改变let b = ab.frameRate = 30print(a.frameRate) // 30.0// a = VideoMode() // error: cannot assign to value: 'a' is a 'let' constant 注意，a和b被声明为常量而不是变量。然而你依然可以改变a.frameRate和b.frameRate，因为a和b这两个常量的值并未改变。它们并不“存储”这个VideoMode实例，而仅仅是对VideoMode实例的引用。所以，改变的是被引用的VideoMode的frameRate属性，而不是引用VideoMode的常量的值 恒等运算符 因为类是引用类型，有可能有多个常量和变量在幕后同时引用同一个类实例。（对于结构体和枚举来说，这并不成立。因为它们作为值类型，在被赋予到常量、变量或者传递到函数时，其值总是会被拷贝。）如果能够判定两个常量或者变量是否引用同一个类实例将会很有帮助。为了达到这个目的，Swift内建了两个恒等运算符运用这两个运算符检测两个常量或者变量是否引用同一个实例 等价于（===）不等价于（!==） 等价于”（用三个等号表示，===）与“等于”（用两个等号表示，==）的不同 等价于”表示两个类类型（class type）的常量或者变量引用同一个类实例。“等于”表示两个实例的值“相等”或“相同”，判定时要遵照设计者定义的评判标准，因此相对于“相等”来说，这是一种更加合适的叫法当你在定义你的自定义类和结构体的时候，你有义务来决定判定两个实例“相等”的标准 struct Resolution &#123; var width = 0 var height = 0&#125;class VideoMode &#123; var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? // 可选类型，自动赋值为nil&#125;let a = VideoMode()a.frameRate = 25 // a是常量，但是可以修改属性，因为a本身没有改变let b = ab.frameRate = 30// if a == b &#123; // 两个引用类型之间使用“==”运算符，会出现编译错误：error: binary operator '==' cannot be applied to two 'VideoMode' operandsif a === b &#123; print("a === b") // a === b&#125; else &#123; print("a !== b")&#125; 指针如果你有C、C++或者Objective-C语言的经验，那么你也许会知道这些语言使用指针来引用内存中的地址。一个引用某个引用类型实例的Swift常量或者变量，与C语言中的指针类似，但是并不直接指向某个内存地址，也不要求你使用星号（*）来表明你在创建一个引用。Swift中的这些引用与其它的常量或变量的定义方式相同 类和结构体的选择可以使用类和结构体来定义你的自定义数据类型。然而，结构体实例总是通过值传递，类实例总是通过引用传递。这意味两者适用不同的任务。当你在考虑一个工程项目的数据结构和功能的时候，你需要决定每个数据结构是定义成类还是结构体。按照通用的准则，当符合一条或多条以下条件时，请考虑构建结构体： 该数据结构的主要目的是用来封装少量相关简单数据值。 有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用。 该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用。 该数据结构不需要去继承另一个既有类型的属性或者行为。 举例来说，以下情境中适合使用结构体： 几何形状的大小，封装一个width属性和height属性，两者均为Double类型。 一定范围内的路径，封装一个start属性和length属性，两者均为Int类型。 三维坐标系内一点，封装x，y和z属性，三者均为Double类型。 在所有其它案例中，定义一个类，生成一个它的实例，并通过引用来管理和传递。实际中，这意味着绝大部分的自定义数据构造都应该是类，而非结构体 字符串、数组和字典类型的赋值与赋值行为Swift中，许多基本类型，诸如String，Array和Dictionary类型均以结构体的形式实现。这意味着被赋值给新的常量或变量，或者被传入函数或方法中时，它们的值会被拷贝。Objective-C中NSString，NSArray和NSDictionary类型均以类的形式实现，而并非结构体。它们在被赋值或者被传入函数或方法时，不会发生值拷贝，而是传递现有实例的引用。注意，以上是对字符串、数组、字典的“拷贝”行为的描述。在你的代码中，拷贝行为看起来似乎总会发生。然而，Swift在幕后只在绝对必要时才执行实际的拷贝。Swift管理所有的值拷贝以确保性能最优化，所以你没必要去回避赋值来保证性能最优化]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC-UIKit-UImage-加载本地高清大图]]></title>
    <url>%2F2017%2F01%2F16%2FOC%2FKit%2FUIImage%2FOC-UIKit-UImage-%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%AB%98%E6%B8%85%E5%A4%A7%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[http://blog.csdn.net/pzhtpf/article/details/51027047]]></content>
      <categories>
        <category>UIKit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swift-Grammar--基本类型与运算]]></title>
    <url>%2F2016%2F11%2F24%2FSwift%2FGrammar%2F%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[1.基本类型 1.1数字类型 1.2Double 1.3布尔2.不同进制的前缀3.元组（Tuple）4.可选类型(Optionals))5.基本运算6.类型安全7.断言8.取得随机数 基本类型 多出来的是 Tuple*8 和 可选类型**常量定义 let 常量名 常量名可以死任意文字，文字长度 给常量一个值，叫赋值 形式： let 常量名 = 值 变量 可主动变更或可预期时间内自耦东有规律或无规律的量 常量和变量的关系 变化才是永恒不变的，无论如何，总有规律可循 变量与常量在一定条件下可以相互转换 常量局势变量的一种 数字类型 Int 整型 类型可以不写，swift有类型推算功能 var a:Int = 101 //定义一个整型 初始化为101var aa:UInt = 201 //无符号的整型 （不能为负数） 在32位机器上是Int32 在64位机器上是Int64 除了Int之外，还有Int，Int8，Int16，Int32，Int64. 各个取值范围 其实取值范围就是 负2的n-1次方 ~ 2的n-1次方-1 print(UInt8.max) //255print(UInt8.min) //0print(Int8.max) //127print(Int8.min) //-128print(Int16.max) //32767print(Int16.min) //-32768print(Int32.max) //2147483647print(Int32.min) //-2147483648print(Int64.max) //9223372036854775807print(Int64.min) //-9223372036854775808 Double swift 默认 浮点型是 Double（双精度） 64位浮点数 var yue = 3.5或var yue : Double = 3.5 Float 32位浮点数 Swift不支持数字类型之间的自动转换。必须显式手动转换数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量 var i: Int = 2_000 //这个表示2000 var d: Double = 5.3 var e = d * Double(i) 布尔 Bool 表示逻辑上的真假： true、falseSwift和java一样，对boolean类型是强要求的，不能在if里面传一个整形用于判断 不同进制的前缀||||—|—||十进制|没有||二进制 | 0b||八进制 | 0o||十六进制 | 0x||科学计数||1.25e2 |代表 1.25乘上10的2次方||0xFp2 |代表 15乘上2的2次方||typealias| 关键字，用来个类型起别名| typealias ii = Int8 var mm = ii.min //这里的ii代表了Int8 var data1 = 17 //17var data2 = 0b1010111 //87var data3 = 0o713 //459var data4 = 0xaf7 //2807 元组(Tuple) Tuple:定义变量组合其实就是一群数据组合，可以将其解出来输出注意的是tuple不只是两个元素，你可以自己扩展成多个元素 var x= 1 var y = 2 var z = 3 var 向量 = （1，2，3）print (向量.0 ,向量.1 ,向量.2)var (x,y,z) = (1,2,3)print (x,y,z)// 值前加前缀var 课程 = (day:100,unit:&quot;天&quot;,lanage:&quot;swift&quot;,version:&quot;3.0&quot;);print课程. day) var menu = ("apple", 20) //定义一个Tuple var menu2 = (name: "banana", price:10) //可以在定义的时候指定元素名字 let (name,price) = menu //解Tuple，如果某个元素不想要的话，用 _ 代替 print(name, price) //输出 apple 20 print(menu.0,menu.1) //不解Tuple直接输出 print(menu2.name,menu2.price) //利用元素名字解Tuple 可选类型(Optionals) 当一个方法可以返回一个对象的时候，它有可能返回一个空值比如将字符串转换为数字的方法。为了处理这种情况，有了可选类型。可选类型表示一个数据，它可能有值，也可能为空。基本语法是在类型的后面加上问号 ？ 定义形式形式: var 变量：类型?,默认无值（nil） var addressStr:String print(addressStr) //这里报错说str没初始化 var addressStr:String?addressStr = "杭州" 但是如果将str改为可选类型，那么这就可以输出 var str:String? print(str) //输出 nil 可选类型转换为对应的类型 –&gt;对可选类型解包强制解包有个注意点，就是如果这个可选类型是nil的话，那么强制解包的语句会在运行时报错 var str:String? = "fe" var s = str! //将str解包为s，但是如果str没有赋值的话，那么这句会在运行时报错 print(s) 解决强制解包的时候，可选类型可能为nil的问题。if语句里面多了一个 Optional Binding 的概念。就是将可选类型解包后判断是否为nil，然后执行不同的分支代码 //因为没给str赋值，所以输出 str为空 var str:String? if let s = str &#123; print("str有值") &#125; else &#123; print("str为空") &#125; 在编程中，我们可以确保可选类型一定不为nil的，那么每次要将可选类型解包都要加个 !，很麻烦。所以有了隐式可选类型，它是用 ! 代替了 ? 号。然后在需要将可选类型转换为对应类型的时候就不用加 ! 了 var str:String! = "string" var s = str 基本运算 一些和C完全一样的基本运算 加减乘除，负号，自增（++）自减（–），+=等， 判断大小之类（==，!=，&gt;=…），三元运算符，逻辑运算（!，&amp;&amp;，||） 不一样的运算符 取模% 在C中，只能对整形进行运算Swift中可以对浮点数进行运算。结果就是多出来的那部分 比如 7.1%2.5 得到2.1，因为7.1可以最多减去2个2.5，然后剩下2.1 范围运算符 … 和 ..&lt;两个运算符可以用在for里面 //输出 1 2 3 包含最后一个元素3 for i in 1...3 &#123; print(i) &#125; //输出 1 2 不包含最后一个元素3 for i in 1..&lt;3 &#123; print(i) &#125; 单范围运算符 对于下标运算可以这样用 let names = ["Anna", "Alex", "Brian", "Jack"] for name in names[2...] &#123; print(name) &#125; // Brian // Jack for name in names[...2] &#123; print(name) &#125; // Anna // Alex // Brian for name in names[..&lt;2] &#123; print(name) &#125; // Anna // Alex 几元操作符 操作几个对象 ，被称之为几元操作符 一元运算符 操作一个目标，是一元操作符 -6 // 符号 紧跟 6，是一元运算符let b = -a 二元运算符 3 + 4 //两个目标之间，操作2个对象，习惯左右留空格a ?? b它的意思是：如果可选类型a不是nil，那么解包a并返回解包值，如果a为nil，那么返回b相当于 a != nil ? a! : b 赋值操作符 let yue = 3 // 用等号右边的值来更新左边变量的值yue = 5 数学操作符 + - * / 类型安全 变量（包含let）一旦定义，其类型不可改变，不能给一个变量一个类型不同的值 var 电费 = 3.5点费 = 5 print (电费) 打印：5.0电费 = “五” Error 断言 在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能并不需要继续执行。这时，你可以在你的代码中触发一个断言(assertion)来结束代码运行并通过调试来找到值缺失的原因。如果条件判断为true，代码运行会继续进行；如果条件判断为false，代码运行停止，你的应用被终止 let age = -10 //你可以在断言加一个信息 assert(age&gt;0 , "age can not be less than zero") //程序运行到这里会crash掉 后面的程序不会再执行 print("hello") 取得随机数 arc4random 函数求一个 1~100 的随机数（包括1和100）let temp = Int(arc4random()%100)+1 arc4random_uniform 函数求一个 1~100 的随机数（包括1和100）let temp = Int(arc4random_uniform(100))+1]]></content>
      <categories>
        <category>Swift</category>
        <category>Grammar</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS]]></title>
    <url>%2F2016%2F11%2F23%2FOC%2FGrammar%2FiOS%2F</url>
    <content type="text"><![CDATA[iOS多线程的锁]]></content>
      <categories>
        <category>iOS</category>
        <category>Refer</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS-UIKit-Autoreleasepool]]></title>
    <url>%2F2015%2F11%2F22%2FOC%2FKit%2FAutoreleasepool%2F</url>
    <content type="text"><![CDATA[Autoreleasepool释放时机 每个个Runloop已经默认会创建一个Autoreleasepool 新增对Runloop的Observer, 及时获取Runloop的状态变化确认释放时机 添加一个监听者 创建监听者 - (void)addRunLoopObserver &#123; CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) &#123; switch (activity) &#123; case kCFRunLoopEntry: NSLog(@&quot;进入RunLoop&quot;); break; case kCFRunLoopBeforeTimers: NSLog(@&quot;即将处理Timer事件&quot;); break; case kCFRunLoopBeforeSources: NSLog(@&quot;即将处理Source事件&quot;); break; case kCFRunLoopBeforeWaiting: NSLog(@&quot;即将休眠&quot;); break; case kCFRunLoopAfterWaiting: NSLog(@&quot;被唤醒&quot;); break; case kCFRunLoopExit: NSLog(@&quot;退出RunLoop&quot;); break; default: break; &#125; &#125;); 添加监听者 CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);&#125; 测试 不手动添加autoreleasepool 方法运行连续运行两次, 不手动添加autoreleasepool - (void)test1 &#123; NSLog(@&quot;test1 begin!&quot;); for (int i = 0; i &lt; 10e5 * 2; i++) &#123; //@autoreleasepool &#123; NSString *str = [NSString stringWithFormat:@&quot;hi + %d&quot;, i]; //&#125; &#125; NSLog(@&quot;test1 finished!&quot;);&#125;- (void)test2 &#123; NSLog(@&quot;test2 begin!&quot;); for (int i = 0; i &lt; 10e5 * 2; i++) &#123; //@autoreleasepool &#123; NSString *str = [NSString stringWithFormat:@&quot;hi + %d&quot;, i]; //&#125; &#125; NSLog(@&quot;test2 finished!&quot;);&#125; Runloop没有完成一次循环之前所有内存都未释放, 即使局部变量出了作用域也必须等待Runloop循环完成 手动添加autoreleasepool观察释放时机 for{@autoreleasepool{}} 效果好于 @autoreleasepool{for…}@autoreleasepool{} @autoreleasepool&#123;&#125; 等价于 void *context = objc_autoreleasePoolPush();// &#123;&#125;中的代码objc_autoreleasePoolPop(context); 每次出了{}时objc_autoreleasePoolPop()就被调用, 所以直接释放掉了. 当然, 系统自动创建的autoreleasepool也是一样, 只是调用的时机不同: 线程与Runloop是一一对应, Runloop与系统创建的autoreleasepool也是一一对应, 所以不论是Runloop完成了一次循环还是线程被关闭时, autoreleasepool都会释放, 当然手动添加的也会被管理 主要就是一个类:AutoreleasePoolPage 两个函数: objc_autoreleasePoolPush()、objc_autoreleasePoolPop() 运作方式: autoreleasepool由若干个autoreleasePoolPage类以双向链表的形式组合而成 当程序运行到@autoreleasepool{时, objc_autoreleasePoolPush()将被调用, runtime会向当前的AutoreleasePoolPage中添加一个nil对象作为哨兵,在{}中创建的对象会被依次记录到AutoreleasePoolPage的栈顶指针,当运行完@autoreleasepool{}时, objc_autoreleasePoolPop(哨兵)将被调用, runtime就会向AutoreleasePoolPage中记录的对象发送release消息直到哨兵的位置, 即完成了一次完整的运作. 主线程中的自动释放池是自动创建的, 文档中说子线程中的自动释放池是需要手动创建的, 但实测, 其实我们常用的多线程管理方式(GCD, NSOprationQueue, NSThread)都已经帮我们处理好了, 其中NSThread在iOS7之后才自动创建线程中的AutoreleasePool 我们常用的for循环, 以及enumerate其实跟autoreleasepool也有关, for循环是不自动创建autoreleasepool的, 而enumerate中已经自动创建了autoreleasepool, 值得注意的是高并发enumerate常常会出一些意外的问题, 例如对象被提前释放, 所以建议高并发情况下使用for循环(性能高于enumerate), 再手动添加autoreleasepool.]]></content>
      <categories>
        <category>iOS</category>
        <category>UIKit</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>UIKit</tag>
        <tag>Autoreleasepool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Lib-UM-UMAnalytics友盟统计]]></title>
    <url>%2F2015%2F11%2F20%2FOC%2FLib%2FOC-Lib-UM-UMAnalytics%E5%8F%8B%E7%9B%9F%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[UMAnalytics友盟统计埋点官方 配置 文档—&gt; Go! 配置集成Appkey不同平台的应用禁止使用相同的Appkey，需要分开注册友盟后台的应用名与实际应用名和包名无关，建议命名为“应用名+平台（IOS/Android)” 使用 Cocoapods 安装 SDK //标准SDK，含IDFA pod &apos;UMengAnalytics&apos; 无IDFA版SDK（请根据需要选择其中一个） pod &apos;UMengAnalytics-NO-IDFA&apos; 基本功能集成配置 AppDelegate.m 主要包括填写Appkey，设置发送策略和填写渠道id三部分UMConfigInstance为SDK参数配置的实例类，只需要将其成员中标注为required的参数赋值，optional的为可选项。appKey: 统计分析-&gt;设置-&gt;应用信息ChannelId: 应用的渠道标识。默认为 @”App Store” 头文件：&quot;UMMobClick/MobClick.h&quot;- (BOOL])application:(UIApplication] *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123; UMConfigInstance.appKey = @&quot;xxxxxxxxxxxxxx...&quot;; UMConfigInstance.ChannelId = @&quot;App Store&quot;; //仅适用于游戏场景，应用统计不用设置 UMConfigInstance.eSType = E_UM_GAME; //配置以上参数后调用此方法初始化SDK！ [MobClick startWithConfigure:UMConfigInstance];&#125; 页面的统计 runtime写交换方法不太好基础类可增加 - (void)viewWillAppear:(BOOL)animated &#123; [super viewWillAppear:animated]; [MobClick beginLogPageView:@&quot;PageOne&quot;];//(&quot;PageOne&quot;为页面名称，可自定义) &#125;- (void)viewWillDisappear:(BOOL)animated &#123; [super viewWillDisappear:animated]; [MobClick endLogPageView:@&quot;PageOne&quot;]; &#125; 自定义事件的统计 计数事件+计算事件 计数事件统计发生次数 某个事件发生的次数 [MobClick event:(NSString *)eventId]; 统计点击行为各属性被触发的次数[MobClick event:(NSString *)eventId attributes:(NSDictionary *)attributes];NSDictionary *dict = @&#123;@&quot;type&quot; : @&quot;book&quot;, @&quot;quantity&quot; : @&quot;3&quot;&#125;;[MobClick event:@&quot;purchase&quot; attributes:dict]; 计算事件 使用计算事件需要在后台添加事件时选择“计算事件” 统计数值型变量的值的分布 统计一个数值类型的连续变量（该变量必须为整数），用户每次触发的数值的分布情况，如事件持续时间、每次付款金额等，可以调用如下方法: +[MobClick event:(NSString *)eventId attributes:(NSDictionary *)attributes counter:(int)number]; 示例：购买《Swift Fundamentals》这本书，花了110元 [MobClick event:@&quot;pay&quot; attributes:@&#123;@&quot;book&quot; : @&quot;Swift Fundamentals&quot;&#125; counter:110]; 如果您使用的是V3.1.2以下版本的SDK，请使用下面的方法： -(void)umengEvent:(NSString *)eventId attributes:(NSDictionary *)attributes number:(NSNumber *)number&#123; NSString *numberKey = @&quot;__ct__&quot;; NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:attributes]; [mutableDictionary setObject:[number stringValue] forKey:numberKey]; [MobClick event:eventId attributes:mutableDictionary]; &#125; 示例：购买《Swift Fundamentals》这本书，花了110元 [self umengEvent:@&quot;pay&quot; attributes:@&#123;@&quot;book&quot; : @&quot;Swift Fundamentals&quot;&#125; number:@(110)];]]></content>
      <categories>
        <category>OC</category>
        <category>Lib</category>
        <category>UM</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC-CocoaPods配置]]></title>
    <url>%2F2015%2F11%2F20%2FOC%2FFunc%2FOC-CocoaPods%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[CocoaPods配置 本地安装好Ruby环境,下载和安装CocoaPods $ sudo gem install cocoapods search 第三方 $ pod search AFNetworking Podfile $ vim Podfile Podfile文件 platform :ios, &apos;9.0&apos; pod &quot;AFNetworking&quot;, &quot;~&gt; 3.0&quot; 保存退出命令 $ :wq 下载第三方 $ pod update 会更新所有的类库$ pod install 错误lib required by Podfile CocoaPods的版本库是有缓存的, 但在使用pod指令更新版本库时会出现冲突, 导致更新并不能如期完成, 需要手动删除本地缓存, 再进行更新. 命令更新CocoaPods版本库–&gt;没有效果 $ pod update --verbose 如下 $ sudo rm -fr ~/.cocoapods/repos/master$ pod setup]]></content>
      <categories>
        <category>OC</category>
        <category>Func</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC-Network-AFN-4种请求]]></title>
    <url>%2F2015%2F01%2F10%2FOC%2FKit%2FNetwork%2FOC-Network-AFN-%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[PutDeleteGetPost获取用户权限以及登录请求的封装方法 Get + (void)requestGETWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic Api_key:(NSString *)api_key finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil]; // 设置请求头 [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;]; [manager.requestSerializer setValue:api_key forHTTPHeaderField:@&quot;api_key&quot;]; [manager GET:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]]; if ([errcode isEqualToString:@&quot;0&quot;]) &#123; finish(responseObject); &#125;else &#123; NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;]; &#125; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; enError(error); &#125;];&#125; POST请求 + (void)requestPOSTWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic Api_key:(NSString *)api_key finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil]; // 设置请求头 [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;]; [manager.requestSerializer setValue:api_key forHTTPHeaderField:@&quot;api_key&quot;]; [manager POST:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]]; if ([errcode isEqualToString:@&quot;0&quot;]) &#123; finish(responseObject); &#125;else if ([errcode isEqualToString:@&quot;100000&quot;]) &#123; NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;]; // 弹出提示信息 [[NetworkManager shareNetworkManager].mdelegate showMessage:errmsg]; &#125;else&#123; NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;]； &#125; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; enError(error); &#125;]; &#125; PUT + (void)requestPUTWithURLStr:(NSString *)urlStr paramDic:(NSDictionary *)paramDic Api_key:(NSString *)api_key finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;, nil]; // 设置请求头 [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;]; [manager.requestSerializer setValue:api_key forHTTPHeaderField:@&quot;api_key&quot;]; [manager PUT:urlStr parameters:paramDic success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]]; if ([errcode isEqualToString:@&quot;0&quot;]) &#123; finish(responseObject); &#125;else&#123; NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;]; &#125; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; enError(error); &#125;];&#125; 上传图片 + (void)requestAddImgPOSTWithURLStr:(NSString *)url paramDic:(NSDictionary *)paramDic image:(UIImage *)image name:(NSString *)name success:(void (^)(id responseObject))success failure:(void (^)(NSError *error))failure&#123; // 1.创建网络管理者 AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;, nil]; //请求图片,请求网页时需要加入这句,因为AFN默认的请求的是json manager.responseSerializer = [AFHTTPResponseSerializer serializer]; manager.requestSerializer = [AFHTTPRequestSerializer serializer]; // 2.发送请求(字典只能放非文件参数) [manager POST:url parameters:paramDic constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; _Nonnull formData) &#123; NSData *imageData = UIImageJPEGRepresentation(image, 0.5);//进行图片压缩 // 使用日期生成图片名称 NSDateFormatter *formatter = [[NSDateFormatter alloc] init]; formatter.dateFormat = @&quot;yyyyMMddHHmmss&quot;; NSString *fileName = [NSString stringWithFormat:@&quot;%@.png&quot;,[formatter stringFromDate:[NSDate date]]]; // 上传图片，以文件流的格式 // 任意的二进制数据MIMEType application/octet-stream // 特别注意，这里的图片的名字不要写错，必须是接口的图片的参数名字如我这里是file if (imageData!=nil) &#123; // 图片数据不为空才传递 [formData appendPartWithFileData:imageData name:name fileName:fileName mimeType:@&quot;image/png&quot;]; &#125; &#125; progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:responseObject options:(NSJSONReadingMutableContainers) error:nil]; if ([[dic objectForKey:@&quot;status&quot;]isEqualToString:@&quot;success&quot;]) &#123; success(responseObject); &#125;else&#123; NSString *message = [responseObject objectForKey:@&quot;message&quot;]; NSLog(@&quot;messageImg == %@&quot;,message); [[NetworkManager shareNetworkManager].mdelegate showMessage:message]; &#125; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; failure(error); &#125;]; &#125; GET超级api + (void)requestGETSuperAPIWithURLStr:(NSString *)urlStr WithAuthorization:(NSString *)authorization paramDic:(NSDictionary *)paramDic finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil]; // 设置请求头 [manager.requestSerializer setValue:authorization forHTTPHeaderField:@&quot;Authorization&quot;]; [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;]; [manager GET:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; // 成功回调 finish(responseObject); // 如果superapikey过期，重新保存加密获取新的 // 如果用户apikey过期，则重新登录 &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; // 失败回调 enError(error); &#125;];&#125; POST请求 立即登录 + (void)requestLoginPOSTWithURLStr:(NSString *)urlStr WithAuthorization:(NSString *)authorization paramDic:(NSDictionary *)paramDic finish:(void(^)(id responseObject))finish enError:(void(^)(NSError *error))enError&#123; AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;text/html&quot;,@&quot;application/json&quot;,@&quot;text/javascript&quot;,@&quot;text/json&quot;,@&quot;text/plain&quot;,@&quot;charset=UTF-8&quot;, nil]; // 设置请求头 [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;]; [manager.requestSerializer setValue:authorization forHTTPHeaderField:@&quot;Authorization&quot;]; [manager POST:urlStr parameters:paramDic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; NSString *errcode = [NSString stringWithFormat:@&quot;%@&quot;,[responseObject objectForKey:@&quot;errcode&quot;]]; if ([errcode isEqualToString:@&quot;0&quot;]) &#123; finish(responseObject); &#125;else &#123; NSString *errmsg = [responseObject objectForKey:@&quot;errmsg&quot;]; &#125; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; // 失败回调 enError(error); &#125;];&#125;]]></content>
      <categories>
        <category>OC</category>
        <category>Network</category>
        <category>AFN</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>AFN</tag>
        <tag>Network</tag>
      </tags>
  </entry>
</search>
